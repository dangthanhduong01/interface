{"ast":null,"code":"import _ from 'lodash';\nimport { log, poolToString } from '../../../util';\n/**\n * Interface for a Quoter.\n * Defines the base dependencies, helper methods and interface for how to fetch quotes.\n *\n * @abstract\n * @template Route\n */\nexport class BaseQuoter {\n  constructor(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider) {\n    this.tokenProvider = tokenProvider;\n    this.chainId = chainId;\n    this.blockedTokenListProvider = blockedTokenListProvider;\n    this.tokenValidatorProvider = tokenValidatorProvider;\n  }\n  /**\n   * Public method which would first get the routes and then get the quotes.\n   *\n   * @param tokenIn The token that the user wants to provide\n   * @param tokenOut The token that the usaw wants to receive\n   * @param amounts the list of amounts to query for EACH route.\n   * @param percents the percentage of each amount.\n   * @param quoteToken\n   * @param tradeType\n   * @param routingConfig\n   * @param gasModel the gasModel to be used for estimating gas cost\n   * @param gasPriceWei instead of passing gasModel, gasPriceWei is used to generate a gasModel\n   */\n  getRoutesThenQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, tradeType, routingConfig, gasModel, gasPriceWei) {\n    return this.getRoutes(tokenIn, tokenOut, tradeType, routingConfig).then(routesResult => this.getQuotes(routesResult.routes, amounts, percents, quoteToken, tradeType, routingConfig, routesResult.candidatePools, gasModel, gasPriceWei));\n  }\n  async applyTokenValidatorToPools(pools, isInvalidFn) {\n    if (!this.tokenValidatorProvider) {\n      return pools;\n    }\n    log.info(`Running token validator on ${pools.length} pools`);\n    const tokens = _.flatMap(pools, pool => [pool.token0, pool.token1]);\n    const tokenValidationResults = await this.tokenValidatorProvider.validateTokens(tokens);\n    const poolsFiltered = _.filter(pools, pool => {\n      const token0Validation = tokenValidationResults.getValidationByToken(pool.token0);\n      const token1Validation = tokenValidationResults.getValidationByToken(pool.token1);\n      const token0Invalid = isInvalidFn(pool.token0, token0Validation);\n      const token1Invalid = isInvalidFn(pool.token1, token1Validation);\n      if (token0Invalid || token1Invalid) {\n        log.info(`Dropping pool ${poolToString(pool)} because token is invalid. ${pool.token0.symbol}: ${token0Validation}, ${pool.token1.symbol}: ${token1Validation}`);\n      }\n      return !token0Invalid && !token1Invalid;\n    });\n    return poolsFiltered;\n  }\n}","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/quoters/base-quoter.ts"],"names":[],"mappings":"AAIA,OAAO,CAAC,MAAM,QAAQ;AAGtB,SAAkC,GAAG,EAAE,YAAY,QAAQ,eAAe;AAS1E;;;;;;AAMG;AACH,OAAM,MAAgB,UAAU,CAAA;EAM9B,WAAA,CACE,aAA6B,EAC7B,OAAgB,EAChB,wBAA6C,EAC7C,sBAAgD,EAAA;IAEhD,IAAI,CAAC,aAAa,GAAG,aAAa;IAClC,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,wBAAwB,GAAG,wBAAwB;IACxD,IAAI,CAAC,sBAAsB,GAAG,sBAAsB;EACtD;EA8CA;;;;;;;;;;;;AAYG;EACI,mBAAmB,CACxB,OAAc,EACd,QAAe,EACf,OAAyB,EACzB,QAAkB,EAClB,UAAiB,EACjB,SAAoB,EACpB,aAAgC,EAChC,QAAyC,EACzC,WAAuB,EAAA;IAEvB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC,CAC/D,IAAI,CAAE,YAAY,IACjB,IAAI,CAAC,SAAS,CACZ,YAAY,CAAC,MAAM,EACnB,OAAO,EACP,QAAQ,EACR,UAAU,EACV,SAAS,EACT,aAAa,EACb,YAAY,CAAC,cAAc,EAC3B,QAAQ,EACR,WAAW,CACZ,CACF;EACL;EAEU,MAAM,0BAA0B,CACxC,KAAU,EACV,WAGY,EAAA;IAEZ,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;MAChC,OAAO,KAAK;IACb;IAED,GAAG,CAAC,IAAI,CAAC,8BAA8B,KAAK,CAAC,MAAM,QAAQ,CAAC;IAE5D,MAAM,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAG,IAAI,IAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAErE,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,MAAM,CAAC;IAEvF,MAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,EAAG,IAAO,IAAI;MAChD,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,oBAAoB,CAClE,IAAI,CAAC,MAAM,CACZ;MACD,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,oBAAoB,CAClE,IAAI,CAAC,MAAM,CACZ;MAED,MAAM,aAAa,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC;MAChE,MAAM,aAAa,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC;MAEhE,IAAI,aAAa,IAAI,aAAa,EAAE;QAClC,GAAG,CAAC,IAAI,CACN,iBAAiB,YAAY,CAAC,IAAI,CAAC,8BAA8B,IAAI,CAAC,MAAM,CAAC,MAC7E,KAAK,gBAAgB,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,gBAAgB,EAAE,CACpE;MACF;MAED,OAAO,CAAC,aAAa,IAAI,CAAC,aAAa;IACzC,CAAC,CAAC;IAEF,OAAO,aAAa;EACtB;AACD","sourceRoot":"","sourcesContent":["import _ from 'lodash';\nimport { log, poolToString } from '../../../util';\n/**\n * Interface for a Quoter.\n * Defines the base dependencies, helper methods and interface for how to fetch quotes.\n *\n * @abstract\n * @template Route\n */\nexport class BaseQuoter {\n    constructor(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider) {\n        this.tokenProvider = tokenProvider;\n        this.chainId = chainId;\n        this.blockedTokenListProvider = blockedTokenListProvider;\n        this.tokenValidatorProvider = tokenValidatorProvider;\n    }\n    /**\n     * Public method which would first get the routes and then get the quotes.\n     *\n     * @param tokenIn The token that the user wants to provide\n     * @param tokenOut The token that the usaw wants to receive\n     * @param amounts the list of amounts to query for EACH route.\n     * @param percents the percentage of each amount.\n     * @param quoteToken\n     * @param tradeType\n     * @param routingConfig\n     * @param gasModel the gasModel to be used for estimating gas cost\n     * @param gasPriceWei instead of passing gasModel, gasPriceWei is used to generate a gasModel\n     */\n    getRoutesThenQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, tradeType, routingConfig, gasModel, gasPriceWei) {\n        return this.getRoutes(tokenIn, tokenOut, tradeType, routingConfig)\n            .then((routesResult) => this.getQuotes(routesResult.routes, amounts, percents, quoteToken, tradeType, routingConfig, routesResult.candidatePools, gasModel, gasPriceWei));\n    }\n    async applyTokenValidatorToPools(pools, isInvalidFn) {\n        if (!this.tokenValidatorProvider) {\n            return pools;\n        }\n        log.info(`Running token validator on ${pools.length} pools`);\n        const tokens = _.flatMap(pools, (pool) => [pool.token0, pool.token1]);\n        const tokenValidationResults = await this.tokenValidatorProvider.validateTokens(tokens);\n        const poolsFiltered = _.filter(pools, (pool) => {\n            const token0Validation = tokenValidationResults.getValidationByToken(pool.token0);\n            const token1Validation = tokenValidationResults.getValidationByToken(pool.token1);\n            const token0Invalid = isInvalidFn(pool.token0, token0Validation);\n            const token1Invalid = isInvalidFn(pool.token1, token1Validation);\n            if (token0Invalid || token1Invalid) {\n                log.info(`Dropping pool ${poolToString(pool)} because token is invalid. ${pool.token0.symbol}: ${token0Validation}, ${pool.token1.symbol}: ${token1Validation}`);\n            }\n            return !token0Invalid && !token1Invalid;\n        });\n        return poolsFiltered;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1xdW90ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcm91dGVycy9hbHBoYS1yb3V0ZXIvcXVvdGVycy9iYXNlLXF1b3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFHdkIsT0FBTyxFQUEyQixHQUFHLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUzNFOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBZ0IsVUFBVTtJQU05QixZQUNFLGFBQTZCLEVBQzdCLE9BQWdCLEVBQ2hCLHdCQUE2QyxFQUM3QyxzQkFBZ0Q7UUFFaEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLHdCQUF3QixHQUFHLHdCQUF3QixDQUFDO1FBQ3pELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQztJQUN2RCxDQUFDO0lBOENEOzs7Ozs7Ozs7Ozs7T0FZRztJQUNJLG1CQUFtQixDQUN4QixPQUFjLEVBQ2QsUUFBZSxFQUNmLE9BQXlCLEVBQ3pCLFFBQWtCLEVBQ2xCLFVBQWlCLEVBQ2pCLFNBQW9CLEVBQ3BCLGFBQWdDLEVBQ2hDLFFBQXlDLEVBQ3pDLFdBQXVCO1FBRXZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUM7YUFDL0QsSUFBSSxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FDckIsSUFBSSxDQUFDLFNBQVMsQ0FDWixZQUFZLENBQUMsTUFBTSxFQUNuQixPQUFPLEVBQ1AsUUFBUSxFQUNSLFVBQVUsRUFDVixTQUFTLEVBQ1QsYUFBYSxFQUNiLFlBQVksQ0FBQyxjQUFjLEVBQzNCLFFBQVEsRUFDUixXQUFXLENBQ1osQ0FDRixDQUFDO0lBQ04sQ0FBQztJQUVTLEtBQUssQ0FBQywwQkFBMEIsQ0FDeEMsS0FBVSxFQUNWLFdBR1k7UUFFWixJQUFJLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQ2hDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLDhCQUE4QixLQUFLLENBQUMsTUFBTSxRQUFRLENBQUMsQ0FBQztRQUU3RCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXRFLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhGLE1BQU0sYUFBYSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBTyxFQUFFLEVBQUU7WUFDaEQsTUFBTSxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FDbEUsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO1lBQ0YsTUFBTSxnQkFBZ0IsR0FBRyxzQkFBc0IsQ0FBQyxvQkFBb0IsQ0FDbEUsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO1lBRUYsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUNqRSxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBRWpFLElBQUksYUFBYSxJQUFJLGFBQWEsRUFBRTtnQkFDbEMsR0FBRyxDQUFDLElBQUksQ0FDTixpQkFBaUIsWUFBWSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUM3RSxLQUFLLGdCQUFnQixLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLGdCQUFnQixFQUFFLENBQ3BFLENBQUM7YUFDSDtZQUVELE9BQU8sQ0FBQyxhQUFhLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}