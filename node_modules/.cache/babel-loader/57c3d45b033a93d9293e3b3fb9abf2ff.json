{"ast":null,"code":"import { makeOfflineTransport } from '@sentry/core';\nimport { serializeEnvelope, parseEnvelope } from '@sentry/utils';\n\n// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being\n// modified and simplified: https://github.com/jakearchibald/idb-keyval\n//\n// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca\n// Original licence:\n\n// Copyright 2016, Jake Archibald\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction promisifyRequest(request) {\n  return new Promise((resolve, reject) => {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    // @ts-ignore - file size hacks\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\n\n/** Create or open an IndexedDb store */\nfunction createStore(dbName, storeName) {\n  const request = indexedDB.open(dbName);\n  request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n  const dbp = promisifyRequest(request);\n  return callback => dbp.then(db => callback(db.transaction(storeName, 'readwrite').objectStore(storeName)));\n}\nfunction keys(store) {\n  return promisifyRequest(store.getAllKeys());\n}\n\n/** Insert into the store */\nfunction insert(store, value, maxQueueSize) {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length >= maxQueueSize) {\n        return;\n      }\n\n      // We insert with an incremented key so that the entries are popped in order\n      store.put(value, Math.max(...keys, 0) + 1);\n      return promisifyRequest(store.transaction);\n    });\n  });\n}\n\n/** Pop the oldest value from the store */\nfunction pop(store) {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length === 0) {\n        return undefined;\n      }\n      return promisifyRequest(store.get(keys[0])).then(value => {\n        store.delete(keys[0]);\n        return promisifyRequest(store.transaction).then(() => value);\n      });\n    });\n  });\n}\nfunction createIndexedDbStore(options) {\n  let store;\n\n  // Lazily create the store only when it's needed\n  function getStore() {\n    if (store == undefined) {\n      store = createStore(options.dbName || 'sentry-offline', options.storeName || 'queue');\n    }\n    return store;\n  }\n  return {\n    insert: async env => {\n      try {\n        const serialized = await serializeEnvelope(env, options.textEncoder);\n        await insert(getStore(), serialized, options.maxQueueSize || 30);\n      } catch (_) {\n        //\n      }\n    },\n    pop: async () => {\n      try {\n        const deserialized = await pop(getStore());\n        if (deserialized) {\n          return parseEnvelope(deserialized, options.textEncoder || new TextEncoder(), options.textDecoder || new TextDecoder());\n        }\n      } catch (_) {\n        //\n      }\n      return undefined;\n    }\n  };\n}\nfunction makeIndexedDbOfflineTransport(createTransport) {\n  return options => createTransport({\n    ...options,\n    createStore: createIndexedDbStore\n  });\n}\n\n/**\n * Creates a transport that uses IndexedDb to store events when offline.\n */\nfunction makeBrowserOfflineTransport(createTransport) {\n  return makeIndexedDbOfflineTransport(makeOfflineTransport(createTransport));\n}\nexport { createStore, insert, makeBrowserOfflineTransport, pop };","map":{"version":3,"sources":["../../../../src/transports/offline.ts"],"names":[],"mappings":"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","sourcesContent":["import type { OfflineStore, OfflineTransportOptions } from '@sentry/core';\nimport { makeOfflineTransport } from '@sentry/core';\nimport type { Envelope, InternalBaseTransportOptions, Transport } from '@sentry/types';\nimport type { TextDecoderInternal } from '@sentry/utils';\nimport { parseEnvelope, serializeEnvelope } from '@sentry/utils';\n\n// 'Store', 'promisifyRequest' and 'createStore' were originally copied from the 'idb-keyval' package before being\n// modified and simplified: https://github.com/jakearchibald/idb-keyval\n//\n// At commit: 0420a704fd6cbb4225429c536b1f61112d012fca\n// Original licence:\n\n// Copyright 2016, Jake Archibald\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\ntype Store = <T>(callback: (store: IDBObjectStore) => T | PromiseLike<T>) => Promise<T>;\n\nfunction promisifyRequest<T = undefined>(request: IDBRequest<T> | IDBTransaction): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    // @ts-ignore - file size hacks\n    request.oncomplete = request.onsuccess = () => resolve(request.result);\n    // @ts-ignore - file size hacks\n    request.onabort = request.onerror = () => reject(request.error);\n  });\n}\n\n/** Create or open an IndexedDb store */\nexport function createStore(dbName: string, storeName: string): Store {\n  const request = indexedDB.open(dbName);\n  request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n  const dbp = promisifyRequest(request);\n\n  return callback => dbp.then(db => callback(db.transaction(storeName, 'readwrite').objectStore(storeName)));\n}\n\nfunction keys(store: IDBObjectStore): Promise<number[]> {\n  return promisifyRequest(store.getAllKeys() as IDBRequest<number[]>);\n}\n\n/** Insert into the store */\nexport function insert(store: Store, value: Uint8Array | string, maxQueueSize: number): Promise<void> {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length >= maxQueueSize) {\n        return;\n      }\n\n      // We insert with an incremented key so that the entries are popped in order\n      store.put(value, Math.max(...keys, 0) + 1);\n      return promisifyRequest(store.transaction);\n    });\n  });\n}\n\n/** Pop the oldest value from the store */\nexport function pop(store: Store): Promise<Uint8Array | string | undefined> {\n  return store(store => {\n    return keys(store).then(keys => {\n      if (keys.length === 0) {\n        return undefined;\n      }\n\n      return promisifyRequest(store.get(keys[0])).then(value => {\n        store.delete(keys[0]);\n        return promisifyRequest(store.transaction).then(() => value);\n      });\n    });\n  });\n}\n\ninterface BrowserOfflineTransportOptions extends OfflineTransportOptions {\n  /**\n   * Name of indexedDb database to store envelopes in\n   * Default: 'sentry-offline'\n   */\n  dbName?: string;\n  /**\n   * Name of indexedDb object store to store envelopes in\n   * Default: 'queue'\n   */\n  storeName?: string;\n  /**\n   * Maximum number of envelopes to store\n   * Default: 30\n   */\n  maxQueueSize?: number;\n  /**\n   * Only required for testing on node.js\n   * @ignore\n   */\n  textDecoder?: TextDecoderInternal;\n}\n\nfunction createIndexedDbStore(options: BrowserOfflineTransportOptions): OfflineStore {\n  let store: Store | undefined;\n\n  // Lazily create the store only when it's needed\n  function getStore(): Store {\n    if (store == undefined) {\n      store = createStore(options.dbName || 'sentry-offline', options.storeName || 'queue');\n    }\n\n    return store;\n  }\n\n  return {\n    insert: async (env: Envelope) => {\n      try {\n        const serialized = await serializeEnvelope(env, options.textEncoder);\n        await insert(getStore(), serialized, options.maxQueueSize || 30);\n      } catch (_) {\n        //\n      }\n    },\n    pop: async () => {\n      try {\n        const deserialized = await pop(getStore());\n        if (deserialized) {\n          return parseEnvelope(\n            deserialized,\n            options.textEncoder || new TextEncoder(),\n            options.textDecoder || new TextDecoder(),\n          );\n        }\n      } catch (_) {\n        //\n      }\n\n      return undefined;\n    },\n  };\n}\n\nfunction makeIndexedDbOfflineTransport<T>(\n  createTransport: (options: T) => Transport,\n): (options: T & BrowserOfflineTransportOptions) => Transport {\n  return options => createTransport({ ...options, createStore: createIndexedDbStore });\n}\n\n/**\n * Creates a transport that uses IndexedDb to store events when offline.\n */\nexport function makeBrowserOfflineTransport<T extends InternalBaseTransportOptions>(\n  createTransport: (options: T) => Transport,\n): (options: T & BrowserOfflineTransportOptions) => Transport {\n  return makeIndexedDbOfflineTransport<T>(makeOfflineTransport(createTransport));\n}\n"]},"metadata":{},"sourceType":"module"}