{"ast":null,"code":"import { NATIVE_CHAIN_ID } from 'constants/tokens';\nimport { TokenStandard } from 'graphql/data/__generated__/types-and-hooks';\nimport { fromGraphQLChain } from 'graphql/data/util';\nexport function buildCurrencyKey(chainId, address) {\n  // We lowercase for compatibility/indexability between gql tokens and sdk currencies\n  return `${chainId}-${address.toLowerCase()}`;\n}\nexport function currencyKey(currency) {\n  return buildCurrencyKey(currency.chainId, currency.isToken ? currency.address : NATIVE_CHAIN_ID);\n}\nexport function currencyKeyFromGraphQL(contract) {\n  const chainId = fromGraphQLChain(contract.chain);\n  const address = contract.standard === TokenStandard.Native ? NATIVE_CHAIN_ID : contract.address;\n  if (!address) throw new Error('Non-native token missing address');\n  return buildCurrencyKey(chainId, address);\n}","map":{"version":3,"names":["NATIVE_CHAIN_ID","TokenStandard","fromGraphQLChain","buildCurrencyKey","chainId","address","toLowerCase","currencyKey","currency","isToken","currencyKeyFromGraphQL","contract","chain","standard","Native","Error"],"sources":["/home/diep/freelance/interface/src/utils/currencyKey.ts"],"sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { SupportedChainId } from 'constants/chains'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { TokenStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { Chain } from 'graphql/data/Token'\nimport { fromGraphQLChain } from 'graphql/data/util'\n\nexport type CurrencyKey = string\n\nexport function buildCurrencyKey(chainId: SupportedChainId, address: string): CurrencyKey {\n  // We lowercase for compatibility/indexability between gql tokens and sdk currencies\n  return `${chainId}-${address.toLowerCase()}`\n}\n\nexport function currencyKey(currency: Currency): CurrencyKey {\n  return buildCurrencyKey(currency.chainId, currency.isToken ? currency.address : NATIVE_CHAIN_ID)\n}\n\nexport function currencyKeyFromGraphQL(contract: {\n  address?: string\n  chain: Chain\n  standard?: TokenStandard\n}): CurrencyKey {\n  const chainId = fromGraphQLChain(contract.chain)\n  const address = contract.standard === TokenStandard.Native ? NATIVE_CHAIN_ID : contract.address\n  if (!address) throw new Error('Non-native token missing address')\n  return buildCurrencyKey(chainId, address)\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,kBAAkB;AAClD,SAASC,aAAa,QAAQ,4CAA4C;AAE1E,SAASC,gBAAgB,QAAQ,mBAAmB;AAIpD,OAAO,SAASC,gBAAgB,CAACC,OAAyB,EAAEC,OAAe,EAAe;EACxF;EACA,OAAQ,GAAED,OAAQ,IAAGC,OAAO,CAACC,WAAW,EAAG,EAAC;AAC9C;AAEA,OAAO,SAASC,WAAW,CAACC,QAAkB,EAAe;EAC3D,OAAOL,gBAAgB,CAACK,QAAQ,CAACJ,OAAO,EAAEI,QAAQ,CAACC,OAAO,GAAGD,QAAQ,CAACH,OAAO,GAAGL,eAAe,CAAC;AAClG;AAEA,OAAO,SAASU,sBAAsB,CAACC,QAItC,EAAe;EACd,MAAMP,OAAO,GAAGF,gBAAgB,CAACS,QAAQ,CAACC,KAAK,CAAC;EAChD,MAAMP,OAAO,GAAGM,QAAQ,CAACE,QAAQ,KAAKZ,aAAa,CAACa,MAAM,GAAGd,eAAe,GAAGW,QAAQ,CAACN,OAAO;EAC/F,IAAI,CAACA,OAAO,EAAE,MAAM,IAAIU,KAAK,CAAC,kCAAkC,CAAC;EACjE,OAAOZ,gBAAgB,CAACC,OAAO,EAAEC,OAAO,CAAC;AAC3C"},"metadata":{},"sourceType":"module"}