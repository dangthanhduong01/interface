{"ast":null,"code":"import { createTransport } from '@sentry/core';\nimport { rejectedSyncPromise } from '@sentry/utils';\nimport { getNativeFetchImplementation, clearCachedFetchImplementation } from './utils.js';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nfunction makeFetchTransport(options) {\n  let nativeFetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getNativeFetchImplementation();\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n  function makeRequest(request) {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n    const requestOptions = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60000 && pendingCount < 15,\n      ...options.fetchOptions\n    };\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          }\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n  return createTransport(options, makeRequest);\n}\nexport { makeFetchTransport };","map":{"version":3,"sources":["../../../../src/transports/fetch.ts"],"names":[],"mappings":";;;;AAQA;AACA;AACA;AACA,SAAA,kBAAA,CACA,OAAA,EAEA;EAAA,IADA,WAAA,uEAAA,4BAAA,EAAA;EAEA,IAAA,eAAA,GAAA,CAAA;EACA,IAAA,YAAA,GAAA,CAAA;EAEA,SAAA,WAAA,CAAA,OAAA,EAAA;IACA,MAAA,WAAA,GAAA,OAAA,CAAA,IAAA,CAAA,MAAA;IACA,eAAA,IAAA,WAAA;IACA,YAAA,EAAA;IAEA,MAAA,cAAA,GAAA;MACA,IAAA,EAAA,OAAA,CAAA,IAAA;MACA,MAAA,EAAA,MAAA;MACA,cAAA,EAAA,QAAA;MACA,OAAA,EAAA,OAAA,CAAA,OAAA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,SAAA,EAAA,eAAA,IAAA,KAAA,IAAA,YAAA,GAAA,EAAA;MACA,GAAA,OAAA,CAAA;IACA,CAAA;IAEA,IAAA;MACA,OAAA,WAAA,CAAA,OAAA,CAAA,GAAA,EAAA,cAAA,CAAA,CAAA,IAAA,CAAA,QAAA,IAAA;QACA,eAAA,IAAA,WAAA;QACA,YAAA,EAAA;QACA,OAAA;UACA,UAAA,EAAA,QAAA,CAAA,MAAA;UACA,OAAA,EAAA;YACA,sBAAA,EAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,CAAA;YACA,aAAA,EAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,aAAA;UACA;QACA,CAAA;MACA,CAAA,CAAA;IACA,CAAA,CAAA,OAAA,CAAA,EAAA;MACA,8BAAA,EAAA;MACA,eAAA,IAAA,WAAA;MACA,YAAA,EAAA;MACA,OAAA,mBAAA,CAAA,CAAA,CAAA;IACA;EACA;EAEA,OAAA,eAAA,CAAA,OAAA,EAAA,WAAA,CAAA;AACA","sourcesContent":["import { createTransport } from '@sentry/core';\nimport type { Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/types';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\nimport type { BrowserTransportOptions } from './types';\nimport type { FetchImpl } from './utils';\nimport { clearCachedFetchImplementation, getNativeFetchImplementation } from './utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeFetchTransport(\n  options: BrowserTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): Transport {\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60_000 && pendingCount < 15,\n      ...options.fetchOptions,\n    };\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    } catch (e) {\n      clearCachedFetchImplementation();\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n"]},"metadata":{},"sourceType":"module"}