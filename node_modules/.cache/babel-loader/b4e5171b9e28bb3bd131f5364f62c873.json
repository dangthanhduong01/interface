{"ast":null,"code":"const bindReporter = (callback, metric, reportAllChanges) => {\n  let prevValue;\n  let delta;\n  return forceReport => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\nexport { bindReporter };","map":{"version":3,"sources":["../../../../../src/browser/web-vitals/lib/bindReporter.ts"],"names":[],"mappings":"AAkBA,MAAA,YAAA,GAAA,CACA,QAAA,EACA,MAAA,EACA,gBAAA,KACA;EACA,IAAA,SAAA;EACA,IAAA,KAAA;EACA,OAAA,WAAA,IAAA;IACA,IAAA,MAAA,CAAA,KAAA,IAAA,CAAA,EAAA;MACA,IAAA,WAAA,IAAA,gBAAA,EAAA;QACA,KAAA,GAAA,MAAA,CAAA,KAAA,IAAA,SAAA,IAAA,CAAA,CAAA;;QAEA;QACA;QACA;QACA;QACA,IAAA,KAAA,IAAA,SAAA,KAAA,SAAA,EAAA;UACA,SAAA,GAAA,MAAA,CAAA,KAAA;UACA,MAAA,CAAA,KAAA,GAAA,KAAA;UACA,QAAA,CAAA,MAAA,CAAA;QACA;MACA;IACA;EACA,CAAA;AACA,CAAA","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Metric, ReportCallback } from '../types';\n\nexport const bindReporter = (\n  callback: ReportCallback,\n  metric: Metric,\n  reportAllChanges?: boolean,\n): ((forceReport?: boolean) => void) => {\n  let prevValue: number;\n  let delta: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}