{"ast":null,"code":"import { Interface } from '@ethersproject/abi';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { hexStripZeros } from '@ethersproject/bytes';\nimport { sendAnalyticsEvent } from '@uniswap/analytics';\nimport { NFTEventName } from '@uniswap/analytics-events';\nimport { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport ERC721 from '../../abis/erc721.json';\nimport ERC1155 from '../../abis/erc1155.json';\nimport CryptoPunksMarket from '../abis/CryptoPunksMarket.json';\nimport { TxStateType } from '../types';\nimport { compareAssetsWithTransactionRoute } from '../utils/txRoute/combineItemsWithTxRoute';\nexport const useSendTransaction = create()(devtools(set => ({\n  state: TxStateType.New,\n  txHash: '',\n  purchasedWithErc20: false,\n  clearTxHash: () => set({\n    txHash: ''\n  }),\n  setState: newState => set(() => ({\n    state: newState\n  })),\n  sendTransaction: async (signer, selectedAssets, transactionData, purchasedWithErc20) => {\n    const address = await signer.getAddress();\n    try {\n      const txNoGasLimit = {\n        to: transactionData.to,\n        value: transactionData.valueToSend ? BigNumber.from(transactionData.valueToSend) : undefined,\n        data: transactionData.data\n      };\n      const gasLimit = (await signer.estimateGas(txNoGasLimit)).mul(105).div(100);\n      // tx['gasLimit'] = gasLimit\n      const tx = {\n        ...txNoGasLimit,\n        gasLimit\n      }; // TODO test this works when firing off tx\n\n      set({\n        state: TxStateType.Signing\n      });\n      const res = await signer.sendTransaction(tx);\n      set({\n        state: TxStateType.Confirming\n      });\n      set({\n        txHash: res.hash\n      });\n      set({\n        purchasedWithErc20\n      });\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_SIGNED, {\n        transaction_hash: res.hash\n      });\n      const txReceipt = await res.wait();\n\n      //tx was mined successfully\n      if (txReceipt.status === 1) {\n        const nftsPurchased = findNFTsPurchased(txReceipt, address, selectedAssets, transactionData.route);\n        const nftsNotPurchased = findNFTsNotPurchased(selectedAssets, nftsPurchased);\n        set({\n          state: TxStateType.Success\n        });\n        return {\n          nftsPurchased,\n          nftsNotPurchased,\n          txReceipt\n        };\n      } else {\n        set({\n          state: TxStateType.Failed\n        });\n        return {\n          nftsPurchased: [],\n          nftsNotPurchased: selectedAssets,\n          txReceipt\n        };\n      }\n    } catch (e) {\n      console.log('Error creating multiAssetSwap Transaction', e);\n      if (e.code === 4001) {\n        set({\n          state: TxStateType.Denied\n        });\n      } else {\n        set({\n          state: TxStateType.Invalid\n        });\n      }\n      return;\n    }\n  }\n}), {\n  name: 'useSendTransactionState'\n}));\nconst findNFTsPurchased = (txReceipt, signerAddress, toBuy, txRoute) => {\n  if (!txReceipt.logs) {\n    return [];\n  }\n  const erc721Interface = new Interface(ERC721);\n  const erc1155Interface = new Interface(ERC1155);\n  const cryptopunksMarketInterface = new Interface(CryptoPunksMarket);\n\n  // Find successfully purchased NFTs (and assign to state nftsPurchased) by parsing events\n  const transferErc721BuyEvents = txReceipt.logs.filter(x => x.topics[0] === erc721Interface.getEventTopic('Transfer') && hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase());\n  const transferredErc721 = transferErc721BuyEvents.map(x => ({\n    address: x.address,\n    tokenId: parseInt(x.topics[3]).toString()\n  }));\n  const transferErc1155BuyEvents = txReceipt.logs.filter(x => x.topics[0] === erc1155Interface.getEventTopic('TransferSingle') && hexStripZeros(x.topics[3]).toLowerCase() === signerAddress.toLowerCase());\n  const transferredErc1155 = transferErc1155BuyEvents.map(x => ({\n    address: x.address,\n    tokenId: erc1155Interface.parseLog(x).args[3].toString()\n  }));\n\n  // Find transferred CryptoPunks\n  const transferCryptopunkEvents = txReceipt.logs.filter(x => x.topics[0] === cryptopunksMarketInterface.getEventTopic('PunkTransfer') && hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase());\n  const transferredCryptopunks = transferCryptopunkEvents.map(x => ({\n    address: x.address,\n    tokenId: cryptopunksMarketInterface.parseLog(x).args[2].toString()\n  }));\n  const allTransferred = [...transferredErc721, ...transferredErc1155, ...transferredCryptopunks];\n  const transferredItems = toBuy.filter(assetToBuy => {\n    return allTransferred.some(purchasedNft => assetToBuy.address.toLowerCase() === purchasedNft.address.toLowerCase() && parseInt(assetToBuy.tokenId).toString() === purchasedNft.tokenId);\n  });\n  return compareAssetsWithTransactionRoute(transferredItems, txRoute).updatedAssets;\n};\nconst findNFTsNotPurchased = (toBuy, nftsPurchased) => {\n  const nftsNotPurchased = [];\n  toBuy.forEach(selectedAsset => {\n    const purchasedNft = nftsPurchased.find(x => x.address.toLowerCase() === selectedAsset.address.toLowerCase() && x.tokenId === selectedAsset.tokenId);\n    if (!purchasedNft) {\n      nftsNotPurchased.push(selectedAsset);\n    }\n  });\n  return nftsNotPurchased;\n};","map":{"version":3,"names":["Interface","BigNumber","hexStripZeros","sendAnalyticsEvent","NFTEventName","create","devtools","ERC721","ERC1155","CryptoPunksMarket","TxStateType","compareAssetsWithTransactionRoute","useSendTransaction","set","state","New","txHash","purchasedWithErc20","clearTxHash","setState","newState","sendTransaction","signer","selectedAssets","transactionData","address","getAddress","txNoGasLimit","to","value","valueToSend","from","undefined","data","gasLimit","estimateGas","mul","div","tx","Signing","res","Confirming","hash","NFT_BUY_BAG_SIGNED","transaction_hash","txReceipt","wait","status","nftsPurchased","findNFTsPurchased","route","nftsNotPurchased","findNFTsNotPurchased","Success","Failed","e","console","log","code","Denied","Invalid","name","signerAddress","toBuy","txRoute","logs","erc721Interface","erc1155Interface","cryptopunksMarketInterface","transferErc721BuyEvents","filter","x","topics","getEventTopic","toLowerCase","transferredErc721","map","tokenId","parseInt","toString","transferErc1155BuyEvents","transferredErc1155","parseLog","args","transferCryptopunkEvents","transferredCryptopunks","allTransferred","transferredItems","assetToBuy","some","purchasedNft","updatedAssets","forEach","selectedAsset","find","push"],"sources":["/home/diep/freelance/interface/src/nft/hooks/useSendTransaction.ts"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { hexStripZeros } from '@ethersproject/bytes'\nimport { ContractReceipt } from '@ethersproject/contracts'\nimport type { JsonRpcSigner } from '@ethersproject/providers'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport ERC721 from '../../abis/erc721.json'\nimport ERC1155 from '../../abis/erc1155.json'\nimport CryptoPunksMarket from '../abis/CryptoPunksMarket.json'\nimport { GenieAsset, RouteResponse, RoutingItem, TxResponse, TxStateType, UpdatedGenieAsset } from '../types'\nimport { compareAssetsWithTransactionRoute } from '../utils/txRoute/combineItemsWithTxRoute'\n\ninterface TxState {\n  state: TxStateType\n  setState: (state: TxStateType) => void\n  txHash: string\n  clearTxHash: () => void\n  purchasedWithErc20: boolean\n  sendTransaction: (\n    signer: JsonRpcSigner,\n    selectedAssets: UpdatedGenieAsset[],\n    transactionData: RouteResponse,\n    purchasedWithErc20: boolean\n  ) => Promise<TxResponse | undefined>\n}\n\nexport const useSendTransaction = create<TxState>()(\n  devtools(\n    (set) => ({\n      state: TxStateType.New,\n      txHash: '',\n      purchasedWithErc20: false,\n      clearTxHash: () => set({ txHash: '' }),\n      setState: (newState) => set(() => ({ state: newState })),\n      sendTransaction: async (signer, selectedAssets, transactionData, purchasedWithErc20) => {\n        const address = await signer.getAddress()\n        try {\n          const txNoGasLimit = {\n            to: transactionData.to,\n            value: transactionData.valueToSend ? BigNumber.from(transactionData.valueToSend) : undefined,\n            data: transactionData.data,\n          }\n\n          const gasLimit = (await signer.estimateGas(txNoGasLimit)).mul(105).div(100)\n          // tx['gasLimit'] = gasLimit\n          const tx = { ...txNoGasLimit, gasLimit } // TODO test this works when firing off tx\n\n          set({ state: TxStateType.Signing })\n          const res = await signer.sendTransaction(tx)\n          set({ state: TxStateType.Confirming })\n          set({ txHash: res.hash })\n          set({ purchasedWithErc20 })\n          sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_SIGNED, { transaction_hash: res.hash })\n\n          const txReceipt = await res.wait()\n\n          //tx was mined successfully\n          if (txReceipt.status === 1) {\n            const nftsPurchased = findNFTsPurchased(txReceipt, address, selectedAssets, transactionData.route)\n            const nftsNotPurchased = findNFTsNotPurchased(selectedAssets, nftsPurchased)\n            set({ state: TxStateType.Success })\n            return {\n              nftsPurchased,\n              nftsNotPurchased,\n              txReceipt,\n            }\n          } else {\n            set({ state: TxStateType.Failed })\n            return {\n              nftsPurchased: [],\n              nftsNotPurchased: selectedAssets,\n              txReceipt,\n            }\n          }\n        } catch (e) {\n          console.log('Error creating multiAssetSwap Transaction', e)\n          if (e.code === 4001) {\n            set({ state: TxStateType.Denied })\n          } else {\n            set({ state: TxStateType.Invalid })\n          }\n          return\n        }\n      },\n    }),\n    { name: 'useSendTransactionState' }\n  )\n)\n\nconst findNFTsPurchased = (\n  txReceipt: ContractReceipt,\n  signerAddress: string,\n  toBuy: GenieAsset[],\n  txRoute: RoutingItem[]\n): UpdatedGenieAsset[] => {\n  if (!txReceipt.logs) {\n    return []\n  }\n  const erc721Interface = new Interface(ERC721)\n  const erc1155Interface = new Interface(ERC1155)\n  const cryptopunksMarketInterface = new Interface(CryptoPunksMarket)\n\n  // Find successfully purchased NFTs (and assign to state nftsPurchased) by parsing events\n  const transferErc721BuyEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === erc721Interface.getEventTopic('Transfer') &&\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  )\n\n  const transferredErc721 = transferErc721BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: parseInt(x.topics[3]).toString(),\n  }))\n  const transferErc1155BuyEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === erc1155Interface.getEventTopic('TransferSingle') &&\n      hexStripZeros(x.topics[3]).toLowerCase() === signerAddress.toLowerCase()\n  )\n\n  const transferredErc1155 = transferErc1155BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: erc1155Interface.parseLog(x).args[3].toString(),\n  }))\n\n  // Find transferred CryptoPunks\n  const transferCryptopunkEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === cryptopunksMarketInterface.getEventTopic('PunkTransfer') &&\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  )\n  const transferredCryptopunks = transferCryptopunkEvents.map((x) => ({\n    address: x.address,\n    tokenId: cryptopunksMarketInterface.parseLog(x).args[2].toString(),\n  }))\n\n  const allTransferred = [...transferredErc721, ...transferredErc1155, ...transferredCryptopunks]\n\n  const transferredItems = toBuy.filter((assetToBuy) => {\n    return allTransferred.some(\n      (purchasedNft) =>\n        assetToBuy.address.toLowerCase() === purchasedNft.address.toLowerCase() &&\n        parseInt(assetToBuy.tokenId).toString() === purchasedNft.tokenId\n    )\n  })\n\n  return compareAssetsWithTransactionRoute(transferredItems, txRoute).updatedAssets\n}\n\nconst findNFTsNotPurchased = (toBuy: GenieAsset[], nftsPurchased: UpdatedGenieAsset[]) => {\n  const nftsNotPurchased: Array<UpdatedGenieAsset> = []\n  toBuy.forEach((selectedAsset) => {\n    const purchasedNft = nftsPurchased.find(\n      (x) => x.address.toLowerCase() === selectedAsset.address.toLowerCase() && x.tokenId === selectedAsset.tokenId\n    )\n    if (!purchasedNft) {\n      nftsNotPurchased.push(selectedAsset)\n    }\n  })\n  return nftsNotPurchased\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}