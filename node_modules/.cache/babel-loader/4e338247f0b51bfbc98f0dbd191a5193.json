{"ast":null,"code":"var _s = $RefreshSig$();\nimport { sendAnalyticsEvent, useTrace } from '@uniswap/analytics';\nimport { InterfaceEventName, InterfaceSectionName, SwapEventName } from '@uniswap/analytics-events';\nimport { TradeType, TransactionType, TransactionType as WidgetTransactionType } from '@uniswap/widgets';\nimport { useWeb3React } from '@web3-react/core';\nimport { formatPercentInBasisPointsNumber, formatSwapSignedAnalyticsEventProperties, formatToDecimal, getTokenAddress } from 'lib/utils/analytics';\nimport { useCallback, useMemo } from 'react';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { TransactionType as AppTransactionType } from 'state/transactions/types';\nimport { currencyId } from 'utils/currencyId';\nimport { computeRealizedPriceImpact } from 'utils/prices';\nconst formatAnalyticsEventProperties = _ref => {\n  let {\n    trade,\n    hash,\n    allowedSlippage,\n    succeeded,\n    gasUsed,\n    blockNumber\n  } = _ref;\n  return {\n    estimated_network_fee_usd: gasUsed,\n    transaction_hash: hash,\n    token_in_address: getTokenAddress(trade.inputAmount.currency),\n    token_out_address: getTokenAddress(trade.outputAmount.currency),\n    token_in_symbol: trade.inputAmount.currency.symbol,\n    token_out_symbol: trade.outputAmount.currency.symbol,\n    token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n    token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n    price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n    allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n    chain_id: trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId ? trade.inputAmount.currency.chainId : undefined,\n    swap_quote_block_number: blockNumber,\n    succeeded\n  };\n};\n\n/** Integrates the Widget's transactions, showing the widget's transactions in the app. */\nexport function useSyncWidgetTransactions() {\n  _s();\n  const trace = useTrace({\n    section: InterfaceSectionName.WIDGET\n  });\n  const {\n    chainId\n  } = useWeb3React();\n  const addTransaction = useTransactionAdder();\n  const onTxSubmit = useCallback((_hash, transaction) => {\n    const {\n      type,\n      response\n    } = transaction.info;\n    if (!type || !response) {\n      return;\n    } else if (type === WidgetTransactionType.WRAP || type === WidgetTransactionType.UNWRAP) {\n      const {\n        type,\n        amount: transactionAmount\n      } = transaction.info;\n      const eventProperties = {\n        // get this info from widget handlers\n        token_in_address: getTokenAddress(transactionAmount.currency),\n        token_out_address: getTokenAddress(transactionAmount.currency.wrapped),\n        token_in_symbol: transactionAmount.currency.symbol,\n        token_out_symbol: transactionAmount.currency.wrapped.symbol,\n        chain_id: transactionAmount.currency.chainId,\n        amount: transactionAmount ? formatToDecimal(transactionAmount, transactionAmount === null || transactionAmount === void 0 ? void 0 : transactionAmount.currency.decimals) : undefined,\n        type: type === WidgetTransactionType.WRAP ? TransactionType.WRAP : TransactionType.UNWRAP,\n        ...trace\n      };\n      sendAnalyticsEvent(InterfaceEventName.WRAP_TOKEN_TXN_SUBMITTED, eventProperties);\n      const {\n        amount\n      } = transaction.info;\n      addTransaction(response, {\n        type: AppTransactionType.WRAP,\n        unwrapped: type === WidgetTransactionType.UNWRAP,\n        currencyAmountRaw: amount.quotient.toString(),\n        chainId\n      });\n    } else if (type === WidgetTransactionType.SWAP) {\n      var _transaction$receipt$, _transaction$receipt;\n      const {\n        slippageTolerance,\n        trade,\n        tradeType\n      } = transaction.info;\n      const eventProperties = {\n        ...formatSwapSignedAnalyticsEventProperties({\n          trade,\n          // TODO: add once Widgets adds fiat values to callback\n          fiatValues: {\n            amountIn: undefined,\n            amountOut: undefined\n          },\n          txHash: (_transaction$receipt$ = (_transaction$receipt = transaction.receipt) === null || _transaction$receipt === void 0 ? void 0 : _transaction$receipt.transactionHash) !== null && _transaction$receipt$ !== void 0 ? _transaction$receipt$ : ''\n        }),\n        ...trace\n      };\n      sendAnalyticsEvent(SwapEventName.SWAP_SIGNED, eventProperties);\n      const baseTxInfo = {\n        type: AppTransactionType.SWAP,\n        tradeType,\n        inputCurrencyId: currencyId(trade.inputAmount.currency),\n        outputCurrencyId: currencyId(trade.outputAmount.currency)\n      };\n      if (tradeType === TradeType.EXACT_OUTPUT) {\n        addTransaction(response, {\n          ...baseTxInfo,\n          maximumInputCurrencyAmountRaw: trade.maximumAmountIn(slippageTolerance).quotient.toString(),\n          outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n          expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString()\n        });\n      } else {\n        addTransaction(response, {\n          ...baseTxInfo,\n          inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n          expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n          minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(slippageTolerance).quotient.toString()\n        });\n      }\n    }\n  }, [addTransaction, chainId, trace]);\n  const onTxSuccess = useCallback((hash, tx) => {\n    if (tx.info.type === TransactionType.SWAP) {\n      var _tx$receipt, _tx$receipt$gasUsed, _tx$receipt2, _tx$receipt3;\n      const {\n        trade,\n        slippageTolerance\n      } = tx.info;\n      sendAnalyticsEvent(SwapEventName.SWAP_TRANSACTION_COMPLETED, formatAnalyticsEventProperties({\n        trade,\n        hash,\n        gasUsed: (_tx$receipt = tx.receipt) === null || _tx$receipt === void 0 ? void 0 : (_tx$receipt$gasUsed = _tx$receipt.gasUsed) === null || _tx$receipt$gasUsed === void 0 ? void 0 : _tx$receipt$gasUsed.toString(),\n        blockNumber: (_tx$receipt2 = tx.receipt) === null || _tx$receipt2 === void 0 ? void 0 : _tx$receipt2.blockNumber,\n        allowedSlippage: slippageTolerance,\n        succeeded: ((_tx$receipt3 = tx.receipt) === null || _tx$receipt3 === void 0 ? void 0 : _tx$receipt3.status) === 1\n      }));\n    }\n  }, []);\n  const txHandlers = useMemo(() => ({\n    onTxSubmit,\n    onTxSuccess\n  }), [onTxSubmit, onTxSuccess]);\n  return {\n    transactions: {\n      ...txHandlers\n    }\n  };\n}\n_s(useSyncWidgetTransactions, \"VcMeHXmE1Uu2NycIz8X2N1JvOJw=\", false, function () {\n  return [useTrace, useWeb3React, useTransactionAdder];\n});","map":{"version":3,"names":["sendAnalyticsEvent","useTrace","InterfaceEventName","InterfaceSectionName","SwapEventName","TradeType","TransactionType","WidgetTransactionType","useWeb3React","formatPercentInBasisPointsNumber","formatSwapSignedAnalyticsEventProperties","formatToDecimal","getTokenAddress","useCallback","useMemo","useTransactionAdder","AppTransactionType","currencyId","computeRealizedPriceImpact","formatAnalyticsEventProperties","trade","hash","allowedSlippage","succeeded","gasUsed","blockNumber","estimated_network_fee_usd","transaction_hash","token_in_address","inputAmount","currency","token_out_address","outputAmount","token_in_symbol","symbol","token_out_symbol","token_in_amount","decimals","token_out_amount","price_impact_basis_points","allowed_slippage_basis_points","chain_id","chainId","undefined","swap_quote_block_number","useSyncWidgetTransactions","trace","section","WIDGET","addTransaction","onTxSubmit","_hash","transaction","type","response","info","WRAP","UNWRAP","amount","transactionAmount","eventProperties","wrapped","WRAP_TOKEN_TXN_SUBMITTED","unwrapped","currencyAmountRaw","quotient","toString","SWAP","slippageTolerance","tradeType","fiatValues","amountIn","amountOut","txHash","receipt","transactionHash","SWAP_SIGNED","baseTxInfo","inputCurrencyId","outputCurrencyId","EXACT_OUTPUT","maximumInputCurrencyAmountRaw","maximumAmountIn","outputCurrencyAmountRaw","expectedInputCurrencyAmountRaw","inputCurrencyAmountRaw","expectedOutputCurrencyAmountRaw","minimumOutputCurrencyAmountRaw","minimumAmountOut","onTxSuccess","tx","SWAP_TRANSACTION_COMPLETED","status","txHandlers","transactions"],"sources":["/home/diep/freelance/interface/src/components/Widget/transactions.ts"],"sourcesContent":["import { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfaceEventName, InterfaceSectionName, SwapEventName } from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent } from '@uniswap/sdk-core'\nimport {\n  OnTxSuccess,\n  TradeType,\n  Transaction,\n  TransactionEventHandlers,\n  TransactionInfo,\n  TransactionType,\n  TransactionType as WidgetTransactionType,\n} from '@uniswap/widgets'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  formatPercentInBasisPointsNumber,\n  formatSwapSignedAnalyticsEventProperties,\n  formatToDecimal,\n  getTokenAddress,\n} from 'lib/utils/analytics'\nimport { useCallback, useMemo } from 'react'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport {\n  ExactInputSwapTransactionInfo,\n  ExactOutputSwapTransactionInfo,\n  TransactionType as AppTransactionType,\n  WrapTransactionInfo,\n} from 'state/transactions/types'\nimport { currencyId } from 'utils/currencyId'\nimport { computeRealizedPriceImpact } from 'utils/prices'\n\ninterface AnalyticsEventProps {\n  trade: Trade<Currency, Currency, TradeType>\n  gasUsed: string | undefined\n  blockNumber: number | undefined\n  hash: string | undefined\n  allowedSlippage: Percent\n  succeeded: boolean\n}\n\nconst formatAnalyticsEventProperties = ({\n  trade,\n  hash,\n  allowedSlippage,\n  succeeded,\n  gasUsed,\n  blockNumber,\n}: AnalyticsEventProps) => ({\n  estimated_network_fee_usd: gasUsed,\n  transaction_hash: hash,\n  token_in_address: getTokenAddress(trade.inputAmount.currency),\n  token_out_address: getTokenAddress(trade.outputAmount.currency),\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n  token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n  price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n  allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n  swap_quote_block_number: blockNumber,\n  succeeded,\n})\n\n/** Integrates the Widget's transactions, showing the widget's transactions in the app. */\nexport function useSyncWidgetTransactions() {\n  const trace = useTrace({ section: InterfaceSectionName.WIDGET })\n\n  const { chainId } = useWeb3React()\n  const addTransaction = useTransactionAdder()\n\n  const onTxSubmit = useCallback(\n    (_hash: string, transaction: Transaction<TransactionInfo>) => {\n      const { type, response } = transaction.info\n\n      if (!type || !response) {\n        return\n      } else if (type === WidgetTransactionType.WRAP || type === WidgetTransactionType.UNWRAP) {\n        const { type, amount: transactionAmount } = transaction.info\n\n        const eventProperties = {\n          // get this info from widget handlers\n          token_in_address: getTokenAddress(transactionAmount.currency),\n          token_out_address: getTokenAddress(transactionAmount.currency.wrapped),\n          token_in_symbol: transactionAmount.currency.symbol,\n          token_out_symbol: transactionAmount.currency.wrapped.symbol,\n          chain_id: transactionAmount.currency.chainId,\n          amount: transactionAmount\n            ? formatToDecimal(transactionAmount, transactionAmount?.currency.decimals)\n            : undefined,\n          type: type === WidgetTransactionType.WRAP ? TransactionType.WRAP : TransactionType.UNWRAP,\n          ...trace,\n        }\n        sendAnalyticsEvent(InterfaceEventName.WRAP_TOKEN_TXN_SUBMITTED, eventProperties)\n        const { amount } = transaction.info\n        addTransaction(response, {\n          type: AppTransactionType.WRAP,\n          unwrapped: type === WidgetTransactionType.UNWRAP,\n          currencyAmountRaw: amount.quotient.toString(),\n          chainId,\n        } as WrapTransactionInfo)\n      } else if (type === WidgetTransactionType.SWAP) {\n        const { slippageTolerance, trade, tradeType } = transaction.info\n\n        const eventProperties = {\n          ...formatSwapSignedAnalyticsEventProperties({\n            trade,\n            // TODO: add once Widgets adds fiat values to callback\n            fiatValues: { amountIn: undefined, amountOut: undefined },\n            txHash: transaction.receipt?.transactionHash ?? '',\n          }),\n          ...trace,\n        }\n        sendAnalyticsEvent(SwapEventName.SWAP_SIGNED, eventProperties)\n        const baseTxInfo = {\n          type: AppTransactionType.SWAP,\n          tradeType,\n          inputCurrencyId: currencyId(trade.inputAmount.currency),\n          outputCurrencyId: currencyId(trade.outputAmount.currency),\n        }\n        if (tradeType === TradeType.EXACT_OUTPUT) {\n          addTransaction(response, {\n            ...baseTxInfo,\n            maximumInputCurrencyAmountRaw: trade.maximumAmountIn(slippageTolerance).quotient.toString(),\n            outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n            expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n          } as ExactOutputSwapTransactionInfo)\n        } else {\n          addTransaction(response, {\n            ...baseTxInfo,\n            inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n            expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n            minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(slippageTolerance).quotient.toString(),\n          } as ExactInputSwapTransactionInfo)\n        }\n      }\n    },\n    [addTransaction, chainId, trace]\n  )\n\n  const onTxSuccess: OnTxSuccess = useCallback((hash: string, tx) => {\n    if (tx.info.type === TransactionType.SWAP) {\n      const { trade, slippageTolerance } = tx.info\n      sendAnalyticsEvent(\n        SwapEventName.SWAP_TRANSACTION_COMPLETED,\n        formatAnalyticsEventProperties({\n          trade,\n          hash,\n          gasUsed: tx.receipt?.gasUsed?.toString(),\n          blockNumber: tx.receipt?.blockNumber,\n          allowedSlippage: slippageTolerance,\n          succeeded: tx.receipt?.status === 1,\n        })\n      )\n    }\n  }, [])\n\n  const txHandlers: TransactionEventHandlers = useMemo(() => ({ onTxSubmit, onTxSuccess }), [onTxSubmit, onTxSuccess])\n\n  return { transactions: { ...txHandlers } }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}