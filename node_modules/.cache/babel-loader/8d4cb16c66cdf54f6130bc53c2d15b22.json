{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { Percent, Price, TradeType } from '@uniswap/sdk-core';\nimport _ from 'lodash';\nimport { SwapType, WRAPPED_NATIVE_CURRENCY } from '../../../..';\nimport { ChainId } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { getHighestLiquidityV3NativePool, getHighestLiquidityV3USDPool, getL2ToL1GasUsed } from '../../../../util/gas-factory-helpers';\nimport { log } from '../../../../util/log';\nimport { buildSwapMethodParameters, buildTrade } from '../../../../util/methodParameters';\nimport { IOnChainGasModelFactory } from '../gas-model';\nimport { BASE_SWAP_COST, COST_PER_HOP, COST_PER_INIT_TICK, COST_PER_UNINIT_TICK } from './gas-costs';\n/**\n * Computes a gas estimate for a V3 swap using heuristics.\n * Considers number of hops in the route, number of ticks crossed\n * and the typical base cost for a swap.\n *\n * We get the number of ticks crossed in a swap from the QuoterV2\n * contract.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * @export\n * @class V3HeuristicGasModelFactory\n */\nexport class V3HeuristicGasModelFactory extends IOnChainGasModelFactory {\n  constructor() {\n    super();\n  }\n  async buildGasModel(_ref) {\n    let {\n      chainId,\n      gasPriceWei,\n      v3poolProvider: poolProvider,\n      amountToken,\n      quoteToken,\n      l2GasDataProvider\n    } = _ref;\n    const l2GasData = l2GasDataProvider ? await l2GasDataProvider.getGasData() : undefined;\n    const usdPool = await getHighestLiquidityV3USDPool(chainId, poolProvider);\n    const calculateL1GasFees = async route => {\n      const swapOptions = {\n        type: SwapType.UNIVERSAL_ROUTER,\n        recipient: '0x0000000000000000000000000000000000000001',\n        deadlineOrPreviousBlockhash: 100,\n        slippageTolerance: new Percent(5, 10000)\n      };\n      let l1Used = BigNumber.from(0);\n      let l1FeeInWei = BigNumber.from(0);\n      if (chainId == ChainId.OPTIMISM || chainId == ChainId.OPTIMISTIC_KOVAN || chainId == ChainId.OPTIMISM_GOERLI) {\n        [l1Used, l1FeeInWei] = this.calculateOptimismToL1SecurityFee(route, swapOptions, l2GasData);\n      } else if (chainId == ChainId.ARBITRUM_ONE || chainId == ChainId.ARBITRUM_RINKEBY || chainId == ChainId.ARBITRUM_GOERLI) {\n        [l1Used, l1FeeInWei] = this.calculateArbitrumToL1SecurityFee(route, swapOptions, l2GasData);\n      }\n      // wrap fee to native currency\n      const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n      const costNativeCurrency = CurrencyAmount.fromRawAmount(nativeCurrency, l1FeeInWei.toString());\n      // convert fee into usd\n      const nativeTokenPrice = usdPool.token0.address == nativeCurrency.address ? usdPool.token0Price : usdPool.token1Price;\n      const gasCostL1USD = nativeTokenPrice.quote(costNativeCurrency);\n      let gasCostL1QuoteToken = costNativeCurrency;\n      // if the inputted token is not in the native currency, quote a native/quote token pool to get the gas cost in terms of the quote token\n      if (!quoteToken.equals(nativeCurrency)) {\n        const nativePool = await getHighestLiquidityV3NativePool(quoteToken, poolProvider);\n        if (!nativePool) {\n          log.info('Could not find a pool to convert the cost into the quote token');\n          gasCostL1QuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);\n        } else {\n          const nativeTokenPrice = nativePool.token0.address == nativeCurrency.address ? nativePool.token0Price : nativePool.token1Price;\n          gasCostL1QuoteToken = nativeTokenPrice.quote(costNativeCurrency);\n        }\n      }\n      // gasUsedL1 is the gas units used calculated from the bytes of the calldata\n      // gasCostL1USD and gasCostL1QuoteToken is the cost of gas in each of those tokens\n      return {\n        gasUsedL1: l1Used,\n        gasCostL1USD,\n        gasCostL1QuoteToken\n      };\n    };\n    // If our quote token is WETH, we don't need to convert our gas use to be in terms\n    // of the quote token in order to produce a gas adjusted amount.\n    // We do return a gas use in USD however, so we still convert to usd.\n    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n    if (quoteToken.equals(nativeCurrency)) {\n      const estimateGasCost = routeWithValidQuote => {\n        const {\n          totalGasCostNativeCurrency,\n          baseGasUse\n        } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n        const token0 = usdPool.token0.address == nativeCurrency.address;\n        const nativeTokenPrice = token0 ? usdPool.token0Price : usdPool.token1Price;\n        const gasCostInTermsOfUSD = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n        return {\n          gasEstimate: baseGasUse,\n          gasCostInToken: totalGasCostNativeCurrency,\n          gasCostInUSD: gasCostInTermsOfUSD\n        };\n      };\n      return {\n        estimateGasCost,\n        calculateL1GasFees\n      };\n    }\n    // If the quote token is not in the native currency, we convert the gas cost to be in terms of the quote token.\n    // We do this by getting the highest liquidity <quoteToken>/<nativeCurrency> pool. eg. <quoteToken>/ETH pool.\n    const nativePool = await getHighestLiquidityV3NativePool(quoteToken, poolProvider);\n    let nativeAmountPool = null;\n    if (!amountToken.equals(nativeCurrency)) {\n      nativeAmountPool = await getHighestLiquidityV3NativePool(amountToken, poolProvider);\n    }\n    const usdToken = usdPool.token0.address == nativeCurrency.address ? usdPool.token1 : usdPool.token0;\n    const estimateGasCost = routeWithValidQuote => {\n      const {\n        totalGasCostNativeCurrency,\n        baseGasUse\n      } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n      let gasCostInTermsOfQuoteToken = null;\n      if (nativePool) {\n        const token0 = nativePool.token0.address == nativeCurrency.address;\n        // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)\n        const nativeTokenPrice = token0 ? nativePool.token0Price : nativePool.token1Price;\n        try {\n          // native token is base currency\n          gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n        } catch (err) {\n          log.info({\n            nativeTokenPriceBase: nativeTokenPrice.baseCurrency,\n            nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,\n            gasCostInEth: totalGasCostNativeCurrency.currency\n          }, 'Debug eth price token issue');\n          throw err;\n        }\n      }\n      // we have a nativeAmountPool, but not a nativePool\n      else {\n        log.info(`Unable to find ${nativeCurrency.symbol} pool with the quote token, ${quoteToken.symbol} to produce gas adjusted costs. Using amountToken to calculate gas costs.`);\n      }\n      // Highest liquidity pool for the non quote token / ETH\n      // A pool with the non quote token / ETH should not be required and errors should be handled separately\n      if (nativeAmountPool) {\n        // get current execution price (amountToken / quoteToken)\n        const executionPrice = new Price(routeWithValidQuote.amount.currency, routeWithValidQuote.quote.currency, routeWithValidQuote.amount.quotient, routeWithValidQuote.quote.quotient);\n        const inputIsToken0 = nativeAmountPool.token0.address == nativeCurrency.address;\n        // ratio of input / native\n        const nativeAmountTokenPrice = inputIsToken0 ? nativeAmountPool.token0Price : nativeAmountPool.token1Price;\n        const gasCostInTermsOfAmountToken = nativeAmountTokenPrice.quote(totalGasCostNativeCurrency);\n        // Convert gasCostInTermsOfAmountToken to quote token using execution price\n        const syntheticGasCostInTermsOfQuoteToken = executionPrice.quote(gasCostInTermsOfAmountToken);\n        // Note that the syntheticGasCost being lessThan the original quoted value is not always strictly better\n        // e.g. the scenario where the amountToken/ETH pool is very illiquid as well and returns an extremely small number\n        // however, it is better to have the gasEstimation be almost 0 than almost infinity, as the user will still receive a quote\n        if (gasCostInTermsOfQuoteToken === null || syntheticGasCostInTermsOfQuoteToken.lessThan(gasCostInTermsOfQuoteToken.asFraction)) {\n          log.info({\n            nativeAmountTokenPrice: nativeAmountTokenPrice.toSignificant(6),\n            gasCostInTermsOfQuoteToken: gasCostInTermsOfQuoteToken ? gasCostInTermsOfQuoteToken.toExact() : 0,\n            gasCostInTermsOfAmountToken: gasCostInTermsOfAmountToken.toExact(),\n            executionPrice: executionPrice.toSignificant(6),\n            syntheticGasCostInTermsOfQuoteToken: syntheticGasCostInTermsOfQuoteToken.toSignificant(6)\n          }, 'New gasCostInTermsOfQuoteToken calculated with synthetic quote token price is less than original');\n          gasCostInTermsOfQuoteToken = syntheticGasCostInTermsOfQuoteToken;\n        }\n      }\n      // true if token0 is the native currency\n      const token0USDPool = usdPool.token0.address == nativeCurrency.address;\n      // gets the mid price of the pool in terms of the native token\n      const nativeTokenPriceUSDPool = token0USDPool ? usdPool.token0Price : usdPool.token1Price;\n      let gasCostInTermsOfUSD;\n      try {\n        gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(totalGasCostNativeCurrency);\n      } catch (err) {\n        log.info({\n          usdT1: usdPool.token0.symbol,\n          usdT2: usdPool.token1.symbol,\n          gasCostInNativeToken: totalGasCostNativeCurrency.currency.symbol\n        }, 'Failed to compute USD gas price');\n        throw err;\n      }\n      // If gasCostInTermsOfQuoteToken is null, both attempts to calculate gasCostInTermsOfQuoteToken failed (nativePool and amountNativePool)\n      if (gasCostInTermsOfQuoteToken === null) {\n        log.info(`Unable to find ${nativeCurrency.symbol} pool with the quote token, ${quoteToken.symbol}, or amount Token, ${amountToken.symbol} to produce gas adjusted costs. Route will not account for gas.`);\n        return {\n          gasEstimate: baseGasUse,\n          gasCostInToken: CurrencyAmount.fromRawAmount(quoteToken, 0),\n          gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0)\n        };\n      }\n      return {\n        gasEstimate: baseGasUse,\n        gasCostInToken: gasCostInTermsOfQuoteToken,\n        gasCostInUSD: gasCostInTermsOfUSD\n      };\n    };\n    return {\n      estimateGasCost: estimateGasCost.bind(this),\n      calculateL1GasFees\n    };\n  }\n  estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n    const totalInitializedTicksCrossed = BigNumber.from(Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList)));\n    const totalHops = BigNumber.from(routeWithValidQuote.route.pools.length);\n    const hopsGasUse = COST_PER_HOP(chainId).mul(totalHops);\n    const tickGasUse = COST_PER_INIT_TICK(chainId).mul(totalInitializedTicksCrossed);\n    const uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);\n    // base estimate gas used based on chainId estimates for hops and ticks gas useage\n    const baseGasUse = BASE_SWAP_COST(chainId).add(hopsGasUse).add(tickGasUse).add(uninitializedTickGasUse);\n    const baseGasCostWei = gasPriceWei.mul(baseGasUse);\n    const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n    const totalGasCostNativeCurrency = CurrencyAmount.fromRawAmount(wrappedCurrency, baseGasCostWei.toString());\n    return {\n      totalGasCostNativeCurrency,\n      totalInitializedTicksCrossed,\n      baseGasUse\n    };\n  }\n  /**\n   * To avoid having a call to optimism's L1 security fee contract for every route and amount combination,\n   * we replicate the gas cost accounting here.\n   */\n  calculateOptimismToL1SecurityFee(routes, swapConfig, gasData) {\n    const {\n      l1BaseFee,\n      scalar,\n      decimals,\n      overhead\n    } = gasData;\n    const route = routes[0];\n    const amountToken = route.tradeType == TradeType.EXACT_INPUT ? route.amount.currency : route.quote.currency;\n    const outputToken = route.tradeType == TradeType.EXACT_INPUT ? route.quote.currency : route.amount.currency;\n    // build trade for swap calldata\n    const trade = buildTrade(amountToken, outputToken, route.tradeType, routes);\n    const data = buildSwapMethodParameters(trade, swapConfig, ChainId.OPTIMISM).calldata;\n    const l1GasUsed = getL2ToL1GasUsed(data, overhead);\n    // l1BaseFee is L1 Gas Price on etherscan\n    const l1Fee = l1GasUsed.mul(l1BaseFee);\n    const unscaled = l1Fee.mul(scalar);\n    // scaled = unscaled / (10 ** decimals)\n    const scaledConversion = BigNumber.from(10).pow(decimals);\n    const scaled = unscaled.div(scaledConversion);\n    return [l1GasUsed, scaled];\n  }\n  calculateArbitrumToL1SecurityFee(routes, swapConfig, gasData) {\n    const {\n      perL2TxFee,\n      perL1CalldataFee\n    } = gasData;\n    const route = routes[0];\n    const amountToken = route.tradeType == TradeType.EXACT_INPUT ? route.amount.currency : route.quote.currency;\n    const outputToken = route.tradeType == TradeType.EXACT_INPUT ? route.quote.currency : route.amount.currency;\n    // build trade for swap calldata\n    const trade = buildTrade(amountToken, outputToken, route.tradeType, routes);\n    const data = buildSwapMethodParameters(trade, swapConfig, ChainId.ARBITRUM_ONE).calldata;\n    // calculates gas amounts based on bytes of calldata, use 0 as overhead.\n    const l1GasUsed = getL2ToL1GasUsed(data, BigNumber.from(0));\n    // multiply by the fee per calldata and add the flat l2 fee\n    let l1Fee = l1GasUsed.mul(perL1CalldataFee);\n    l1Fee = l1Fee.add(perL2TxFee);\n    return [l1GasUsed, l1Fee];\n  }\n}","map":{"version":3,"sources":["../../../../../../src/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { Percent, Price, TradeType } from '@uniswap/sdk-core';\nimport _ from 'lodash';\nimport { SwapType, WRAPPED_NATIVE_CURRENCY, } from '../../../..';\nimport { ChainId } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { getHighestLiquidityV3NativePool, getHighestLiquidityV3USDPool, getL2ToL1GasUsed, } from '../../../../util/gas-factory-helpers';\nimport { log } from '../../../../util/log';\nimport { buildSwapMethodParameters, buildTrade, } from '../../../../util/methodParameters';\nimport { IOnChainGasModelFactory, } from '../gas-model';\nimport { BASE_SWAP_COST, COST_PER_HOP, COST_PER_INIT_TICK, COST_PER_UNINIT_TICK, } from './gas-costs';\n/**\n * Computes a gas estimate for a V3 swap using heuristics.\n * Considers number of hops in the route, number of ticks crossed\n * and the typical base cost for a swap.\n *\n * We get the number of ticks crossed in a swap from the QuoterV2\n * contract.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * @export\n * @class V3HeuristicGasModelFactory\n */\nexport class V3HeuristicGasModelFactory extends IOnChainGasModelFactory {\n    constructor() {\n        super();\n    }\n    async buildGasModel({ chainId, gasPriceWei, v3poolProvider: poolProvider, amountToken, quoteToken, l2GasDataProvider, }) {\n        const l2GasData = l2GasDataProvider\n            ? await l2GasDataProvider.getGasData()\n            : undefined;\n        const usdPool = await getHighestLiquidityV3USDPool(chainId, poolProvider);\n        const calculateL1GasFees = async (route) => {\n            const swapOptions = {\n                type: SwapType.UNIVERSAL_ROUTER,\n                recipient: '0x0000000000000000000000000000000000000001',\n                deadlineOrPreviousBlockhash: 100,\n                slippageTolerance: new Percent(5, 10000),\n            };\n            let l1Used = BigNumber.from(0);\n            let l1FeeInWei = BigNumber.from(0);\n            if (chainId == ChainId.OPTIMISM ||\n                chainId == ChainId.OPTIMISTIC_KOVAN ||\n                chainId == ChainId.OPTIMISM_GOERLI) {\n                [l1Used, l1FeeInWei] = this.calculateOptimismToL1SecurityFee(route, swapOptions, l2GasData);\n            }\n            else if (chainId == ChainId.ARBITRUM_ONE ||\n                chainId == ChainId.ARBITRUM_RINKEBY ||\n                chainId == ChainId.ARBITRUM_GOERLI) {\n                [l1Used, l1FeeInWei] = this.calculateArbitrumToL1SecurityFee(route, swapOptions, l2GasData);\n            }\n            // wrap fee to native currency\n            const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n            const costNativeCurrency = CurrencyAmount.fromRawAmount(nativeCurrency, l1FeeInWei.toString());\n            // convert fee into usd\n            const nativeTokenPrice = usdPool.token0.address == nativeCurrency.address\n                ? usdPool.token0Price\n                : usdPool.token1Price;\n            const gasCostL1USD = nativeTokenPrice.quote(costNativeCurrency);\n            let gasCostL1QuoteToken = costNativeCurrency;\n            // if the inputted token is not in the native currency, quote a native/quote token pool to get the gas cost in terms of the quote token\n            if (!quoteToken.equals(nativeCurrency)) {\n                const nativePool = await getHighestLiquidityV3NativePool(quoteToken, poolProvider);\n                if (!nativePool) {\n                    log.info('Could not find a pool to convert the cost into the quote token');\n                    gasCostL1QuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);\n                }\n                else {\n                    const nativeTokenPrice = nativePool.token0.address == nativeCurrency.address\n                        ? nativePool.token0Price\n                        : nativePool.token1Price;\n                    gasCostL1QuoteToken = nativeTokenPrice.quote(costNativeCurrency);\n                }\n            }\n            // gasUsedL1 is the gas units used calculated from the bytes of the calldata\n            // gasCostL1USD and gasCostL1QuoteToken is the cost of gas in each of those tokens\n            return {\n                gasUsedL1: l1Used,\n                gasCostL1USD,\n                gasCostL1QuoteToken,\n            };\n        };\n        // If our quote token is WETH, we don't need to convert our gas use to be in terms\n        // of the quote token in order to produce a gas adjusted amount.\n        // We do return a gas use in USD however, so we still convert to usd.\n        const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        if (quoteToken.equals(nativeCurrency)) {\n            const estimateGasCost = (routeWithValidQuote) => {\n                const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n                const token0 = usdPool.token0.address == nativeCurrency.address;\n                const nativeTokenPrice = token0\n                    ? usdPool.token0Price\n                    : usdPool.token1Price;\n                const gasCostInTermsOfUSD = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n                return {\n                    gasEstimate: baseGasUse,\n                    gasCostInToken: totalGasCostNativeCurrency,\n                    gasCostInUSD: gasCostInTermsOfUSD,\n                };\n            };\n            return {\n                estimateGasCost,\n                calculateL1GasFees,\n            };\n        }\n        // If the quote token is not in the native currency, we convert the gas cost to be in terms of the quote token.\n        // We do this by getting the highest liquidity <quoteToken>/<nativeCurrency> pool. eg. <quoteToken>/ETH pool.\n        const nativePool = await getHighestLiquidityV3NativePool(quoteToken, poolProvider);\n        let nativeAmountPool = null;\n        if (!amountToken.equals(nativeCurrency)) {\n            nativeAmountPool = await getHighestLiquidityV3NativePool(amountToken, poolProvider);\n        }\n        const usdToken = usdPool.token0.address == nativeCurrency.address\n            ? usdPool.token1\n            : usdPool.token0;\n        const estimateGasCost = (routeWithValidQuote) => {\n            const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n            let gasCostInTermsOfQuoteToken = null;\n            if (nativePool) {\n                const token0 = nativePool.token0.address == nativeCurrency.address;\n                // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)\n                const nativeTokenPrice = token0\n                    ? nativePool.token0Price\n                    : nativePool.token1Price;\n                try {\n                    // native token is base currency\n                    gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n                }\n                catch (err) {\n                    log.info({\n                        nativeTokenPriceBase: nativeTokenPrice.baseCurrency,\n                        nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,\n                        gasCostInEth: totalGasCostNativeCurrency.currency,\n                    }, 'Debug eth price token issue');\n                    throw err;\n                }\n            }\n            // we have a nativeAmountPool, but not a nativePool\n            else {\n                log.info(`Unable to find ${nativeCurrency.symbol} pool with the quote token, ${quoteToken.symbol} to produce gas adjusted costs. Using amountToken to calculate gas costs.`);\n            }\n            // Highest liquidity pool for the non quote token / ETH\n            // A pool with the non quote token / ETH should not be required and errors should be handled separately\n            if (nativeAmountPool) {\n                // get current execution price (amountToken / quoteToken)\n                const executionPrice = new Price(routeWithValidQuote.amount.currency, routeWithValidQuote.quote.currency, routeWithValidQuote.amount.quotient, routeWithValidQuote.quote.quotient);\n                const inputIsToken0 = nativeAmountPool.token0.address == nativeCurrency.address;\n                // ratio of input / native\n                const nativeAmountTokenPrice = inputIsToken0\n                    ? nativeAmountPool.token0Price\n                    : nativeAmountPool.token1Price;\n                const gasCostInTermsOfAmountToken = nativeAmountTokenPrice.quote(totalGasCostNativeCurrency);\n                // Convert gasCostInTermsOfAmountToken to quote token using execution price\n                const syntheticGasCostInTermsOfQuoteToken = executionPrice.quote(gasCostInTermsOfAmountToken);\n                // Note that the syntheticGasCost being lessThan the original quoted value is not always strictly better\n                // e.g. the scenario where the amountToken/ETH pool is very illiquid as well and returns an extremely small number\n                // however, it is better to have the gasEstimation be almost 0 than almost infinity, as the user will still receive a quote\n                if (gasCostInTermsOfQuoteToken === null ||\n                    syntheticGasCostInTermsOfQuoteToken.lessThan(gasCostInTermsOfQuoteToken.asFraction)) {\n                    log.info({\n                        nativeAmountTokenPrice: nativeAmountTokenPrice.toSignificant(6),\n                        gasCostInTermsOfQuoteToken: gasCostInTermsOfQuoteToken\n                            ? gasCostInTermsOfQuoteToken.toExact()\n                            : 0,\n                        gasCostInTermsOfAmountToken: gasCostInTermsOfAmountToken.toExact(),\n                        executionPrice: executionPrice.toSignificant(6),\n                        syntheticGasCostInTermsOfQuoteToken: syntheticGasCostInTermsOfQuoteToken.toSignificant(6),\n                    }, 'New gasCostInTermsOfQuoteToken calculated with synthetic quote token price is less than original');\n                    gasCostInTermsOfQuoteToken = syntheticGasCostInTermsOfQuoteToken;\n                }\n            }\n            // true if token0 is the native currency\n            const token0USDPool = usdPool.token0.address == nativeCurrency.address;\n            // gets the mid price of the pool in terms of the native token\n            const nativeTokenPriceUSDPool = token0USDPool\n                ? usdPool.token0Price\n                : usdPool.token1Price;\n            let gasCostInTermsOfUSD;\n            try {\n                gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(totalGasCostNativeCurrency);\n            }\n            catch (err) {\n                log.info({\n                    usdT1: usdPool.token0.symbol,\n                    usdT2: usdPool.token1.symbol,\n                    gasCostInNativeToken: totalGasCostNativeCurrency.currency.symbol,\n                }, 'Failed to compute USD gas price');\n                throw err;\n            }\n            // If gasCostInTermsOfQuoteToken is null, both attempts to calculate gasCostInTermsOfQuoteToken failed (nativePool and amountNativePool)\n            if (gasCostInTermsOfQuoteToken === null) {\n                log.info(`Unable to find ${nativeCurrency.symbol} pool with the quote token, ${quoteToken.symbol}, or amount Token, ${amountToken.symbol} to produce gas adjusted costs. Route will not account for gas.`);\n                return {\n                    gasEstimate: baseGasUse,\n                    gasCostInToken: CurrencyAmount.fromRawAmount(quoteToken, 0),\n                    gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),\n                };\n            }\n            return {\n                gasEstimate: baseGasUse,\n                gasCostInToken: gasCostInTermsOfQuoteToken,\n                gasCostInUSD: gasCostInTermsOfUSD,\n            };\n        };\n        return {\n            estimateGasCost: estimateGasCost.bind(this),\n            calculateL1GasFees,\n        };\n    }\n    estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n        const totalInitializedTicksCrossed = BigNumber.from(Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList)));\n        const totalHops = BigNumber.from(routeWithValidQuote.route.pools.length);\n        const hopsGasUse = COST_PER_HOP(chainId).mul(totalHops);\n        const tickGasUse = COST_PER_INIT_TICK(chainId).mul(totalInitializedTicksCrossed);\n        const uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);\n        // base estimate gas used based on chainId estimates for hops and ticks gas useage\n        const baseGasUse = BASE_SWAP_COST(chainId)\n            .add(hopsGasUse)\n            .add(tickGasUse)\n            .add(uninitializedTickGasUse);\n        const baseGasCostWei = gasPriceWei.mul(baseGasUse);\n        const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        const totalGasCostNativeCurrency = CurrencyAmount.fromRawAmount(wrappedCurrency, baseGasCostWei.toString());\n        return {\n            totalGasCostNativeCurrency,\n            totalInitializedTicksCrossed,\n            baseGasUse,\n        };\n    }\n    /**\n     * To avoid having a call to optimism's L1 security fee contract for every route and amount combination,\n     * we replicate the gas cost accounting here.\n     */\n    calculateOptimismToL1SecurityFee(routes, swapConfig, gasData) {\n        const { l1BaseFee, scalar, decimals, overhead } = gasData;\n        const route = routes[0];\n        const amountToken = route.tradeType == TradeType.EXACT_INPUT\n            ? route.amount.currency\n            : route.quote.currency;\n        const outputToken = route.tradeType == TradeType.EXACT_INPUT\n            ? route.quote.currency\n            : route.amount.currency;\n        // build trade for swap calldata\n        const trade = buildTrade(amountToken, outputToken, route.tradeType, routes);\n        const data = buildSwapMethodParameters(trade, swapConfig, ChainId.OPTIMISM).calldata;\n        const l1GasUsed = getL2ToL1GasUsed(data, overhead);\n        // l1BaseFee is L1 Gas Price on etherscan\n        const l1Fee = l1GasUsed.mul(l1BaseFee);\n        const unscaled = l1Fee.mul(scalar);\n        // scaled = unscaled / (10 ** decimals)\n        const scaledConversion = BigNumber.from(10).pow(decimals);\n        const scaled = unscaled.div(scaledConversion);\n        return [l1GasUsed, scaled];\n    }\n    calculateArbitrumToL1SecurityFee(routes, swapConfig, gasData) {\n        const { perL2TxFee, perL1CalldataFee } = gasData;\n        const route = routes[0];\n        const amountToken = route.tradeType == TradeType.EXACT_INPUT\n            ? route.amount.currency\n            : route.quote.currency;\n        const outputToken = route.tradeType == TradeType.EXACT_INPUT\n            ? route.quote.currency\n            : route.amount.currency;\n        // build trade for swap calldata\n        const trade = buildTrade(amountToken, outputToken, route.tradeType, routes);\n        const data = buildSwapMethodParameters(trade, swapConfig, ChainId.ARBITRUM_ONE).calldata;\n        // calculates gas amounts based on bytes of calldata, use 0 as overhead.\n        const l1GasUsed = getL2ToL1GasUsed(data, BigNumber.from(0));\n        // multiply by the fee per calldata and add the flat l2 fee\n        let l1Fee = l1GasUsed.mul(perL1CalldataFee);\n        l1Fee = l1Fee.add(perL2TxFee);\n        return [l1GasUsed, l1Fee];\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}