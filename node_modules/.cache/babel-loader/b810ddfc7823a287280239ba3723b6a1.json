{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Percent } from '@uniswap/sdk-core';\nimport { RouterPreference } from '@uniswap/widgets';\nimport { DEFAULT_DEADLINE_FROM_NOW } from 'constants/misc';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useUserSlippageTolerance, useUserTransactionTTL } from 'state/user/hooks';\n\n/**\n * Integrates the Widget's settings, keeping the widget and app settings in sync.\n * NB: This acts as an integration layer, so certain values are duplicated in order to translate\n * between app and widget representations.\n */\nexport function useSyncWidgetSettings() {\n  _s();\n  const [appTtl, setAppTtl] = useUserTransactionTTL();\n  const [widgetTtl, setWidgetTtl] = useState(appTtl / 60);\n  const onTransactionDeadlineChange = useCallback(widgetTtl => {\n    setWidgetTtl(widgetTtl);\n    const appTtl = widgetTtl === undefined ? widgetTtl : widgetTtl * 60;\n    setAppTtl(appTtl !== null && appTtl !== void 0 ? appTtl : DEFAULT_DEADLINE_FROM_NOW);\n  }, [setAppTtl]);\n  const [appSlippage, setAppSlippage] = useUserSlippageTolerance();\n  const [widgetSlippage, setWidgetSlippage] = useState(appSlippage === 'auto' ? undefined : appSlippage.toFixed(2));\n  const onSlippageChange = useCallback(widgetSlippage => {\n    setWidgetSlippage(widgetSlippage.max);\n    if (widgetSlippage.auto || !widgetSlippage.max) {\n      setAppSlippage('auto');\n    } else {\n      setAppSlippage(new Percent(Math.floor(Number(widgetSlippage.max) * 100), 10000));\n    }\n  }, [setAppSlippage]);\n  const [routerPreference, onRouterPreferenceChange] = useState(RouterPreference.API);\n  const onSettingsReset = useCallback(() => {\n    setWidgetTtl(undefined);\n    setAppTtl(DEFAULT_DEADLINE_FROM_NOW);\n    setWidgetSlippage(undefined);\n    setAppSlippage('auto');\n  }, [setAppSlippage, setAppTtl]);\n  const settings = useMemo(() => {\n    const auto = appSlippage === 'auto';\n    return {\n      slippage: {\n        auto,\n        max: widgetSlippage\n      },\n      transactionTtl: widgetTtl,\n      routerPreference\n    };\n  }, [appSlippage, widgetSlippage, widgetTtl, routerPreference]);\n  const settingsHandlers = useMemo(() => ({\n    onSettingsReset,\n    onSlippageChange,\n    onTransactionDeadlineChange,\n    onRouterPreferenceChange\n  }), [onSettingsReset, onSlippageChange, onTransactionDeadlineChange, onRouterPreferenceChange]);\n  return {\n    settings: {\n      settings,\n      ...settingsHandlers\n    }\n  };\n}\n_s(useSyncWidgetSettings, \"gkQK0FP+ETVGqwIjUNmO+vGPJZ0=\", false, function () {\n  return [useUserTransactionTTL, useUserSlippageTolerance];\n});","map":{"version":3,"names":["Percent","RouterPreference","DEFAULT_DEADLINE_FROM_NOW","useCallback","useMemo","useState","useUserSlippageTolerance","useUserTransactionTTL","useSyncWidgetSettings","appTtl","setAppTtl","widgetTtl","setWidgetTtl","onTransactionDeadlineChange","undefined","appSlippage","setAppSlippage","widgetSlippage","setWidgetSlippage","toFixed","onSlippageChange","max","auto","Math","floor","Number","routerPreference","onRouterPreferenceChange","API","onSettingsReset","settings","slippage","transactionTtl","settingsHandlers"],"sources":["/home/diep/freelance/interface/src/components/Widget/settings.ts"],"sourcesContent":["import { Percent } from '@uniswap/sdk-core'\nimport { RouterPreference, Slippage, SwapController, SwapEventHandlers } from '@uniswap/widgets'\nimport { DEFAULT_DEADLINE_FROM_NOW } from 'constants/misc'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useUserSlippageTolerance, useUserTransactionTTL } from 'state/user/hooks'\n\n/**\n * Integrates the Widget's settings, keeping the widget and app settings in sync.\n * NB: This acts as an integration layer, so certain values are duplicated in order to translate\n * between app and widget representations.\n */\nexport function useSyncWidgetSettings() {\n  const [appTtl, setAppTtl] = useUserTransactionTTL()\n  const [widgetTtl, setWidgetTtl] = useState<number | undefined>(appTtl / 60)\n  const onTransactionDeadlineChange = useCallback(\n    (widgetTtl: number | undefined) => {\n      setWidgetTtl(widgetTtl)\n      const appTtl = widgetTtl === undefined ? widgetTtl : widgetTtl * 60\n      setAppTtl(appTtl ?? DEFAULT_DEADLINE_FROM_NOW)\n    },\n    [setAppTtl]\n  )\n\n  const [appSlippage, setAppSlippage] = useUserSlippageTolerance()\n  const [widgetSlippage, setWidgetSlippage] = useState<string | undefined>(\n    appSlippage === 'auto' ? undefined : appSlippage.toFixed(2)\n  )\n  const onSlippageChange = useCallback(\n    (widgetSlippage: Slippage) => {\n      setWidgetSlippage(widgetSlippage.max)\n      if (widgetSlippage.auto || !widgetSlippage.max) {\n        setAppSlippage('auto')\n      } else {\n        setAppSlippage(new Percent(Math.floor(Number(widgetSlippage.max) * 100), 10_000))\n      }\n    },\n    [setAppSlippage]\n  )\n\n  const [routerPreference, onRouterPreferenceChange] = useState(RouterPreference.API)\n\n  const onSettingsReset = useCallback(() => {\n    setWidgetTtl(undefined)\n    setAppTtl(DEFAULT_DEADLINE_FROM_NOW)\n    setWidgetSlippage(undefined)\n    setAppSlippage('auto')\n  }, [setAppSlippage, setAppTtl])\n\n  const settings: SwapController['settings'] = useMemo(() => {\n    const auto = appSlippage === 'auto'\n    return {\n      slippage: { auto, max: widgetSlippage },\n      transactionTtl: widgetTtl,\n      routerPreference,\n    }\n  }, [appSlippage, widgetSlippage, widgetTtl, routerPreference])\n  const settingsHandlers: SwapEventHandlers = useMemo(\n    () => ({ onSettingsReset, onSlippageChange, onTransactionDeadlineChange, onRouterPreferenceChange }),\n    [onSettingsReset, onSlippageChange, onTransactionDeadlineChange, onRouterPreferenceChange]\n  )\n\n  return { settings: { settings, ...settingsHandlers } }\n}\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,gBAAgB,QAAqD,kBAAkB;AAChG,SAASC,yBAAyB,QAAQ,gBAAgB;AAC1D,SAASC,WAAW,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACtD,SAASC,wBAAwB,EAAEC,qBAAqB,QAAQ,kBAAkB;;AAElF;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqB,GAAG;EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGH,qBAAqB,EAAE;EACnD,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAqBI,MAAM,GAAG,EAAE,CAAC;EAC3E,MAAMI,2BAA2B,GAAGV,WAAW,CAC5CQ,SAA6B,IAAK;IACjCC,YAAY,CAACD,SAAS,CAAC;IACvB,MAAMF,MAAM,GAAGE,SAAS,KAAKG,SAAS,GAAGH,SAAS,GAAGA,SAAS,GAAG,EAAE;IACnED,SAAS,CAACD,MAAM,aAANA,MAAM,cAANA,MAAM,GAAIP,yBAAyB,CAAC;EAChD,CAAC,EACD,CAACQ,SAAS,CAAC,CACZ;EAED,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGV,wBAAwB,EAAE;EAChE,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAClDU,WAAW,KAAK,MAAM,GAAGD,SAAS,GAAGC,WAAW,CAACI,OAAO,CAAC,CAAC,CAAC,CAC5D;EACD,MAAMC,gBAAgB,GAAGjB,WAAW,CACjCc,cAAwB,IAAK;IAC5BC,iBAAiB,CAACD,cAAc,CAACI,GAAG,CAAC;IACrC,IAAIJ,cAAc,CAACK,IAAI,IAAI,CAACL,cAAc,CAACI,GAAG,EAAE;MAC9CL,cAAc,CAAC,MAAM,CAAC;IACxB,CAAC,MAAM;MACLA,cAAc,CAAC,IAAIhB,OAAO,CAACuB,IAAI,CAACC,KAAK,CAACC,MAAM,CAACR,cAAc,CAACI,GAAG,CAAC,GAAG,GAAG,CAAC,EAAE,KAAM,CAAC,CAAC;IACnF;EACF,CAAC,EACD,CAACL,cAAc,CAAC,CACjB;EAED,MAAM,CAACU,gBAAgB,EAAEC,wBAAwB,CAAC,GAAGtB,QAAQ,CAACJ,gBAAgB,CAAC2B,GAAG,CAAC;EAEnF,MAAMC,eAAe,GAAG1B,WAAW,CAAC,MAAM;IACxCS,YAAY,CAACE,SAAS,CAAC;IACvBJ,SAAS,CAACR,yBAAyB,CAAC;IACpCgB,iBAAiB,CAACJ,SAAS,CAAC;IAC5BE,cAAc,CAAC,MAAM,CAAC;EACxB,CAAC,EAAE,CAACA,cAAc,EAAEN,SAAS,CAAC,CAAC;EAE/B,MAAMoB,QAAoC,GAAG1B,OAAO,CAAC,MAAM;IACzD,MAAMkB,IAAI,GAAGP,WAAW,KAAK,MAAM;IACnC,OAAO;MACLgB,QAAQ,EAAE;QAAET,IAAI;QAAED,GAAG,EAAEJ;MAAe,CAAC;MACvCe,cAAc,EAAErB,SAAS;MACzBe;IACF,CAAC;EACH,CAAC,EAAE,CAACX,WAAW,EAAEE,cAAc,EAAEN,SAAS,EAAEe,gBAAgB,CAAC,CAAC;EAC9D,MAAMO,gBAAmC,GAAG7B,OAAO,CACjD,OAAO;IAAEyB,eAAe;IAAET,gBAAgB;IAAEP,2BAA2B;IAAEc;EAAyB,CAAC,CAAC,EACpG,CAACE,eAAe,EAAET,gBAAgB,EAAEP,2BAA2B,EAAEc,wBAAwB,CAAC,CAC3F;EAED,OAAO;IAAEG,QAAQ,EAAE;MAAEA,QAAQ;MAAE,GAAGG;IAAiB;EAAE,CAAC;AACxD;AAAC,GAnDezB,qBAAqB;EAAA,QACPD,qBAAqB,EAWXD,wBAAwB;AAAA"},"metadata":{},"sourceType":"module"}