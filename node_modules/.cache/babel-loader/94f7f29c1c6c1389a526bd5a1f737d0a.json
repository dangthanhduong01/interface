{"ast":null,"code":"var _s = $RefreshSig$();\nimport { SupportedChainId } from 'constants/chains';\nimport useHttpLocations from 'hooks/useHttpLocations';\nimport { useMemo } from 'react';\nimport { isAddress } from 'utils';\nimport EthereumLogo from '../../assets/images/ethereum-logo.png';\nimport BnbLogo from \"../../assets/svg/bnb-logo.svg\";\nimport CeloLogo from \"../../assets/svg/celo_logo.svg\";\nimport MaticLogo from \"../../assets/svg/matic-token-icon.svg\";\nimport { isCelo, NATIVE_CHAIN_ID, nativeOnChain } from '../../constants/tokens';\nexport function chainIdToNetworkName(networkId) {\n  switch (networkId) {\n    case SupportedChainId.MAINNET:\n      return 'ethereum';\n    case SupportedChainId.ARBITRUM_ONE:\n      return 'arbitrum';\n    case SupportedChainId.OPTIMISM:\n      return 'optimism';\n    case SupportedChainId.POLYGON:\n      return 'polygon';\n    case SupportedChainId.BNB:\n      return 'smartchain';\n    default:\n      return 'ethereum';\n  }\n}\nexport function getNativeLogoURI() {\n  let chainId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SupportedChainId.MAINNET;\n  switch (chainId) {\n    case SupportedChainId.POLYGON:\n    case SupportedChainId.POLYGON_MUMBAI:\n      return MaticLogo;\n    case SupportedChainId.BNB:\n      return BnbLogo;\n    case SupportedChainId.CELO:\n    case SupportedChainId.CELO_ALFAJORES:\n      return CeloLogo;\n    default:\n      return EthereumLogo;\n  }\n}\nfunction getTokenLogoURI(address) {\n  let chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SupportedChainId.MAINNET;\n  const networkName = chainIdToNetworkName(chainId);\n  const networksWithUrls = [SupportedChainId.ARBITRUM_ONE, SupportedChainId.MAINNET, SupportedChainId.OPTIMISM, SupportedChainId.BNB];\n  if (networksWithUrls.includes(chainId)) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${address}/logo.png`;\n  }\n\n  // Celo logo logo is hosted elsewhere.\n  if (isCelo(chainId)) {\n    if (address === nativeOnChain(chainId).wrapped.address) {\n      return 'https://raw.githubusercontent.com/ubeswap/default-token-list/master/assets/asset_CELO.png';\n    }\n  }\n}\nexport default function useCurrencyLogoURIs(currency) {\n  _s();\n  const locations = useHttpLocations(currency === null || currency === void 0 ? void 0 : currency.logoURI);\n  return useMemo(() => {\n    const logoURIs = [...locations];\n    if (currency) {\n      if (currency.isNative || currency.address === NATIVE_CHAIN_ID) {\n        logoURIs.push(getNativeLogoURI(currency.chainId));\n      } else if (currency.isToken || currency.address) {\n        const checksummedAddress = isAddress(currency.address);\n        const logoURI = checksummedAddress && getTokenLogoURI(checksummedAddress, currency.chainId);\n        if (logoURI) {\n          logoURIs.push(logoURI);\n        }\n      }\n    }\n    return logoURIs;\n  }, [currency, locations]);\n}\n_s(useCurrencyLogoURIs, \"F93pqXB/w62fLyi5Gll4+6625TE=\", false, function () {\n  return [useHttpLocations];\n});","map":{"version":3,"names":["SupportedChainId","useHttpLocations","useMemo","isAddress","EthereumLogo","isCelo","NATIVE_CHAIN_ID","nativeOnChain","chainIdToNetworkName","networkId","MAINNET","ARBITRUM_ONE","OPTIMISM","POLYGON","BNB","getNativeLogoURI","chainId","POLYGON_MUMBAI","MaticLogo","BnbLogo","CELO","CELO_ALFAJORES","CeloLogo","getTokenLogoURI","address","networkName","networksWithUrls","includes","wrapped","useCurrencyLogoURIs","currency","locations","logoURI","logoURIs","isNative","push","isToken","checksummedAddress"],"sources":["/home/diep/freelance/interface/src/lib/hooks/useCurrencyLogoURIs.ts"],"sourcesContent":["import { SupportedChainId } from 'constants/chains'\nimport useHttpLocations from 'hooks/useHttpLocations'\nimport { useMemo } from 'react'\nimport { isAddress } from 'utils'\n\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport BnbLogo from '../../assets/svg/bnb-logo.svg'\nimport CeloLogo from '../../assets/svg/celo_logo.svg'\nimport MaticLogo from '../../assets/svg/matic-token-icon.svg'\nimport { isCelo, NATIVE_CHAIN_ID, nativeOnChain } from '../../constants/tokens'\n\ntype Network = 'ethereum' | 'arbitrum' | 'optimism' | 'polygon' | 'smartchain'\n\nexport function chainIdToNetworkName(networkId: SupportedChainId): Network {\n  switch (networkId) {\n    case SupportedChainId.MAINNET:\n      return 'ethereum'\n    case SupportedChainId.ARBITRUM_ONE:\n      return 'arbitrum'\n    case SupportedChainId.OPTIMISM:\n      return 'optimism'\n    case SupportedChainId.POLYGON:\n      return 'polygon'\n    case SupportedChainId.BNB:\n      return 'smartchain'\n    default:\n      return 'ethereum'\n  }\n}\n\nexport function getNativeLogoURI(chainId: SupportedChainId = SupportedChainId.MAINNET): string {\n  switch (chainId) {\n    case SupportedChainId.POLYGON:\n    case SupportedChainId.POLYGON_MUMBAI:\n      return MaticLogo\n    case SupportedChainId.BNB:\n      return BnbLogo\n    case SupportedChainId.CELO:\n    case SupportedChainId.CELO_ALFAJORES:\n      return CeloLogo\n    default:\n      return EthereumLogo\n  }\n}\n\nfunction getTokenLogoURI(address: string, chainId: SupportedChainId = SupportedChainId.MAINNET): string | void {\n  const networkName = chainIdToNetworkName(chainId)\n  const networksWithUrls = [\n    SupportedChainId.ARBITRUM_ONE,\n    SupportedChainId.MAINNET,\n    SupportedChainId.OPTIMISM,\n    SupportedChainId.BNB,\n  ]\n  if (networksWithUrls.includes(chainId)) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${address}/logo.png`\n  }\n\n  // Celo logo logo is hosted elsewhere.\n  if (isCelo(chainId)) {\n    if (address === nativeOnChain(chainId).wrapped.address) {\n      return 'https://raw.githubusercontent.com/ubeswap/default-token-list/master/assets/asset_CELO.png'\n    }\n  }\n}\n\nexport default function useCurrencyLogoURIs(\n  currency:\n    | {\n        isNative?: boolean\n        isToken?: boolean\n        address?: string\n        chainId: number\n        logoURI?: string | null\n      }\n    | null\n    | undefined\n): string[] {\n  const locations = useHttpLocations(currency?.logoURI)\n  return useMemo(() => {\n    const logoURIs = [...locations]\n    if (currency) {\n      if (currency.isNative || currency.address === NATIVE_CHAIN_ID) {\n        logoURIs.push(getNativeLogoURI(currency.chainId))\n      } else if (currency.isToken || currency.address) {\n        const checksummedAddress = isAddress(currency.address)\n        const logoURI = checksummedAddress && getTokenLogoURI(checksummedAddress, currency.chainId)\n        if (logoURI) {\n          logoURIs.push(logoURI)\n        }\n      }\n    }\n    return logoURIs\n  }, [currency, locations])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}