{"ast":null,"code":"import { isPooledMarket, Markets } from 'nft/types';\nimport { calcAvgGroupPoolPrice, formatWeiToDecimal, isInSameMarketplaceCollection, isInSameSudoSwapPool } from 'nft/utils';\nconst isTheSame = (item, routeAsset) => {\n  // if route asset has id, match by id\n  if ('id' in routeAsset && routeAsset.id) {\n    return routeAsset.id === item.id;\n  } else {\n    return 'address' in routeAsset && routeAsset.address.toLowerCase() === item.address.toLowerCase() && routeAsset.tokenId === item.tokenId;\n  }\n};\nconst getPriceDiff = (oldPrice, newPrice) => {\n  const hasPriceDiff = oldPrice !== newPrice;\n  const hasVisiblePriceDiff = formatWeiToDecimal(oldPrice) !== formatWeiToDecimal(newPrice);\n  return {\n    hasPriceDiff,\n    hasVisiblePriceDiff\n  };\n};\nconst isAveragePriceOfPooledAssets = (asset, numberOfAssetsInPool, expectedPrice) => {\n  return !getPriceDiff(calcAvgGroupPoolPrice(asset, numberOfAssetsInPool), expectedPrice).hasVisiblePriceDiff;\n};\nconst isAveragedPrice = (item, items, route, txRoute) => {\n  if (!(route && 'priceInfo' in route.assetOut)) return false;\n  return !!item.marketplace && isPooledMarket(item.marketplace) && isAveragePriceOfPooledAssets(item, items.filter(routeItem => itemInRouteAndSamePool(item, routeItem, txRoute)).length, route.assetOut.priceInfo.basePrice);\n};\nconst getRouteForItem = (item, txRoute) => {\n  return txRoute && txRoute.find(r => r.action === 'Buy' && isTheSame(item, r.assetOut));\n};\nconst itemHasRoute = (item, txRoute) => {\n  return !!getRouteForItem(item, txRoute);\n};\nconst itemInRouteAndSamePool = (item, routeItem, txRoute) => {\n  return itemHasRoute(routeItem, txRoute) && (item.marketplace === Markets.Sudoswap ? isInSameSudoSwapPool(item, routeItem) : isInSameMarketplaceCollection(item, routeItem));\n};\nexport const compareAssetsWithTransactionRoute = (items, txRoute) => {\n  let hasPriceAdjustment = false;\n  const updatedAssets = items.map(item => {\n    const route = getRouteForItem(item, txRoute);\n    if (txRoute && !route) {\n      return {\n        ...item,\n        isUnavailable: true\n      };\n    }\n    let newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo;\n    if (route && 'priceInfo' in route.assetOut) {\n      const {\n        hasPriceDiff,\n        hasVisiblePriceDiff\n      } = getPriceDiff(newPriceInfo.basePrice, route.assetOut.priceInfo.basePrice);\n      newPriceInfo = route.assetOut.priceInfo;\n      hasPriceAdjustment = hasPriceDiff;\n      if (hasVisiblePriceDiff) {\n        if (!isAveragedPrice(item, items, route, txRoute)) {\n          return {\n            ...item,\n            updatedPriceInfo: newPriceInfo\n          };\n        }\n      }\n    }\n    return {\n      ...item,\n      priceInfo: newPriceInfo,\n      updatedPriceInfo: undefined,\n      orderSource: route && 'orderSource' in route.assetOut ? route.assetOut.orderSource : undefined\n    };\n  });\n  return {\n    hasPriceAdjustment,\n    updatedAssets\n  };\n};","map":{"version":3,"names":["isPooledMarket","Markets","calcAvgGroupPoolPrice","formatWeiToDecimal","isInSameMarketplaceCollection","isInSameSudoSwapPool","isTheSame","item","routeAsset","id","address","toLowerCase","tokenId","getPriceDiff","oldPrice","newPrice","hasPriceDiff","hasVisiblePriceDiff","isAveragePriceOfPooledAssets","asset","numberOfAssetsInPool","expectedPrice","isAveragedPrice","items","route","txRoute","assetOut","marketplace","filter","routeItem","itemInRouteAndSamePool","length","priceInfo","basePrice","getRouteForItem","find","r","action","itemHasRoute","Sudoswap","compareAssetsWithTransactionRoute","hasPriceAdjustment","updatedAssets","map","isUnavailable","newPriceInfo","updatedPriceInfo","undefined","orderSource"],"sources":["/home/diep/freelance/interface/src/nft/utils/txRoute/combineItemsWithTxRoute.ts"],"sourcesContent":["import { BuyItem, GenieAsset, isPooledMarket, Markets, PriceInfo, RoutingItem, UpdatedGenieAsset } from 'nft/types'\nimport {\n  calcAvgGroupPoolPrice,\n  formatWeiToDecimal,\n  isInSameMarketplaceCollection,\n  isInSameSudoSwapPool,\n} from 'nft/utils'\n\nconst isTheSame = (item: GenieAsset, routeAsset: BuyItem | PriceInfo) => {\n  // if route asset has id, match by id\n  if ('id' in routeAsset && routeAsset.id) {\n    return routeAsset.id === item.id\n  } else {\n    return (\n      'address' in routeAsset &&\n      routeAsset.address.toLowerCase() === item.address.toLowerCase() &&\n      routeAsset.tokenId === item.tokenId\n    )\n  }\n}\n\nconst getPriceDiff = (oldPrice: string, newPrice: string): { hasPriceDiff: boolean; hasVisiblePriceDiff: boolean } => {\n  const hasPriceDiff = oldPrice !== newPrice\n  const hasVisiblePriceDiff = formatWeiToDecimal(oldPrice) !== formatWeiToDecimal(newPrice)\n\n  return { hasPriceDiff, hasVisiblePriceDiff }\n}\n\nconst isAveragePriceOfPooledAssets = (\n  asset: GenieAsset,\n  numberOfAssetsInPool: number,\n  expectedPrice: string\n): boolean => {\n  return !getPriceDiff(calcAvgGroupPoolPrice(asset, numberOfAssetsInPool), expectedPrice).hasVisiblePriceDiff\n}\n\nconst isAveragedPrice = (\n  item: UpdatedGenieAsset,\n  items: UpdatedGenieAsset[],\n  route: RoutingItem,\n  txRoute?: RoutingItem[]\n): boolean => {\n  if (!(route && 'priceInfo' in route.assetOut)) return false\n\n  return (\n    !!item.marketplace &&\n    isPooledMarket(item.marketplace) &&\n    isAveragePriceOfPooledAssets(\n      item,\n      items.filter((routeItem) => itemInRouteAndSamePool(item, routeItem, txRoute)).length,\n      route.assetOut.priceInfo.basePrice\n    )\n  )\n}\n\nconst getRouteForItem = (item: UpdatedGenieAsset, txRoute?: RoutingItem[]): RoutingItem | undefined => {\n  return txRoute && txRoute.find((r) => r.action === 'Buy' && isTheSame(item, r.assetOut))\n}\n\nconst itemHasRoute = (item: UpdatedGenieAsset, txRoute?: RoutingItem[]): boolean => {\n  return !!getRouteForItem(item, txRoute)\n}\n\nconst itemInRouteAndSamePool = (\n  item: UpdatedGenieAsset,\n  routeItem: UpdatedGenieAsset,\n  txRoute?: RoutingItem[]\n): boolean => {\n  return (\n    itemHasRoute(routeItem, txRoute) &&\n    (item.marketplace === Markets.Sudoswap\n      ? isInSameSudoSwapPool(item, routeItem)\n      : isInSameMarketplaceCollection(item, routeItem))\n  )\n}\n\nexport const compareAssetsWithTransactionRoute = (\n  items: UpdatedGenieAsset[],\n  txRoute?: RoutingItem[]\n): { hasPriceAdjustment: boolean; updatedAssets: UpdatedGenieAsset[] } => {\n  let hasPriceAdjustment = false\n  const updatedAssets = items.map((item) => {\n    const route = getRouteForItem(item, txRoute)\n\n    if (txRoute && !route) {\n      return {\n        ...item,\n        isUnavailable: true,\n      }\n    }\n\n    let newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo\n\n    if (route && 'priceInfo' in route.assetOut) {\n      const { hasPriceDiff, hasVisiblePriceDiff } = getPriceDiff(\n        newPriceInfo.basePrice,\n        route.assetOut.priceInfo.basePrice\n      )\n\n      newPriceInfo = route.assetOut.priceInfo\n      hasPriceAdjustment = hasPriceDiff\n      if (hasVisiblePriceDiff) {\n        if (!isAveragedPrice(item, items, route, txRoute)) {\n          return {\n            ...item,\n            updatedPriceInfo: newPriceInfo,\n          }\n        }\n      }\n    }\n\n    return {\n      ...item,\n      priceInfo: newPriceInfo,\n      updatedPriceInfo: undefined,\n      orderSource: route && 'orderSource' in route.assetOut ? route.assetOut.orderSource : undefined,\n    }\n  })\n\n  return { hasPriceAdjustment, updatedAssets }\n}\n"],"mappings":"AAAA,SAA8BA,cAAc,EAAEC,OAAO,QAAmD,WAAW;AACnH,SACEC,qBAAqB,EACrBC,kBAAkB,EAClBC,6BAA6B,EAC7BC,oBAAoB,QACf,WAAW;AAElB,MAAMC,SAAS,GAAG,CAACC,IAAgB,EAAEC,UAA+B,KAAK;EACvE;EACA,IAAI,IAAI,IAAIA,UAAU,IAAIA,UAAU,CAACC,EAAE,EAAE;IACvC,OAAOD,UAAU,CAACC,EAAE,KAAKF,IAAI,CAACE,EAAE;EAClC,CAAC,MAAM;IACL,OACE,SAAS,IAAID,UAAU,IACvBA,UAAU,CAACE,OAAO,CAACC,WAAW,EAAE,KAAKJ,IAAI,CAACG,OAAO,CAACC,WAAW,EAAE,IAC/DH,UAAU,CAACI,OAAO,KAAKL,IAAI,CAACK,OAAO;EAEvC;AACF,CAAC;AAED,MAAMC,YAAY,GAAG,CAACC,QAAgB,EAAEC,QAAgB,KAA8D;EACpH,MAAMC,YAAY,GAAGF,QAAQ,KAAKC,QAAQ;EAC1C,MAAME,mBAAmB,GAAGd,kBAAkB,CAACW,QAAQ,CAAC,KAAKX,kBAAkB,CAACY,QAAQ,CAAC;EAEzF,OAAO;IAAEC,YAAY;IAAEC;EAAoB,CAAC;AAC9C,CAAC;AAED,MAAMC,4BAA4B,GAAG,CACnCC,KAAiB,EACjBC,oBAA4B,EAC5BC,aAAqB,KACT;EACZ,OAAO,CAACR,YAAY,CAACX,qBAAqB,CAACiB,KAAK,EAAEC,oBAAoB,CAAC,EAAEC,aAAa,CAAC,CAACJ,mBAAmB;AAC7G,CAAC;AAED,MAAMK,eAAe,GAAG,CACtBf,IAAuB,EACvBgB,KAA0B,EAC1BC,KAAkB,EAClBC,OAAuB,KACX;EACZ,IAAI,EAAED,KAAK,IAAI,WAAW,IAAIA,KAAK,CAACE,QAAQ,CAAC,EAAE,OAAO,KAAK;EAE3D,OACE,CAAC,CAACnB,IAAI,CAACoB,WAAW,IAClB3B,cAAc,CAACO,IAAI,CAACoB,WAAW,CAAC,IAChCT,4BAA4B,CAC1BX,IAAI,EACJgB,KAAK,CAACK,MAAM,CAAEC,SAAS,IAAKC,sBAAsB,CAACvB,IAAI,EAAEsB,SAAS,EAAEJ,OAAO,CAAC,CAAC,CAACM,MAAM,EACpFP,KAAK,CAACE,QAAQ,CAACM,SAAS,CAACC,SAAS,CACnC;AAEL,CAAC;AAED,MAAMC,eAAe,GAAG,CAAC3B,IAAuB,EAAEkB,OAAuB,KAA8B;EACrG,OAAOA,OAAO,IAAIA,OAAO,CAACU,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,KAAK,KAAK,IAAI/B,SAAS,CAACC,IAAI,EAAE6B,CAAC,CAACV,QAAQ,CAAC,CAAC;AAC1F,CAAC;AAED,MAAMY,YAAY,GAAG,CAAC/B,IAAuB,EAAEkB,OAAuB,KAAc;EAClF,OAAO,CAAC,CAACS,eAAe,CAAC3B,IAAI,EAAEkB,OAAO,CAAC;AACzC,CAAC;AAED,MAAMK,sBAAsB,GAAG,CAC7BvB,IAAuB,EACvBsB,SAA4B,EAC5BJ,OAAuB,KACX;EACZ,OACEa,YAAY,CAACT,SAAS,EAAEJ,OAAO,CAAC,KAC/BlB,IAAI,CAACoB,WAAW,KAAK1B,OAAO,CAACsC,QAAQ,GAClClC,oBAAoB,CAACE,IAAI,EAAEsB,SAAS,CAAC,GACrCzB,6BAA6B,CAACG,IAAI,EAAEsB,SAAS,CAAC,CAAC;AAEvD,CAAC;AAED,OAAO,MAAMW,iCAAiC,GAAG,CAC/CjB,KAA0B,EAC1BE,OAAuB,KACiD;EACxE,IAAIgB,kBAAkB,GAAG,KAAK;EAC9B,MAAMC,aAAa,GAAGnB,KAAK,CAACoB,GAAG,CAAEpC,IAAI,IAAK;IACxC,MAAMiB,KAAK,GAAGU,eAAe,CAAC3B,IAAI,EAAEkB,OAAO,CAAC;IAE5C,IAAIA,OAAO,IAAI,CAACD,KAAK,EAAE;MACrB,OAAO;QACL,GAAGjB,IAAI;QACPqC,aAAa,EAAE;MACjB,CAAC;IACH;IAEA,IAAIC,YAAY,GAAGtC,IAAI,CAACuC,gBAAgB,GAAGvC,IAAI,CAACuC,gBAAgB,GAAGvC,IAAI,CAACyB,SAAS;IAEjF,IAAIR,KAAK,IAAI,WAAW,IAAIA,KAAK,CAACE,QAAQ,EAAE;MAC1C,MAAM;QAAEV,YAAY;QAAEC;MAAoB,CAAC,GAAGJ,YAAY,CACxDgC,YAAY,CAACZ,SAAS,EACtBT,KAAK,CAACE,QAAQ,CAACM,SAAS,CAACC,SAAS,CACnC;MAEDY,YAAY,GAAGrB,KAAK,CAACE,QAAQ,CAACM,SAAS;MACvCS,kBAAkB,GAAGzB,YAAY;MACjC,IAAIC,mBAAmB,EAAE;QACvB,IAAI,CAACK,eAAe,CAACf,IAAI,EAAEgB,KAAK,EAAEC,KAAK,EAAEC,OAAO,CAAC,EAAE;UACjD,OAAO;YACL,GAAGlB,IAAI;YACPuC,gBAAgB,EAAED;UACpB,CAAC;QACH;MACF;IACF;IAEA,OAAO;MACL,GAAGtC,IAAI;MACPyB,SAAS,EAAEa,YAAY;MACvBC,gBAAgB,EAAEC,SAAS;MAC3BC,WAAW,EAAExB,KAAK,IAAI,aAAa,IAAIA,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACE,QAAQ,CAACsB,WAAW,GAAGD;IACvF,CAAC;EACH,CAAC,CAAC;EAEF,OAAO;IAAEN,kBAAkB;IAAEC;EAAc,CAAC;AAC9C,CAAC"},"metadata":{},"sourceType":"module"}