{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, loadModule, fill, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for graphql package */\nclass GraphQL {\n  constructor() {\n    GraphQL.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'GraphQL';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = GraphQL.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('GraphQL Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    const pkg = loadModule('graphql/execution/execute.js');\n    if (!pkg) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('GraphQL Integration was unable to require graphql/execution package.');\n      return;\n    }\n    fill(pkg, 'execute', function (orig) {\n      return function () {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = _optionalChain([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);\n        const span = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({\n          description: 'execute',\n          op: 'graphql.execute'\n        })]);\n        _optionalChain([scope, 'optionalAccess', _6 => _6.setSpan, 'call', _7 => _7(span)]);\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        const rv = orig.call(this, ...args);\n        if (isThenable(rv)) {\n          return rv.then(res => {\n            _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n            _optionalChain([scope, 'optionalAccess', _10 => _10.setSpan, 'call', _11 => _11(parentSpan)]);\n            return res;\n          });\n        }\n        _optionalChain([span, 'optionalAccess', _12 => _12.finish, 'call', _13 => _13()]);\n        _optionalChain([scope, 'optionalAccess', _14 => _14.setSpan, 'call', _15 => _15(parentSpan)]);\n        return rv;\n      };\n    });\n  }\n}\nGraphQL.__initStatic();\nexport { GraphQL };","map":{"version":3,"sources":["../../../../src/node/integrations/graphql.ts"],"names":[],"mappings":";;;;AAMA;AACA,MAAA,OAAA,CAAA;EAAA,WAAA,GAAA;IAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;EAAA;EACA;AACA;AACA;EACA,OAAA,YAAA,GAAA;IAAA,IAAA,CAAA,EAAA,GAAA,SAAA;EAAA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,IAAA,GAAA,OAAA,CAAA,EAAA;EAAA;;EAEA;AACA;AACA;EACA,SAAA,CAAA,CAAA,EAAA,aAAA,EAAA;IACA,IAAA,gCAAA,CAAA,aAAA,CAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,uEAAA,CAAA;MACA;IACA;IAEA,MAAA,GAAA,GAAA,UAAA,CAEA,8BAAA,CAAA;IAEA,IAAA,CAAA,GAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,sEAAA,CAAA;MACA;IACA;IAEA,IAAA,CAAA,GAAA,EAAA,SAAA,EAAA,UAAA,IAAA,EAAA;MACA,OAAA,YAAA;QACA,MAAA,KAAA,GAAA,aAAA,EAAA,CAAA,QAAA,EAAA;QACA,MAAA,UAAA,GAAA,cAAA,CAAA,CAAA,KAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;QAEA,MAAA,IAAA,GAAA,cAAA,CAAA,CAAA,UAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,CAAA;UACA,WAAA,EAAA,SAAA;UACA,EAAA,EAAA;QACA,CAAA,CAAA,CAAA,CAAA;QAEA,cAAA,CAAA,CAAA,KAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA;QAAA,kCATA,IAAA;UAAA,IAAA;QAAA;QAWA,MAAA,EAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,GAAA,IAAA,CAAA;QAEA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;UACA,OAAA,EAAA,CAAA,IAAA,CAAA,GAAA,IAAA;YACA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;YACA,cAAA,CAAA,CAAA,KAAA,EAAA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA,OAAA,EAAA,MAAA,EAAA,GAAA,IAAA,GAAA,CAAA,UAAA,CAAA,CAAA,CAAA;YAEA,OAAA,GAAA;UACA,CAAA,CAAA;QACA;QAEA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,GAAA,IAAA,GAAA,EAAA,CAAA,CAAA;QACA,cAAA,CAAA,CAAA,KAAA,EAAA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA,OAAA,EAAA,MAAA,EAAA,GAAA,IAAA,GAAA,CAAA,UAAA,CAAA,CAAA,CAAA;QACA,OAAA,EAAA;MACA,CAAA;IACA,CAAA,CAAA;EACA;AACA;AAAA,OAAA,CAAA,YAAA,EAAA","sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\n/** Tracing integration for graphql package */\nexport class GraphQL implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GraphQL';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GraphQL.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('GraphQL Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = loadModule<{\n      [method: string]: (...args: unknown[]) => unknown;\n    }>('graphql/execution/execute.js');\n\n    if (!pkg) {\n      __DEBUG_BUILD__ && logger.error('GraphQL Integration was unable to require graphql/execution package.');\n      return;\n    }\n\n    fill(pkg, 'execute', function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, ...args: unknown[]) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n\n        const span = parentSpan?.startChild({\n          description: 'execute',\n          op: 'graphql.execute',\n        });\n\n        scope?.setSpan(span);\n\n        const rv = orig.call(this, ...args);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.finish();\n            scope?.setSpan(parentSpan);\n\n            return res;\n          });\n        }\n\n        span?.finish();\n        scope?.setSpan(parentSpan);\n        return rv;\n      };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}