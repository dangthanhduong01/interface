{"ast":null,"code":"var _s = $RefreshSig$();\nimport gql from 'graphql-tag';\nimport { useMemo } from 'react';\nimport { useCollectionQuery } from '../__generated__/types-and-hooks';\ngql`\n  query Collection($addresses: [String!]!) {\n    nftCollections(filter: { addresses: $addresses }) {\n      edges {\n        cursor\n        node {\n          bannerImage {\n            url\n          }\n          collectionId\n          description\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          instagramName\n          isVerified\n          name\n          numAssets\n          twitterName\n          nftContracts {\n            address\n            chain\n            name\n            standard\n            symbol\n            totalSupply\n          }\n          traits {\n            name\n            values\n            stats {\n              name\n              value\n              assets\n              listings\n            }\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n            owners\n            totalVolume {\n              value\n              currency\n            }\n            listings {\n              value\n            }\n            volume(duration: DAY) {\n              value\n              currency\n            }\n            volumePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            floorPricePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            marketplaces {\n              marketplace\n              listings\n              floorPrice\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`;\nexport function formatCollectionQueryData(queryCollection, address) {\n  var _queryCollection$mark, _queryCollection$nftC, _queryCollection$nftC2, _ref, _queryCollection$nftC3, _queryCollection$nftC4, _queryCollection$nftC5, _queryCollection$nftC6, _queryCollection$bann, _market$floorPrice, _market$volume, _market$volumePercent, _market$floorPricePer, _queryCollection$bann2, _market$listings, _market$totalVolume, _market$marketplaces, _queryCollection$imag, _queryCollection$imag2;\n  const market = queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$mark = queryCollection.markets) === null || _queryCollection$mark === void 0 ? void 0 : _queryCollection$mark[0];\n  if (!address && !(queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$nftC = queryCollection.nftContracts) === null || _queryCollection$nftC === void 0 ? void 0 : (_queryCollection$nftC2 = _queryCollection$nftC[0]) === null || _queryCollection$nftC2 === void 0 ? void 0 : _queryCollection$nftC2.address)) return {};\n  const traits = {};\n  if (queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.traits) {\n    queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.traits.forEach(trait => {\n      if (trait.name && trait.stats) {\n        traits[trait.name] = trait.stats.map(stats => {\n          return {\n            trait_type: stats.name,\n            trait_value: stats.value,\n            trait_count: stats.assets\n          };\n        });\n      }\n    });\n  }\n  return {\n    address: (_ref = address !== null && address !== void 0 ? address : queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$nftC3 = queryCollection.nftContracts) === null || _queryCollection$nftC3 === void 0 ? void 0 : (_queryCollection$nftC4 = _queryCollection$nftC3[0]) === null || _queryCollection$nftC4 === void 0 ? void 0 : _queryCollection$nftC4.address) !== null && _ref !== void 0 ? _ref : '',\n    isVerified: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.isVerified,\n    name: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.name,\n    description: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.description,\n    standard: queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$nftC5 = queryCollection.nftContracts) === null || _queryCollection$nftC5 === void 0 ? void 0 : (_queryCollection$nftC6 = _queryCollection$nftC5[0]) === null || _queryCollection$nftC6 === void 0 ? void 0 : _queryCollection$nftC6.standard,\n    bannerImageUrl: queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$bann = queryCollection.bannerImage) === null || _queryCollection$bann === void 0 ? void 0 : _queryCollection$bann.url,\n    stats: {\n      num_owners: market === null || market === void 0 ? void 0 : market.owners,\n      floor_price: market === null || market === void 0 ? void 0 : (_market$floorPrice = market.floorPrice) === null || _market$floorPrice === void 0 ? void 0 : _market$floorPrice.value,\n      one_day_volume: market === null || market === void 0 ? void 0 : (_market$volume = market.volume) === null || _market$volume === void 0 ? void 0 : _market$volume.value,\n      one_day_change: market === null || market === void 0 ? void 0 : (_market$volumePercent = market.volumePercentChange) === null || _market$volumePercent === void 0 ? void 0 : _market$volumePercent.value,\n      one_day_floor_change: market === null || market === void 0 ? void 0 : (_market$floorPricePer = market.floorPricePercentChange) === null || _market$floorPricePer === void 0 ? void 0 : _market$floorPricePer.value,\n      banner_image_url: queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$bann2 = queryCollection.bannerImage) === null || _queryCollection$bann2 === void 0 ? void 0 : _queryCollection$bann2.url,\n      total_supply: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.numAssets,\n      total_listings: market === null || market === void 0 ? void 0 : (_market$listings = market.listings) === null || _market$listings === void 0 ? void 0 : _market$listings.value,\n      total_volume: market === null || market === void 0 ? void 0 : (_market$totalVolume = market.totalVolume) === null || _market$totalVolume === void 0 ? void 0 : _market$totalVolume.value\n    },\n    traits,\n    marketplaceCount: market === null || market === void 0 ? void 0 : (_market$marketplaces = market.marketplaces) === null || _market$marketplaces === void 0 ? void 0 : _market$marketplaces.map(market => {\n      var _market$marketplace$t, _market$marketplace, _market$listings2, _market$floorPrice2;\n      return {\n        marketplace: (_market$marketplace$t = (_market$marketplace = market.marketplace) === null || _market$marketplace === void 0 ? void 0 : _market$marketplace.toLowerCase()) !== null && _market$marketplace$t !== void 0 ? _market$marketplace$t : '',\n        count: (_market$listings2 = market.listings) !== null && _market$listings2 !== void 0 ? _market$listings2 : 0,\n        floorPrice: (_market$floorPrice2 = market.floorPrice) !== null && _market$floorPrice2 !== void 0 ? _market$floorPrice2 : 0\n      };\n    }),\n    imageUrl: (_queryCollection$imag = queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$imag2 = queryCollection.image) === null || _queryCollection$imag2 === void 0 ? void 0 : _queryCollection$imag2.url) !== null && _queryCollection$imag !== void 0 ? _queryCollection$imag : '',\n    twitterUrl: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.twitterName,\n    instagram: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.instagramName,\n    discordUrl: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.discordUrl,\n    externalUrl: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.homepageUrl,\n    rarityVerified: false // TODO update when backend supports\n    // isFoundation: boolean, // TODO ask backend to add\n  };\n}\n\nexport function useCollection(address, skip) {\n  _s();\n  var _queryData$nftCollect, _queryData$nftCollect2, _queryData$nftCollect3;\n  const {\n    data: queryData,\n    loading\n  } = useCollectionQuery({\n    variables: {\n      addresses: address\n    },\n    skip\n  });\n  const queryCollection = queryData === null || queryData === void 0 ? void 0 : (_queryData$nftCollect = queryData.nftCollections) === null || _queryData$nftCollect === void 0 ? void 0 : (_queryData$nftCollect2 = _queryData$nftCollect.edges) === null || _queryData$nftCollect2 === void 0 ? void 0 : (_queryData$nftCollect3 = _queryData$nftCollect2[0]) === null || _queryData$nftCollect3 === void 0 ? void 0 : _queryData$nftCollect3.node;\n  return useMemo(() => {\n    return {\n      data: formatCollectionQueryData(queryCollection, address),\n      loading\n    };\n  }, [address, loading, queryCollection]);\n}\n_s(useCollection, \"ywdGTFZpIdv1wgZMstvBYVD1LsA=\", false, function () {\n  return [useCollectionQuery];\n});","map":{"version":3,"names":["gql","useMemo","useCollectionQuery","formatCollectionQueryData","queryCollection","address","market","markets","nftContracts","traits","forEach","trait","name","stats","map","trait_type","trait_value","value","trait_count","assets","isVerified","description","standard","bannerImageUrl","bannerImage","url","num_owners","owners","floor_price","floorPrice","one_day_volume","volume","one_day_change","volumePercentChange","one_day_floor_change","floorPricePercentChange","banner_image_url","total_supply","numAssets","total_listings","listings","total_volume","totalVolume","marketplaceCount","marketplaces","marketplace","toLowerCase","count","imageUrl","image","twitterUrl","twitterName","instagram","instagramName","discordUrl","externalUrl","homepageUrl","rarityVerified","useCollection","skip","data","queryData","loading","variables","addresses","nftCollections","edges","node"],"sources":["/home/diep/freelance/interface/src/graphql/data/nft/Collection.ts"],"sourcesContent":["import gql from 'graphql-tag'\nimport { GenieCollection, Trait } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { NftCollection, useCollectionQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query Collection($addresses: [String!]!) {\n    nftCollections(filter: { addresses: $addresses }) {\n      edges {\n        cursor\n        node {\n          bannerImage {\n            url\n          }\n          collectionId\n          description\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          instagramName\n          isVerified\n          name\n          numAssets\n          twitterName\n          nftContracts {\n            address\n            chain\n            name\n            standard\n            symbol\n            totalSupply\n          }\n          traits {\n            name\n            values\n            stats {\n              name\n              value\n              assets\n              listings\n            }\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n            owners\n            totalVolume {\n              value\n              currency\n            }\n            listings {\n              value\n            }\n            volume(duration: DAY) {\n              value\n              currency\n            }\n            volumePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            floorPricePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            marketplaces {\n              marketplace\n              listings\n              floorPrice\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\nexport function formatCollectionQueryData(\n  queryCollection: NonNullable<NftCollection>,\n  address?: string\n): GenieCollection {\n  const market = queryCollection?.markets?.[0]\n  if (!address && !queryCollection?.nftContracts?.[0]?.address) return {} as GenieCollection\n  const traits = {} as Record<string, Trait[]>\n  if (queryCollection?.traits) {\n    queryCollection?.traits.forEach((trait) => {\n      if (trait.name && trait.stats) {\n        traits[trait.name] = trait.stats.map((stats) => {\n          return {\n            trait_type: stats.name,\n            trait_value: stats.value,\n            trait_count: stats.assets,\n          } as Trait\n        })\n      }\n    })\n  }\n  return {\n    address: address ?? queryCollection?.nftContracts?.[0]?.address ?? '',\n    isVerified: queryCollection?.isVerified,\n    name: queryCollection?.name,\n    description: queryCollection?.description,\n    standard: queryCollection?.nftContracts?.[0]?.standard,\n    bannerImageUrl: queryCollection?.bannerImage?.url,\n    stats: {\n      num_owners: market?.owners,\n      floor_price: market?.floorPrice?.value,\n      one_day_volume: market?.volume?.value,\n      one_day_change: market?.volumePercentChange?.value,\n      one_day_floor_change: market?.floorPricePercentChange?.value,\n      banner_image_url: queryCollection?.bannerImage?.url,\n      total_supply: queryCollection?.numAssets,\n      total_listings: market?.listings?.value,\n      total_volume: market?.totalVolume?.value,\n    },\n    traits,\n    marketplaceCount: market?.marketplaces?.map((market) => {\n      return {\n        marketplace: market.marketplace?.toLowerCase() ?? '',\n        count: market.listings ?? 0,\n        floorPrice: market.floorPrice ?? 0,\n      }\n    }),\n    imageUrl: queryCollection?.image?.url ?? '',\n    twitterUrl: queryCollection?.twitterName,\n    instagram: queryCollection?.instagramName,\n    discordUrl: queryCollection?.discordUrl,\n    externalUrl: queryCollection?.homepageUrl,\n    rarityVerified: false, // TODO update when backend supports\n    // isFoundation: boolean, // TODO ask backend to add\n  }\n}\n\ninterface useCollectionReturnProps {\n  data: GenieCollection\n  loading: boolean\n}\n\nexport function useCollection(address: string, skip?: boolean): useCollectionReturnProps {\n  const { data: queryData, loading } = useCollectionQuery({\n    variables: {\n      addresses: address,\n    },\n    skip,\n  })\n\n  const queryCollection = queryData?.nftCollections?.edges?.[0]?.node as NonNullable<NftCollection>\n  return useMemo(() => {\n    return {\n      data: formatCollectionQueryData(queryCollection, address),\n      loading,\n    }\n  }, [address, loading, queryCollection])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}