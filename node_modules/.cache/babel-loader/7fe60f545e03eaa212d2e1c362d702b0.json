{"ast":null,"code":"var _s = $RefreshSig$();\nimport { i18n } from \"@lingui/core\";\nimport { sendAnalyticsEvent } from '@uniswap/analytics';\nimport { SwapEventName } from '@uniswap/analytics-events';\nimport { SwapRouter, UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk';\nimport { toHex } from '@uniswap/v3-sdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { formatSwapSignedAnalyticsEventProperties } from 'lib/utils/analytics';\nimport { useCallback } from 'react';\nimport { trace } from 'tracing';\nimport { calculateGasMargin } from 'utils/calculateGasMargin';\nimport isZero from 'utils/isZero';\nimport { didUserReject, swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage';\n/** Thrown when gas estimation fails. This class of error usually requires an emulator to determine the root cause. */\nclass GasEstimationError extends Error {\n  constructor() {\n    super( /*i18n*/i18n._(\"Your swap is expected to fail.\"));\n  }\n}\n\n/**\n * Thrown when the user modifies the transaction in-wallet before submitting it.\n * In-wallet calldata modification nullifies any safeguards (eg slippage) from the interface, so we recommend reverting them immediately.\n */\nclass ModifiedSwapError extends Error {\n  constructor() {\n    super( /*i18n*/i18n._(\"Your swap was modified through your wallet. If this was a mistake, please cancel immediately or risk losing your funds.\"));\n  }\n}\nexport function useUniversalRouterSwapCallback(trade, fiatValues, options) {\n  _s();\n  const {\n    account,\n    chainId,\n    provider\n  } = useWeb3React();\n  return useCallback(async () => {\n    return trace('swap.send', async _ref => {\n      let {\n        setTraceData,\n        setTraceStatus,\n        setTraceError\n      } = _ref;\n      try {\n        var _options$deadline;\n        if (!account) throw new Error('missing account');\n        if (!chainId) throw new Error('missing chainId');\n        if (!provider) throw new Error('missing provider');\n        if (!trade) throw new Error('missing trade');\n        setTraceData('slippageTolerance', options.slippageTolerance.toFixed(2));\n        const {\n          calldata: data,\n          value\n        } = SwapRouter.swapERC20CallParameters(trade, {\n          slippageTolerance: options.slippageTolerance,\n          deadlineOrPreviousBlockhash: (_options$deadline = options.deadline) === null || _options$deadline === void 0 ? void 0 : _options$deadline.toString(),\n          inputTokenPermit: options.permit,\n          fee: options.feeOptions\n        });\n        const tx = {\n          from: account,\n          to: UNIVERSAL_ROUTER_ADDRESS(chainId),\n          data,\n          // TODO(https://github.com/Uniswap/universal-router-sdk/issues/113): universal-router-sdk returns a non-hexlified value.\n          ...(value && !isZero(value) ? {\n            value: toHex(value)\n          } : {})\n        };\n        let gasEstimate;\n        try {\n          gasEstimate = await provider.estimateGas(tx);\n        } catch (gasError) {\n          setTraceStatus('failed_precondition');\n          setTraceError(gasError);\n          console.warn(gasError);\n          throw new GasEstimationError();\n        }\n        const gasLimit = calculateGasMargin(gasEstimate);\n        setTraceData('gasLimit', gasLimit.toNumber());\n        const response = await provider.getSigner().sendTransaction({\n          ...tx,\n          gasLimit\n        }).then(response => {\n          sendAnalyticsEvent(SwapEventName.SWAP_SIGNED, formatSwapSignedAnalyticsEventProperties({\n            trade,\n            fiatValues,\n            txHash: response.hash\n          }));\n          if (tx.data !== response.data) {\n            sendAnalyticsEvent(SwapEventName.SWAP_MODIFIED_IN_WALLET, {\n              txHash: response.hash\n            });\n            throw new ModifiedSwapError();\n          }\n          return response;\n        });\n        return response;\n      } catch (swapError) {\n        if (swapError instanceof ModifiedSwapError) throw swapError;\n\n        // Cancellations are not failures, and must be accounted for as 'cancelled'.\n        if (didUserReject(swapError)) setTraceStatus('cancelled');\n\n        // GasEstimationErrors are already traced when they are thrown.\n        if (!(swapError instanceof GasEstimationError)) setTraceError(swapError);\n        throw new Error(swapErrorToUserReadableMessage(swapError));\n      }\n    }, {\n      tags: {\n        is_widget: false\n      }\n    });\n  }, [account, chainId, fiatValues, options.deadline, options.feeOptions, options.permit, options.slippageTolerance, provider, trade]);\n}\n_s(useUniversalRouterSwapCallback, \"Er43l/h37JfIIXMK+0pJt5mfuPM=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"names":["sendAnalyticsEvent","SwapEventName","SwapRouter","UNIVERSAL_ROUTER_ADDRESS","toHex","useWeb3React","formatSwapSignedAnalyticsEventProperties","useCallback","trace","calculateGasMargin","isZero","didUserReject","swapErrorToUserReadableMessage","GasEstimationError","Error","constructor","ModifiedSwapError","useUniversalRouterSwapCallback","trade","fiatValues","options","account","chainId","provider","setTraceData","setTraceStatus","setTraceError","slippageTolerance","toFixed","calldata","data","value","swapERC20CallParameters","deadlineOrPreviousBlockhash","deadline","toString","inputTokenPermit","permit","fee","feeOptions","tx","from","to","gasEstimate","estimateGas","gasError","console","warn","gasLimit","toNumber","response","getSigner","sendTransaction","then","SWAP_SIGNED","txHash","hash","SWAP_MODIFIED_IN_WALLET","swapError","tags","is_widget"],"sources":["/home/diep/freelance/interface/src/hooks/useUniversalRouter.ts"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/abstract-provider'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { t } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { SwapEventName } from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { SwapRouter, UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { FeeOptions, toHex } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { formatSwapSignedAnalyticsEventProperties } from 'lib/utils/analytics'\nimport { useCallback } from 'react'\nimport { trace } from 'tracing'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\nimport isZero from 'utils/isZero'\nimport { didUserReject, swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage'\n\nimport { PermitSignature } from './usePermitAllowance'\n\n/** Thrown when gas estimation fails. This class of error usually requires an emulator to determine the root cause. */\nclass GasEstimationError extends Error {\n  constructor() {\n    super(t`Your swap is expected to fail.`)\n  }\n}\n\n/**\n * Thrown when the user modifies the transaction in-wallet before submitting it.\n * In-wallet calldata modification nullifies any safeguards (eg slippage) from the interface, so we recommend reverting them immediately.\n */\nclass ModifiedSwapError extends Error {\n  constructor() {\n    super(\n      t`Your swap was modified through your wallet. If this was a mistake, please cancel immediately or risk losing your funds.`\n    )\n  }\n}\n\ninterface SwapOptions {\n  slippageTolerance: Percent\n  deadline?: BigNumber\n  permit?: PermitSignature\n  feeOptions?: FeeOptions\n}\n\nexport function useUniversalRouterSwapCallback(\n  trade: Trade<Currency, Currency, TradeType> | undefined,\n  fiatValues: { amountIn: number | undefined; amountOut: number | undefined },\n  options: SwapOptions\n) {\n  const { account, chainId, provider } = useWeb3React()\n\n  return useCallback(async (): Promise<TransactionResponse> => {\n    return trace(\n      'swap.send',\n      async ({ setTraceData, setTraceStatus, setTraceError }) => {\n        try {\n          if (!account) throw new Error('missing account')\n          if (!chainId) throw new Error('missing chainId')\n          if (!provider) throw new Error('missing provider')\n          if (!trade) throw new Error('missing trade')\n\n          setTraceData('slippageTolerance', options.slippageTolerance.toFixed(2))\n          const { calldata: data, value } = SwapRouter.swapERC20CallParameters(trade, {\n            slippageTolerance: options.slippageTolerance,\n            deadlineOrPreviousBlockhash: options.deadline?.toString(),\n            inputTokenPermit: options.permit,\n            fee: options.feeOptions,\n          })\n          const tx = {\n            from: account,\n            to: UNIVERSAL_ROUTER_ADDRESS(chainId),\n            data,\n            // TODO(https://github.com/Uniswap/universal-router-sdk/issues/113): universal-router-sdk returns a non-hexlified value.\n            ...(value && !isZero(value) ? { value: toHex(value) } : {}),\n          }\n\n          let gasEstimate: BigNumber\n          try {\n            gasEstimate = await provider.estimateGas(tx)\n          } catch (gasError) {\n            setTraceStatus('failed_precondition')\n            setTraceError(gasError)\n            console.warn(gasError)\n            throw new GasEstimationError()\n          }\n          const gasLimit = calculateGasMargin(gasEstimate)\n          setTraceData('gasLimit', gasLimit.toNumber())\n          const response = await provider\n            .getSigner()\n            .sendTransaction({ ...tx, gasLimit })\n            .then((response) => {\n              sendAnalyticsEvent(\n                SwapEventName.SWAP_SIGNED,\n                formatSwapSignedAnalyticsEventProperties({ trade, fiatValues, txHash: response.hash })\n              )\n              if (tx.data !== response.data) {\n                sendAnalyticsEvent(SwapEventName.SWAP_MODIFIED_IN_WALLET, { txHash: response.hash })\n                throw new ModifiedSwapError()\n              }\n              return response\n            })\n          return response\n        } catch (swapError: unknown) {\n          if (swapError instanceof ModifiedSwapError) throw swapError\n\n          // Cancellations are not failures, and must be accounted for as 'cancelled'.\n          if (didUserReject(swapError)) setTraceStatus('cancelled')\n\n          // GasEstimationErrors are already traced when they are thrown.\n          if (!(swapError instanceof GasEstimationError)) setTraceError(swapError)\n\n          throw new Error(swapErrorToUserReadableMessage(swapError))\n        }\n      },\n      { tags: { is_widget: false } }\n    )\n  }, [\n    account,\n    chainId,\n    fiatValues,\n    options.deadline,\n    options.feeOptions,\n    options.permit,\n    options.slippageTolerance,\n    provider,\n    trade,\n  ])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}