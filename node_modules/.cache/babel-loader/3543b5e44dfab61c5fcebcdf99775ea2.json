{"ast":null,"code":"import { useTheme as _useTheme } from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/home/diep/freelance/interface/src/pages/Swap/index.tsx\",\n  _s = $RefreshSig$();\nimport { Trans } from \"@lingui/react\";\nimport { sendAnalyticsEvent, Trace, TraceEvent } from '@uniswap/analytics';\nimport { BrowserEvent, InterfaceElementName, InterfaceEventName, InterfacePageName, InterfaceSectionName, SwapEventName } from '@uniswap/analytics-events';\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { useToggleAccountDrawer } from 'components/AccountDrawer';\nimport { sendEvent } from 'components/analytics';\nimport Loader from 'components/Icons/LoadingSpinner';\nimport { NetworkAlert } from 'components/NetworkAlert/NetworkAlert';\nimport PriceImpactWarning from 'components/swap/PriceImpactWarning';\nimport SwapDetailsDropdown from 'components/swap/SwapDetailsDropdown';\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter';\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal';\nimport { MouseoverTooltip } from 'components/Tooltip';\nimport Widget from 'components/Widget';\nimport { isSupportedChain } from 'constants/chains';\nimport { useSwapWidgetEnabled } from 'featureFlags/flags/swapWidget';\nimport useENSAddress from 'hooks/useENSAddress';\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance';\nimport { useSwapCallback } from 'hooks/useSwapCallback';\nimport { useUSDPrice } from 'hooks/useUSDPrice';\nimport JSBI from 'jsbi';\nimport { formatSwapQuoteReceivedEventProperties } from 'lib/utils/analytics';\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { ArrowDown, Info } from 'react-feather';\nimport { useNavigate } from 'react-router-dom';\nimport { Text } from 'rebass';\nimport { TradeState } from 'state/routing/types';\nimport invariant from 'tiny-invariant';\nimport { currencyAmountToPreciseFloat, formatTransactionAmount } from 'utils/formatNumbers';\nimport AddressInputPanel from '../../components/AddressInputPanel';\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button';\nimport { GrayCard } from '../../components/Card';\nimport { AutoColumn } from '../../components/Column';\nimport SwapCurrencyInputPanel from '../../components/CurrencyInputPanel/SwapCurrencyInputPanel';\nimport { AutoRow } from '../../components/Row';\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee';\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal';\nimport { ArrowWrapper, PageWrapper, SwapCallbackError, SwapWrapper } from '../../components/swap/styleds';\nimport SwapHeader from '../../components/swap/SwapHeader';\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink';\nimport { TOKEN_SHORTHANDS } from '../../constants/tokens';\nimport { useCurrency, useDefaultActiveTokens } from '../../hooks/Tokens';\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported';\nimport useWrapCallback, { WrapErrorText, WrapType } from '../../hooks/useWrapCallback';\nimport { Field } from '../../state/swap/actions';\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers } from '../../state/swap/hooks';\nimport swapReducer, { initialState as initialSwapState } from '../../state/swap/reducer';\nimport { useExpertModeManager } from '../../state/user/hooks';\nimport { LinkStyledButton, ThemedText } from '../../theme';\nimport { computeFiatValuePriceImpact } from '../../utils/computeFiatValuePriceImpact';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { computeRealizedPriceImpact, warningSeverity } from '../../utils/prices';\nimport { supportedChainId } from '../../utils/supportedChainId';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ArrowContainer = _styled.div.withConfig({\n  displayName: \"Swap__ArrowContainer\",\n  componentId: \"sc-1es900k-0\"\n})([\"display:inline-block;display:inline-flex;align-items:center;justify-content:center;width:100%;height:100%;\"]);\nconst SwapSection = _styled.div.withConfig({\n  displayName: \"Swap__SwapSection\",\n  componentId: \"sc-1es900k-1\"\n})([\"position:relative;background-color:\", \";border-radius:12px;padding:16px;color:\", \";font-size:14px;line-height:20px;font-weight:500;&:before{box-sizing:border-box;background-size:100%;border-radius:inherit;position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;content:'';border:1px solid \", \";}&:hover:before{border-color:\", \";}&:focus-within:before{border-color:\", \";}\"], _ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.backgroundModule;\n}, _ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.textSecondary;\n}, _ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.backgroundModule;\n}, _ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return theme.stateOverlayHover;\n}, _ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.stateOverlayPressed;\n});\nconst OutputSwapSection = _styled(SwapSection).withConfig({\n  displayName: \"Swap__OutputSwapSection\",\n  componentId: \"sc-1es900k-2\"\n})([\"border-bottom:\", \";border-bottom-left-radius:\", \";border-bottom-right-radius:\", \";\"], _ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return `1px solid ${theme.backgroundSurface}`;\n}, _ref7 => {\n  let {\n    showDetailsDropdown\n  } = _ref7;\n  return showDetailsDropdown && '0';\n}, _ref8 => {\n  let {\n    showDetailsDropdown\n  } = _ref8;\n  return showDetailsDropdown && '0';\n});\nconst DetailsSwapSection = _styled(SwapSection).withConfig({\n  displayName: \"Swap__DetailsSwapSection\",\n  componentId: \"sc-1es900k-3\"\n})([\"padding:0;border-top-left-radius:0;border-top-right-radius:0;\"]);\nfunction getIsValidSwapQuote(trade, tradeState, swapInputError) {\n  return !!swapInputError && !!trade && (tradeState === TradeState.VALID || tradeState === TradeState.SYNCING);\n}\nfunction largerPercentValue(a, b) {\n  if (a && b) {\n    return a.greaterThan(b) ? a : b;\n  } else if (a) {\n    return a;\n  } else if (b) {\n    return b;\n  }\n  return undefined;\n}\nconst TRADE_STRING = 'SwapRouter';\nexport default function Swap(_ref9) {\n  _s();\n  var _loadedUrlParams$Fiel, _loadedUrlParams$Fiel2, _parsedAmounts$indepe3, _parsedAmounts$Field$, _parsedAmounts$Field$2, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount2, _trade$outputAmount2$, _importTokensNotInDef, _importTokensNotInDef2, _currencies$Field$INP, _currencies$Field$OUT, _currencies$Field$INP2;\n  let {\n    className\n  } = _ref9;\n  const navigate = useNavigate();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const loadedUrlParams = useDefaultsFromURLSearch();\n  const [newSwapQuoteNeedsLogging, setNewSwapQuoteNeedsLogging] = useState(true);\n  const [fetchingSwapQuoteStartTime, setFetchingSwapQuoteStartTime] = useState();\n  const swapWidgetEnabled = useSwapWidgetEnabled();\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : (_loadedUrlParams$Fiel = loadedUrlParams[Field.INPUT]) === null || _loadedUrlParams$Fiel === void 0 ? void 0 : _loadedUrlParams$Fiel.currencyId), useCurrency(loadedUrlParams === null || loadedUrlParams === void 0 ? void 0 : (_loadedUrlParams$Fiel2 = loadedUrlParams[Field.OUTPUT]) === null || _loadedUrlParams$Fiel2 === void 0 ? void 0 : _loadedUrlParams$Fiel2.currencyId)];\n  const [dismissTokenWarning, setDismissTokenWarning] = useState(false);\n  const urlLoadedTokens = useMemo(() => {\n    var _filter, _ref10;\n    return (_filter = (_ref10 = [loadedInputCurrency, loadedOutputCurrency]) === null || _ref10 === void 0 ? void 0 : _ref10.filter(c => {\n      var _c$isToken;\n      return (_c$isToken = c === null || c === void 0 ? void 0 : c.isToken) !== null && _c$isToken !== void 0 ? _c$isToken : false;\n    })) !== null && _filter !== void 0 ? _filter : [];\n  }, [loadedInputCurrency, loadedOutputCurrency]);\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n  }, []);\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useDefaultActiveTokens();\n  const importTokensNotInDefault = useMemo(() => urlLoadedTokens && urlLoadedTokens.filter(token => {\n    return !(token.address in defaultTokens);\n  }).filter(token => {\n    // Any token addresses that are loaded from the shorthands map do not need to show the import URL\n    const supported = supportedChainId(chainId);\n    if (!supported) return true;\n    return !Object.keys(TOKEN_SHORTHANDS).some(shorthand => {\n      const shorthandTokenAddress = TOKEN_SHORTHANDS[shorthand][supported];\n      return shorthandTokenAddress && shorthandTokenAddress === token.address;\n    });\n  }), [chainId, defaultTokens, urlLoadedTokens]);\n  const theme = _useTheme();\n\n  // toggle wallet when disconnected\n  const toggleWalletDrawer = useToggleAccountDrawer();\n\n  // for expert mode\n  const [isExpertMode] = useExpertModeManager();\n  // swap state\n  const [state, dispatch] = useReducer(swapReducer, initialSwapState);\n  const {\n    typedValue,\n    recipient,\n    independentField\n  } = state;\n  const {\n    trade: {\n      state: tradeState,\n      trade\n    },\n    allowedSlippage,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError\n  } = useDerivedSwapInfo(state);\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue);\n  const showWrap = wrapType !== WrapType.NOT_APPLICABLE;\n  const {\n    address: recipientAddress\n  } = useENSAddress(recipient);\n  const parsedAmounts = useMemo(() => showWrap ? {\n    [Field.INPUT]: parsedAmount,\n    [Field.OUTPUT]: parsedAmount\n  } : {\n    [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.inputAmount,\n    [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade === null || trade === void 0 ? void 0 : trade.outputAmount\n  }, [independentField, parsedAmount, showWrap, trade]);\n  const fiatValueInput = useUSDPrice(parsedAmounts[Field.INPUT]);\n  const fiatValueOutput = useUSDPrice(parsedAmounts[Field.OUTPUT]);\n  const [routeNotFound, routeIsLoading, routeIsSyncing] = useMemo(() => [!(trade === null || trade === void 0 ? void 0 : trade.swaps), TradeState.LOADING === tradeState, TradeState.SYNCING === tradeState], [trade, tradeState]);\n  const fiatValueTradeInput = useUSDPrice(trade === null || trade === void 0 ? void 0 : trade.inputAmount);\n  const fiatValueTradeOutput = useUSDPrice(trade === null || trade === void 0 ? void 0 : trade.outputAmount);\n  const stablecoinPriceImpact = useMemo(() => routeIsSyncing || !trade ? undefined : computeFiatValuePriceImpact(fiatValueTradeInput.data, fiatValueTradeOutput.data), [fiatValueTradeInput, fiatValueTradeOutput, routeIsSyncing, trade]);\n  const {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  } = useSwapActionHandlers(dispatch);\n  const isValid = !swapInputError;\n  const dependentField = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  const handleTypeInput = useCallback(value => {\n    onUserInput(Field.INPUT, value);\n  }, [onUserInput]);\n  const handleTypeOutput = useCallback(value => {\n    onUserInput(Field.OUTPUT, value);\n  }, [onUserInput]);\n\n  // reset if they close warning without tokens in params\n  const handleDismissTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true);\n    navigate('/swap/');\n  }, [navigate]);\n\n  // modal and loading\n  const [{\n    showConfirm,\n    tradeToConfirm,\n    swapErrorMessage,\n    attemptingTxn,\n    txHash\n  }, setSwapState] = useState({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined\n  });\n  const formattedAmounts = useMemo(() => {\n    var _parsedAmounts$indepe, _parsedAmounts$indepe2;\n    return {\n      [independentField]: typedValue,\n      [dependentField]: showWrap ? (_parsedAmounts$indepe = (_parsedAmounts$indepe2 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe2 === void 0 ? void 0 : _parsedAmounts$indepe2.toExact()) !== null && _parsedAmounts$indepe !== void 0 ? _parsedAmounts$indepe : '' : formatTransactionAmount(currencyAmountToPreciseFloat(parsedAmounts[dependentField]))\n    };\n  }, [dependentField, independentField, parsedAmounts, showWrap, typedValue]);\n  const userHasSpecifiedInputOutput = Boolean(currencies[Field.INPUT] && currencies[Field.OUTPUT] && ((_parsedAmounts$indepe3 = parsedAmounts[independentField]) === null || _parsedAmounts$indepe3 === void 0 ? void 0 : _parsedAmounts$indepe3.greaterThan(JSBI.BigInt(0))));\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade === null || trade === void 0 ? void 0 : trade.maximumAmountIn(allowedSlippage);\n    return (maximumAmountIn === null || maximumAmountIn === void 0 ? void 0 : maximumAmountIn.currency.isToken) ? maximumAmountIn : undefined;\n  }, [allowedSlippage, trade]);\n  const allowance = usePermit2Allowance(maximumAmountIn !== null && maximumAmountIn !== void 0 ? maximumAmountIn : ((_parsedAmounts$Field$ = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.currency.isToken) ? parsedAmounts[Field.INPUT] : undefined, isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined);\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading;\n  const [isAllowancePending, setIsAllowancePending] = useState(false);\n  const updateAllowance = useCallback(async () => {\n    invariant(allowance.state === AllowanceState.REQUIRED);\n    setIsAllowancePending(true);\n    try {\n      await allowance.approveAndPermit();\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\n        chain_id: chainId,\n        token_symbol: maximumAmountIn === null || maximumAmountIn === void 0 ? void 0 : maximumAmountIn.currency.symbol,\n        token_address: maximumAmountIn === null || maximumAmountIn === void 0 ? void 0 : maximumAmountIn.currency.address\n      });\n    } catch (e) {\n      console.error(e);\n    } finally {\n      setIsAllowancePending(false);\n    }\n  }, [allowance, chainId, maximumAmountIn === null || maximumAmountIn === void 0 ? void 0 : maximumAmountIn.currency.address, maximumAmountIn === null || maximumAmountIn === void 0 ? void 0 : maximumAmountIn.currency.symbol]);\n  const maxInputAmount = useMemo(() => maxAmountSpend(currencyBalances[Field.INPUT]), [currencyBalances]);\n  const showMaxButton = Boolean((maxInputAmount === null || maxInputAmount === void 0 ? void 0 : maxInputAmount.greaterThan(0)) && !((_parsedAmounts$Field$2 = parsedAmounts[Field.INPUT]) === null || _parsedAmounts$Field$2 === void 0 ? void 0 : _parsedAmounts$Field$2.equalTo(maxInputAmount)));\n  const swapFiatValues = useMemo(() => {\n    return {\n      amountIn: fiatValueTradeInput.data,\n      amountOut: fiatValueTradeOutput.data\n    };\n  }, [fiatValueTradeInput, fiatValueTradeOutput]);\n\n  // the callback to execute the swap\n  const {\n    callback: swapCallback\n  } = useSwapCallback(trade, swapFiatValues, allowedSlippage, allowance.state === AllowanceState.ALLOWED ? allowance.permitSignature : undefined);\n  const handleSwap = useCallback(() => {\n    if (!swapCallback) {\n      return;\n    }\n    if (stablecoinPriceImpact && !confirmPriceImpactWithoutFee(stablecoinPriceImpact)) {\n      return;\n    }\n    setSwapState({\n      attemptingTxn: true,\n      tradeToConfirm,\n      showConfirm,\n      swapErrorMessage: undefined,\n      txHash: undefined\n    });\n    swapCallback().then(hash => {\n      var _trade$inputAmount, _trade$inputAmount$cu, _trade$outputAmount, _trade$outputAmount$c;\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: undefined,\n        txHash: hash\n      });\n      sendEvent({\n        category: 'Swap',\n        action: 'transaction hash',\n        label: hash\n      });\n      sendEvent({\n        category: 'Swap',\n        action: recipient === null ? 'Swap w/o Send' : (recipientAddress !== null && recipientAddress !== void 0 ? recipientAddress : recipient) === account ? 'Swap w/o Send + recipient' : 'Swap w/ Send',\n        label: [TRADE_STRING, trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : (_trade$inputAmount$cu = _trade$inputAmount.currency) === null || _trade$inputAmount$cu === void 0 ? void 0 : _trade$inputAmount$cu.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : (_trade$outputAmount$c = _trade$outputAmount.currency) === null || _trade$outputAmount$c === void 0 ? void 0 : _trade$outputAmount$c.symbol, 'MH'].join('/')\n      });\n    }).catch(error => {\n      setSwapState({\n        attemptingTxn: false,\n        tradeToConfirm,\n        showConfirm,\n        swapErrorMessage: error.message,\n        txHash: undefined\n      });\n    });\n  }, [swapCallback, stablecoinPriceImpact, tradeToConfirm, showConfirm, recipient, recipientAddress, account, trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol, trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol]);\n\n  // errors\n  const [swapQuoteReceivedDate, setSwapQuoteReceivedDate] = useState();\n\n  // warnings on the greater of fiat value price impact and execution price impact\n  const {\n    priceImpactSeverity,\n    largerPriceImpact\n  } = useMemo(() => {\n    const marketPriceImpact = (trade === null || trade === void 0 ? void 0 : trade.priceImpact) ? computeRealizedPriceImpact(trade) : undefined;\n    const largerPriceImpact = largerPercentValue(marketPriceImpact, stablecoinPriceImpact);\n    return {\n      priceImpactSeverity: warningSeverity(largerPriceImpact),\n      largerPriceImpact\n    };\n  }, [stablecoinPriceImpact, trade]);\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({\n      showConfirm: false,\n      tradeToConfirm,\n      attemptingTxn,\n      swapErrorMessage,\n      txHash\n    });\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '');\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash]);\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({\n      tradeToConfirm: trade,\n      swapErrorMessage,\n      txHash,\n      attemptingTxn,\n      showConfirm\n    });\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash]);\n  const handleInputSelect = useCallback(inputCurrency => {\n    onCurrencySelection(Field.INPUT, inputCurrency);\n  }, [onCurrencySelection]);\n  const handleMaxInput = useCallback(() => {\n    maxInputAmount && onUserInput(Field.INPUT, maxInputAmount.toExact());\n    sendEvent({\n      category: 'Swap',\n      action: 'Max'\n    });\n  }, [maxInputAmount, onUserInput]);\n  const handleOutputSelect = useCallback(outputCurrency => onCurrencySelection(Field.OUTPUT, outputCurrency), [onCurrencySelection]);\n  const swapIsUnsupported = useIsSwapUnsupported(currencies[Field.INPUT], currencies[Field.OUTPUT]);\n  const priceImpactTooHigh = priceImpactSeverity > 3 && !isExpertMode;\n  const showPriceImpactWarning = largerPriceImpact && priceImpactSeverity > 3;\n\n  // Handle time based logging events and event properties.\n  useEffect(() => {\n    const now = new Date();\n    // If a trade exists, and we need to log the receipt of this new swap quote:\n    if (newSwapQuoteNeedsLogging && !!trade) {\n      var _trade$gasUseEstimate;\n      // Set the current datetime as the time of receipt of latest swap quote.\n      setSwapQuoteReceivedDate(now);\n      // Log swap quote.\n      sendAnalyticsEvent(SwapEventName.SWAP_QUOTE_RECEIVED, formatSwapQuoteReceivedEventProperties(trade, (_trade$gasUseEstimate = trade.gasUseEstimateUSD) !== null && _trade$gasUseEstimate !== void 0 ? _trade$gasUseEstimate : undefined, fetchingSwapQuoteStartTime));\n      // Latest swap quote has just been logged, so we don't need to log the current trade anymore\n      // unless user inputs change again and a new trade is in the process of being generated.\n      setNewSwapQuoteNeedsLogging(false);\n      // New quote is not being fetched, so set start time of quote fetch to undefined.\n      setFetchingSwapQuoteStartTime(undefined);\n    }\n    // If another swap quote is being loaded based on changed user inputs:\n    if (routeIsLoading) {\n      setNewSwapQuoteNeedsLogging(true);\n      if (!fetchingSwapQuoteStartTime) setFetchingSwapQuoteStartTime(now);\n    }\n  }, [newSwapQuoteNeedsLogging, routeIsSyncing, routeIsLoading, fetchingSwapQuoteStartTime, trade, setSwapQuoteReceivedDate]);\n  const showDetailsDropdown = Boolean(!showWrap && userHasSpecifiedInputOutput && (trade || routeIsLoading || routeIsSyncing));\n  return /*#__PURE__*/_jsxDEV(Trace, {\n    page: InterfacePageName.SWAP_PAGE,\n    shouldLogImpression: true,\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TokenSafetyModal, {\n        isOpen: importTokensNotInDefault.length > 0 && !dismissTokenWarning,\n        tokenAddress: (_importTokensNotInDef = importTokensNotInDefault[0]) === null || _importTokensNotInDef === void 0 ? void 0 : _importTokensNotInDef.address,\n        secondTokenAddress: (_importTokensNotInDef2 = importTokensNotInDefault[1]) === null || _importTokensNotInDef2 === void 0 ? void 0 : _importTokensNotInDef2.address,\n        onContinue: handleConfirmTokenWarning,\n        onCancel: handleDismissTokenWarning,\n        showCancel: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PageWrapper, {\n        children: [swapWidgetEnabled ? /*#__PURE__*/_jsxDEV(Widget, {\n          defaultTokens: {\n            [Field.INPUT]: loadedInputCurrency !== null && loadedInputCurrency !== void 0 ? loadedInputCurrency : undefined,\n            [Field.OUTPUT]: loadedOutputCurrency !== null && loadedOutputCurrency !== void 0 ? loadedOutputCurrency : undefined\n          },\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(SwapWrapper, {\n          chainId: chainId,\n          className: className,\n          id: \"swap-page\",\n          children: [/*#__PURE__*/_jsxDEV(SwapHeader, {\n            allowedSlippage: allowedSlippage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ConfirmSwapModal, {\n            isOpen: showConfirm,\n            trade: trade,\n            originalTrade: tradeToConfirm,\n            onAcceptChanges: handleAcceptChanges,\n            attemptingTxn: attemptingTxn,\n            txHash: txHash,\n            recipient: recipient,\n            allowedSlippage: allowedSlippage,\n            onConfirm: handleSwap,\n            swapErrorMessage: swapErrorMessage,\n            onDismiss: handleConfirmDismiss,\n            swapQuoteReceivedDate: swapQuoteReceivedDate,\n            fiatValueInput: fiatValueTradeInput,\n            fiatValueOutput: fiatValueTradeOutput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'relative'\n            },\n            children: [/*#__PURE__*/_jsxDEV(SwapSection, {\n              children: /*#__PURE__*/_jsxDEV(Trace, {\n                section: InterfaceSectionName.CURRENCY_INPUT_PANEL,\n                children: /*#__PURE__*/_jsxDEV(SwapCurrencyInputPanel, {\n                  label: independentField === Field.OUTPUT && !showWrap ? /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"From (at most)\"\n                  }, void 0, false, void 0, this) : /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"From\"\n                  }, void 0, false, void 0, this),\n                  value: formattedAmounts[Field.INPUT],\n                  showMaxButton: showMaxButton,\n                  currency: (_currencies$Field$INP = currencies[Field.INPUT]) !== null && _currencies$Field$INP !== void 0 ? _currencies$Field$INP : null,\n                  onUserInput: handleTypeInput,\n                  onMax: handleMaxInput,\n                  fiatValue: fiatValueInput,\n                  onCurrencySelect: handleInputSelect,\n                  otherCurrency: currencies[Field.OUTPUT],\n                  showCommonBases: true,\n                  id: InterfaceSectionName.CURRENCY_INPUT_PANEL,\n                  loading: independentField === Field.OUTPUT && routeIsSyncing\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ArrowWrapper, {\n              clickable: isSupportedChain(chainId),\n              children: /*#__PURE__*/_jsxDEV(TraceEvent, {\n                events: [BrowserEvent.onClick],\n                name: SwapEventName.SWAP_TOKENS_REVERSED,\n                element: InterfaceElementName.SWAP_TOKENS_REVERSE_ARROW_BUTTON,\n                children: /*#__PURE__*/_jsxDEV(ArrowContainer, {\n                  \"data-testid\": \"swap-currency-button\",\n                  onClick: () => {\n                    onSwitchTokens();\n                  },\n                  color: theme.textPrimary,\n                  children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                    size: \"16\",\n                    color: currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.textPrimary : theme.textTertiary\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 557,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n            gap: \"md\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(OutputSwapSection, {\n                showDetailsDropdown: showDetailsDropdown,\n                children: [/*#__PURE__*/_jsxDEV(Trace, {\n                  section: InterfaceSectionName.CURRENCY_OUTPUT_PANEL,\n                  children: /*#__PURE__*/_jsxDEV(SwapCurrencyInputPanel, {\n                    value: formattedAmounts[Field.OUTPUT],\n                    onUserInput: handleTypeOutput,\n                    label: independentField === Field.INPUT && !showWrap ? /*#__PURE__*/_jsxDEV(Trans, {\n                      id: \"To (at least)\"\n                    }, void 0, false, void 0, this) : /*#__PURE__*/_jsxDEV(Trans, {\n                      id: \"To\"\n                    }, void 0, false, void 0, this),\n                    showMaxButton: false,\n                    hideBalance: false,\n                    fiatValue: fiatValueOutput,\n                    priceImpact: stablecoinPriceImpact,\n                    currency: (_currencies$Field$OUT = currencies[Field.OUTPUT]) !== null && _currencies$Field$OUT !== void 0 ? _currencies$Field$OUT : null,\n                    onCurrencySelect: handleOutputSelect,\n                    otherCurrency: currencies[Field.INPUT],\n                    showCommonBases: true,\n                    id: InterfaceSectionName.CURRENCY_OUTPUT_PANEL,\n                    loading: independentField === Field.INPUT && routeIsSyncing\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 571,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 21\n                }, this), recipient !== null && !showWrap ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n                    justify: \"space-between\",\n                    style: {\n                      padding: '0 1rem'\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(ArrowWrapper, {\n                      clickable: false,\n                      children: /*#__PURE__*/_jsxDEV(ArrowDown, {\n                        size: \"16\",\n                        color: theme.textSecondary\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 598,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 597,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(LinkStyledButton, {\n                      id: \"remove-recipient-button\",\n                      onClick: () => onChangeRecipient(null),\n                      children: /*#__PURE__*/_jsxDEV(Trans, {\n                        id: \"- Remove recipient\"\n                      }, void 0, false, void 0, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 600,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 596,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n                    id: \"recipient\",\n                    value: recipient,\n                    onChange: onChangeRecipient\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 604,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 19\n              }, this), showDetailsDropdown && /*#__PURE__*/_jsxDEV(DetailsSwapSection, {\n                children: /*#__PURE__*/_jsxDEV(SwapDetailsDropdown, {\n                  trade: trade,\n                  syncing: routeIsSyncing,\n                  loading: routeIsLoading,\n                  allowedSlippage: allowedSlippage\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 610,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 609,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 17\n            }, this), showPriceImpactWarning && /*#__PURE__*/_jsxDEV(PriceImpactWarning, {\n              priceImpact: largerPriceImpact\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 44\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [swapIsUnsupported ? /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n                disabled: true,\n                children: /*#__PURE__*/_jsxDEV(ThemedText.DeprecatedMain, {\n                  mb: \"4px\",\n                  children: /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Unsupported Asset\"\n                  }, void 0, false, void 0, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 623,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 622,\n                columnNumber: 21\n              }, this) : !account ? /*#__PURE__*/_jsxDEV(TraceEvent, {\n                events: [BrowserEvent.onClick],\n                name: InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED,\n                properties: {\n                  received_swap_quote: getIsValidSwapQuote(trade, tradeState, swapInputError)\n                },\n                element: InterfaceElementName.CONNECT_WALLET_BUTTON,\n                children: /*#__PURE__*/_jsxDEV(ButtonLight, {\n                  onClick: toggleWalletDrawer,\n                  fontWeight: 600,\n                  children: /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Connect Wallet\"\n                  }, void 0, false, void 0, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 634,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 628,\n                columnNumber: 21\n              }, this) : showWrap ? /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n                disabled: Boolean(wrapInputError),\n                onClick: onWrap,\n                fontWeight: 600,\n                children: wrapInputError ? /*#__PURE__*/_jsxDEV(WrapErrorText, {\n                  wrapInputError: wrapInputError\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 641,\n                  columnNumber: 25\n                }, this) : wrapType === WrapType.WRAP ? /*#__PURE__*/_jsxDEV(Trans, {\n                  id: \"Wrap\"\n                }, void 0, false, void 0, this) : wrapType === WrapType.UNWRAP ? /*#__PURE__*/_jsxDEV(Trans, {\n                  id: \"Unwrap\"\n                }, void 0, false, void 0, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 639,\n                columnNumber: 21\n              }, this) : routeNotFound && userHasSpecifiedInputOutput && !routeIsLoading && !routeIsSyncing ? /*#__PURE__*/_jsxDEV(GrayCard, {\n                style: {\n                  textAlign: 'center'\n                },\n                children: /*#__PURE__*/_jsxDEV(ThemedText.DeprecatedMain, {\n                  mb: \"4px\",\n                  children: /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Insufficient liquidity for this trade.\"\n                  }, void 0, false, void 0, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 650,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 649,\n                columnNumber: 21\n              }, this) : isValid && allowance.state === AllowanceState.REQUIRED ? /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n                onClick: updateAllowance,\n                disabled: isAllowancePending || isApprovalLoading,\n                style: {\n                  gap: 14\n                },\n                children: isAllowancePending ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Loader, {\n                    size: \"20px\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 662,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Approve in your wallet\"\n                  }, void 0, false, void 0, this)]\n                }, void 0, true) : isApprovalLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(Loader, {\n                    size: \"20px\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 667,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Approval pending\"\n                  }, void 0, false, void 0, this)]\n                }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    style: {\n                      height: 20\n                    },\n                    children: /*#__PURE__*/_jsxDEV(MouseoverTooltip, {\n                      text: /*#__PURE__*/_jsxDEV(Trans, {\n                        id: \"Permission is required for Uniswap to swap each token. This will expire after one month for your security.\"\n                      }, void 0, false, void 0, this),\n                      children: /*#__PURE__*/_jsxDEV(Info, {\n                        size: 20\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 681,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 673,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 672,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Approve use of {0}\",\n                    values: {\n                      0: (_currencies$Field$INP2 = currencies[Field.INPUT]) === null || _currencies$Field$INP2 === void 0 ? void 0 : _currencies$Field$INP2.symbol\n                    }\n                  }, void 0, false, void 0, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 655,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(ButtonError, {\n                onClick: () => {\n                  if (isExpertMode) {\n                    handleSwap();\n                  } else {\n                    setSwapState({\n                      tradeToConfirm: trade,\n                      attemptingTxn: false,\n                      swapErrorMessage: undefined,\n                      showConfirm: true,\n                      txHash: undefined\n                    });\n                  }\n                },\n                id: \"swap-button\",\n                disabled: !isValid || routeIsSyncing || routeIsLoading || priceImpactTooHigh || allowance.state !== AllowanceState.ALLOWED,\n                error: isValid && priceImpactSeverity > 2 && allowance.state === AllowanceState.ALLOWED,\n                children: /*#__PURE__*/_jsxDEV(Text, {\n                  fontSize: 20,\n                  fontWeight: 600,\n                  children: swapInputError ? swapInputError : routeIsSyncing || routeIsLoading ? /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Swap\"\n                  }, void 0, false, void 0, this) : priceImpactTooHigh ? /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Price Impact Too High\"\n                  }, void 0, false, void 0, this) : priceImpactSeverity > 2 ? /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Swap Anyway\"\n                  }, void 0, false, void 0, this) : /*#__PURE__*/_jsxDEV(Trans, {\n                    id: \"Swap\"\n                  }, void 0, false, void 0, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 713,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 21\n              }, this), isExpertMode && swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n                error: swapErrorMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 728,\n                columnNumber: 55\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(NetworkAlert, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SwitchLocaleLink, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this), !swapIsUnsupported ? null : /*#__PURE__*/_jsxDEV(UnsupportedCurrencyFooter, {\n        show: swapIsUnsupported,\n        currencies: [currencies[Field.INPUT], currencies[Field.OUTPUT]]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 5\n  }, this);\n}\n_s(Swap, \"rUW43/7d4XP+HUmCVOFirBCO4xE=\", false, function () {\n  return [useNavigate, useWeb3React, useDefaultsFromURLSearch, useSwapWidgetEnabled, useCurrency, useCurrency, useDefaultActiveTokens, _useTheme, useToggleAccountDrawer, useExpertModeManager, useDerivedSwapInfo, useWrapCallback, useENSAddress, useUSDPrice, useUSDPrice, useUSDPrice, useUSDPrice, useSwapActionHandlers, usePermit2Allowance, useSwapCallback, useIsSwapUnsupported];\n});\n_c = Swap;\nvar _c;\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"names":["sendAnalyticsEvent","Trace","TraceEvent","BrowserEvent","InterfaceElementName","InterfaceEventName","InterfacePageName","InterfaceSectionName","SwapEventName","UNIVERSAL_ROUTER_ADDRESS","useWeb3React","useToggleAccountDrawer","sendEvent","Loader","NetworkAlert","PriceImpactWarning","SwapDetailsDropdown","UnsupportedCurrencyFooter","TokenSafetyModal","MouseoverTooltip","Widget","isSupportedChain","useSwapWidgetEnabled","useENSAddress","usePermit2Allowance","AllowanceState","useSwapCallback","useUSDPrice","JSBI","formatSwapQuoteReceivedEventProperties","useCallback","useEffect","useMemo","useReducer","useState","ArrowDown","Info","useNavigate","Text","TradeState","invariant","currencyAmountToPreciseFloat","formatTransactionAmount","AddressInputPanel","ButtonError","ButtonLight","ButtonPrimary","GrayCard","AutoColumn","SwapCurrencyInputPanel","AutoRow","confirmPriceImpactWithoutFee","ConfirmSwapModal","ArrowWrapper","PageWrapper","SwapCallbackError","SwapWrapper","SwapHeader","SwitchLocaleLink","TOKEN_SHORTHANDS","useCurrency","useDefaultActiveTokens","useIsSwapUnsupported","useWrapCallback","WrapErrorText","WrapType","Field","useDefaultsFromURLSearch","useDerivedSwapInfo","useSwapActionHandlers","swapReducer","initialState","initialSwapState","useExpertModeManager","LinkStyledButton","ThemedText","computeFiatValuePriceImpact","maxAmountSpend","computeRealizedPriceImpact","warningSeverity","supportedChainId","ArrowContainer","styled","div","SwapSection","theme","backgroundModule","textSecondary","stateOverlayHover","stateOverlayPressed","OutputSwapSection","backgroundSurface","showDetailsDropdown","DetailsSwapSection","getIsValidSwapQuote","trade","tradeState","swapInputError","VALID","SYNCING","largerPercentValue","a","b","greaterThan","undefined","TRADE_STRING","Swap","className","navigate","account","chainId","loadedUrlParams","newSwapQuoteNeedsLogging","setNewSwapQuoteNeedsLogging","fetchingSwapQuoteStartTime","setFetchingSwapQuoteStartTime","swapWidgetEnabled","loadedInputCurrency","loadedOutputCurrency","INPUT","currencyId","OUTPUT","dismissTokenWarning","setDismissTokenWarning","urlLoadedTokens","filter","c","isToken","handleConfirmTokenWarning","defaultTokens","importTokensNotInDefault","token","address","supported","Object","keys","some","shorthand","shorthandTokenAddress","useTheme","toggleWalletDrawer","isExpertMode","state","dispatch","typedValue","recipient","independentField","allowedSlippage","currencyBalances","parsedAmount","currencies","inputError","wrapType","execute","onWrap","wrapInputError","showWrap","NOT_APPLICABLE","recipientAddress","parsedAmounts","inputAmount","outputAmount","fiatValueInput","fiatValueOutput","routeNotFound","routeIsLoading","routeIsSyncing","swaps","LOADING","fiatValueTradeInput","fiatValueTradeOutput","stablecoinPriceImpact","data","onSwitchTokens","onCurrencySelection","onUserInput","onChangeRecipient","isValid","dependentField","handleTypeInput","value","handleTypeOutput","handleDismissTokenWarning","showConfirm","tradeToConfirm","swapErrorMessage","attemptingTxn","txHash","setSwapState","formattedAmounts","toExact","userHasSpecifiedInputOutput","Boolean","BigInt","maximumAmountIn","currency","allowance","isApprovalLoading","REQUIRED","isAllowancePending","setIsAllowancePending","updateAllowance","approveAndPermit","APPROVE_TOKEN_TXN_SUBMITTED","chain_id","token_symbol","symbol","token_address","e","console","error","maxInputAmount","showMaxButton","equalTo","swapFiatValues","amountIn","amountOut","callback","swapCallback","ALLOWED","permitSignature","handleSwap","then","hash","category","action","label","join","catch","message","swapQuoteReceivedDate","setSwapQuoteReceivedDate","priceImpactSeverity","largerPriceImpact","marketPriceImpact","priceImpact","handleConfirmDismiss","handleAcceptChanges","handleInputSelect","inputCurrency","handleMaxInput","handleOutputSelect","outputCurrency","swapIsUnsupported","priceImpactTooHigh","showPriceImpactWarning","now","Date","SWAP_QUOTE_RECEIVED","gasUseEstimateUSD","SWAP_PAGE","length","display","CURRENCY_INPUT_PANEL","onClick","SWAP_TOKENS_REVERSED","SWAP_TOKENS_REVERSE_ARROW_BUTTON","textPrimary","textTertiary","CURRENCY_OUTPUT_PANEL","padding","CONNECT_WALLET_BUTTON_CLICKED","received_swap_quote","CONNECT_WALLET_BUTTON","WRAP","UNWRAP","textAlign","gap","height"],"sources":["/home/diep/freelance/interface/src/pages/Swap/index.tsx"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, Trace, TraceEvent } from '@uniswap/analytics'\nimport {\n  BrowserEvent,\n  InterfaceElementName,\n  InterfaceEventName,\n  InterfacePageName,\n  InterfaceSectionName,\n  SwapEventName,\n} from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToggleAccountDrawer } from 'components/AccountDrawer'\nimport { sendEvent } from 'components/analytics'\nimport Loader from 'components/Icons/LoadingSpinner'\nimport { NetworkAlert } from 'components/NetworkAlert/NetworkAlert'\nimport PriceImpactWarning from 'components/swap/PriceImpactWarning'\nimport SwapDetailsDropdown from 'components/swap/SwapDetailsDropdown'\nimport UnsupportedCurrencyFooter from 'components/swap/UnsupportedCurrencyFooter'\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport Widget from 'components/Widget'\nimport { isSupportedChain } from 'constants/chains'\nimport { useSwapWidgetEnabled } from 'featureFlags/flags/swapWidget'\nimport useENSAddress from 'hooks/useENSAddress'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useSwapCallback } from 'hooks/useSwapCallback'\nimport { useUSDPrice } from 'hooks/useUSDPrice'\nimport JSBI from 'jsbi'\nimport { formatSwapQuoteReceivedEventProperties } from 'lib/utils/analytics'\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react'\nimport { ReactNode } from 'react'\nimport { ArrowDown, Info } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components/macro'\nimport invariant from 'tiny-invariant'\nimport { currencyAmountToPreciseFloat, formatTransactionAmount } from 'utils/formatNumbers'\n\nimport AddressInputPanel from '../../components/AddressInputPanel'\nimport { ButtonError, ButtonLight, ButtonPrimary } from '../../components/Button'\nimport { GrayCard } from '../../components/Card'\nimport { AutoColumn } from '../../components/Column'\nimport SwapCurrencyInputPanel from '../../components/CurrencyInputPanel/SwapCurrencyInputPanel'\nimport { AutoRow } from '../../components/Row'\nimport confirmPriceImpactWithoutFee from '../../components/swap/confirmPriceImpactWithoutFee'\nimport ConfirmSwapModal from '../../components/swap/ConfirmSwapModal'\nimport { ArrowWrapper, PageWrapper, SwapCallbackError, SwapWrapper } from '../../components/swap/styleds'\nimport SwapHeader from '../../components/swap/SwapHeader'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport { TOKEN_SHORTHANDS } from '../../constants/tokens'\nimport { useCurrency, useDefaultActiveTokens } from '../../hooks/Tokens'\nimport { useIsSwapUnsupported } from '../../hooks/useIsSwapUnsupported'\nimport useWrapCallback, { WrapErrorText, WrapType } from '../../hooks/useWrapCallback'\nimport { Field } from '../../state/swap/actions'\nimport { useDefaultsFromURLSearch, useDerivedSwapInfo, useSwapActionHandlers } from '../../state/swap/hooks'\nimport swapReducer, { initialState as initialSwapState } from '../../state/swap/reducer'\nimport { useExpertModeManager } from '../../state/user/hooks'\nimport { LinkStyledButton, ThemedText } from '../../theme'\nimport { computeFiatValuePriceImpact } from '../../utils/computeFiatValuePriceImpact'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { computeRealizedPriceImpact, warningSeverity } from '../../utils/prices'\nimport { supportedChainId } from '../../utils/supportedChainId'\nconst ArrowContainer = styled.div`\n  display: inline-block;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 100%;\n  height: 100%;\n`\n\nconst SwapSection = styled.div`\n  position: relative;\n  background-color: ${({ theme }) => theme.backgroundModule};\n  border-radius: 12px;\n  padding: 16px;\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  line-height: 20px;\n  font-weight: 500;\n\n  &:before {\n    box-sizing: border-box;\n    background-size: 100%;\n    border-radius: inherit;\n\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    content: '';\n    border: 1px solid ${({ theme }) => theme.backgroundModule};\n  }\n\n  &:hover:before {\n    border-color: ${({ theme }) => theme.stateOverlayHover};\n  }\n\n  &:focus-within:before {\n    border-color: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst OutputSwapSection = styled(SwapSection)<{ showDetailsDropdown: boolean }>`\n  border-bottom: ${({ theme }) => `1px solid ${theme.backgroundSurface}`};\n  border-bottom-left-radius: ${({ showDetailsDropdown }) => showDetailsDropdown && '0'};\n  border-bottom-right-radius: ${({ showDetailsDropdown }) => showDetailsDropdown && '0'};\n`\n\nconst DetailsSwapSection = styled(SwapSection)`\n  padding: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n`\n\nfunction getIsValidSwapQuote(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  tradeState: TradeState,\n  swapInputError?: ReactNode\n): boolean {\n  return !!swapInputError && !!trade && (tradeState === TradeState.VALID || tradeState === TradeState.SYNCING)\n}\n\nfunction largerPercentValue(a?: Percent, b?: Percent) {\n  if (a && b) {\n    return a.greaterThan(b) ? a : b\n  } else if (a) {\n    return a\n  } else if (b) {\n    return b\n  }\n  return undefined\n}\n\nconst TRADE_STRING = 'SwapRouter'\n\nexport default function Swap({ className }: { className?: string }) {\n  const navigate = useNavigate()\n  const { account, chainId } = useWeb3React()\n  const loadedUrlParams = useDefaultsFromURLSearch()\n  const [newSwapQuoteNeedsLogging, setNewSwapQuoteNeedsLogging] = useState(true)\n  const [fetchingSwapQuoteStartTime, setFetchingSwapQuoteStartTime] = useState<Date | undefined>()\n  const swapWidgetEnabled = useSwapWidgetEnabled()\n\n  // token warning stuff\n  const [loadedInputCurrency, loadedOutputCurrency] = [\n    useCurrency(loadedUrlParams?.[Field.INPUT]?.currencyId),\n    useCurrency(loadedUrlParams?.[Field.OUTPUT]?.currencyId),\n  ]\n  const [dismissTokenWarning, setDismissTokenWarning] = useState<boolean>(false)\n  const urlLoadedTokens: Token[] = useMemo(\n    () => [loadedInputCurrency, loadedOutputCurrency]?.filter((c): c is Token => c?.isToken ?? false) ?? [],\n    [loadedInputCurrency, loadedOutputCurrency]\n  )\n  const handleConfirmTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n  }, [])\n\n  // dismiss warning if all imported tokens are in active lists\n  const defaultTokens = useDefaultActiveTokens()\n  const importTokensNotInDefault = useMemo(\n    () =>\n      urlLoadedTokens &&\n      urlLoadedTokens\n        .filter((token: Token) => {\n          return !(token.address in defaultTokens)\n        })\n        .filter((token: Token) => {\n          // Any token addresses that are loaded from the shorthands map do not need to show the import URL\n          const supported = supportedChainId(chainId)\n          if (!supported) return true\n          return !Object.keys(TOKEN_SHORTHANDS).some((shorthand) => {\n            const shorthandTokenAddress = TOKEN_SHORTHANDS[shorthand][supported]\n            return shorthandTokenAddress && shorthandTokenAddress === token.address\n          })\n        }),\n    [chainId, defaultTokens, urlLoadedTokens]\n  )\n\n  const theme = useTheme()\n\n  // toggle wallet when disconnected\n  const toggleWalletDrawer = useToggleAccountDrawer()\n\n  // for expert mode\n  const [isExpertMode] = useExpertModeManager()\n  // swap state\n  const [state, dispatch] = useReducer(swapReducer, initialSwapState)\n  const { typedValue, recipient, independentField } = state\n  const {\n    trade: { state: tradeState, trade },\n    allowedSlippage,\n    currencyBalances,\n    parsedAmount,\n    currencies,\n    inputError: swapInputError,\n  } = useDerivedSwapInfo(state)\n\n  const {\n    wrapType,\n    execute: onWrap,\n    inputError: wrapInputError,\n  } = useWrapCallback(currencies[Field.INPUT], currencies[Field.OUTPUT], typedValue)\n  const showWrap: boolean = wrapType !== WrapType.NOT_APPLICABLE\n  const { address: recipientAddress } = useENSAddress(recipient)\n\n  const parsedAmounts = useMemo(\n    () =>\n      showWrap\n        ? {\n            [Field.INPUT]: parsedAmount,\n            [Field.OUTPUT]: parsedAmount,\n          }\n        : {\n            [Field.INPUT]: independentField === Field.INPUT ? parsedAmount : trade?.inputAmount,\n            [Field.OUTPUT]: independentField === Field.OUTPUT ? parsedAmount : trade?.outputAmount,\n          },\n    [independentField, parsedAmount, showWrap, trade]\n  )\n  const fiatValueInput = useUSDPrice(parsedAmounts[Field.INPUT])\n  const fiatValueOutput = useUSDPrice(parsedAmounts[Field.OUTPUT])\n\n  const [routeNotFound, routeIsLoading, routeIsSyncing] = useMemo(\n    () => [!trade?.swaps, TradeState.LOADING === tradeState, TradeState.SYNCING === tradeState],\n    [trade, tradeState]\n  )\n\n  const fiatValueTradeInput = useUSDPrice(trade?.inputAmount)\n  const fiatValueTradeOutput = useUSDPrice(trade?.outputAmount)\n  const stablecoinPriceImpact = useMemo(\n    () =>\n      routeIsSyncing || !trade\n        ? undefined\n        : computeFiatValuePriceImpact(fiatValueTradeInput.data, fiatValueTradeOutput.data),\n    [fiatValueTradeInput, fiatValueTradeOutput, routeIsSyncing, trade]\n  )\n\n  const { onSwitchTokens, onCurrencySelection, onUserInput, onChangeRecipient } = useSwapActionHandlers(dispatch)\n  const isValid = !swapInputError\n  const dependentField: Field = independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT\n\n  const handleTypeInput = useCallback(\n    (value: string) => {\n      onUserInput(Field.INPUT, value)\n    },\n    [onUserInput]\n  )\n  const handleTypeOutput = useCallback(\n    (value: string) => {\n      onUserInput(Field.OUTPUT, value)\n    },\n    [onUserInput]\n  )\n\n  // reset if they close warning without tokens in params\n  const handleDismissTokenWarning = useCallback(() => {\n    setDismissTokenWarning(true)\n    navigate('/swap/')\n  }, [navigate])\n\n  // modal and loading\n  const [{ showConfirm, tradeToConfirm, swapErrorMessage, attemptingTxn, txHash }, setSwapState] = useState<{\n    showConfirm: boolean\n    tradeToConfirm: Trade<Currency, Currency, TradeType> | undefined\n    attemptingTxn: boolean\n    swapErrorMessage: string | undefined\n    txHash: string | undefined\n  }>({\n    showConfirm: false,\n    tradeToConfirm: undefined,\n    attemptingTxn: false,\n    swapErrorMessage: undefined,\n    txHash: undefined,\n  })\n\n  const formattedAmounts = useMemo(\n    () => ({\n      [independentField]: typedValue,\n      [dependentField]: showWrap\n        ? parsedAmounts[independentField]?.toExact() ?? ''\n        : formatTransactionAmount(currencyAmountToPreciseFloat(parsedAmounts[dependentField])),\n    }),\n    [dependentField, independentField, parsedAmounts, showWrap, typedValue]\n  )\n\n  const userHasSpecifiedInputOutput = Boolean(\n    currencies[Field.INPUT] && currencies[Field.OUTPUT] && parsedAmounts[independentField]?.greaterThan(JSBI.BigInt(0))\n  )\n\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n  const allowance = usePermit2Allowance(\n    maximumAmountIn ??\n      (parsedAmounts[Field.INPUT]?.currency.isToken\n        ? (parsedAmounts[Field.INPUT] as CurrencyAmount<Token>)\n        : undefined),\n    isSupportedChain(chainId) ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n  )\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\n  const updateAllowance = useCallback(async () => {\n    invariant(allowance.state === AllowanceState.REQUIRED)\n    setIsAllowancePending(true)\n    try {\n      await allowance.approveAndPermit()\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\n        chain_id: chainId,\n        token_symbol: maximumAmountIn?.currency.symbol,\n        token_address: maximumAmountIn?.currency.address,\n      })\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setIsAllowancePending(false)\n    }\n  }, [allowance, chainId, maximumAmountIn?.currency.address, maximumAmountIn?.currency.symbol])\n\n  const maxInputAmount: CurrencyAmount<Currency> | undefined = useMemo(\n    () => maxAmountSpend(currencyBalances[Field.INPUT]),\n    [currencyBalances]\n  )\n  const showMaxButton = Boolean(maxInputAmount?.greaterThan(0) && !parsedAmounts[Field.INPUT]?.equalTo(maxInputAmount))\n  const swapFiatValues = useMemo(() => {\n    return { amountIn: fiatValueTradeInput.data, amountOut: fiatValueTradeOutput.data }\n  }, [fiatValueTradeInput, fiatValueTradeOutput])\n\n  // the callback to execute the swap\n  const { callback: swapCallback } = useSwapCallback(\n    trade,\n    swapFiatValues,\n    allowedSlippage,\n    allowance.state === AllowanceState.ALLOWED ? allowance.permitSignature : undefined\n  )\n\n  const handleSwap = useCallback(() => {\n    if (!swapCallback) {\n      return\n    }\n    if (stablecoinPriceImpact && !confirmPriceImpactWithoutFee(stablecoinPriceImpact)) {\n      return\n    }\n    setSwapState({ attemptingTxn: true, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: undefined })\n    swapCallback()\n      .then((hash) => {\n        setSwapState({ attemptingTxn: false, tradeToConfirm, showConfirm, swapErrorMessage: undefined, txHash: hash })\n        sendEvent({\n          category: 'Swap',\n          action: 'transaction hash',\n          label: hash,\n        })\n        sendEvent({\n          category: 'Swap',\n          action:\n            recipient === null\n              ? 'Swap w/o Send'\n              : (recipientAddress ?? recipient) === account\n              ? 'Swap w/o Send + recipient'\n              : 'Swap w/ Send',\n          label: [TRADE_STRING, trade?.inputAmount?.currency?.symbol, trade?.outputAmount?.currency?.symbol, 'MH'].join(\n            '/'\n          ),\n        })\n      })\n      .catch((error) => {\n        setSwapState({\n          attemptingTxn: false,\n          tradeToConfirm,\n          showConfirm,\n          swapErrorMessage: error.message,\n          txHash: undefined,\n        })\n      })\n  }, [\n    swapCallback,\n    stablecoinPriceImpact,\n    tradeToConfirm,\n    showConfirm,\n    recipient,\n    recipientAddress,\n    account,\n    trade?.inputAmount?.currency?.symbol,\n    trade?.outputAmount?.currency?.symbol,\n  ])\n\n  // errors\n  const [swapQuoteReceivedDate, setSwapQuoteReceivedDate] = useState<Date | undefined>()\n\n  // warnings on the greater of fiat value price impact and execution price impact\n  const { priceImpactSeverity, largerPriceImpact } = useMemo(() => {\n    const marketPriceImpact = trade?.priceImpact ? computeRealizedPriceImpact(trade) : undefined\n    const largerPriceImpact = largerPercentValue(marketPriceImpact, stablecoinPriceImpact)\n    return { priceImpactSeverity: warningSeverity(largerPriceImpact), largerPriceImpact }\n  }, [stablecoinPriceImpact, trade])\n\n  const handleConfirmDismiss = useCallback(() => {\n    setSwapState({ showConfirm: false, tradeToConfirm, attemptingTxn, swapErrorMessage, txHash })\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onUserInput(Field.INPUT, '')\n    }\n  }, [attemptingTxn, onUserInput, swapErrorMessage, tradeToConfirm, txHash])\n\n  const handleAcceptChanges = useCallback(() => {\n    setSwapState({ tradeToConfirm: trade, swapErrorMessage, txHash, attemptingTxn, showConfirm })\n  }, [attemptingTxn, showConfirm, swapErrorMessage, trade, txHash])\n\n  const handleInputSelect = useCallback(\n    (inputCurrency: Currency) => {\n      onCurrencySelection(Field.INPUT, inputCurrency)\n    },\n    [onCurrencySelection]\n  )\n\n  const handleMaxInput = useCallback(() => {\n    maxInputAmount && onUserInput(Field.INPUT, maxInputAmount.toExact())\n    sendEvent({\n      category: 'Swap',\n      action: 'Max',\n    })\n  }, [maxInputAmount, onUserInput])\n\n  const handleOutputSelect = useCallback(\n    (outputCurrency: Currency) => onCurrencySelection(Field.OUTPUT, outputCurrency),\n    [onCurrencySelection]\n  )\n\n  const swapIsUnsupported = useIsSwapUnsupported(currencies[Field.INPUT], currencies[Field.OUTPUT])\n\n  const priceImpactTooHigh = priceImpactSeverity > 3 && !isExpertMode\n  const showPriceImpactWarning = largerPriceImpact && priceImpactSeverity > 3\n\n  // Handle time based logging events and event properties.\n  useEffect(() => {\n    const now = new Date()\n    // If a trade exists, and we need to log the receipt of this new swap quote:\n    if (newSwapQuoteNeedsLogging && !!trade) {\n      // Set the current datetime as the time of receipt of latest swap quote.\n      setSwapQuoteReceivedDate(now)\n      // Log swap quote.\n      sendAnalyticsEvent(\n        SwapEventName.SWAP_QUOTE_RECEIVED,\n        formatSwapQuoteReceivedEventProperties(trade, trade.gasUseEstimateUSD ?? undefined, fetchingSwapQuoteStartTime)\n      )\n      // Latest swap quote has just been logged, so we don't need to log the current trade anymore\n      // unless user inputs change again and a new trade is in the process of being generated.\n      setNewSwapQuoteNeedsLogging(false)\n      // New quote is not being fetched, so set start time of quote fetch to undefined.\n      setFetchingSwapQuoteStartTime(undefined)\n    }\n    // If another swap quote is being loaded based on changed user inputs:\n    if (routeIsLoading) {\n      setNewSwapQuoteNeedsLogging(true)\n      if (!fetchingSwapQuoteStartTime) setFetchingSwapQuoteStartTime(now)\n    }\n  }, [\n    newSwapQuoteNeedsLogging,\n    routeIsSyncing,\n    routeIsLoading,\n    fetchingSwapQuoteStartTime,\n    trade,\n    setSwapQuoteReceivedDate,\n  ])\n\n  const showDetailsDropdown = Boolean(\n    !showWrap && userHasSpecifiedInputOutput && (trade || routeIsLoading || routeIsSyncing)\n  )\n\n  return (\n    <Trace page={InterfacePageName.SWAP_PAGE} shouldLogImpression>\n      <>\n        <TokenSafetyModal\n          isOpen={importTokensNotInDefault.length > 0 && !dismissTokenWarning}\n          tokenAddress={importTokensNotInDefault[0]?.address}\n          secondTokenAddress={importTokensNotInDefault[1]?.address}\n          onContinue={handleConfirmTokenWarning}\n          onCancel={handleDismissTokenWarning}\n          showCancel={true}\n        />\n        <PageWrapper>\n          {swapWidgetEnabled ? (\n            <Widget\n              defaultTokens={{\n                [Field.INPUT]: loadedInputCurrency ?? undefined,\n                [Field.OUTPUT]: loadedOutputCurrency ?? undefined,\n              }}\n              width=\"100%\"\n            />\n          ) : (\n            <SwapWrapper chainId={chainId} className={className} id=\"swap-page\">\n              <SwapHeader allowedSlippage={allowedSlippage} />\n              <ConfirmSwapModal\n                isOpen={showConfirm}\n                trade={trade}\n                originalTrade={tradeToConfirm}\n                onAcceptChanges={handleAcceptChanges}\n                attemptingTxn={attemptingTxn}\n                txHash={txHash}\n                recipient={recipient}\n                allowedSlippage={allowedSlippage}\n                onConfirm={handleSwap}\n                swapErrorMessage={swapErrorMessage}\n                onDismiss={handleConfirmDismiss}\n                swapQuoteReceivedDate={swapQuoteReceivedDate}\n                fiatValueInput={fiatValueTradeInput}\n                fiatValueOutput={fiatValueTradeOutput}\n              />\n\n              <div style={{ display: 'relative' }}>\n                <SwapSection>\n                  <Trace section={InterfaceSectionName.CURRENCY_INPUT_PANEL}>\n                    <SwapCurrencyInputPanel\n                      label={\n                        independentField === Field.OUTPUT && !showWrap ? (\n                          <Trans>From (at most)</Trans>\n                        ) : (\n                          <Trans>From</Trans>\n                        )\n                      }\n                      value={formattedAmounts[Field.INPUT]}\n                      showMaxButton={showMaxButton}\n                      currency={currencies[Field.INPUT] ?? null}\n                      onUserInput={handleTypeInput}\n                      onMax={handleMaxInput}\n                      fiatValue={fiatValueInput}\n                      onCurrencySelect={handleInputSelect}\n                      otherCurrency={currencies[Field.OUTPUT]}\n                      showCommonBases={true}\n                      id={InterfaceSectionName.CURRENCY_INPUT_PANEL}\n                      loading={independentField === Field.OUTPUT && routeIsSyncing}\n                    />\n                  </Trace>\n                </SwapSection>\n                <ArrowWrapper clickable={isSupportedChain(chainId)}>\n                  <TraceEvent\n                    events={[BrowserEvent.onClick]}\n                    name={SwapEventName.SWAP_TOKENS_REVERSED}\n                    element={InterfaceElementName.SWAP_TOKENS_REVERSE_ARROW_BUTTON}\n                  >\n                    <ArrowContainer\n                      data-testid=\"swap-currency-button\"\n                      onClick={() => {\n                        onSwitchTokens()\n                      }}\n                      color={theme.textPrimary}\n                    >\n                      <ArrowDown\n                        size=\"16\"\n                        color={\n                          currencies[Field.INPUT] && currencies[Field.OUTPUT] ? theme.textPrimary : theme.textTertiary\n                        }\n                      />\n                    </ArrowContainer>\n                  </TraceEvent>\n                </ArrowWrapper>\n              </div>\n              <AutoColumn gap=\"md\">\n                <div>\n                  <OutputSwapSection showDetailsDropdown={showDetailsDropdown}>\n                    <Trace section={InterfaceSectionName.CURRENCY_OUTPUT_PANEL}>\n                      <SwapCurrencyInputPanel\n                        value={formattedAmounts[Field.OUTPUT]}\n                        onUserInput={handleTypeOutput}\n                        label={\n                          independentField === Field.INPUT && !showWrap ? (\n                            <Trans>To (at least)</Trans>\n                          ) : (\n                            <Trans>To</Trans>\n                          )\n                        }\n                        showMaxButton={false}\n                        hideBalance={false}\n                        fiatValue={fiatValueOutput}\n                        priceImpact={stablecoinPriceImpact}\n                        currency={currencies[Field.OUTPUT] ?? null}\n                        onCurrencySelect={handleOutputSelect}\n                        otherCurrency={currencies[Field.INPUT]}\n                        showCommonBases={true}\n                        id={InterfaceSectionName.CURRENCY_OUTPUT_PANEL}\n                        loading={independentField === Field.INPUT && routeIsSyncing}\n                      />\n                    </Trace>\n\n                    {recipient !== null && !showWrap ? (\n                      <>\n                        <AutoRow justify=\"space-between\" style={{ padding: '0 1rem' }}>\n                          <ArrowWrapper clickable={false}>\n                            <ArrowDown size=\"16\" color={theme.textSecondary} />\n                          </ArrowWrapper>\n                          <LinkStyledButton id=\"remove-recipient-button\" onClick={() => onChangeRecipient(null)}>\n                            <Trans>- Remove recipient</Trans>\n                          </LinkStyledButton>\n                        </AutoRow>\n                        <AddressInputPanel id=\"recipient\" value={recipient} onChange={onChangeRecipient} />\n                      </>\n                    ) : null}\n                  </OutputSwapSection>\n                  {showDetailsDropdown && (\n                    <DetailsSwapSection>\n                      <SwapDetailsDropdown\n                        trade={trade}\n                        syncing={routeIsSyncing}\n                        loading={routeIsLoading}\n                        allowedSlippage={allowedSlippage}\n                      />\n                    </DetailsSwapSection>\n                  )}\n                </div>\n                {showPriceImpactWarning && <PriceImpactWarning priceImpact={largerPriceImpact} />}\n                <div>\n                  {swapIsUnsupported ? (\n                    <ButtonPrimary disabled={true}>\n                      <ThemedText.DeprecatedMain mb=\"4px\">\n                        <Trans>Unsupported Asset</Trans>\n                      </ThemedText.DeprecatedMain>\n                    </ButtonPrimary>\n                  ) : !account ? (\n                    <TraceEvent\n                      events={[BrowserEvent.onClick]}\n                      name={InterfaceEventName.CONNECT_WALLET_BUTTON_CLICKED}\n                      properties={{ received_swap_quote: getIsValidSwapQuote(trade, tradeState, swapInputError) }}\n                      element={InterfaceElementName.CONNECT_WALLET_BUTTON}\n                    >\n                      <ButtonLight onClick={toggleWalletDrawer} fontWeight={600}>\n                        <Trans>Connect Wallet</Trans>\n                      </ButtonLight>\n                    </TraceEvent>\n                  ) : showWrap ? (\n                    <ButtonPrimary disabled={Boolean(wrapInputError)} onClick={onWrap} fontWeight={600}>\n                      {wrapInputError ? (\n                        <WrapErrorText wrapInputError={wrapInputError} />\n                      ) : wrapType === WrapType.WRAP ? (\n                        <Trans>Wrap</Trans>\n                      ) : wrapType === WrapType.UNWRAP ? (\n                        <Trans>Unwrap</Trans>\n                      ) : null}\n                    </ButtonPrimary>\n                  ) : routeNotFound && userHasSpecifiedInputOutput && !routeIsLoading && !routeIsSyncing ? (\n                    <GrayCard style={{ textAlign: 'center' }}>\n                      <ThemedText.DeprecatedMain mb=\"4px\">\n                        <Trans>Insufficient liquidity for this trade.</Trans>\n                      </ThemedText.DeprecatedMain>\n                    </GrayCard>\n                  ) : isValid && allowance.state === AllowanceState.REQUIRED ? (\n                    <ButtonPrimary\n                      onClick={updateAllowance}\n                      disabled={isAllowancePending || isApprovalLoading}\n                      style={{ gap: 14 }}\n                    >\n                      {isAllowancePending ? (\n                        <>\n                          <Loader size=\"20px\" />\n                          <Trans>Approve in your wallet</Trans>\n                        </>\n                      ) : isApprovalLoading ? (\n                        <>\n                          <Loader size=\"20px\" />\n                          <Trans>Approval pending</Trans>\n                        </>\n                      ) : (\n                        <>\n                          <div style={{ height: 20 }}>\n                            <MouseoverTooltip\n                              text={\n                                <Trans>\n                                  Permission is required for Uniswap to swap each token. This will expire after one\n                                  month for your security.\n                                </Trans>\n                              }\n                            >\n                              <Info size={20} />\n                            </MouseoverTooltip>\n                          </div>\n                          <Trans>Approve use of {currencies[Field.INPUT]?.symbol}</Trans>\n                        </>\n                      )}\n                    </ButtonPrimary>\n                  ) : (\n                    <ButtonError\n                      onClick={() => {\n                        if (isExpertMode) {\n                          handleSwap()\n                        } else {\n                          setSwapState({\n                            tradeToConfirm: trade,\n                            attemptingTxn: false,\n                            swapErrorMessage: undefined,\n                            showConfirm: true,\n                            txHash: undefined,\n                          })\n                        }\n                      }}\n                      id=\"swap-button\"\n                      disabled={\n                        !isValid ||\n                        routeIsSyncing ||\n                        routeIsLoading ||\n                        priceImpactTooHigh ||\n                        allowance.state !== AllowanceState.ALLOWED\n                      }\n                      error={isValid && priceImpactSeverity > 2 && allowance.state === AllowanceState.ALLOWED}\n                    >\n                      <Text fontSize={20} fontWeight={600}>\n                        {swapInputError ? (\n                          swapInputError\n                        ) : routeIsSyncing || routeIsLoading ? (\n                          <Trans>Swap</Trans>\n                        ) : priceImpactTooHigh ? (\n                          <Trans>Price Impact Too High</Trans>\n                        ) : priceImpactSeverity > 2 ? (\n                          <Trans>Swap Anyway</Trans>\n                        ) : (\n                          <Trans>Swap</Trans>\n                        )}\n                      </Text>\n                    </ButtonError>\n                  )}\n                  {isExpertMode && swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n                </div>\n              </AutoColumn>\n            </SwapWrapper>\n          )}\n          <NetworkAlert />\n        </PageWrapper>\n        <SwitchLocaleLink />\n        {!swapIsUnsupported ? null : (\n          <UnsupportedCurrencyFooter\n            show={swapIsUnsupported}\n            currencies={[currencies[Field.INPUT], currencies[Field.OUTPUT]]}\n          />\n        )}\n      </>\n    </Trace>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}