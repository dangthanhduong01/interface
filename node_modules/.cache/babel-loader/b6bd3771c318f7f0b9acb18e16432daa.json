{"ast":null,"code":"import { TRACING_DEFAULTS, addTracingExtensions, extractTraceparentData, startIdleTransaction } from '@sentry/core';\nimport { logger, baggageHeaderToDynamicSamplingContext, getDomElement } from '@sentry/utils';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { startTrackingWebVitals, startTrackingLongTasks, startTrackingInteractions, addPerformanceEntries } from './metrics/index.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\nimport { instrumentRoutingWithDefaults } from './router.js';\nimport { WINDOW } from './types.js';\nconst BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nclass BrowserTracing {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = BROWSER_TRACING_INTEGRATION_ID;\n  }\n  constructor(_options) {\n    BrowserTracing.prototype.__init.call(this);\n    addTracingExtensions();\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    this._getCurrentHub = getCurrentHub;\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      _experiments\n    } = this.options;\n    instrumentRouting(context => {\n      const transaction = this._createRouteTransaction(context);\n      this.options._experiments.onStartRouteTransaction && this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n      return transaction;\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest\n    });\n  }\n\n  /** Create routing idle transaction. */\n  _createRouteTransaction(context) {\n    if (!this._getCurrentHub) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n    const {\n      beforeNavigate,\n      idleTimeout,\n      finalTimeout,\n      heartbeatInterval\n    } = this.options;\n    const isPageloadTransaction = context.op === 'pageload';\n    const sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n    const baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n    const traceParentData = sentryTraceMetaTagValue ? extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n    const dynamicSamplingContext = baggageMetaTagValue ? baggageHeaderToDynamicSamplingContext(baggageMetaTagValue) : undefined;\n    const expandedContext = {\n      ...context,\n      ...traceParentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext\n      },\n      trimEnd: true\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? {\n      ...expandedContext,\n      sampled: false\n    } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata = finalContext.name !== expandedContext.name ? {\n      ...finalContext.metadata,\n      source: 'custom'\n    } : finalContext.metadata;\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n    if (finalContext.sampled === false) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n    const hub = this._getCurrentHub();\n    const {\n      location\n    } = WINDOW;\n    const idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, finalTimeout, true, {\n      location\n    },\n    // for use in the tracesSampler\n    heartbeatInterval);\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n    return idleTransaction;\n  }\n\n  /** Start listener for interaction transactions */\n  _registerInteractionListener() {\n    let inflightInteractionTransaction;\n    const registerInteractionTransaction = () => {\n      const {\n        idleTimeout,\n        finalTimeout,\n        heartbeatInterval\n      } = this.options;\n      const op = 'ui.action.click';\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n      if (!this._getCurrentHub) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n      if (!this._latestRouteName) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n      const hub = this._getCurrentHub();\n      const {\n        location\n      } = WINDOW;\n      const context = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url'\n        }\n      };\n      inflightInteractionTransaction = startIdleTransaction(hub, context, idleTimeout, finalTimeout, true, {\n        location\n      },\n      // for use in the tracesSampler\n      heartbeatInterval);\n    };\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, {\n        once: false,\n        capture: true\n      });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\nexport { BROWSER_TRACING_INTEGRATION_ID, BrowserTracing, getMetaContent };","map":{"version":3,"sources":["../../../src/browser/browsertracing.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport type { Hub, IdleTransaction } from '@sentry/core';\nimport { addTracingExtensions, extractTraceparentData, startIdleTransaction, TRACING_DEFAULTS } from '@sentry/core';\nimport type { EventProcessor, Integration, Transaction, TransactionContext, TransactionSource } from '@sentry/types';\nimport { baggageHeaderToDynamicSamplingContext, getDomElement, logger } from '@sentry/utils';\n\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport {\n  addPerformanceEntries,\n  startTrackingInteractions,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from './metrics';\nimport type { RequestInstrumentationOptions } from './request';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nimport { WINDOW } from './types';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished during an idle state. An idle state is defined\n   * by a moment where there are no in-progress spans.\n   *\n   * The transaction will use the end timestamp of the last finished span as the endtime for the transaction.\n   * If there are still active spans when this the `idleTimeout` is set, the `idleTimeout` will get reset.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * The max duration for a transaction. If a transaction duration hits the `finalTimeout` value, it\n   * will be finished.\n   * Time is in ms.\n   *\n   * Default: 30000\n   */\n  finalTimeout: number;\n\n  /**\n   * The heartbeat interval. If no new spans are started or open spans are finished within 3 heartbeats,\n   * the transaction will be finished.\n   * Time is in ms.\n   *\n   * Default: 5000\n   */\n  heartbeatInterval: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{\n    /**\n     * @deprecated This property no longer has any effect and will be removed in v8.\n     */\n    _reportAllChanges: boolean;\n  }>;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   * Note that the `enableLongTask` options is deprecated in favor of the option at the top level, and will be removed in v8.\n   *\n   * TODO (v8): Remove enableLongTask\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableLongTask: boolean;\n    enableInteractions: boolean;\n    onStartRouteTransaction: (t: Transaction | undefined, ctx: TransactionContext, getCurrentHub: () => Hub) => void;\n  }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(this: void, context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    this: void,\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  markBackgroundTransactions: true,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  enableLongTask: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  // This class currently doesn't have a static `id` field like the other integration classes, because it prevented\n  // @sentry/tracing from being treeshaken. Tree shakers do not like static fields, because they behave like side effects.\n  // TODO: Come up with a better plan, than using static fields on integration classes, and use that plan on all\n  // integrations.\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BROWSER_TRACING_INTEGRATION_ID;\n\n  private _getCurrentHub?: () => Hub;\n\n  private _latestRouteName?: string;\n  private _latestRouteSource?: TransactionSource;\n\n  private _collectWebVitals: () => void;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    addTracingExtensions();\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n    };\n\n    // Special case: enableLongTask can be set in _experiments\n    // TODO (v8): Remove this in v8\n    if (this.options._experiments.enableLongTask !== undefined) {\n      this.options.enableLongTask = this.options._experiments.enableLongTask;\n    }\n\n    // TODO (v8): remove this block after tracingOrigins is removed\n    // Set tracePropagationTargets to tracingOrigins if specified by the user\n    // In case both are specified, tracePropagationTargets takes precedence\n    // eslint-disable-next-line deprecation/deprecation\n    if (_options && !_options.tracePropagationTargets && _options.tracingOrigins) {\n      // eslint-disable-next-line deprecation/deprecation\n      this.options.tracePropagationTargets = _options.tracingOrigins;\n    }\n\n    this._collectWebVitals = startTrackingWebVitals();\n    if (this.options.enableLongTask) {\n      startTrackingLongTasks();\n    }\n    if (this.options._experiments.enableInteractions) {\n      startTrackingInteractions();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n      _experiments,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => {\n        const transaction = this._createRouteTransaction(context);\n\n        this.options._experiments.onStartRouteTransaction &&\n          this.options._experiments.onStartRouteTransaction(transaction, context, getCurrentHub);\n\n        return transaction;\n      },\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    if (_experiments.enableInteractions) {\n      this._registerInteractionListener();\n    }\n\n    instrumentOutgoingRequests({\n      traceFetch,\n      traceXHR,\n      tracePropagationTargets,\n      shouldCreateSpanForRequest,\n    });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      __DEBUG_BUILD__ &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    const { beforeNavigate, idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n    const isPageloadTransaction = context.op === 'pageload';\n\n    const sentryTraceMetaTagValue = isPageloadTransaction ? getMetaContent('sentry-trace') : null;\n    const baggageMetaTagValue = isPageloadTransaction ? getMetaContent('baggage') : null;\n\n    const traceParentData = sentryTraceMetaTagValue ? extractTraceparentData(sentryTraceMetaTagValue) : undefined;\n    const dynamicSamplingContext = baggageMetaTagValue\n      ? baggageHeaderToDynamicSamplingContext(baggageMetaTagValue)\n      : undefined;\n\n    const expandedContext: TransactionContext = {\n      ...context,\n      ...traceParentData,\n      metadata: {\n        ...context.metadata,\n        dynamicSamplingContext: traceParentData && !dynamicSamplingContext ? {} : dynamicSamplingContext,\n      },\n      trimEnd: true,\n    };\n\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    // If `beforeNavigate` set a custom name, record that fact\n    finalContext.metadata =\n      finalContext.name !== expandedContext.name\n        ? { ...finalContext.metadata, source: 'custom' }\n        : finalContext.metadata;\n\n    this._latestRouteName = finalContext.name;\n    this._latestRouteSource = finalContext.metadata && finalContext.metadata.source;\n\n    if (finalContext.sampled === false) {\n      __DEBUG_BUILD__ &&\n        logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = WINDOW;\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      finalTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n      heartbeatInterval,\n    );\n    idleTransaction.registerBeforeFinishCallback(transaction => {\n      this._collectWebVitals();\n      addPerformanceEntries(transaction);\n    });\n\n    return idleTransaction as Transaction;\n  }\n\n  /** Start listener for interaction transactions */\n  private _registerInteractionListener(): void {\n    let inflightInteractionTransaction: IdleTransaction | undefined;\n    const registerInteractionTransaction = (): void => {\n      const { idleTimeout, finalTimeout, heartbeatInterval } = this.options;\n\n      const op = 'ui.action.click';\n      if (inflightInteractionTransaction) {\n        inflightInteractionTransaction.finish();\n        inflightInteractionTransaction = undefined;\n      }\n\n      if (!this._getCurrentHub) {\n        __DEBUG_BUILD__ && logger.warn(`[Tracing] Did not create ${op} transaction because _getCurrentHub is invalid.`);\n        return undefined;\n      }\n\n      if (!this._latestRouteName) {\n        __DEBUG_BUILD__ &&\n          logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n        return undefined;\n      }\n\n      const hub = this._getCurrentHub();\n      const { location } = WINDOW;\n\n      const context: TransactionContext = {\n        name: this._latestRouteName,\n        op,\n        trimEnd: true,\n        metadata: {\n          source: this._latestRouteSource || 'url',\n        },\n      };\n\n      inflightInteractionTransaction = startIdleTransaction(\n        hub,\n        context,\n        idleTimeout,\n        finalTimeout,\n        true,\n        { location }, // for use in the tracesSampler\n        heartbeatInterval,\n      );\n    };\n\n    ['click'].forEach(type => {\n      addEventListener(type, registerInteractionTransaction, { once: false, capture: true });\n    });\n  }\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : null;\n}\n"]},"metadata":{},"sourceType":"module"}