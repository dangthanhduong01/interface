{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\nfunction isValidPrismaClient(possibleClient) {\n  return possibleClient && !!possibleClient['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nclass Prisma {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Prisma';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Prisma.id;\n  }\n\n  /**\n   * Prisma ORM Client Instance\n   */\n\n  /**\n   * @inheritDoc\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Prisma.prototype.__init.call(this);\n    if (isValidPrismaClient(options.client)) {\n      this._client = options.client;\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Unsupported Prisma client provided to PrismaIntegration. Provided client: ${JSON.stringify(options.client)}`);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (!this._client) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('PrismaIntegration is missing a Prisma Client Instance');\n      return;\n    }\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Prisma Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    this._client.$use((params, next) => {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = _optionalChain([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);\n      const action = params.action;\n      const model = params.model;\n      const span = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({\n        description: model ? `${model} ${action}` : action,\n        op: 'db.sql.prisma'\n      })]);\n      const rv = next(params);\n      if (isThenable(rv)) {\n        return rv.then(res => {\n          _optionalChain([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);\n          return res;\n        });\n      }\n      _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n      return rv;\n    });\n  }\n}\nPrisma.__initStatic();\nexport { Prisma };","map":{"version":3,"sources":["../../../../src/node/integrations/prisma.ts"],"names":[],"mappings":";;;AAwCA,SAAA,mBAAA,CAAA,cAAA,EAAA;EACA,OAAA,cAAA,IAAA,CAAA,CAAA,cAAA,CAAA,MAAA,CAAA;AACA;;AAEA;AACA,MAAA,MAAA,CAAA;EACA;AACA;AACA;EACA,OAAA,YAAA,GAAA;IAAA,IAAA,CAAA,EAAA,GAAA,QAAA;EAAA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,IAAA,GAAA,MAAA,CAAA,EAAA;EAAA;;EAEA;AACA;AACA;;EAGA;AACA;AACA;EACA,WAAA,GAAA;IAAA,IAAA,OAAA,uEAAA,CAAA,CAAA;IAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,IAAA,mBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA;MACA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA,MAAA;IACA,CAAA,MAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KACA,MAAA,CAAA,IAAA,CACA,6EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA,CACA;IACA;EACA;;EAEA;AACA;AACA;EACA,SAAA,CAAA,CAAA,EAAA,aAAA,EAAA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,uDAAA,CAAA;MACA;IACA;IAEA,IAAA,gCAAA,CAAA,aAAA,CAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,sEAAA,CAAA;MACA;IACA;IAEA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,MAAA,EAAA,IAAA,KAAA;MACA,MAAA,KAAA,GAAA,aAAA,EAAA,CAAA,QAAA,EAAA;MACA,MAAA,UAAA,GAAA,cAAA,CAAA,CAAA,KAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;MAEA,MAAA,MAAA,GAAA,MAAA,CAAA,MAAA;MACA,MAAA,KAAA,GAAA,MAAA,CAAA,KAAA;MAEA,MAAA,IAAA,GAAA,cAAA,CAAA,CAAA,UAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,CAAA;QACA,WAAA,EAAA,KAAA,GAAA,GAAA,KAAA,IAAA,MAAA,EAAA,GAAA,MAAA;QACA,EAAA,EAAA;MACA,CAAA,CAAA,CAAA,CAAA;MAEA,MAAA,EAAA,GAAA,IAAA,CAAA,MAAA,CAAA;MAEA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;QACA,OAAA,EAAA,CAAA,IAAA,CAAA,GAAA,IAAA;UACA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;UACA,OAAA,GAAA;QACA,CAAA,CAAA;MACA;MAEA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;MACA,OAAA,EAAA;IACA,CAAA,CAAA;EACA;AACA;AAAA,MAAA,CAAA,YAAA,EAAA","sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { isThenable, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ntype PrismaAction =\n  | 'findUnique'\n  | 'findMany'\n  | 'findFirst'\n  | 'create'\n  | 'createMany'\n  | 'update'\n  | 'updateMany'\n  | 'upsert'\n  | 'delete'\n  | 'deleteMany'\n  | 'executeRaw'\n  | 'queryRaw'\n  | 'aggregate'\n  | 'count'\n  | 'runCommandRaw';\n\ninterface PrismaMiddlewareParams {\n  model?: unknown;\n  action: PrismaAction;\n  args: unknown;\n  dataPath: string[];\n  runInTransaction: boolean;\n}\n\ntype PrismaMiddleware<T = unknown> = (\n  params: PrismaMiddlewareParams,\n  next: (params: PrismaMiddlewareParams) => Promise<T>,\n) => Promise<T>;\n\ninterface PrismaClient {\n  $use: (cb: PrismaMiddleware) => void;\n}\n\nfunction isValidPrismaClient(possibleClient: unknown): possibleClient is PrismaClient {\n  return possibleClient && !!(possibleClient as PrismaClient)['$use'];\n}\n\n/** Tracing integration for @prisma/client package */\nexport class Prisma implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Prisma';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Prisma.id;\n\n  /**\n   * Prisma ORM Client Instance\n   */\n  private readonly _client?: PrismaClient;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { client?: unknown } = {}) {\n    if (isValidPrismaClient(options.client)) {\n      this._client = options.client;\n    } else {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `Unsupported Prisma client provided to PrismaIntegration. Provided client: ${JSON.stringify(options.client)}`,\n        );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._client) {\n      __DEBUG_BUILD__ && logger.error('PrismaIntegration is missing a Prisma Client Instance');\n      return;\n    }\n\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Prisma Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    this._client.$use((params, next: (params: PrismaMiddlewareParams) => Promise<unknown>) => {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = scope?.getSpan();\n\n      const action = params.action;\n      const model = params.model;\n\n      const span = parentSpan?.startChild({\n        description: model ? `${model} ${action}` : action,\n        op: 'db.sql.prisma',\n      });\n\n      const rv = next(params);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.finish();\n          return res;\n        });\n      }\n\n      span?.finish();\n      return rv;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}