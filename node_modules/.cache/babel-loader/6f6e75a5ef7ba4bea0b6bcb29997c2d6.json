{"ast":null,"code":"import { TradeType } from '@uniswap/sdk-core';\nimport { PERMIT2_ADDRESS } from '@uniswap/universal-router-sdk';\nimport { BigNumber } from 'ethers/lib/ethers';\nimport { SwapType } from '../routers';\nimport { Erc20__factory } from '../types/other/factories/Erc20__factory';\nimport { Permit2__factory } from '../types/other/factories/Permit2__factory';\nimport { log, SWAP_ROUTER_02_ADDRESSES } from '../util';\nexport var SimulationStatus;\n(function (SimulationStatus) {\n  SimulationStatus[SimulationStatus[\"NotSupported\"] = 0] = \"NotSupported\";\n  SimulationStatus[SimulationStatus[\"Failed\"] = 1] = \"Failed\";\n  SimulationStatus[SimulationStatus[\"Succeeded\"] = 2] = \"Succeeded\";\n  SimulationStatus[SimulationStatus[\"InsufficientBalance\"] = 3] = \"InsufficientBalance\";\n  SimulationStatus[SimulationStatus[\"NotApproved\"] = 4] = \"NotApproved\";\n})(SimulationStatus || (SimulationStatus = {}));\n/**\n * Provider for dry running transactions.\n *\n * @export\n * @class Simulator\n */\nexport class Simulator {\n  /**\n   * Returns a new SwapRoute with simulated gas estimates\n   * @returns SwapRoute\n   */\n  constructor(provider, chainId) {\n    this.chainId = chainId;\n    this.provider = provider;\n  }\n  async simulate(fromAddress, swapOptions, swapRoute, amount, quote, l2GasData, providerConfig) {\n    if (await this.userHasSufficientBalance(fromAddress, swapRoute.trade.tradeType, amount, quote)) {\n      log.info('User has sufficient balance to simulate. Simulating transaction.');\n      try {\n        return this.simulateTransaction(fromAddress, swapOptions, swapRoute, l2GasData, providerConfig);\n      } catch (e) {\n        log.error({\n          e\n        }, 'Error simulating transaction');\n        return {\n          ...swapRoute,\n          simulationStatus: SimulationStatus.Failed\n        };\n      }\n    } else {\n      log.error('User does not have sufficient balance to simulate.');\n      return {\n        ...swapRoute,\n        simulationStatus: SimulationStatus.InsufficientBalance\n      };\n    }\n  }\n  async userHasSufficientBalance(fromAddress, tradeType, amount, quote) {\n    try {\n      const neededBalance = tradeType == TradeType.EXACT_INPUT ? amount : quote;\n      let balance;\n      if (neededBalance.currency.isNative) {\n        balance = await this.provider.getBalance(fromAddress);\n      } else {\n        const tokenContract = Erc20__factory.connect(neededBalance.currency.address, this.provider);\n        balance = await tokenContract.balanceOf(fromAddress);\n      }\n      const hasBalance = balance.gte(BigNumber.from(neededBalance.quotient.toString()));\n      log.info({\n        fromAddress,\n        balance: balance.toString(),\n        neededBalance: neededBalance.quotient.toString(),\n        neededAddress: neededBalance.wrapped.currency.address,\n        hasBalance\n      }, 'Result of balance check for simulation');\n      return hasBalance;\n    } catch (e) {\n      log.error(e, 'Error while checking user balance');\n      return false;\n    }\n  }\n  async checkTokenApproved(fromAddress, inputAmount, swapOptions, provider) {\n    // Check token has approved Permit2 more than expected amount.\n    const tokenContract = Erc20__factory.connect(inputAmount.currency.wrapped.address, provider);\n    if (swapOptions.type == SwapType.UNIVERSAL_ROUTER) {\n      const permit2Allowance = await tokenContract.allowance(fromAddress, PERMIT2_ADDRESS);\n      // If a permit has been provided we don't need to check if UR has already been allowed.\n      if (swapOptions.inputTokenPermit) {\n        log.info({\n          permitAllowance: permit2Allowance.toString(),\n          inputAmount: inputAmount.quotient.toString()\n        }, 'Permit was provided for simulation on UR, checking that Permit2 has been approved.');\n        return permit2Allowance.gte(BigNumber.from(inputAmount.quotient.toString()));\n      }\n      // Check UR has been approved from Permit2.\n      const permit2Contract = Permit2__factory.connect(PERMIT2_ADDRESS, provider);\n      const {\n        amount: universalRouterAllowance,\n        expiration: tokenExpiration\n      } = await permit2Contract.allowance(fromAddress, inputAmount.currency.wrapped.address, SWAP_ROUTER_02_ADDRESSES(this.chainId));\n      const nowTimestampS = Math.round(Date.now() / 1000);\n      const inputAmountBN = BigNumber.from(inputAmount.quotient.toString());\n      const permit2Approved = permit2Allowance.gte(inputAmountBN);\n      const universalRouterApproved = universalRouterAllowance.gte(inputAmountBN);\n      const expirationValid = tokenExpiration > nowTimestampS;\n      log.info({\n        permitAllowance: permit2Allowance.toString(),\n        tokenAllowance: universalRouterAllowance.toString(),\n        tokenExpirationS: tokenExpiration,\n        nowTimestampS,\n        inputAmount: inputAmount.quotient.toString(),\n        permit2Approved,\n        universalRouterApproved,\n        expirationValid\n      }, `Simulating on UR, Permit2 approved: ${permit2Approved}, UR approved: ${universalRouterApproved}, Expiraton valid: ${expirationValid}.`);\n      return permit2Approved && universalRouterApproved && expirationValid;\n    } else if (swapOptions.type == SwapType.SWAP_ROUTER_02) {\n      if (swapOptions.inputTokenPermit) {\n        log.info({\n          inputAmount: inputAmount.quotient.toString()\n        }, 'Simulating on SwapRouter02 info - Permit was provided for simulation. Not checking allowances.');\n        return true;\n      }\n      const allowance = await tokenContract.allowance(fromAddress, SWAP_ROUTER_02_ADDRESSES(this.chainId));\n      const hasAllowance = allowance.gte(BigNumber.from(inputAmount.quotient.toString()));\n      log.info({\n        hasAllowance,\n        allowance: allowance.toString(),\n        inputAmount: inputAmount.quotient.toString()\n      }, `Simulating on SwapRouter02 - Has allowance: ${hasAllowance}`);\n      // Return true if token allowance is greater than input amount\n      return hasAllowance;\n    }\n    throw new Error(`Unsupported swap type ${swapOptions}`);\n  }\n}","map":{"version":3,"sources":["../../../src/providers/simulation-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { TradeType } from '@uniswap/sdk-core';\nimport { PERMIT2_ADDRESS } from '@uniswap/universal-router-sdk';\nimport { BigNumber } from 'ethers/lib/ethers';\nimport { SwapType } from '../routers';\nimport { Erc20__factory } from '../types/other/factories/Erc20__factory';\nimport { Permit2__factory } from '../types/other/factories/Permit2__factory';\nimport { log, SWAP_ROUTER_02_ADDRESSES, } from '../util';\nexport var SimulationStatus;\n(function (SimulationStatus) {\n    SimulationStatus[SimulationStatus[\"NotSupported\"] = 0] = \"NotSupported\";\n    SimulationStatus[SimulationStatus[\"Failed\"] = 1] = \"Failed\";\n    SimulationStatus[SimulationStatus[\"Succeeded\"] = 2] = \"Succeeded\";\n    SimulationStatus[SimulationStatus[\"InsufficientBalance\"] = 3] = \"InsufficientBalance\";\n    SimulationStatus[SimulationStatus[\"NotApproved\"] = 4] = \"NotApproved\";\n})(SimulationStatus || (SimulationStatus = {}));\n/**\n * Provider for dry running transactions.\n *\n * @export\n * @class Simulator\n */\nexport class Simulator {\n    /**\n     * Returns a new SwapRoute with simulated gas estimates\n     * @returns SwapRoute\n     */\n    constructor(provider, chainId) {\n        this.chainId = chainId;\n        this.provider = provider;\n    }\n    async simulate(fromAddress, swapOptions, swapRoute, amount, quote, l2GasData, providerConfig) {\n        if (await this.userHasSufficientBalance(fromAddress, swapRoute.trade.tradeType, amount, quote)) {\n            log.info('User has sufficient balance to simulate. Simulating transaction.');\n            try {\n                return this.simulateTransaction(fromAddress, swapOptions, swapRoute, l2GasData, providerConfig);\n            }\n            catch (e) {\n                log.error({ e }, 'Error simulating transaction');\n                return {\n                    ...swapRoute,\n                    simulationStatus: SimulationStatus.Failed,\n                };\n            }\n        }\n        else {\n            log.error('User does not have sufficient balance to simulate.');\n            return {\n                ...swapRoute,\n                simulationStatus: SimulationStatus.InsufficientBalance,\n            };\n        }\n    }\n    async userHasSufficientBalance(fromAddress, tradeType, amount, quote) {\n        try {\n            const neededBalance = tradeType == TradeType.EXACT_INPUT ? amount : quote;\n            let balance;\n            if (neededBalance.currency.isNative) {\n                balance = await this.provider.getBalance(fromAddress);\n            }\n            else {\n                const tokenContract = Erc20__factory.connect(neededBalance.currency.address, this.provider);\n                balance = await tokenContract.balanceOf(fromAddress);\n            }\n            const hasBalance = balance.gte(BigNumber.from(neededBalance.quotient.toString()));\n            log.info({\n                fromAddress,\n                balance: balance.toString(),\n                neededBalance: neededBalance.quotient.toString(),\n                neededAddress: neededBalance.wrapped.currency.address,\n                hasBalance,\n            }, 'Result of balance check for simulation');\n            return hasBalance;\n        }\n        catch (e) {\n            log.error(e, 'Error while checking user balance');\n            return false;\n        }\n    }\n    async checkTokenApproved(fromAddress, inputAmount, swapOptions, provider) {\n        // Check token has approved Permit2 more than expected amount.\n        const tokenContract = Erc20__factory.connect(inputAmount.currency.wrapped.address, provider);\n        if (swapOptions.type == SwapType.UNIVERSAL_ROUTER) {\n            const permit2Allowance = await tokenContract.allowance(fromAddress, PERMIT2_ADDRESS);\n            // If a permit has been provided we don't need to check if UR has already been allowed.\n            if (swapOptions.inputTokenPermit) {\n                log.info({\n                    permitAllowance: permit2Allowance.toString(),\n                    inputAmount: inputAmount.quotient.toString(),\n                }, 'Permit was provided for simulation on UR, checking that Permit2 has been approved.');\n                return permit2Allowance.gte(BigNumber.from(inputAmount.quotient.toString()));\n            }\n            // Check UR has been approved from Permit2.\n            const permit2Contract = Permit2__factory.connect(PERMIT2_ADDRESS, provider);\n            const { amount: universalRouterAllowance, expiration: tokenExpiration } = await permit2Contract.allowance(fromAddress, inputAmount.currency.wrapped.address, SWAP_ROUTER_02_ADDRESSES(this.chainId));\n            const nowTimestampS = Math.round(Date.now() / 1000);\n            const inputAmountBN = BigNumber.from(inputAmount.quotient.toString());\n            const permit2Approved = permit2Allowance.gte(inputAmountBN);\n            const universalRouterApproved = universalRouterAllowance.gte(inputAmountBN);\n            const expirationValid = tokenExpiration > nowTimestampS;\n            log.info({\n                permitAllowance: permit2Allowance.toString(),\n                tokenAllowance: universalRouterAllowance.toString(),\n                tokenExpirationS: tokenExpiration,\n                nowTimestampS,\n                inputAmount: inputAmount.quotient.toString(),\n                permit2Approved,\n                universalRouterApproved,\n                expirationValid,\n            }, `Simulating on UR, Permit2 approved: ${permit2Approved}, UR approved: ${universalRouterApproved}, Expiraton valid: ${expirationValid}.`);\n            return permit2Approved && universalRouterApproved && expirationValid;\n        }\n        else if (swapOptions.type == SwapType.SWAP_ROUTER_02) {\n            if (swapOptions.inputTokenPermit) {\n                log.info({\n                    inputAmount: inputAmount.quotient.toString(),\n                }, 'Simulating on SwapRouter02 info - Permit was provided for simulation. Not checking allowances.');\n                return true;\n            }\n            const allowance = await tokenContract.allowance(fromAddress, SWAP_ROUTER_02_ADDRESSES(this.chainId));\n            const hasAllowance = allowance.gte(BigNumber.from(inputAmount.quotient.toString()));\n            log.info({\n                hasAllowance,\n                allowance: allowance.toString(),\n                inputAmount: inputAmount.quotient.toString(),\n            }, `Simulating on SwapRouter02 - Has allowance: ${hasAllowance}`);\n            // Return true if token allowance is greater than input amount\n            return hasAllowance;\n        }\n        throw new Error(`Unsupported swap type ${swapOptions}`);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltdWxhdGlvbi1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm92aWRlcnMvc2ltdWxhdGlvbi1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU5QyxPQUFPLEVBQTBCLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDekUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDN0UsT0FBTyxFQUdMLEdBQUcsRUFDSCx3QkFBd0IsR0FDekIsTUFBTSxTQUFTLENBQUM7QUFVakIsTUFBTSxDQUFOLElBQVksZ0JBTVg7QUFORCxXQUFZLGdCQUFnQjtJQUMxQix1RUFBZ0IsQ0FBQTtJQUNoQiwyREFBVSxDQUFBO0lBQ1YsaUVBQWEsQ0FBQTtJQUNiLHFGQUF1QixDQUFBO0lBQ3ZCLHFFQUFlLENBQUE7QUFDakIsQ0FBQyxFQU5XLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFNM0I7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBZ0IsU0FBUztJQUc3Qjs7O09BR0c7SUFDSCxZQUFZLFFBQXlCLEVBQVksT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUMvRCxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FDbkIsV0FBbUIsRUFDbkIsV0FBd0IsRUFDeEIsU0FBb0IsRUFDcEIsTUFBc0IsRUFDdEIsS0FBcUIsRUFDckIsU0FBNkMsRUFDN0MsY0FBK0I7UUFFL0IsSUFDRSxNQUFNLElBQUks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"]},"metadata":{},"sourceType":"module"}