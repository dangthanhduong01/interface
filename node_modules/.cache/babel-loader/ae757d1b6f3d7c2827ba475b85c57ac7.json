{"ast":null,"code":"import { RoutingActions } from 'nft/types';\nfunction buildRoutingItem(routingItem) {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18'\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18'\n      },\n      tokenType: routingItem.tokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase(),\n      orderSource: 'api'\n    }\n  };\n}\nfunction buildRoutingItems(routingItems) {\n  return routingItems.map(buildRoutingItem);\n}\nexport function buildRouteResponse(routeResponse, useErc20Token) {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : [];\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress\n    }\n  };\n}","map":{"version":3,"names":["RoutingActions","buildRoutingItem","routingItem","action","Buy","marketplace","toLowerCase","amountIn","price","value","assetIn","ETHPrice","baseAsset","currency","basePrice","baseDecimals","amountOut","amount","toString","assetOut","id","decimals","address","contractAddress","priceInfo","tokenType","tokenId","orderSource","buildRoutingItems","routingItems","map","buildRouteResponse","routeResponse","useErc20Token","route","valueToSend","undefined","sendAmount","data","calldata","to","toAddress"],"sources":["/home/diep/freelance/interface/src/nft/utils/nftRoute.ts"],"sourcesContent":["import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n"],"mappings":"AACA,SAAiCA,cAAc,QAAgC,WAAW;AAE1F,SAASC,gBAAgB,CAACC,WAAqB,EAAe;EAC5D,OAAO;IACLC,MAAM,EAAEH,cAAc,CAACI,GAAG;IAC1BC,WAAW,EAAEH,WAAW,CAACG,WAAW,CAACC,WAAW,EAAE;IAClDC,QAAQ,EAAEL,WAAW,CAACM,KAAK,CAACC,KAAK;IACjCC,OAAO,EAAE;MACPC,QAAQ,EAAET,WAAW,CAACM,KAAK,CAACC,KAAK;MACjCG,SAAS,EAAEV,WAAW,CAACM,KAAK,CAACK,QAAQ;MACrCC,SAAS,EAAEZ,WAAW,CAACM,KAAK,CAACC,KAAK;MAClCM,YAAY,EAAE;IAChB,CAAC;IACDC,SAAS,EAAEd,WAAW,CAACe,MAAM,CAACC,QAAQ,EAAE;IACxCC,QAAQ,EAAE;MACRC,EAAE,EAAElB,WAAW,CAACkB,EAAE;MAClBC,QAAQ,EAAE,EAAE;MACZC,OAAO,EAAEpB,WAAW,CAACqB,eAAe;MACpCC,SAAS,EAAE;QACTb,QAAQ,EAAET,WAAW,CAACM,KAAK,CAACC,KAAK;QACjCG,SAAS,EAAEV,WAAW,CAACM,KAAK,CAACK,QAAQ;QACrCC,SAAS,EAAEZ,WAAW,CAACM,KAAK,CAACC,KAAK;QAClCM,YAAY,EAAE;MAChB,CAAC;MACDU,SAAS,EAAEvB,WAAW,CAACuB,SAAiC;MACxDC,OAAO,EAAExB,WAAW,CAACwB,OAAO;MAC5BT,MAAM,EAAEf,WAAW,CAACe,MAAM,CAACC,QAAQ,EAAE;MACrCb,WAAW,EAAEH,WAAW,CAACG,WAAW,CAACC,WAAW,EAAa;MAC7DqB,WAAW,EAAE;IACf;EACF,CAAC;AACH;AAEA,SAASC,iBAAiB,CAACC,YAAwB,EAAiB;EAClE,OAAOA,YAAY,CAACC,GAAG,CAAC7B,gBAAgB,CAAC;AAC3C;AAEA,OAAO,SAAS8B,kBAAkB,CAChCC,aAA+B,EAC/BC,aAAsB,EACkC;EACxD,MAAMC,KAAK,GAAGF,aAAa,CAACE,KAAK,GAAGN,iBAAiB,CAACI,aAAa,CAACE,KAAK,CAAC,GAAG,EAAE;EAC/E,OAAO;IACLA,KAAK;IACLF,aAAa,EAAE;MACbE,KAAK;MACLC,WAAW,EAAEF,aAAa,GAAGG,SAAS,GAAGJ,aAAa,CAACK,UAAU,CAAC5B,KAAK;MACvE6B,IAAI,EAAEN,aAAa,CAACO,QAAQ;MAC5BC,EAAE,EAAER,aAAa,CAACS;IACpB;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}