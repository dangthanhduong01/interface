{"ast":null,"code":"var _jsxFileName = \"/home/diep/freelance/interface/src/components/AccountDrawer/PrefetchBalancesWrapper.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport { usePortfolioBalancesLazyQuery } from 'graphql/data/__generated__/types-and-hooks';\nimport usePrevious from 'hooks/usePrevious';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useAllTransactions } from 'state/transactions/hooks';\nimport { useAccountDrawer } from '.';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isTxPending = tx => !tx.receipt;\nfunction wasPending(previousTxs, current) {\n  const previousTx = previousTxs[current.hash];\n  return previousTx && isTxPending(previousTx);\n}\nfunction useHasUpdatedTx() {\n  _s();\n  // TODO: consider monitoring tx's on chains other than the wallet's current chain\n  const currentChainTxs = useAllTransactions();\n  const pendingTxs = useMemo(() => {\n    return Object.entries(currentChainTxs).reduce((acc, _ref) => {\n      let [hash, tx] = _ref;\n      if (!tx.receipt) acc[hash] = tx;\n      return acc;\n    }, {});\n  }, [currentChainTxs]);\n  const previousPendingTxs = usePrevious(pendingTxs);\n  return useMemo(() => {\n    if (!previousPendingTxs) return false;\n    return Object.values(currentChainTxs).some(tx => !isTxPending(tx) && wasPending(previousPendingTxs, tx), [currentChainTxs, previousPendingTxs]);\n  }, [currentChainTxs, previousPendingTxs]);\n}\n\n/* Prefetches & caches portfolio balances when the wrapped component is hovered or the user completes a transaction */\n_s(useHasUpdatedTx, \"jsObv3p2qY3BlWrEdHY/SnIPDVY=\", false, function () {\n  return [useAllTransactions, usePrevious];\n});\nexport default function PrefetchBalancesWrapper(_ref2) {\n  _s2();\n  let {\n    children\n  } = _ref2;\n  const {\n    account\n  } = useWeb3React();\n  const [prefetchPortfolioBalances] = usePortfolioBalancesLazyQuery();\n  const [drawerOpen] = useAccountDrawer();\n  const [hasUnfetchedBalances, setHasUnfetchedBalances] = useState(true);\n  const fetchBalances = useCallback(() => {\n    if (account) {\n      prefetchPortfolioBalances({\n        variables: {\n          ownerAddress: account\n        }\n      });\n      setHasUnfetchedBalances(false);\n    }\n  }, [account, prefetchPortfolioBalances]);\n\n  // TODO(cartcrom): add delay for refetching on optimism, as there is high latency in new balances being available\n  const hasUpdatedTx = useHasUpdatedTx();\n  // Listens for recently updated transactions to keep portfolio balances fresh in apollo cache\n  useEffect(() => {\n    if (!hasUpdatedTx) return;\n\n    // If the drawer is open, fetch balances immediately, else set a flag to fetch on next hover\n    if (drawerOpen) fetchBalances();else setHasUnfetchedBalances(true);\n  }, [drawerOpen, fetchBalances, hasUpdatedTx]);\n  const onHover = useCallback(() => {\n    if (hasUnfetchedBalances) fetchBalances();\n  }, [fetchBalances, hasUnfetchedBalances]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseEnter: onHover,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n}\n_s2(PrefetchBalancesWrapper, \"DBN5uU9sAsd7/w7zFhyM0ZrlFC0=\", false, function () {\n  return [useWeb3React, usePortfolioBalancesLazyQuery, useAccountDrawer, useHasUpdatedTx];\n});\n_c = PrefetchBalancesWrapper;\nvar _c;\n$RefreshReg$(_c, \"PrefetchBalancesWrapper\");","map":{"version":3,"names":["useWeb3React","usePortfolioBalancesLazyQuery","usePrevious","useCallback","useEffect","useMemo","useState","useAllTransactions","useAccountDrawer","isTxPending","tx","receipt","wasPending","previousTxs","current","previousTx","hash","useHasUpdatedTx","currentChainTxs","pendingTxs","Object","entries","reduce","acc","previousPendingTxs","values","some","PrefetchBalancesWrapper","children","account","prefetchPortfolioBalances","drawerOpen","hasUnfetchedBalances","setHasUnfetchedBalances","fetchBalances","variables","ownerAddress","hasUpdatedTx","onHover"],"sources":["/home/diep/freelance/interface/src/components/AccountDrawer/PrefetchBalancesWrapper.tsx"],"sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { usePortfolioBalancesLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport usePrevious from 'hooks/usePrevious'\nimport { PropsWithChildren, useCallback, useEffect, useMemo, useState } from 'react'\nimport { useAllTransactions } from 'state/transactions/hooks'\nimport { TransactionDetails } from 'state/transactions/types'\n\nimport { useAccountDrawer } from '.'\n\nconst isTxPending = (tx: TransactionDetails) => !tx.receipt\nfunction wasPending(previousTxs: { [hash: string]: TransactionDetails | undefined }, current: TransactionDetails) {\n  const previousTx = previousTxs[current.hash]\n  return previousTx && isTxPending(previousTx)\n}\n\nfunction useHasUpdatedTx() {\n  // TODO: consider monitoring tx's on chains other than the wallet's current chain\n  const currentChainTxs = useAllTransactions()\n\n  const pendingTxs = useMemo(() => {\n    return Object.entries(currentChainTxs).reduce((acc: { [hash: string]: TransactionDetails }, [hash, tx]) => {\n      if (!tx.receipt) acc[hash] = tx\n      return acc\n    }, {})\n  }, [currentChainTxs])\n\n  const previousPendingTxs = usePrevious(pendingTxs)\n\n  return useMemo(() => {\n    if (!previousPendingTxs) return false\n    return Object.values(currentChainTxs).some(\n      (tx) => !isTxPending(tx) && wasPending(previousPendingTxs, tx),\n      [currentChainTxs, previousPendingTxs]\n    )\n  }, [currentChainTxs, previousPendingTxs])\n}\n\n/* Prefetches & caches portfolio balances when the wrapped component is hovered or the user completes a transaction */\nexport default function PrefetchBalancesWrapper({ children }: PropsWithChildren) {\n  const { account } = useWeb3React()\n  const [prefetchPortfolioBalances] = usePortfolioBalancesLazyQuery()\n  const [drawerOpen] = useAccountDrawer()\n\n  const [hasUnfetchedBalances, setHasUnfetchedBalances] = useState(true)\n  const fetchBalances = useCallback(() => {\n    if (account) {\n      prefetchPortfolioBalances({ variables: { ownerAddress: account } })\n      setHasUnfetchedBalances(false)\n    }\n  }, [account, prefetchPortfolioBalances])\n\n  // TODO(cartcrom): add delay for refetching on optimism, as there is high latency in new balances being available\n  const hasUpdatedTx = useHasUpdatedTx()\n  // Listens for recently updated transactions to keep portfolio balances fresh in apollo cache\n  useEffect(() => {\n    if (!hasUpdatedTx) return\n\n    // If the drawer is open, fetch balances immediately, else set a flag to fetch on next hover\n    if (drawerOpen) fetchBalances()\n    else setHasUnfetchedBalances(true)\n  }, [drawerOpen, fetchBalances, hasUpdatedTx])\n\n  const onHover = useCallback(() => {\n    if (hasUnfetchedBalances) fetchBalances()\n  }, [fetchBalances, hasUnfetchedBalances])\n\n  return <div onMouseEnter={onHover}>{children}</div>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}