{"ast":null,"code":"import { getCurrentHub } from '@sentry/core';\nimport { addInstrumentationHandler, getEventDescription, severityLevelFromString, safeJoin, parseUrl, logger, htmlTreeAsString } from '@sentry/utils';\nimport { WINDOW } from '../helpers.js';\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\nconst BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nclass Breadcrumbs {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = BREADCRUMB_INTEGRATION_ID;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Breadcrumbs.id;\n  }\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n\n  /**\n   * @inheritDoc\n   */\n  constructor(options) {\n    Breadcrumbs.prototype.__init.call(this);\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  setupOnce() {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n\n  /**\n   * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n   */\n  addSentryBreadcrumb(event) {\n    if (this.options.sentry) {\n      getCurrentHub().addBreadcrumb({\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event)\n      }, {\n        event\n      });\n    }\n  }\n}\nBreadcrumbs.__initStatic();\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _domBreadcrumb(dom) {\n  function _innerDomBreadcrumb(handlerData) {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n    let maxStringLength = typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`);\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event;\n      target = _isEvent(event) ? htmlTreeAsString(event.target, {\n        keyAttrs,\n        maxStringLength\n      }) : htmlTreeAsString(event, {\n        keyAttrs,\n        maxStringLength\n      });\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: `ui.${handlerData.name}`,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _consoleBreadcrumb(handlerData) {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (let i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' ')\n  };\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _xhrBreadcrumb(handlerData) {\n  const {\n    startTimestamp,\n    endTimestamp\n  } = handlerData;\n\n  // We only capture complete, non-sentry requests\n  if (!startTimestamp || !endTimestamp || !handlerData.xhr.__sentry_xhr__) {\n    return;\n  }\n  const {\n    method,\n    url,\n    status_code,\n    body\n  } = handlerData.xhr.__sentry_xhr__;\n  const data = {\n    method,\n    url,\n    status_code\n  };\n  const hint = {\n    xhr: handlerData.xhr,\n    input: body,\n    startTimestamp,\n    endTimestamp\n  };\n  getCurrentHub().addBreadcrumb({\n    category: 'xhr',\n    data,\n    type: 'http'\n  }, hint);\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _fetchBreadcrumb(handlerData) {\n  const {\n    startTimestamp,\n    endTimestamp\n  } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n  if (handlerData.error) {\n    const data = handlerData.fetchData;\n    const hint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp\n    };\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data,\n      level: 'error',\n      type: 'http'\n    }, hint);\n  } else {\n    const data = {\n      ...handlerData.fetchData,\n      status_code: handlerData.response && handlerData.response.status\n    };\n    const hint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp,\n      endTimestamp\n    };\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data,\n      type: 'http'\n    }, hint);\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _historyBreadcrumb(handlerData) {\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(WINDOW.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to\n    }\n  });\n}\nfunction _isEvent(event) {\n  return event && !!event.target;\n}\nexport { BREADCRUMB_INTEGRATION_ID, Breadcrumbs };","map":{"version":3,"sources":["../../../../src/integrations/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport type { Event as SentryEvent, HandlerDataFetch, HandlerDataXhr, Integration } from '@sentry/types';\nimport type {\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  XhrBreadcrumbData,\n  XhrBreadcrumbHint,\n} from '@sentry/types/build/types/breadcrumb';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  htmlTreeAsString,\n  logger,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\ntype HandlerData = Record<string, unknown>;\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n\n  /**\n   * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n   */\n  public addSentryBreadcrumb(event: SentryEvent): void {\n    if (this.options.sentry) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: HandlerData) => void {\n  function _innerDomBreadcrumb(handlerData: HandlerData): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      __DEBUG_BUILD__ &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event as Event | Node;\n      target = _isEvent(event)\n        ? htmlTreeAsString(event.target, { keyAttrs, maxStringLength })\n        : htmlTreeAsString(event, { keyAttrs, maxStringLength });\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _consoleBreadcrumb(handlerData: HandlerData & { args: unknown[]; level: string }): void {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (let i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _xhrBreadcrumb(handlerData: HandlerData & HandlerDataXhr): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete, non-sentry requests\n  if (!startTimestamp || !endTimestamp || !handlerData.xhr.__sentry_xhr__) {\n    return;\n  }\n\n  const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__;\n\n  const data: XhrBreadcrumbData = {\n    method,\n    url,\n    status_code,\n  };\n\n  const hint: XhrBreadcrumbHint = {\n    xhr: handlerData.xhr,\n    input: body,\n    startTimestamp,\n    endTimestamp,\n  };\n\n  getCurrentHub().addBreadcrumb(\n    {\n      category: 'xhr',\n      data,\n      type: 'http',\n    },\n    hint,\n  );\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _fetchBreadcrumb(handlerData: HandlerData & HandlerDataFetch & { response?: Response }): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    const data: FetchBreadcrumbData = handlerData.fetchData;\n    const hint: FetchBreadcrumbHint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const data: FetchBreadcrumbData = {\n      ...handlerData.fetchData,\n      status_code: handlerData.response && handlerData.response.status,\n    };\n    const hint: FetchBreadcrumbHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp,\n      endTimestamp,\n    };\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        type: 'http',\n      },\n      hint,\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _historyBreadcrumb(handlerData: HandlerData & { from: string; to: string }): void {\n  let from: string | undefined = handlerData.from;\n  let to: string | undefined = handlerData.to;\n  const parsedLoc = parseUrl(WINDOW.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n\nfunction _isEvent(event: unknown): event is Event {\n  return event && !!(event as Record<string, unknown>).target;\n}\n"]},"metadata":{},"sourceType":"module"}