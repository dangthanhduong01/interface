{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s10 = $RefreshSig$(),\n  _s11 = $RefreshSig$(),\n  _s12 = $RefreshSig$(),\n  _s13 = $RefreshSig$(),\n  _s14 = $RefreshSig$(),\n  _s15 = $RefreshSig$(),\n  _s16 = $RefreshSig$(),\n  _s17 = $RefreshSig$(),\n  _s18 = $RefreshSig$(),\n  _s19 = $RefreshSig$(),\n  _s20 = $RefreshSig$(),\n  _s21 = $RefreshSig$(),\n  _s22 = $RefreshSig$(),\n  _s23 = $RefreshSig$(),\n  _s24 = $RefreshSig$(),\n  _s25 = $RefreshSig$(),\n  _s26 = $RefreshSig$(),\n  _s27 = $RefreshSig$(),\n  _s28 = $RefreshSig$(),\n  _s29 = $RefreshSig$(),\n  _s30 = $RefreshSig$(),\n  _s31 = $RefreshSig$(),\n  _s32 = $RefreshSig$(),\n  _s33 = $RefreshSig$(),\n  _s34 = $RefreshSig$(),\n  _s35 = $RefreshSig$(),\n  _s36 = $RefreshSig$(),\n  _s37 = $RefreshSig$(),\n  _s38 = $RefreshSig$();\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\n\n/**\n *  Enums (alphabetized):\n * deprecated and replaced with TransactionType, please do not use this\n */\nexport let ActivityType;\n(function (ActivityType) {\n  ActivityType[\"Approve\"] = \"APPROVE\";\n  ActivityType[\"Borrow\"] = \"BORROW\";\n  ActivityType[\"Burn\"] = \"BURN\";\n  ActivityType[\"Cancel\"] = \"CANCEL\";\n  ActivityType[\"Claim\"] = \"CLAIM\";\n  ActivityType[\"Deployment\"] = \"DEPLOYMENT\";\n  ActivityType[\"Lend\"] = \"LEND\";\n  ActivityType[\"Mint\"] = \"MINT\";\n  ActivityType[\"Nft\"] = \"NFT\";\n  ActivityType[\"OnRamp\"] = \"ON_RAMP\";\n  ActivityType[\"Receive\"] = \"RECEIVE\";\n  ActivityType[\"Repay\"] = \"REPAY\";\n  ActivityType[\"Send\"] = \"SEND\";\n  ActivityType[\"Stake\"] = \"STAKE\";\n  ActivityType[\"Swap\"] = \"SWAP\";\n  ActivityType[\"SwapOrder\"] = \"SWAP_ORDER\";\n  ActivityType[\"Staking\"] = \"Staking\";\n  ActivityType[\"Unknown\"] = \"UNKNOWN\";\n  ActivityType[\"Unstake\"] = \"UNSTAKE\";\n  ActivityType[\"Withdraw\"] = \"WITHDRAW\";\n  ActivityType[\"Market\"] = \"market\";\n  ActivityType[\"Money\"] = \"money\";\n})(ActivityType || (ActivityType = {}));\nexport let AssetActivitySwitch;\n(function (AssetActivitySwitch) {\n  AssetActivitySwitch[\"Alternate\"] = \"ALTERNATE\";\n  AssetActivitySwitch[\"Legacy\"] = \"LEGACY\";\n})(AssetActivitySwitch || (AssetActivitySwitch = {}));\nexport let Chain;\n(function (Chain) {\n  Chain[\"Arbitrum\"] = \"ARBITRUM\";\n  Chain[\"Avalanche\"] = \"AVALANCHE\";\n  Chain[\"Base\"] = \"BASE\";\n  Chain[\"Blast\"] = \"BLAST\";\n  Chain[\"Bnb\"] = \"BNB\";\n  Chain[\"Celo\"] = \"CELO\";\n  Chain[\"Ethereum\"] = \"ETHEREUM\";\n  Chain[\"EthereumGoerli\"] = \"ETHEREUM_GOERLI\";\n  Chain[\"EthereumSepolia\"] = \"ETHEREUM_SEPOLIA\";\n  Chain[\"Optimism\"] = \"OPTIMISM\";\n  Chain[\"Polygon\"] = \"POLYGON\";\n  Chain[\"UnknownChain\"] = \"UNKNOWN_CHAIN\";\n  Chain[\"Zksync\"] = \"ZKSYNC\";\n  Chain[\"Zora\"] = \"ZORA\";\n  Chain[\"Trustkey\"] = \"TRUSTKEY\";\n})(Chain || (Chain = {}));\nexport let CollectionSortableField;\n(function (CollectionSortableField) {\n  CollectionSortableField[\"Volume\"] = \"VOLUME\";\n})(CollectionSortableField || (CollectionSortableField = {}));\nexport let Currency;\n(function (Currency) {\n  Currency[\"Aud\"] = \"AUD\";\n  Currency[\"Brl\"] = \"BRL\";\n  Currency[\"Cad\"] = \"CAD\";\n  Currency[\"Cny\"] = \"CNY\";\n  Currency[\"Eth\"] = \"ETH\";\n  Currency[\"Eur\"] = \"EUR\";\n  Currency[\"Gbp\"] = \"GBP\";\n  Currency[\"Hkd\"] = \"HKD\";\n  Currency[\"Idr\"] = \"IDR\";\n  Currency[\"Inr\"] = \"INR\";\n  Currency[\"Jpy\"] = \"JPY\";\n  Currency[\"Matic\"] = \"MATIC\";\n  Currency[\"Ngn\"] = \"NGN\";\n  Currency[\"Pkr\"] = \"PKR\";\n  Currency[\"Rub\"] = \"RUB\";\n  Currency[\"Sgd\"] = \"SGD\";\n  Currency[\"Thb\"] = \"THB\";\n  Currency[\"Try\"] = \"TRY\";\n  Currency[\"Uah\"] = \"UAH\";\n  Currency[\"Usd\"] = \"USD\";\n  Currency[\"Vnd\"] = \"VND\";\n})(Currency || (Currency = {}));\nexport let HighLow;\n\n/**   FIVE_MINUTE is only supported for TokenMarket.pricePercentChange */\n(function (HighLow) {\n  HighLow[\"High\"] = \"HIGH\";\n  HighLow[\"Low\"] = \"LOW\";\n})(HighLow || (HighLow = {}));\nexport let HistoryDuration;\n\n/**   Interfaces (alphabetized): */\n(function (HistoryDuration) {\n  HistoryDuration[\"Day\"] = \"DAY\";\n  HistoryDuration[\"FiveMinute\"] = \"FIVE_MINUTE\";\n  HistoryDuration[\"Hour\"] = \"HOUR\";\n  HistoryDuration[\"Max\"] = \"MAX\";\n  HistoryDuration[\"Month\"] = \"MONTH\";\n  HistoryDuration[\"Week\"] = \"WEEK\";\n  HistoryDuration[\"Year\"] = \"YEAR\";\n})(HistoryDuration || (HistoryDuration = {}));\nexport let MediaType;\n(function (MediaType) {\n  MediaType[\"Audio\"] = \"AUDIO\";\n  MediaType[\"Image\"] = \"IMAGE\";\n  MediaType[\"Raw\"] = \"RAW\";\n  MediaType[\"Video\"] = \"VIDEO\";\n})(MediaType || (MediaType = {}));\nexport let NftActivityType;\n(function (NftActivityType) {\n  NftActivityType[\"CancelListing\"] = \"CANCEL_LISTING\";\n  NftActivityType[\"Listing\"] = \"LISTING\";\n  NftActivityType[\"Sale\"] = \"SALE\";\n  NftActivityType[\"Transfer\"] = \"TRANSFER\";\n})(NftActivityType || (NftActivityType = {}));\nexport let NftAssetSortableField;\n(function (NftAssetSortableField) {\n  NftAssetSortableField[\"Price\"] = \"PRICE\";\n  NftAssetSortableField[\"Rarity\"] = \"RARITY\";\n})(NftAssetSortableField || (NftAssetSortableField = {}));\nexport let NftMarketplace;\n(function (NftMarketplace) {\n  NftMarketplace[\"Cryptopunks\"] = \"CRYPTOPUNKS\";\n  NftMarketplace[\"Foundation\"] = \"FOUNDATION\";\n  NftMarketplace[\"Looksrare\"] = \"LOOKSRARE\";\n  NftMarketplace[\"Nft20\"] = \"NFT20\";\n  NftMarketplace[\"Nftx\"] = \"NFTX\";\n  NftMarketplace[\"Opensea\"] = \"OPENSEA\";\n  NftMarketplace[\"Sudoswap\"] = \"SUDOSWAP\";\n  NftMarketplace[\"X2Y2\"] = \"X2Y2\";\n})(NftMarketplace || (NftMarketplace = {}));\nexport let NftRarityProvider;\n(function (NftRarityProvider) {\n  NftRarityProvider[\"RaritySniper\"] = \"RARITY_SNIPER\";\n})(NftRarityProvider || (NftRarityProvider = {}));\nexport let NftStandard;\n(function (NftStandard) {\n  NftStandard[\"Erc721\"] = \"ERC721\";\n  NftStandard[\"Erc1155\"] = \"ERC1155\";\n  NftStandard[\"Noncompliant\"] = \"NONCOMPLIANT\";\n})(NftStandard || (NftStandard = {}));\nexport let OrderStatus;\n(function (OrderStatus) {\n  OrderStatus[\"Cancelled\"] = \"CANCELLED\";\n  OrderStatus[\"Executed\"] = \"EXECUTED\";\n  OrderStatus[\"Expired\"] = \"EXPIRED\";\n  OrderStatus[\"Valid\"] = \"VALID\";\n})(OrderStatus || (OrderStatus = {}));\nexport let OrderType;\n(function (OrderType) {\n  OrderType[\"Listing\"] = \"LISTING\";\n  OrderType[\"Offer\"] = \"OFFER\";\n})(OrderType || (OrderType = {}));\nexport let PoolTransactionType;\n(function (PoolTransactionType) {\n  PoolTransactionType[\"Add\"] = \"ADD\";\n  PoolTransactionType[\"Remove\"] = \"REMOVE\";\n  PoolTransactionType[\"Swap\"] = \"SWAP\";\n})(PoolTransactionType || (PoolTransactionType = {}));\nexport let PriceSource;\n(function (PriceSource) {\n  PriceSource[\"SubgraphV2\"] = \"SUBGRAPH_V2\";\n  PriceSource[\"SubgraphV3\"] = \"SUBGRAPH_V3\";\n})(PriceSource || (PriceSource = {}));\nexport let ProtocolVersion;\n(function (ProtocolVersion) {\n  ProtocolVersion[\"V2\"] = \"V2\";\n  ProtocolVersion[\"V3\"] = \"V3\";\n})(ProtocolVersion || (ProtocolVersion = {}));\nexport let SafetyLevel;\n(function (SafetyLevel) {\n  SafetyLevel[\"Blocked\"] = \"BLOCKED\";\n  SafetyLevel[\"MediumWarning\"] = \"MEDIUM_WARNING\";\n  SafetyLevel[\"StrongWarning\"] = \"STRONG_WARNING\";\n  SafetyLevel[\"Verified\"] = \"VERIFIED\";\n})(SafetyLevel || (SafetyLevel = {}));\nexport let SubscriptionType;\n(function (SubscriptionType) {\n  SubscriptionType[\"AssetActivity\"] = \"ASSET_ACTIVITY\";\n})(SubscriptionType || (SubscriptionType = {}));\nexport let SwapOrderStatus;\n(function (SwapOrderStatus) {\n  SwapOrderStatus[\"Cancelled\"] = \"CANCELLED\";\n  SwapOrderStatus[\"Error\"] = \"ERROR\";\n  SwapOrderStatus[\"Expired\"] = \"EXPIRED\";\n  SwapOrderStatus[\"Filled\"] = \"FILLED\";\n  SwapOrderStatus[\"InsufficientFunds\"] = \"INSUFFICIENT_FUNDS\";\n  SwapOrderStatus[\"Open\"] = \"OPEN\";\n})(SwapOrderStatus || (SwapOrderStatus = {}));\nexport let SwapOrderType;\n(function (SwapOrderType) {\n  SwapOrderType[\"Dutch\"] = \"DUTCH\";\n  SwapOrderType[\"DutchV2\"] = \"DUTCH_V2\";\n  SwapOrderType[\"Limit\"] = \"LIMIT\";\n})(SwapOrderType || (SwapOrderType = {}));\nexport let TokenSortableField;\n(function (TokenSortableField) {\n  TokenSortableField[\"MarketCap\"] = \"MARKET_CAP\";\n  TokenSortableField[\"Popularity\"] = \"POPULARITY\";\n  TokenSortableField[\"TotalValueLocked\"] = \"TOTAL_VALUE_LOCKED\";\n  TokenSortableField[\"Volume\"] = \"VOLUME\";\n})(TokenSortableField || (TokenSortableField = {}));\nexport let TokenStandard;\n(function (TokenStandard) {\n  TokenStandard[\"Erc20\"] = \"ERC20\";\n  TokenStandard[\"Native\"] = \"NATIVE\";\n})(TokenStandard || (TokenStandard = {}));\nexport let TokenTradeType;\n(function (TokenTradeType) {\n  TokenTradeType[\"ExactInput\"] = \"EXACT_INPUT\";\n  TokenTradeType[\"ExactOutput\"] = \"EXACT_OUTPUT\";\n})(TokenTradeType || (TokenTradeType = {}));\nexport let TransactionDirection;\n(function (TransactionDirection) {\n  TransactionDirection[\"In\"] = \"IN\";\n  TransactionDirection[\"Out\"] = \"OUT\";\n  TransactionDirection[\"Self\"] = \"SELF\";\n})(TransactionDirection || (TransactionDirection = {}));\nexport let TransactionStatus;\n(function (TransactionStatus) {\n  TransactionStatus[\"Confirmed\"] = \"CONFIRMED\";\n  TransactionStatus[\"Failed\"] = \"FAILED\";\n  TransactionStatus[\"Pending\"] = \"PENDING\";\n})(TransactionStatus || (TransactionStatus = {}));\nexport let TransactionType;\n(function (TransactionType) {\n  TransactionType[\"Approve\"] = \"APPROVE\";\n  TransactionType[\"Borrow\"] = \"BORROW\";\n  TransactionType[\"Cancel\"] = \"CANCEL\";\n  TransactionType[\"Claim\"] = \"CLAIM\";\n  TransactionType[\"Deployment\"] = \"DEPLOYMENT\";\n  TransactionType[\"Lend\"] = \"LEND\";\n  TransactionType[\"Mint\"] = \"MINT\";\n  TransactionType[\"OnRamp\"] = \"ON_RAMP\";\n  TransactionType[\"Receive\"] = \"RECEIVE\";\n  TransactionType[\"Repay\"] = \"REPAY\";\n  TransactionType[\"Send\"] = \"SEND\";\n  TransactionType[\"Stake\"] = \"STAKE\";\n  TransactionType[\"Swap\"] = \"SWAP\";\n  TransactionType[\"SwapOrder\"] = \"SWAP_ORDER\";\n  TransactionType[\"Unknown\"] = \"UNKNOWN\";\n  TransactionType[\"Unstake\"] = \"UNSTAKE\";\n  TransactionType[\"Withdraw\"] = \"WITHDRAW\";\n})(TransactionType || (TransactionType = {}));\nexport const TransactionPartsFragmentDoc = gql`\n    fragment TransactionParts on Transaction {\n  id\n  blockNumber\n  hash\n  status\n  to\n  from\n}\n    `;\nexport const TokenAssetPartsFragmentDoc = gql`\n    fragment TokenAssetParts on Token {\n  id\n  name\n  symbol\n  address\n  decimals\n  chain\n  standard\n  project {\n    id\n    isSpam\n    logo {\n      id\n      url\n    }\n  }\n}\n    `;\nexport const TokenTransferPartsFragmentDoc = gql`\n    fragment TokenTransferParts on TokenTransfer {\n  id\n  asset {\n    ...TokenAssetParts\n  }\n  tokenStandard\n  quantity\n  sender\n  recipient\n  direction\n  transactedValue {\n    id\n    currency\n    value\n  }\n}\n    ${TokenAssetPartsFragmentDoc}`;\nexport const NftAssetPartsFragmentDoc = gql`\n    fragment NFTAssetParts on NftAsset {\n  id\n  name\n  nftContract {\n    id\n    chain\n    address\n  }\n  tokenId\n  image {\n    id\n    url\n  }\n  collection {\n    id\n    name\n  }\n}\n    `;\nexport const NftTransferPartsFragmentDoc = gql`\n    fragment NFTTransferParts on NftTransfer {\n  id\n  asset {\n    ...NFTAssetParts\n  }\n  nftStandard\n  sender\n  recipient\n  direction\n}\n    ${NftAssetPartsFragmentDoc}`;\nexport const TokenApprovalPartsFragmentDoc = gql`\n    fragment TokenApprovalParts on TokenApproval {\n  id\n  asset {\n    ...TokenAssetParts\n  }\n  tokenStandard\n  approvedAddress\n  quantity\n}\n    ${TokenAssetPartsFragmentDoc}`;\nexport const NftApprovalPartsFragmentDoc = gql`\n    fragment NFTApprovalParts on NftApproval {\n  id\n  asset {\n    ...NFTAssetParts\n  }\n  nftStandard\n  approvedAddress\n}\n    ${NftAssetPartsFragmentDoc}`;\nexport const NftApproveForAllPartsFragmentDoc = gql`\n    fragment NFTApproveForAllParts on NftApproveForAll {\n  id\n  asset {\n    ...NFTAssetParts\n  }\n  nftStandard\n  operatorAddress\n  approved\n}\n    ${NftAssetPartsFragmentDoc}`;\nexport const AssetActivityPartsFragmentDoc = gql`\n    fragment AssetActivityParts on AssetActivity {\n  id\n  timestamp\n  type\n  chain\n  transaction {\n    ...TransactionParts\n  }\n  assetChanges {\n    __typename\n    ... on TokenTransfer {\n      ...TokenTransferParts\n    }\n    ... on NftTransfer {\n      ...NFTTransferParts\n    }\n    ... on TokenApproval {\n      ...TokenApprovalParts\n    }\n    ... on NftApproval {\n      ...NFTApprovalParts\n    }\n    ... on NftApproveForAll {\n      ...NFTApproveForAllParts\n    }\n  }\n}\n    ${TransactionPartsFragmentDoc}\n${TokenTransferPartsFragmentDoc}\n${NftTransferPartsFragmentDoc}\n${TokenApprovalPartsFragmentDoc}\n${NftApprovalPartsFragmentDoc}\n${NftApproveForAllPartsFragmentDoc}`;\nexport const RecentlySearchedAssetsDocument = gql`\n    query RecentlySearchedAssets($collectionAddresses: [String!]!, $contracts: [ContractInput!]!) {\n  nftCollections(filter: {addresses: $collectionAddresses}) {\n    edges {\n      node {\n        collectionId\n        image {\n          url\n        }\n        isVerified\n        name\n        numAssets\n        nftContracts {\n          address\n        }\n        markets(currencies: ETH) {\n          floorPrice {\n            currency\n            value\n          }\n        }\n      }\n    }\n  }\n  tokens(contracts: $contracts) {\n    id\n    decimals\n    name\n    chain\n    standard\n    address\n    symbol\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: DAY) {\n        id\n        value\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n      safetyLevel\n    }\n  }\n}\n    `;\n\n/**\n * __useRecentlySearchedAssetsQuery__\n *\n * To run a query within a React component, call `useRecentlySearchedAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRecentlySearchedAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRecentlySearchedAssetsQuery({\n *   variables: {\n *      collectionAddresses: // value for 'collectionAddresses'\n *      contracts: // value for 'contracts'\n *   },\n * });\n */\nexport function useRecentlySearchedAssetsQuery(baseOptions) {\n  _s();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(RecentlySearchedAssetsDocument, options);\n}\n_s(useRecentlySearchedAssetsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useRecentlySearchedAssetsLazyQuery(baseOptions) {\n  _s2();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(RecentlySearchedAssetsDocument, options);\n}\n_s2(useRecentlySearchedAssetsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const SearchTokensDocument = gql`\n    query SearchTokens($searchQuery: String!) {\n  searchTokens(searchQuery: $searchQuery) {\n    id\n    decimals\n    name\n    chain\n    standard\n    address\n    symbol\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: DAY) {\n        id\n        value\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n      safetyLevel\n    }\n  }\n}\n    `;\n\n/**\n * __useSearchTokensQuery__\n *\n * To run a query within a React component, call `useSearchTokensQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchTokensQuery({\n *   variables: {\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useSearchTokensQuery(baseOptions) {\n  _s3();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(SearchTokensDocument, options);\n}\n_s3(useSearchTokensQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useSearchTokensLazyQuery(baseOptions) {\n  _s4();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(SearchTokensDocument, options);\n}\n_s4(useSearchTokensLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TokenDocument = gql`\n    query Token($chain: Chain!, $address: String = null) {\n  token(chain: $chain, address: $address) {\n    id\n    decimals\n    name\n    chain\n    address\n    symbol\n    standard\n    market(currency: USD) {\n      id\n      totalValueLocked {\n        id\n        value\n        currency\n      }\n      price {\n        id\n        value\n        currency\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n      priceHigh52W: priceHighLow(duration: YEAR, highLow: HIGH) {\n        id\n        value\n      }\n      priceLow52W: priceHighLow(duration: YEAR, highLow: LOW) {\n        id\n        value\n      }\n    }\n    project {\n      id\n      description\n      homepageUrl\n      twitterName\n      logoUrl\n      tokens {\n        id\n        chain\n        address\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenQuery__\n *\n * To run a query within a React component, call `useTokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      address: // value for 'address'\n *   },\n * });\n */\nexport function useTokenQuery(baseOptions) {\n  _s5();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TokenDocument, options);\n}\n_s5(useTokenQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTokenLazyQuery(baseOptions) {\n  _s6();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TokenDocument, options);\n}\n_s6(useTokenLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TokenPriceDocument = gql`\n    query TokenPrice($chain: Chain!, $address: String = null, $duration: HistoryDuration!) {\n  token(chain: $chain, address: $address) {\n    id\n    address\n    chain\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n      }\n      priceHistory(duration: $duration) {\n        id\n        timestamp\n        value\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenPriceQuery__\n *\n * To run a query within a React component, call `useTokenPriceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenPriceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenPriceQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      address: // value for 'address'\n *      duration: // value for 'duration'\n *   },\n * });\n */\nexport function useTokenPriceQuery(baseOptions) {\n  _s7();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TokenPriceDocument, options);\n}\n_s7(useTokenPriceQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTokenPriceLazyQuery(baseOptions) {\n  _s8();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TokenPriceDocument, options);\n}\n_s8(useTokenPriceLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const UniswapPricesDocument = gql`\n    query UniswapPrices($contracts: [ContractInput!]!) {\n  tokens(contracts: $contracts) {\n    id\n    address\n    chain\n    standard\n    project {\n      id\n      markets(currencies: [USD]) {\n        id\n        price {\n          id\n          value\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useUniswapPricesQuery__\n *\n * To run a query within a React component, call `useUniswapPricesQuery` and pass it any options that fit your needs.\n * When your component renders, `useUniswapPricesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUniswapPricesQuery({\n *   variables: {\n *      contracts: // value for 'contracts'\n *   },\n * });\n */\nexport function useUniswapPricesQuery(baseOptions) {\n  _s9();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(UniswapPricesDocument, options);\n}\n_s9(useUniswapPricesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useUniswapPricesLazyQuery(baseOptions) {\n  _s10();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(UniswapPricesDocument, options);\n}\n_s10(useUniswapPricesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TokenSpotPriceDocument = gql`\n    query TokenSpotPrice($chain: Chain!, $address: String = null) {\n  token(chain: $chain, address: $address) {\n    id\n    address\n    chain\n    name\n    symbol\n    project {\n      id\n      markets(currencies: [USD]) {\n        id\n        price {\n          id\n          value\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenSpotPriceQuery__\n *\n * To run a query within a React component, call `useTokenSpotPriceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenSpotPriceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenSpotPriceQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      address: // value for 'address'\n *   },\n * });\n */\nexport function useTokenSpotPriceQuery(baseOptions) {\n  _s11();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TokenSpotPriceDocument, options);\n}\n_s11(useTokenSpotPriceQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTokenSpotPriceLazyQuery(baseOptions) {\n  _s12();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TokenSpotPriceDocument, options);\n}\n_s12(useTokenSpotPriceLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TopTokens100Document = gql`\n    query TopTokens100($duration: HistoryDuration!, $chain: Chain!) {\n  topTokens(pageSize: 100, page: 1, chain: $chain, orderBy: VOLUME) {\n    id\n    name\n    chain\n    address\n    symbol\n    standard\n    market(currency: USD) {\n      id\n      totalValueLocked {\n        id\n        value\n        currency\n      }\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: $duration) {\n        id\n        currency\n        value\n      }\n      volume(duration: $duration) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n    }\n  }\n}\n    `;\n\n/**\n * __useTopTokens100Query__\n *\n * To run a query within a React component, call `useTopTokens100Query` and pass it any options that fit your needs.\n * When your component renders, `useTopTokens100Query` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokens100Query({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTopTokens100Query(baseOptions) {\n  _s13();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TopTokens100Document, options);\n}\n_s13(useTopTokens100Query, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTopTokens100LazyQuery(baseOptions) {\n  _s14();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TopTokens100Document, options);\n}\n_s14(useTopTokens100LazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TopTokensSparklineDocument = gql`\n    query TopTokensSparkline($duration: HistoryDuration!, $chain: Chain!) {\n  topTokens(pageSize: 100, page: 1, chain: $chain, orderBy: VOLUME) {\n    id\n    address\n    chain\n    market(currency: USD) {\n      id\n      priceHistory(duration: $duration) {\n        id\n        timestamp\n        value\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTopTokensSparklineQuery__\n *\n * To run a query within a React component, call `useTopTokensSparklineQuery` and pass it any options that fit your needs.\n * When your component renders, `useTopTokensSparklineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokensSparklineQuery({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTopTokensSparklineQuery(baseOptions) {\n  _s15();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TopTokensSparklineDocument, options);\n}\n_s15(useTopTokensSparklineQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTopTokensSparklineLazyQuery(baseOptions) {\n  _s16();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TopTokensSparklineDocument, options);\n}\n_s16(useTopTokensSparklineLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TrendingTokensDocument = gql`\n    query TrendingTokens($chain: Chain!) {\n  topTokens(pageSize: 4, page: 1, chain: $chain, orderBy: VOLUME) {\n    id\n    decimals\n    name\n    chain\n    standard\n    address\n    symbol\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: DAY) {\n        id\n        value\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n      safetyLevel\n    }\n  }\n}\n    `;\n\n/**\n * __useTrendingTokensQuery__\n *\n * To run a query within a React component, call `useTrendingTokensQuery` and pass it any options that fit your needs.\n * When your component renders, `useTrendingTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTrendingTokensQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTrendingTokensQuery(baseOptions) {\n  _s17();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TrendingTokensDocument, options);\n}\n_s17(useTrendingTokensQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTrendingTokensLazyQuery(baseOptions) {\n  _s18();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TrendingTokensDocument, options);\n}\n_s18(useTrendingTokensLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const AssetDocument = gql`\n    query Asset($address: String!, $orderBy: NftAssetSortableField, $asc: Boolean, $filter: NftAssetsFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\n  nftAssets(\n    address: $address\n    orderBy: $orderBy\n    asc: $asc\n    filter: $filter\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    edges {\n      node {\n        id\n        name\n        image {\n          url\n        }\n        smallImage {\n          url\n        }\n        tokenId\n        animationUrl\n        suspiciousFlag\n        collection {\n          name\n          isVerified\n          nftContracts {\n            address\n            standard\n          }\n        }\n        listings(first: 1) {\n          edges {\n            node {\n              address\n              createdAt\n              endAt\n              id\n              maker\n              marketplace\n              marketplaceUrl\n              orderHash\n              price {\n                currency\n                value\n              }\n              quantity\n              startAt\n              status\n              taker\n              tokenId\n              type\n              protocolParameters\n            }\n            cursor\n          }\n        }\n        rarities {\n          rank\n        }\n      }\n      cursor\n    }\n    totalCount\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAssetQuery__\n *\n * To run a query within a React component, call `useAssetQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetQuery({\n *   variables: {\n *      address: // value for 'address'\n *      orderBy: // value for 'orderBy'\n *      asc: // value for 'asc'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */\nexport function useAssetQuery(baseOptions) {\n  _s19();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(AssetDocument, options);\n}\n_s19(useAssetQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useAssetLazyQuery(baseOptions) {\n  _s20();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(AssetDocument, options);\n}\n_s20(useAssetLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const CollectionDocument = gql`\n    query Collection($addresses: [String!]!) {\n  nftCollections(filter: {addresses: $addresses}) {\n    edges {\n      cursor\n      node {\n        bannerImage {\n          url\n        }\n        collectionId\n        description\n        discordUrl\n        homepageUrl\n        image {\n          url\n        }\n        instagramName\n        isVerified\n        name\n        numAssets\n        twitterName\n        nftContracts {\n          address\n          chain\n          name\n          standard\n          symbol\n          totalSupply\n        }\n        traits {\n          name\n          values\n          stats {\n            name\n            value\n            assets\n            listings\n          }\n        }\n        markets(currencies: ETH) {\n          floorPrice {\n            currency\n            value\n          }\n          owners\n          totalVolume {\n            value\n            currency\n          }\n          listings {\n            value\n          }\n          volume(duration: DAY) {\n            value\n            currency\n          }\n          volumePercentChange(duration: DAY) {\n            value\n            currency\n          }\n          floorPricePercentChange(duration: DAY) {\n            value\n            currency\n          }\n          marketplaces {\n            marketplace\n            listings\n            floorPrice\n          }\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCollectionQuery__\n *\n * To run a query within a React component, call `useCollectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionQuery({\n *   variables: {\n *      addresses: // value for 'addresses'\n *   },\n * });\n */\nexport function useCollectionQuery(baseOptions) {\n  _s21();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(CollectionDocument, options);\n}\n_s21(useCollectionQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useCollectionLazyQuery(baseOptions) {\n  _s22();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(CollectionDocument, options);\n}\n_s22(useCollectionLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const CollectionSearchDocument = gql`\n    query CollectionSearch($query: String!) {\n  nftCollections(filter: {nameQuery: $query}) {\n    edges {\n      cursor\n      node {\n        image {\n          url\n        }\n        isVerified\n        name\n        numAssets\n        nftContracts {\n          address\n          chain\n          name\n          symbol\n          totalSupply\n        }\n        markets(currencies: ETH) {\n          floorPrice {\n            currency\n            value\n          }\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCollectionSearchQuery__\n *\n * To run a query within a React component, call `useCollectionSearchQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionSearchQuery({\n *   variables: {\n *      query: // value for 'query'\n *   },\n * });\n */\nexport function useCollectionSearchQuery(baseOptions) {\n  _s23();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(CollectionSearchDocument, options);\n}\n_s23(useCollectionSearchQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useCollectionSearchLazyQuery(baseOptions) {\n  _s24();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(CollectionSearchDocument, options);\n}\n_s24(useCollectionSearchLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const DetailsDocument = gql`\n    query Details($address: String!, $tokenId: String!) {\n  nftAssets(address: $address, filter: {listed: false, tokenIds: [$tokenId]}) {\n    edges {\n      node {\n        id\n        name\n        ownerAddress\n        image {\n          url\n        }\n        smallImage {\n          url\n        }\n        originalImage {\n          url\n        }\n        tokenId\n        description\n        animationUrl\n        suspiciousFlag\n        creator {\n          address\n          profileImage {\n            url\n          }\n          isVerified\n        }\n        collection {\n          name\n          isVerified\n          numAssets\n          twitterName\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          nftContracts {\n            address\n            standard\n          }\n          description\n        }\n        listings(first: 1) {\n          edges {\n            node {\n              address\n              createdAt\n              endAt\n              id\n              maker\n              marketplace\n              marketplaceUrl\n              orderHash\n              price {\n                currency\n                value\n              }\n              quantity\n              startAt\n              status\n              taker\n              tokenId\n              type\n              protocolParameters\n            }\n            cursor\n          }\n        }\n        rarities {\n          provider\n          rank\n          score\n        }\n        metadataUrl\n        traits {\n          name\n          value\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useDetailsQuery__\n *\n * To run a query within a React component, call `useDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDetailsQuery({\n *   variables: {\n *      address: // value for 'address'\n *      tokenId: // value for 'tokenId'\n *   },\n * });\n */\nexport function useDetailsQuery(baseOptions) {\n  _s25();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(DetailsDocument, options);\n}\n_s25(useDetailsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useDetailsLazyQuery(baseOptions) {\n  _s26();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(DetailsDocument, options);\n}\n_s26(useDetailsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const NftActivityDocument = gql`\n    query NftActivity($filter: NftActivityFilterInput, $after: String, $first: Int) {\n  nftActivity(filter: $filter, after: $after, first: $first) {\n    edges {\n      node {\n        id\n        address\n        tokenId\n        asset {\n          id\n          metadataUrl\n          image {\n            id\n            url\n          }\n          smallImage {\n            id\n            url\n          }\n          name\n          rarities {\n            id\n            provider\n            rank\n            score\n          }\n          suspiciousFlag\n          nftContract {\n            id\n            standard\n          }\n          collection {\n            id\n            image {\n              id\n              url\n            }\n          }\n        }\n        type\n        marketplace\n        fromAddress\n        toAddress\n        transactionHash\n        price {\n          id\n          value\n        }\n        orderStatus\n        quantity\n        url\n        timestamp\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useNftActivityQuery__\n *\n * To run a query within a React component, call `useNftActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftActivityQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      after: // value for 'after'\n *      first: // value for 'first'\n *   },\n * });\n */\nexport function useNftActivityQuery(baseOptions) {\n  _s27();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(NftActivityDocument, options);\n}\n_s27(useNftActivityQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useNftActivityLazyQuery(baseOptions) {\n  _s28();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(NftActivityDocument, options);\n}\n_s28(useNftActivityLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const NftBalanceDocument = gql`\n    query NftBalance($ownerAddress: String!, $filter: NftBalancesFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\n  nftBalances(\n    ownerAddress: $ownerAddress\n    filter: $filter\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    edges {\n      node {\n        ownedAsset {\n          id\n          animationUrl\n          collection {\n            id\n            isVerified\n            image {\n              id\n              url\n            }\n            name\n            twitterName\n            nftContracts {\n              id\n              address\n              chain\n              name\n              standard\n              symbol\n              totalSupply\n            }\n            markets(currencies: ETH) {\n              id\n              floorPrice {\n                id\n                value\n              }\n            }\n          }\n          description\n          flaggedBy\n          image {\n            id\n            url\n          }\n          originalImage {\n            id\n            url\n          }\n          name\n          ownerAddress\n          smallImage {\n            id\n            url\n          }\n          suspiciousFlag\n          tokenId\n          thumbnail {\n            id\n            url\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                price {\n                  id\n                  value\n                  currency\n                }\n                createdAt\n                marketplace\n                endAt\n              }\n            }\n          }\n        }\n        listedMarketplaces\n        listingFees {\n          id\n          payoutAddress\n          basisPoints\n        }\n        lastPrice {\n          id\n          currency\n          timestamp\n          value\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useNftBalanceQuery__\n *\n * To run a query within a React component, call `useNftBalanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftBalanceQuery({\n *   variables: {\n *      ownerAddress: // value for 'ownerAddress'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */\nexport function useNftBalanceQuery(baseOptions) {\n  _s29();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(NftBalanceDocument, options);\n}\n_s29(useNftBalanceQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useNftBalanceLazyQuery(baseOptions) {\n  _s30();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(NftBalanceDocument, options);\n}\n_s30(useNftBalanceLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const NftRouteDocument = gql`\n    query NftRoute($chain: Chain = ETHEREUM, $senderAddress: String!, $nftTrades: [NftTradeInput!]!, $tokenTrades: [TokenTradeInput!]) {\n  nftRoute(\n    chain: $chain\n    senderAddress: $senderAddress\n    nftTrades: $nftTrades\n    tokenTrades: $tokenTrades\n  ) {\n    id\n    calldata\n    route {\n      amount\n      contractAddress\n      id\n      marketplace\n      price {\n        id\n        currency\n        value\n      }\n      quotePrice {\n        id\n        currency\n        value\n      }\n      tokenId\n      tokenType\n    }\n    sendAmount {\n      id\n      currency\n      value\n    }\n    toAddress\n  }\n}\n    `;\n\n/**\n * __useNftRouteQuery__\n *\n * To run a query within a React component, call `useNftRouteQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftRouteQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftRouteQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      senderAddress: // value for 'senderAddress'\n *      nftTrades: // value for 'nftTrades'\n *      tokenTrades: // value for 'tokenTrades'\n *   },\n * });\n */\nexport function useNftRouteQuery(baseOptions) {\n  _s31();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(NftRouteDocument, options);\n}\n_s31(useNftRouteQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useNftRouteLazyQuery(baseOptions) {\n  _s32();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(NftRouteDocument, options);\n}\n_s32(useNftRouteLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TrendingCollectionsDocument = gql`\n    query TrendingCollections($size: Int, $timePeriod: HistoryDuration) {\n  topCollections(first: $size, duration: $timePeriod) {\n    edges {\n      node {\n        name\n        nftContracts {\n          address\n          totalSupply\n        }\n        image {\n          url\n        }\n        bannerImage {\n          url\n        }\n        isVerified\n        markets(currencies: ETH) {\n          floorPrice {\n            value\n          }\n          owners\n          totalVolume {\n            value\n          }\n          volume(duration: $timePeriod) {\n            value\n          }\n          volumePercentChange(duration: $timePeriod) {\n            value\n          }\n          floorPricePercentChange(duration: $timePeriod) {\n            value\n          }\n          sales {\n            value\n          }\n          listings {\n            value\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTrendingCollectionsQuery__\n *\n * To run a query within a React component, call `useTrendingCollectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTrendingCollectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTrendingCollectionsQuery({\n *   variables: {\n *      size: // value for 'size'\n *      timePeriod: // value for 'timePeriod'\n *   },\n * });\n */\nexport function useTrendingCollectionsQuery(baseOptions) {\n  _s33();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TrendingCollectionsDocument, options);\n}\n_s33(useTrendingCollectionsQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTrendingCollectionsLazyQuery(baseOptions) {\n  _s34();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TrendingCollectionsDocument, options);\n}\n_s34(useTrendingCollectionsLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const PortfolioBalancesDocument = gql`\n    query PortfolioBalances($ownerAddress: String!) {\n  portfolios(\n    ownerAddresses: [$ownerAddress]\n    chains: [ETHEREUM, POLYGON, ARBITRUM, OPTIMISM, BNB]\n  ) {\n    id\n    tokensTotalDenominatedValue {\n      id\n      value\n    }\n    tokensTotalDenominatedValueChange(duration: DAY) {\n      absolute {\n        id\n        value\n      }\n      percentage {\n        id\n        value\n      }\n    }\n    tokenBalances {\n      id\n      quantity\n      denominatedValue {\n        id\n        currency\n        value\n      }\n      tokenProjectMarket {\n        id\n        pricePercentChange(duration: DAY) {\n          id\n          value\n        }\n        tokenProject {\n          id\n          logoUrl\n        }\n      }\n      token {\n        id\n        chain\n        address\n        name\n        symbol\n        standard\n        decimals\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __usePortfolioBalancesQuery__\n *\n * To run a query within a React component, call `usePortfolioBalancesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePortfolioBalancesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePortfolioBalancesQuery({\n *   variables: {\n *      ownerAddress: // value for 'ownerAddress'\n *   },\n * });\n */\nexport function usePortfolioBalancesQuery(baseOptions) {\n  _s35();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(PortfolioBalancesDocument, options);\n}\n_s35(usePortfolioBalancesQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function usePortfolioBalancesLazyQuery(baseOptions) {\n  _s36();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(PortfolioBalancesDocument, options);\n}\n_s36(usePortfolioBalancesLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});\nexport const TransactionListDocument = gql`\n    query TransactionList($account: String!) {\n  portfolios(ownerAddresses: [$account]) {\n    id\n    assetActivities(pageSize: 50, page: 1) {\n      ...AssetActivityParts\n    }\n  }\n}\n    ${AssetActivityPartsFragmentDoc}`;\n\n/**\n * __useTransactionListQuery__\n *\n * To run a query within a React component, call `useTransactionListQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionListQuery({\n *   variables: {\n *      account: // value for 'account'\n *   },\n * });\n */\nexport function useTransactionListQuery(baseOptions) {\n  _s37();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useQuery(TransactionListDocument, options);\n}\n_s37(useTransactionListQuery, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [Apollo.useQuery];\n});\nexport function useTransactionListLazyQuery(baseOptions) {\n  _s38();\n  const options = {\n    ...defaultOptions,\n    ...baseOptions\n  };\n  return Apollo.useLazyQuery(TransactionListDocument, options);\n}\n_s38(useTransactionListLazyQuery, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [Apollo.useLazyQuery];\n});","map":{"version":3,"names":["gql","Apollo","defaultOptions","ActivityType","AssetActivitySwitch","Chain","CollectionSortableField","Currency","HighLow","HistoryDuration","MediaType","NftActivityType","NftAssetSortableField","NftMarketplace","NftRarityProvider","NftStandard","OrderStatus","OrderType","PoolTransactionType","PriceSource","ProtocolVersion","SafetyLevel","SubscriptionType","SwapOrderStatus","SwapOrderType","TokenSortableField","TokenStandard","TokenTradeType","TransactionDirection","TransactionStatus","TransactionType","TransactionPartsFragmentDoc","TokenAssetPartsFragmentDoc","TokenTransferPartsFragmentDoc","NftAssetPartsFragmentDoc","NftTransferPartsFragmentDoc","TokenApprovalPartsFragmentDoc","NftApprovalPartsFragmentDoc","NftApproveForAllPartsFragmentDoc","AssetActivityPartsFragmentDoc","RecentlySearchedAssetsDocument","useRecentlySearchedAssetsQuery","baseOptions","options","useQuery","useRecentlySearchedAssetsLazyQuery","useLazyQuery","SearchTokensDocument","useSearchTokensQuery","useSearchTokensLazyQuery","TokenDocument","useTokenQuery","useTokenLazyQuery","TokenPriceDocument","useTokenPriceQuery","useTokenPriceLazyQuery","UniswapPricesDocument","useUniswapPricesQuery","useUniswapPricesLazyQuery","TokenSpotPriceDocument","useTokenSpotPriceQuery","useTokenSpotPriceLazyQuery","TopTokens100Document","useTopTokens100Query","useTopTokens100LazyQuery","TopTokensSparklineDocument","useTopTokensSparklineQuery","useTopTokensSparklineLazyQuery","TrendingTokensDocument","useTrendingTokensQuery","useTrendingTokensLazyQuery","AssetDocument","useAssetQuery","useAssetLazyQuery","CollectionDocument","useCollectionQuery","useCollectionLazyQuery","CollectionSearchDocument","useCollectionSearchQuery","useCollectionSearchLazyQuery","DetailsDocument","useDetailsQuery","useDetailsLazyQuery","NftActivityDocument","useNftActivityQuery","useNftActivityLazyQuery","NftBalanceDocument","useNftBalanceQuery","useNftBalanceLazyQuery","NftRouteDocument","useNftRouteQuery","useNftRouteLazyQuery","TrendingCollectionsDocument","useTrendingCollectionsQuery","useTrendingCollectionsLazyQuery","PortfolioBalancesDocument","usePortfolioBalancesQuery","usePortfolioBalancesLazyQuery","TransactionListDocument","useTransactionListQuery","useTransactionListLazyQuery"],"sources":["/home/diep/freelance/interface/src/graphql/data/__generated__/types-and-hooks.ts"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T;\nexport type InputMaybe<T> = T;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * The `AWSJSON` scalar type provided by AWS AppSync, represents a JSON string that\n   * complies with [RFC 8259](https://tools.ietf.org/html/rfc8259).  Maps like\n   * \"**{\\\\\"upvotes\\\\\": 10}**\", lists like \"**[1,2,3]**\", and scalar values like\n   * \"**\\\\\"AWSJSON example string\\\\\"**\", \"**1**\", and \"**true**\" are accepted as\n   * valid JSON and will automatically be parsed and loaded in the resolver mapping\n   * templates as Maps, Lists, or Scalar values rather than as the literal input\n   * strings.  Invalid JSON strings like \"**{a: 1}**\", \"**{'a': 1}**\" and \"**Unquoted\n   * string**\" will throw GraphQL validation errors.\n   */\n  AWSJSON: any;\n};\n\n/**\n *  Types, unions, and inputs (alphabetized):\n * These are colocated to highlight the relationship between some types and their inputs.\n */\nexport type ActivityDetails = OnRampTransactionDetails | SwapOrderDetails | TransactionDetails;\n\nexport type ActivityDetailsInput = {\n  onRampTransactionDetails?: InputMaybe<OnRampTransactionDetailsInput>;\n  swapOrderDetails?: InputMaybe<SwapOrderDetailsInput>;\n  transactionDetails?: InputMaybe<TransactionDetailsInput>;\n};\n\n/**\n *  Enums (alphabetized):\n * deprecated and replaced with TransactionType, please do not use this\n */\nexport enum ActivityType {\n  Approve = 'APPROVE',\n  Borrow = 'BORROW',\n  Burn = 'BURN',\n  Cancel = 'CANCEL',\n  Claim = 'CLAIM',\n  Deployment = 'DEPLOYMENT',\n  Lend = 'LEND',\n  Mint = 'MINT',\n  Nft = 'NFT',\n  OnRamp = 'ON_RAMP',\n  Receive = 'RECEIVE',\n  Repay = 'REPAY',\n  Send = 'SEND',\n  Stake = 'STAKE',\n  Swap = 'SWAP',\n  SwapOrder = 'SWAP_ORDER',\n  Staking = 'Staking',\n  Unknown = 'UNKNOWN',\n  Unstake = 'UNSTAKE',\n  Withdraw = 'WITHDRAW',\n  Market = 'market',\n  Money = 'money'\n}\n\nexport type Amount = IAmount & {\n  __typename?: 'Amount';\n  currency?: Maybe<Currency>;\n  id: Scalars['ID'];\n  value: Scalars['Float'];\n};\n\nexport type AmountChange = {\n  __typename?: 'AmountChange';\n  absolute?: Maybe<Amount>;\n  id: Scalars['ID'];\n  percentage?: Maybe<Amount>;\n};\n\nexport type AmountInput = {\n  currency?: InputMaybe<Currency>;\n  value: Scalars['Float'];\n};\n\nexport type ApplicationContract = IContract & {\n  __typename?: 'ApplicationContract';\n  address: Scalars['String'];\n  chain: Chain;\n  icon?: Maybe<Image>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n};\n\nexport type ApplicationContractInput = {\n  address: Scalars['String'];\n  chain: Chain;\n  icon?: InputMaybe<ImageInput>;\n  name?: InputMaybe<Scalars['String']>;\n};\n\nexport type AssetActivity = {\n  __typename?: 'AssetActivity';\n  addresses?: Maybe<Array<Scalars['String']>>;\n  /** @deprecated use assetChanges field in details */\n  assetChanges: Array<Maybe<AssetChange>>;\n  chain: Chain;\n  details: ActivityDetails;\n  /** @deprecated not required, remove usage */\n  gasUsed?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  /** @deprecated use fields from details */\n  transaction: Transaction;\n  /** @deprecated use type field in details */\n  type: ActivityType;\n};\n\nexport type AssetActivityInput = {\n  chain: Chain;\n  details: ActivityDetailsInput;\n  timestamp: Scalars['Int'];\n};\n\nexport enum AssetActivitySwitch {\n  Alternate = 'ALTERNATE',\n  Legacy = 'LEGACY'\n}\n\nexport type AssetChange = NftApproval | NftApproveForAll | NftTransfer | OnRampTransfer | TokenApproval | TokenTransfer;\n\nexport type AssetChangeInput = {\n  nftApproval?: InputMaybe<NftApprovalInput>;\n  nftApproveForAll?: InputMaybe<NftApproveForAllInput>;\n  nftTransfer?: InputMaybe<NftTransferInput>;\n  onRampTransfer?: InputMaybe<OnRampTransferInput>;\n  tokenApproval?: InputMaybe<TokenApprovalInput>;\n  tokenTransfer?: InputMaybe<TokenTransferInput>;\n};\n\nexport enum Chain {\n  Arbitrum = 'ARBITRUM',\n  Avalanche = 'AVALANCHE',\n  Base = 'BASE',\n  Blast = 'BLAST',\n  Bnb = 'BNB',\n  Celo = 'CELO',\n  Ethereum = 'ETHEREUM',\n  EthereumGoerli = 'ETHEREUM_GOERLI',\n  EthereumSepolia = 'ETHEREUM_SEPOLIA',\n  Optimism = 'OPTIMISM',\n  Polygon = 'POLYGON',\n  UnknownChain = 'UNKNOWN_CHAIN',\n  Zksync = 'ZKSYNC',\n  Zora = 'ZORA',\n  Trustkey = 'TRUSTKEY'\n}\n\nexport enum CollectionSortableField {\n  Volume = 'VOLUME'\n}\n\nexport type ContractInput = {\n  address?: InputMaybe<Scalars['String']>;\n  chain: Chain;\n};\n\nexport enum Currency {\n  Aud = 'AUD',\n  Brl = 'BRL',\n  Cad = 'CAD',\n  Cny = 'CNY',\n  Eth = 'ETH',\n  Eur = 'EUR',\n  Gbp = 'GBP',\n  Hkd = 'HKD',\n  Idr = 'IDR',\n  Inr = 'INR',\n  Jpy = 'JPY',\n  Matic = 'MATIC',\n  Ngn = 'NGN',\n  Pkr = 'PKR',\n  Rub = 'RUB',\n  Sgd = 'SGD',\n  Thb = 'THB',\n  Try = 'TRY',\n  Uah = 'UAH',\n  Usd = 'USD',\n  Vnd = 'VND'\n}\n\nexport type CurrencyAmountInput = {\n  currency: Currency;\n  value: Scalars['Float'];\n};\n\nexport type DescriptionTranslations = {\n  __typename?: 'DescriptionTranslations';\n  descriptionEnUs?: Maybe<Scalars['String']>;\n  descriptionEs419?: Maybe<Scalars['String']>;\n  descriptionEsEs?: Maybe<Scalars['String']>;\n  descriptionEsUs?: Maybe<Scalars['String']>;\n  descriptionFrFr?: Maybe<Scalars['String']>;\n  descriptionHiIn?: Maybe<Scalars['String']>;\n  descriptionIdId?: Maybe<Scalars['String']>;\n  descriptionJaJp?: Maybe<Scalars['String']>;\n  descriptionMsMy?: Maybe<Scalars['String']>;\n  descriptionNlNl?: Maybe<Scalars['String']>;\n  descriptionPtPt?: Maybe<Scalars['String']>;\n  descriptionRuRu?: Maybe<Scalars['String']>;\n  descriptionThTh?: Maybe<Scalars['String']>;\n  descriptionTrTr?: Maybe<Scalars['String']>;\n  descriptionUkUa?: Maybe<Scalars['String']>;\n  descriptionUrPk?: Maybe<Scalars['String']>;\n  descriptionViVn?: Maybe<Scalars['String']>;\n  descriptionZhHans?: Maybe<Scalars['String']>;\n  descriptionZhHant?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n};\n\nexport type Dimensions = {\n  __typename?: 'Dimensions';\n  height?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport type DimensionsInput = {\n  height?: InputMaybe<Scalars['Float']>;\n  width?: InputMaybe<Scalars['Float']>;\n};\n\nexport type FeeData = {\n  __typename?: 'FeeData';\n  buyFeeBps?: Maybe<Scalars['String']>;\n  sellFeeBps?: Maybe<Scalars['String']>;\n};\n\nexport enum HighLow {\n  High = 'HIGH',\n  Low = 'LOW'\n}\n\n/**   FIVE_MINUTE is only supported for TokenMarket.pricePercentChange */\nexport enum HistoryDuration {\n  Day = 'DAY',\n  FiveMinute = 'FIVE_MINUTE',\n  Hour = 'HOUR',\n  Max = 'MAX',\n  Month = 'MONTH',\n  Week = 'WEEK',\n  Year = 'YEAR'\n}\n\n/**   Interfaces (alphabetized): */\nexport type IAmount = {\n  currency?: Maybe<Currency>;\n  value: Scalars['Float'];\n};\n\nexport type IContract = {\n  address?: Maybe<Scalars['String']>;\n  chain: Chain;\n};\n\nexport type IPool = {\n  address: Scalars['String'];\n  chain: Chain;\n  createdAtTimestamp?: Maybe<Scalars['Int']>;\n  cumulativeVolume?: Maybe<Amount>;\n  historicalVolume?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  id: Scalars['ID'];\n  priceHistory?: Maybe<Array<Maybe<TimestampedPoolPrice>>>;\n  protocolVersion: ProtocolVersion;\n  token0?: Maybe<Token>;\n  token0Supply?: Maybe<Scalars['Float']>;\n  token1?: Maybe<Token>;\n  token1Supply?: Maybe<Scalars['Float']>;\n  totalLiquidity?: Maybe<Amount>;\n  totalLiquidityPercentChange24h?: Maybe<Amount>;\n  transactions?: Maybe<Array<Maybe<PoolTransaction>>>;\n  txCount?: Maybe<Scalars['Int']>;\n};\n\n\nexport type IPoolCumulativeVolumeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type IPoolHistoricalVolumeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type IPoolPriceHistoryArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type IPoolTransactionsArgs = {\n  first: Scalars['Int'];\n  timestampCursor?: InputMaybe<Scalars['Int']>;\n};\n\nexport type Image = {\n  __typename?: 'Image';\n  dimensions?: Maybe<Dimensions>;\n  id: Scalars['ID'];\n  url: Scalars['String'];\n};\n\nexport type ImageInput = {\n  dimensions?: InputMaybe<DimensionsInput>;\n  url: Scalars['String'];\n};\n\nexport enum MediaType {\n  Audio = 'AUDIO',\n  Image = 'IMAGE',\n  Raw = 'RAW',\n  Video = 'VIDEO'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  assetActivity: AssetActivity;\n  heartbeat: Status;\n  unsubscribe: Status;\n};\n\n\nexport type MutationAssetActivityArgs = {\n  input: AssetActivityInput;\n};\n\n\nexport type MutationHeartbeatArgs = {\n  subscriptionId: Scalars['ID'];\n  type: SubscriptionType;\n};\n\n\nexport type MutationUnsubscribeArgs = {\n  subscriptionId: Scalars['ID'];\n  type: SubscriptionType;\n};\n\nexport type NetworkFee = {\n  __typename?: 'NetworkFee';\n  quantity?: Maybe<Scalars['String']>;\n  tokenAddress?: Maybe<Scalars['String']>;\n  tokenChain?: Maybe<Scalars['String']>;\n  tokenSymbol?: Maybe<Scalars['String']>;\n};\n\nexport type NftActivity = {\n  __typename?: 'NftActivity';\n  address: Scalars['String'];\n  asset?: Maybe<NftAsset>;\n  fromAddress: Scalars['String'];\n  id: Scalars['ID'];\n  marketplace?: Maybe<Scalars['String']>;\n  orderStatus?: Maybe<OrderStatus>;\n  price?: Maybe<Amount>;\n  quantity?: Maybe<Scalars['Int']>;\n  timestamp: Scalars['Int'];\n  toAddress?: Maybe<Scalars['String']>;\n  tokenId?: Maybe<Scalars['String']>;\n  transactionHash?: Maybe<Scalars['String']>;\n  type: NftActivityType;\n  url?: Maybe<Scalars['String']>;\n};\n\nexport type NftActivityConnection = {\n  __typename?: 'NftActivityConnection';\n  edges: Array<NftActivityEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftActivityEdge = {\n  __typename?: 'NftActivityEdge';\n  cursor: Scalars['String'];\n  node: NftActivity;\n};\n\nexport type NftActivityFilterInput = {\n  activityTypes?: InputMaybe<Array<NftActivityType>>;\n  address?: InputMaybe<Scalars['String']>;\n  tokenId?: InputMaybe<Scalars['String']>;\n};\n\nexport enum NftActivityType {\n  CancelListing = 'CANCEL_LISTING',\n  Listing = 'LISTING',\n  Sale = 'SALE',\n  Transfer = 'TRANSFER'\n}\n\nexport type NftApproval = {\n  __typename?: 'NftApproval';\n  approvedAddress: Scalars['String'];\n  /**   can be erc721, erc1155, noncompliant */\n  asset: NftAsset;\n  id: Scalars['ID'];\n  nftStandard: NftStandard;\n};\n\nexport type NftApprovalInput = {\n  approvedAddress: Scalars['String'];\n  asset: NftAssetInput;\n  nftStandard: NftStandard;\n};\n\nexport type NftApproveForAll = {\n  __typename?: 'NftApproveForAll';\n  approved: Scalars['Boolean'];\n  /**   can be erc721, erc1155, noncompliant */\n  asset: NftAsset;\n  id: Scalars['ID'];\n  nftStandard: NftStandard;\n  operatorAddress: Scalars['String'];\n};\n\nexport type NftApproveForAllInput = {\n  approved: Scalars['Boolean'];\n  asset: NftAssetInput;\n  nftStandard: NftStandard;\n  operatorAddress: Scalars['String'];\n};\n\nexport type NftAsset = {\n  __typename?: 'NftAsset';\n  animationUrl?: Maybe<Scalars['String']>;\n  chain?: Maybe<Chain>;\n  collection?: Maybe<NftCollection>;\n  creator?: Maybe<NftProfile>;\n  description?: Maybe<Scalars['String']>;\n  flaggedBy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Image>;\n  /** @deprecated Field no longer supported */\n  imageUrl?: Maybe<Scalars['String']>;\n  isSpam?: Maybe<Scalars['Boolean']>;\n  listings?: Maybe<NftOrderConnection>;\n  mediaType?: Maybe<MediaType>;\n  metadataUrl?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nftContract?: Maybe<NftContract>;\n  originalImage?: Maybe<Image>;\n  /**   TODO: may need to be array to support erc1155 cases. not needed at the moment so will revisit. */\n  ownerAddress?: Maybe<Scalars['String']>;\n  rarities?: Maybe<Array<NftAssetRarity>>;\n  smallImage?: Maybe<Image>;\n  /** @deprecated Field no longer supported */\n  smallImageUrl?: Maybe<Scalars['String']>;\n  suspiciousFlag?: Maybe<Scalars['Boolean']>;\n  thumbnail?: Maybe<Image>;\n  /** @deprecated Field no longer supported */\n  thumbnailUrl?: Maybe<Scalars['String']>;\n  tokenId: Scalars['String'];\n  traits?: Maybe<Array<NftAssetTrait>>;\n};\n\n\nexport type NftAssetListingsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  asc?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\nexport type NftAssetConnection = {\n  __typename?: 'NftAssetConnection';\n  edges: Array<NftAssetEdge>;\n  pageInfo: PageInfo;\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type NftAssetEdge = {\n  __typename?: 'NftAssetEdge';\n  cursor: Scalars['String'];\n  node: NftAsset;\n};\n\nexport type NftAssetInput = {\n  animationUrl?: InputMaybe<Scalars['String']>;\n  collection?: InputMaybe<NftCollectionInput>;\n  description?: InputMaybe<Scalars['String']>;\n  image?: InputMaybe<ImageInput>;\n  isSpam?: InputMaybe<Scalars['Boolean']>;\n  mediaType?: InputMaybe<MediaType>;\n  name?: InputMaybe<Scalars['String']>;\n  nftContract?: InputMaybe<NftContractInput>;\n  smallImage?: InputMaybe<ImageInput>;\n  thumbnail?: InputMaybe<ImageInput>;\n  tokenId: Scalars['String'];\n};\n\nexport type NftAssetRarity = {\n  __typename?: 'NftAssetRarity';\n  id: Scalars['ID'];\n  provider?: Maybe<NftRarityProvider>;\n  rank?: Maybe<Scalars['Int']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\nexport enum NftAssetSortableField {\n  Price = 'PRICE',\n  Rarity = 'RARITY'\n}\n\nexport type NftAssetTrait = {\n  __typename?: 'NftAssetTrait';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  rarity?: Maybe<Scalars['Float']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type NftAssetTraitInput = {\n  name: Scalars['String'];\n  values: Array<Scalars['String']>;\n};\n\nexport type NftAssetsFilterInput = {\n  listed?: InputMaybe<Scalars['Boolean']>;\n  marketplaces?: InputMaybe<Array<NftMarketplace>>;\n  maxPrice?: InputMaybe<Scalars['String']>;\n  minPrice?: InputMaybe<Scalars['String']>;\n  tokenIds?: InputMaybe<Array<Scalars['String']>>;\n  tokenSearchQuery?: InputMaybe<Scalars['String']>;\n  traits?: InputMaybe<Array<NftAssetTraitInput>>;\n};\n\nexport type NftBalance = {\n  __typename?: 'NftBalance';\n  id: Scalars['ID'];\n  lastPrice?: Maybe<TimestampedAmount>;\n  listedMarketplaces?: Maybe<Array<NftMarketplace>>;\n  listingFees?: Maybe<Array<Maybe<NftFee>>>;\n  ownedAsset?: Maybe<NftAsset>;\n  quantity?: Maybe<Scalars['Int']>;\n};\n\nexport type NftBalanceAssetInput = {\n  address: Scalars['String'];\n  tokenId: Scalars['String'];\n};\n\nexport type NftBalanceConnection = {\n  __typename?: 'NftBalanceConnection';\n  edges: Array<NftBalanceEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftBalanceEdge = {\n  __typename?: 'NftBalanceEdge';\n  cursor: Scalars['String'];\n  node: NftBalance;\n};\n\nexport type NftBalancesFilterInput = {\n  addresses?: InputMaybe<Array<Scalars['String']>>;\n  assets?: InputMaybe<Array<NftBalanceAssetInput>>;\n  filterSpam?: InputMaybe<Scalars['Boolean']>;\n};\n\nexport type NftCollection = {\n  __typename?: 'NftCollection';\n  bannerImage?: Maybe<Image>;\n  /**\n   *  TODO: support querying for collection assets here\n   * assets(page: Int, pageSize: Int, orderBy: NftAssetSortableField): [NftAsset]\n   * @deprecated Field no longer supported\n   */\n  bannerImageUrl?: Maybe<Scalars['String']>;\n  collectionId: Scalars['String'];\n  creator?: Maybe<NftProfile>;\n  description?: Maybe<Scalars['String']>;\n  discordUrl?: Maybe<Scalars['String']>;\n  homepageUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Image>;\n  /** @deprecated Field no longer supported */\n  imageUrl?: Maybe<Scalars['String']>;\n  instagramName?: Maybe<Scalars['String']>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  markets?: Maybe<Array<NftCollectionMarket>>;\n  name?: Maybe<Scalars['String']>;\n  nftContracts?: Maybe<Array<NftContract>>;\n  numAssets?: Maybe<Scalars['Int']>;\n  /** @deprecated Field no longer supported */\n  openseaUrl?: Maybe<Scalars['String']>;\n  traits?: Maybe<Array<NftCollectionTrait>>;\n  twitterName?: Maybe<Scalars['String']>;\n};\n\n\nexport type NftCollectionMarketsArgs = {\n  currencies: Array<Currency>;\n};\n\nexport type NftCollectionBalance = {\n  __typename?: 'NftCollectionBalance';\n  address: Scalars['String'];\n  balance: Scalars['Float'];\n  id: Scalars['ID'];\n  logoImage?: Maybe<Image>;\n  name: Scalars['String'];\n};\n\nexport type NftCollectionBalanceConnection = {\n  __typename?: 'NftCollectionBalanceConnection';\n  edges: Array<NftCollectionBalanceEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftCollectionBalanceEdge = {\n  __typename?: 'NftCollectionBalanceEdge';\n  cursor: Scalars['String'];\n  node: NftCollectionBalance;\n};\n\nexport type NftCollectionConnection = {\n  __typename?: 'NftCollectionConnection';\n  edges: Array<NftCollectionEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftCollectionEdge = {\n  __typename?: 'NftCollectionEdge';\n  cursor: Scalars['String'];\n  node: NftCollection;\n};\n\nexport type NftCollectionInput = {\n  collectionId: Scalars['String'];\n  name?: InputMaybe<Scalars['String']>;\n  nftContracts?: InputMaybe<Array<NftContractInput>>;\n};\n\nexport type NftCollectionMarket = {\n  __typename?: 'NftCollectionMarket';\n  floorPrice?: Maybe<TimestampedAmount>;\n  floorPricePercentChange?: Maybe<TimestampedAmount>;\n  id: Scalars['ID'];\n  listings?: Maybe<TimestampedAmount>;\n  marketplaces?: Maybe<Array<NftCollectionMarketplace>>;\n  nftContracts?: Maybe<Array<NftContract>>;\n  owners?: Maybe<Scalars['Int']>;\n  percentListed?: Maybe<TimestampedAmount>;\n  percentUniqueOwners?: Maybe<TimestampedAmount>;\n  sales?: Maybe<TimestampedAmount>;\n  totalVolume?: Maybe<TimestampedAmount>;\n  volume?: Maybe<TimestampedAmount>;\n  /** @deprecated Field no longer supported */\n  volume24h?: Maybe<Amount>;\n  volumePercentChange?: Maybe<TimestampedAmount>;\n};\n\n\nexport type NftCollectionMarketFloorPricePercentChangeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n\nexport type NftCollectionMarketMarketplacesArgs = {\n  marketplaces?: InputMaybe<Array<NftMarketplace>>;\n};\n\n\nexport type NftCollectionMarketSalesArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n\nexport type NftCollectionMarketVolumeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n\nexport type NftCollectionMarketVolumePercentChangeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\nexport type NftCollectionMarketplace = {\n  __typename?: 'NftCollectionMarketplace';\n  floorPrice?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  listings?: Maybe<Scalars['Int']>;\n  marketplace?: Maybe<NftMarketplace>;\n};\n\nexport type NftCollectionTrait = {\n  __typename?: 'NftCollectionTrait';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  stats?: Maybe<Array<NftCollectionTraitStats>>;\n  values?: Maybe<Array<Scalars['String']>>;\n};\n\nexport type NftCollectionTraitStats = {\n  __typename?: 'NftCollectionTraitStats';\n  assets?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  listings?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type NftCollectionsFilterInput = {\n  addresses?: InputMaybe<Array<Scalars['String']>>;\n  nameQuery?: InputMaybe<Scalars['String']>;\n};\n\nexport type NftContract = IContract & {\n  __typename?: 'NftContract';\n  address: Scalars['String'];\n  chain: Chain;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  standard?: Maybe<NftStandard>;\n  symbol?: Maybe<Scalars['String']>;\n  totalSupply?: Maybe<Scalars['Int']>;\n};\n\nexport type NftContractInput = {\n  address: Scalars['String'];\n  chain: Chain;\n  name?: InputMaybe<Scalars['String']>;\n  standard?: InputMaybe<NftStandard>;\n  symbol?: InputMaybe<Scalars['String']>;\n  totalSupply?: InputMaybe<Scalars['Int']>;\n};\n\nexport type NftFee = {\n  __typename?: 'NftFee';\n  basisPoints: Scalars['Int'];\n  id: Scalars['ID'];\n  payoutAddress: Scalars['String'];\n};\n\nexport enum NftMarketplace {\n  Cryptopunks = 'CRYPTOPUNKS',\n  Foundation = 'FOUNDATION',\n  Looksrare = 'LOOKSRARE',\n  Nft20 = 'NFT20',\n  Nftx = 'NFTX',\n  Opensea = 'OPENSEA',\n  Sudoswap = 'SUDOSWAP',\n  X2Y2 = 'X2Y2'\n}\n\nexport type NftOrder = {\n  __typename?: 'NftOrder';\n  address: Scalars['String'];\n  auctionType?: Maybe<Scalars['String']>;\n  createdAt: Scalars['Float'];\n  endAt?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  maker: Scalars['String'];\n  marketplace: NftMarketplace;\n  marketplaceUrl: Scalars['String'];\n  orderHash?: Maybe<Scalars['String']>;\n  poolPrices?: Maybe<Array<Scalars['String']>>;\n  price: Amount;\n  protocolParameters?: Maybe<Scalars['AWSJSON']>;\n  quantity: Scalars['Int'];\n  startAt: Scalars['Float'];\n  status: OrderStatus;\n  taker?: Maybe<Scalars['String']>;\n  tokenId?: Maybe<Scalars['String']>;\n  type: OrderType;\n};\n\nexport type NftOrderConnection = {\n  __typename?: 'NftOrderConnection';\n  edges: Array<NftOrderEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftOrderEdge = {\n  __typename?: 'NftOrderEdge';\n  cursor: Scalars['String'];\n  node: NftOrder;\n};\n\nexport type NftProfile = {\n  __typename?: 'NftProfile';\n  address: Scalars['String'];\n  id: Scalars['ID'];\n  isVerified?: Maybe<Scalars['Boolean']>;\n  profileImage?: Maybe<Image>;\n  username?: Maybe<Scalars['String']>;\n};\n\nexport enum NftRarityProvider {\n  RaritySniper = 'RARITY_SNIPER'\n}\n\nexport type NftRouteResponse = {\n  __typename?: 'NftRouteResponse';\n  calldata: Scalars['String'];\n  id: Scalars['ID'];\n  route?: Maybe<Array<NftTrade>>;\n  sendAmount: TokenAmount;\n  toAddress: Scalars['String'];\n};\n\nexport enum NftStandard {\n  Erc721 = 'ERC721',\n  Erc1155 = 'ERC1155',\n  Noncompliant = 'NONCOMPLIANT'\n}\n\nexport type NftTrade = {\n  __typename?: 'NftTrade';\n  amount: Scalars['Int'];\n  contractAddress: Scalars['String'];\n  id: Scalars['ID'];\n  marketplace: NftMarketplace;\n  /**   price represents the current price of the NFT, which can be different from quotePrice */\n  price: TokenAmount;\n  /**   quotePrice represents the last quoted price of the NFT */\n  quotePrice?: Maybe<TokenAmount>;\n  tokenId: Scalars['String'];\n  tokenType?: Maybe<NftStandard>;\n};\n\nexport type NftTradeInput = {\n  amount: Scalars['Int'];\n  contractAddress: Scalars['String'];\n  id: Scalars['ID'];\n  marketplace: NftMarketplace;\n  quotePrice?: InputMaybe<TokenAmountInput>;\n  tokenId: Scalars['String'];\n  tokenType?: InputMaybe<NftStandard>;\n};\n\nexport type NftTransfer = {\n  __typename?: 'NftTransfer';\n  asset: NftAsset;\n  direction: TransactionDirection;\n  id: Scalars['ID'];\n  nftStandard: NftStandard;\n  recipient: Scalars['String'];\n  sender: Scalars['String'];\n};\n\nexport type NftTransferInput = {\n  asset: NftAssetInput;\n  direction: TransactionDirection;\n  nftStandard: NftStandard;\n  recipient: Scalars['String'];\n  sender: Scalars['String'];\n};\n\nexport type OnRampServiceProvider = {\n  __typename?: 'OnRampServiceProvider';\n  id: Scalars['ID'];\n  logoDarkUrl: Scalars['String'];\n  logoLightUrl: Scalars['String'];\n  name: Scalars['String'];\n  serviceProvider: Scalars['String'];\n  supportUrl?: Maybe<Scalars['String']>;\n  url: Scalars['String'];\n};\n\nexport type OnRampServiceProviderInput = {\n  logoDarkUrl: Scalars['String'];\n  logoLightUrl: Scalars['String'];\n  name: Scalars['String'];\n  serviceProvider: Scalars['String'];\n  supportUrl?: InputMaybe<Scalars['String']>;\n  url: Scalars['String'];\n};\n\nexport type OnRampTransactionDetails = {\n  __typename?: 'OnRampTransactionDetails';\n  id: Scalars['ID'];\n  onRampTransfer: OnRampTransfer;\n  receiverAddress: Scalars['String'];\n  status: TransactionStatus;\n};\n\nexport type OnRampTransactionDetailsInput = {\n  onRampTransfer: OnRampTransferInput;\n  receiverAddress: Scalars['String'];\n  status: TransactionStatus;\n};\n\nexport type OnRampTransactionsAuth = {\n  queryParams: Scalars['String'];\n  signature: Scalars['String'];\n};\n\nexport type OnRampTransfer = {\n  __typename?: 'OnRampTransfer';\n  amount: Scalars['Float'];\n  id: Scalars['ID'];\n  networkFee?: Maybe<Scalars['Float']>;\n  serviceProvider: OnRampServiceProvider;\n  sourceAmount: Scalars['Float'];\n  sourceCurrency?: Maybe<Scalars['String']>;\n  token: Token;\n  tokenStandard: TokenStandard;\n  totalFee?: Maybe<Scalars['Float']>;\n  transactionFee?: Maybe<Scalars['Float']>;\n  transactionReferenceId: Scalars['String'];\n};\n\nexport type OnRampTransferInput = {\n  amount: Scalars['Float'];\n  networkFee?: InputMaybe<Scalars['Float']>;\n  serviceProvider: OnRampServiceProviderInput;\n  sourceAmount: Scalars['Float'];\n  sourceCurrency?: InputMaybe<Scalars['String']>;\n  token: TokenAssetInput;\n  tokenStandard: TokenStandard;\n  totalFee?: InputMaybe<Scalars['Float']>;\n  transactionFee?: InputMaybe<Scalars['Float']>;\n  transactionReferenceId: Scalars['String'];\n};\n\nexport enum OrderStatus {\n  Cancelled = 'CANCELLED',\n  Executed = 'EXECUTED',\n  Expired = 'EXPIRED',\n  Valid = 'VALID'\n}\n\nexport enum OrderType {\n  Listing = 'LISTING',\n  Offer = 'OFFER'\n}\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  endCursor?: Maybe<Scalars['String']>;\n  hasNextPage?: Maybe<Scalars['Boolean']>;\n  hasPreviousPage?: Maybe<Scalars['Boolean']>;\n  startCursor?: Maybe<Scalars['String']>;\n};\n\n/**   v2 pool parameters as defined by https://github.com/Uniswap/v2-sdk/blob/main/src/entities/pair.ts */\nexport type PairInput = {\n  tokenAmountA: TokenAmountInput;\n  tokenAmountB: TokenAmountInput;\n};\n\nexport type PermitDetailsInput = {\n  amount: Scalars['String'];\n  expiration: Scalars['String'];\n  nonce: Scalars['String'];\n  token: Scalars['String'];\n};\n\nexport type PermitInput = {\n  details: PermitDetailsInput;\n  sigDeadline: Scalars['String'];\n  signature: Scalars['String'];\n  spender: Scalars['String'];\n};\n\n/**   v3 pool parameters as defined by https://github.com/Uniswap/v3-sdk/blob/main/src/entities/pool.ts */\nexport type PoolInput = {\n  fee: Scalars['Int'];\n  liquidity: Scalars['String'];\n  sqrtRatioX96: Scalars['String'];\n  tickCurrent: Scalars['String'];\n  tokenA: TokenInput;\n  tokenB: TokenInput;\n};\n\nexport type PoolTransaction = {\n  __typename?: 'PoolTransaction';\n  account: Scalars['String'];\n  chain: Chain;\n  hash: Scalars['String'];\n  id: Scalars['ID'];\n  protocolVersion: ProtocolVersion;\n  timestamp: Scalars['Int'];\n  token0: Token;\n  token0Quantity: Scalars['String'];\n  token1: Token;\n  token1Quantity: Scalars['String'];\n  type: PoolTransactionType;\n  usdValue: Amount;\n};\n\nexport enum PoolTransactionType {\n  Add = 'ADD',\n  Remove = 'REMOVE',\n  Swap = 'SWAP'\n}\n\nexport type Portfolio = {\n  __typename?: 'Portfolio';\n  assetActivities?: Maybe<Array<Maybe<AssetActivity>>>;\n  id: Scalars['ID'];\n  /**   TODO: (michael.zhang) replace with paginated query */\n  nftBalances?: Maybe<Array<Maybe<NftBalance>>>;\n  ownerAddress: Scalars['String'];\n  tokenBalances?: Maybe<Array<Maybe<TokenBalance>>>;\n  tokensTotalDenominatedValue?: Maybe<Amount>;\n  tokensTotalDenominatedValueChange?: Maybe<AmountChange>;\n};\n\n\nexport type PortfolioAssetActivitiesArgs = {\n  _fs?: InputMaybe<AssetActivitySwitch>;\n  chains?: InputMaybe<Array<Chain>>;\n  includeOffChain?: InputMaybe<Scalars['Boolean']>;\n  onRampTransactionsAuth?: InputMaybe<OnRampTransactionsAuth>;\n  page?: InputMaybe<Scalars['Int']>;\n  pageSize?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type PortfolioTokensTotalDenominatedValueChangeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n/**   Specify how the portfolio value should be calculated for each `ownerAddress`. */\nexport type PortfolioValueModifier = {\n  includeSmallBalances?: InputMaybe<Scalars['Boolean']>;\n  includeSpamTokens?: InputMaybe<Scalars['Boolean']>;\n  ownerAddress: Scalars['String'];\n  tokenExcludeOverrides?: InputMaybe<Array<ContractInput>>;\n  tokenIncludeOverrides?: InputMaybe<Array<ContractInput>>;\n};\n\nexport enum PriceSource {\n  SubgraphV2 = 'SUBGRAPH_V2',\n  SubgraphV3 = 'SUBGRAPH_V3'\n}\n\nexport enum ProtocolVersion {\n  V2 = 'V2',\n  V3 = 'V3'\n}\n\nexport type PushNotification = {\n  __typename?: 'PushNotification';\n  contents: Scalars['AWSJSON'];\n  id: Scalars['ID'];\n  notifyAddress: Scalars['String'];\n  signerHeader: Scalars['AWSJSON'];\n  viewerHeader: Scalars['AWSJSON'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  convert?: Maybe<Amount>;\n  dailyProtocolTvl?: Maybe<Array<TimestampedAmount>>;\n  historicalProtocolVolume?: Maybe<Array<TimestampedAmount>>;\n  isV3SubgraphStale?: Maybe<Scalars['Boolean']>;\n  nftActivity?: Maybe<NftActivityConnection>;\n  nftAssets?: Maybe<NftAssetConnection>;\n  nftBalances?: Maybe<NftBalanceConnection>;\n  nftCollectionBalances?: Maybe<NftCollectionBalanceConnection>;\n  nftCollections?: Maybe<NftCollectionConnection>;\n  nftRoute?: Maybe<NftRouteResponse>;\n  portfolios?: Maybe<Array<Maybe<Portfolio>>>;\n  searchTokens?: Maybe<Array<Maybe<Token>>>;\n  /**\n   *  token consumes chain and address instead of contract because the apollo client request cache can only use\n   * keys from the response, and the token response does not contain a contract, but does contain an unwrapped\n   * contract: chain and address.\n   */\n  token?: Maybe<Token>;\n  tokenProjects?: Maybe<Array<Maybe<TokenProject>>>;\n  tokens?: Maybe<Array<Maybe<Token>>>;\n  topCollections?: Maybe<NftCollectionConnection>;\n  topTokens?: Maybe<Array<Maybe<Token>>>;\n  /**   returns top v2 pairs sorted by total value locked in desc order */\n  topV2Pairs?: Maybe<Array<V2Pair>>;\n  /**   returns top v3 pools sorted by total value locked in desc order */\n  topV3Pools?: Maybe<Array<V3Pool>>;\n  transactionNotification?: Maybe<TransactionNotification>;\n  v2Pair?: Maybe<V2Pair>;\n  v2Transactions?: Maybe<Array<Maybe<PoolTransaction>>>;\n  v3Pool?: Maybe<V3Pool>;\n  v3PoolsForTokenPair?: Maybe<Array<V3Pool>>;\n  v3Transactions?: Maybe<Array<PoolTransaction>>;\n};\n\n\nexport type QueryConvertArgs = {\n  fromAmount: CurrencyAmountInput;\n  toCurrency: Currency;\n};\n\n\nexport type QueryDailyProtocolTvlArgs = {\n  chain: Chain;\n  version: ProtocolVersion;\n};\n\n\nexport type QueryHistoricalProtocolVolumeArgs = {\n  chain: Chain;\n  duration: HistoryDuration;\n  version: ProtocolVersion;\n};\n\n\nexport type QueryIsV3SubgraphStaleArgs = {\n  chain: Chain;\n};\n\n\nexport type QueryNftActivityArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  filter?: InputMaybe<NftActivityFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryNftAssetsArgs = {\n  address: Scalars['String'];\n  after?: InputMaybe<Scalars['String']>;\n  asc?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  filter?: InputMaybe<NftAssetsFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<NftAssetSortableField>;\n};\n\n\nexport type QueryNftBalancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  chains?: InputMaybe<Array<Chain>>;\n  filter?: InputMaybe<NftBalancesFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  ownerAddress: Scalars['String'];\n};\n\n\nexport type QueryNftCollectionBalancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  ownerAddress: Scalars['String'];\n};\n\n\nexport type QueryNftCollectionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  filter?: InputMaybe<NftCollectionsFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryNftRouteArgs = {\n  chain?: InputMaybe<Chain>;\n  nftTrades: Array<NftTradeInput>;\n  senderAddress: Scalars['String'];\n  tokenTrades?: InputMaybe<Array<TokenTradeInput>>;\n};\n\n\nexport type QueryPortfoliosArgs = {\n  chains?: InputMaybe<Array<Chain>>;\n  lookupTokens?: InputMaybe<Array<ContractInput>>;\n  ownerAddresses: Array<Scalars['String']>;\n  valueModifiers?: InputMaybe<Array<PortfolioValueModifier>>;\n};\n\n\nexport type QuerySearchTokensArgs = {\n  chains?: InputMaybe<Array<Chain>>;\n  searchQuery: Scalars['String'];\n};\n\n\nexport type QueryTokenArgs = {\n  address?: InputMaybe<Scalars['String']>;\n  chain: Chain;\n};\n\n\nexport type QueryTokenProjectsArgs = {\n  contracts: Array<ContractInput>;\n};\n\n\nexport type QueryTokensArgs = {\n  contracts: Array<ContractInput>;\n};\n\n\nexport type QueryTopCollectionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  chains?: InputMaybe<Array<Chain>>;\n  cursor?: InputMaybe<Scalars['String']>;\n  duration?: InputMaybe<HistoryDuration>;\n  first?: InputMaybe<Scalars['Int']>;\n  limit?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<CollectionSortableField>;\n};\n\n\nexport type QueryTopTokensArgs = {\n  chain?: InputMaybe<Chain>;\n  orderBy?: InputMaybe<TokenSortableField>;\n  page?: InputMaybe<Scalars['Int']>;\n  pageSize?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryTopV2PairsArgs = {\n  chain: Chain;\n  first: Scalars['Int'];\n  tokenFilter?: InputMaybe<Scalars['String']>;\n  tvlCursor?: InputMaybe<Scalars['Float']>;\n};\n\n\nexport type QueryTopV3PoolsArgs = {\n  chain: Chain;\n  first: Scalars['Int'];\n  tokenFilter?: InputMaybe<Scalars['String']>;\n  tvlCursor?: InputMaybe<Scalars['Float']>;\n};\n\n\nexport type QueryTransactionNotificationArgs = {\n  address: Scalars['String'];\n  chain: Chain;\n  transactionHash: Scalars['String'];\n};\n\n\nexport type QueryV2PairArgs = {\n  address: Scalars['String'];\n  chain: Chain;\n};\n\n\nexport type QueryV2TransactionsArgs = {\n  chain: Chain;\n  first: Scalars['Int'];\n  timestampCursor?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryV3PoolArgs = {\n  address: Scalars['String'];\n  chain: Chain;\n};\n\n\nexport type QueryV3PoolsForTokenPairArgs = {\n  chain: Chain;\n  token0: Scalars['String'];\n  token1: Scalars['String'];\n};\n\n\nexport type QueryV3TransactionsArgs = {\n  chain: Chain;\n  first: Scalars['Int'];\n  timestampCursor?: InputMaybe<Scalars['Int']>;\n};\n\nexport enum SafetyLevel {\n  Blocked = 'BLOCKED',\n  MediumWarning = 'MEDIUM_WARNING',\n  StrongWarning = 'STRONG_WARNING',\n  Verified = 'VERIFIED'\n}\n\nexport type Status = {\n  __typename?: 'Status';\n  success: Scalars['Boolean'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  onAssetActivity?: Maybe<AssetActivity>;\n};\n\n\nexport type SubscriptionOnAssetActivityArgs = {\n  addresses: Array<Scalars['String']>;\n  subscriptionId: Scalars['ID'];\n};\n\nexport enum SubscriptionType {\n  AssetActivity = 'ASSET_ACTIVITY'\n}\n\nexport type SwapOrderDetails = {\n  __typename?: 'SwapOrderDetails';\n  encodedOrder: Scalars['String'];\n  expiry: Scalars['Int'];\n  hash: Scalars['String'];\n  id: Scalars['ID'];\n  inputToken: Token;\n  inputTokenQuantity: Scalars['String'];\n  offerer: Scalars['String'];\n  outputToken: Token;\n  outputTokenQuantity: Scalars['String'];\n  /** @deprecated use swapOrderStatus to disambiguate from transactionStatus */\n  status: SwapOrderStatus;\n  swapOrderStatus: SwapOrderStatus;\n  swapOrderType: SwapOrderType;\n};\n\nexport type SwapOrderDetailsInput = {\n  encodedOrder: Scalars['String'];\n  expiry: Scalars['Int'];\n  hash: Scalars['String'];\n  inputAmount: Scalars['String'];\n  inputToken: TokenAssetInput;\n  offerer: Scalars['String'];\n  outputAmount: Scalars['String'];\n  outputToken: TokenAssetInput;\n  status?: InputMaybe<SwapOrderStatus>;\n  swapOrderStatus: SwapOrderStatus;\n  swapOrderType: SwapOrderType;\n};\n\nexport enum SwapOrderStatus {\n  Cancelled = 'CANCELLED',\n  Error = 'ERROR',\n  Expired = 'EXPIRED',\n  Filled = 'FILLED',\n  InsufficientFunds = 'INSUFFICIENT_FUNDS',\n  Open = 'OPEN'\n}\n\nexport enum SwapOrderType {\n  Dutch = 'DUTCH',\n  DutchV2 = 'DUTCH_V2',\n  Limit = 'LIMIT'\n}\n\nexport type TimestampedAmount = IAmount & {\n  __typename?: 'TimestampedAmount';\n  currency?: Maybe<Currency>;\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  value: Scalars['Float'];\n};\n\nexport type TimestampedOhlc = {\n  __typename?: 'TimestampedOhlc';\n  close: Amount;\n  high: Amount;\n  id: Scalars['ID'];\n  low: Amount;\n  open: Amount;\n  timestamp: Scalars['Int'];\n};\n\nexport type TimestampedPoolPrice = {\n  __typename?: 'TimestampedPoolPrice';\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  token0Price: Scalars['Float'];\n  token1Price: Scalars['Float'];\n};\n\nexport type Token = IContract & {\n  __typename?: 'Token';\n  address?: Maybe<Scalars['String']>;\n  chain: Chain;\n  decimals?: Maybe<Scalars['Int']>;\n  feeData?: Maybe<FeeData>;\n  id: Scalars['ID'];\n  market?: Maybe<TokenMarket>;\n  name?: Maybe<Scalars['String']>;\n  project?: Maybe<TokenProject>;\n  standard?: Maybe<TokenStandard>;\n  symbol?: Maybe<Scalars['String']>;\n  v2Transactions?: Maybe<Array<Maybe<PoolTransaction>>>;\n  v3Transactions?: Maybe<Array<Maybe<PoolTransaction>>>;\n};\n\n\nexport type TokenMarketArgs = {\n  currency?: InputMaybe<Currency>;\n};\n\n\nexport type TokenV2TransactionsArgs = {\n  first: Scalars['Int'];\n  timestampCursor?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type TokenV3TransactionsArgs = {\n  first: Scalars['Int'];\n  timestampCursor?: InputMaybe<Scalars['Int']>;\n};\n\nexport type TokenAmount = {\n  __typename?: 'TokenAmount';\n  currency: Currency;\n  id: Scalars['ID'];\n  value: Scalars['String'];\n};\n\nexport type TokenAmountInput = {\n  amount: Scalars['String'];\n  token: TokenInput;\n};\n\nexport type TokenApproval = {\n  __typename?: 'TokenApproval';\n  approvedAddress: Scalars['String'];\n  /**   can be erc20 or native */\n  asset: Token;\n  id: Scalars['ID'];\n  quantity: Scalars['String'];\n  tokenStandard: TokenStandard;\n};\n\nexport type TokenApprovalInput = {\n  approvedAddress: Scalars['String'];\n  asset: TokenAssetInput;\n  quantity: Scalars['String'];\n  tokenStandard: TokenStandard;\n};\n\nexport type TokenAssetInput = {\n  address?: InputMaybe<Scalars['String']>;\n  chain: Chain;\n  decimals?: InputMaybe<Scalars['Int']>;\n  name?: InputMaybe<Scalars['String']>;\n  standard: TokenStandard;\n  symbol?: InputMaybe<Scalars['String']>;\n};\n\nexport type TokenBalance = {\n  __typename?: 'TokenBalance';\n  blockNumber?: Maybe<Scalars['Int']>;\n  blockTimestamp?: Maybe<Scalars['Int']>;\n  denominatedValue?: Maybe<Amount>;\n  id: Scalars['ID'];\n  isHidden?: Maybe<Scalars['Boolean']>;\n  ownerAddress: Scalars['String'];\n  quantity?: Maybe<Scalars['Float']>;\n  token?: Maybe<Token>;\n  tokenProjectMarket?: Maybe<TokenProjectMarket>;\n};\n\nexport type TokenInput = {\n  address: Scalars['String'];\n  chainId: Scalars['Int'];\n  decimals: Scalars['Int'];\n  isNative: Scalars['Boolean'];\n};\n\nexport type TokenMarket = {\n  __typename?: 'TokenMarket';\n  fullyDilutedValuation?: Maybe<Amount>;\n  historicalTvl?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  historicalVolume?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  id: Scalars['ID'];\n  ohlc?: Maybe<Array<Maybe<TimestampedOhlc>>>;\n  price?: Maybe<Amount>;\n  priceHighLow?: Maybe<Amount>;\n  priceHistory?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  pricePercentChange?: Maybe<Amount>;\n  priceSource: PriceSource;\n  token: Token;\n  totalValueLocked?: Maybe<Amount>;\n  /**   this volume is cumulative volume over the specified duration */\n  volume?: Maybe<Amount>;\n};\n\n\nexport type TokenMarketHistoricalTvlArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenMarketHistoricalVolumeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenMarketOhlcArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenMarketPriceHighLowArgs = {\n  duration: HistoryDuration;\n  highLow: HighLow;\n};\n\n\nexport type TokenMarketPriceHistoryArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenMarketPricePercentChangeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenMarketVolumeArgs = {\n  duration: HistoryDuration;\n};\n\nexport type TokenProject = {\n  __typename?: 'TokenProject';\n  description?: Maybe<Scalars['String']>;\n  descriptionTranslations?: Maybe<DescriptionTranslations>;\n  homepageUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  isSpam?: Maybe<Scalars['Boolean']>;\n  logo?: Maybe<Image>;\n  /** @deprecated use logo */\n  logoUrl?: Maybe<Scalars['String']>;\n  markets?: Maybe<Array<Maybe<TokenProjectMarket>>>;\n  name?: Maybe<Scalars['String']>;\n  safetyLevel?: Maybe<SafetyLevel>;\n  /** @deprecated use logo */\n  smallLogo?: Maybe<Image>;\n  spamCode?: Maybe<Scalars['Int']>;\n  tokens: Array<Token>;\n  twitterName?: Maybe<Scalars['String']>;\n};\n\n\nexport type TokenProjectMarketsArgs = {\n  currencies: Array<Currency>;\n};\n\nexport type TokenProjectMarket = {\n  __typename?: 'TokenProjectMarket';\n  currency: Currency;\n  fullyDilutedValuation?: Maybe<Amount>;\n  id: Scalars['ID'];\n  marketCap?: Maybe<Amount>;\n  price?: Maybe<Amount>;\n  priceHigh52w?: Maybe<Amount>;\n  priceHighLow?: Maybe<Amount>;\n  priceHistory?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  priceLow52w?: Maybe<Amount>;\n  pricePercentChange?: Maybe<Amount>;\n  pricePercentChange24h?: Maybe<Amount>;\n  tokenProject: TokenProject;\n};\n\n\nexport type TokenProjectMarketPriceHighLowArgs = {\n  duration: HistoryDuration;\n  highLow: HighLow;\n};\n\n\nexport type TokenProjectMarketPriceHistoryArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenProjectMarketPricePercentChangeArgs = {\n  duration: HistoryDuration;\n};\n\nexport enum TokenSortableField {\n  MarketCap = 'MARKET_CAP',\n  Popularity = 'POPULARITY',\n  TotalValueLocked = 'TOTAL_VALUE_LOCKED',\n  Volume = 'VOLUME'\n}\n\nexport enum TokenStandard {\n  Erc20 = 'ERC20',\n  Native = 'NATIVE'\n}\n\nexport type TokenTradeInput = {\n  permit?: InputMaybe<PermitInput>;\n  routes?: InputMaybe<TokenTradeRoutesInput>;\n  slippageToleranceBasisPoints?: InputMaybe<Scalars['Int']>;\n  tokenAmount: TokenAmountInput;\n};\n\nexport type TokenTradeRouteInput = {\n  inputAmount: TokenAmountInput;\n  outputAmount: TokenAmountInput;\n  pools: Array<TradePoolInput>;\n};\n\nexport type TokenTradeRoutesInput = {\n  mixedRoutes?: InputMaybe<Array<TokenTradeRouteInput>>;\n  tradeType: TokenTradeType;\n  v2Routes?: InputMaybe<Array<TokenTradeRouteInput>>;\n  v3Routes?: InputMaybe<Array<TokenTradeRouteInput>>;\n};\n\nexport enum TokenTradeType {\n  ExactInput = 'EXACT_INPUT',\n  ExactOutput = 'EXACT_OUTPUT'\n}\n\nexport type TokenTransfer = {\n  __typename?: 'TokenTransfer';\n  asset: Token;\n  direction: TransactionDirection;\n  id: Scalars['ID'];\n  quantity: Scalars['String'];\n  recipient: Scalars['String'];\n  sender: Scalars['String'];\n  tokenStandard: TokenStandard;\n  transactedValue?: Maybe<Amount>;\n};\n\nexport type TokenTransferInput = {\n  asset: TokenAssetInput;\n  direction: TransactionDirection;\n  quantity: Scalars['String'];\n  recipient: Scalars['String'];\n  sender: Scalars['String'];\n  tokenStandard: TokenStandard;\n  transactedValue?: InputMaybe<AmountInput>;\n};\n\nexport type TradePoolInput = {\n  pair?: InputMaybe<PairInput>;\n  pool?: InputMaybe<PoolInput>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  blockNumber: Scalars['Int'];\n  from: Scalars['String'];\n  gasLimit?: Maybe<Scalars['Float']>;\n  hash: Scalars['String'];\n  id: Scalars['ID'];\n  maxFeePerGas?: Maybe<Scalars['Float']>;\n  nonce: Scalars['Int'];\n  status: TransactionStatus;\n  to: Scalars['String'];\n};\n\nexport type TransactionDetails = {\n  __typename?: 'TransactionDetails';\n  application?: Maybe<ApplicationContract>;\n  assetChanges: Array<Maybe<AssetChange>>;\n  from: Scalars['String'];\n  hash: Scalars['String'];\n  id: Scalars['ID'];\n  networkFee?: Maybe<NetworkFee>;\n  nonce: Scalars['Int'];\n  /** @deprecated use transactionStatus to disambiguate from swapOrderStatus */\n  status: TransactionStatus;\n  to: Scalars['String'];\n  transactionStatus: TransactionStatus;\n  type: TransactionType;\n};\n\nexport type TransactionDetailsInput = {\n  application?: InputMaybe<ApplicationContractInput>;\n  assetChanges: Array<InputMaybe<AssetChangeInput>>;\n  from: Scalars['String'];\n  hash: Scalars['String'];\n  nonce: Scalars['Int'];\n  status?: InputMaybe<TransactionStatus>;\n  to: Scalars['String'];\n  transactionStatus: TransactionStatus;\n  type: TransactionType;\n};\n\nexport enum TransactionDirection {\n  In = 'IN',\n  Out = 'OUT',\n  Self = 'SELF'\n}\n\nexport type TransactionNotification = {\n  __typename?: 'TransactionNotification';\n  hash: Scalars['String'];\n  id: Scalars['ID'];\n  push: Array<PushNotification>;\n};\n\nexport enum TransactionStatus {\n  Confirmed = 'CONFIRMED',\n  Failed = 'FAILED',\n  Pending = 'PENDING'\n}\n\nexport enum TransactionType {\n  Approve = 'APPROVE',\n  Borrow = 'BORROW',\n  Cancel = 'CANCEL',\n  Claim = 'CLAIM',\n  Deployment = 'DEPLOYMENT',\n  Lend = 'LEND',\n  Mint = 'MINT',\n  OnRamp = 'ON_RAMP',\n  Receive = 'RECEIVE',\n  Repay = 'REPAY',\n  Send = 'SEND',\n  Stake = 'STAKE',\n  Swap = 'SWAP',\n  SwapOrder = 'SWAP_ORDER',\n  Unknown = 'UNKNOWN',\n  Unstake = 'UNSTAKE',\n  Withdraw = 'WITHDRAW'\n}\n\nexport type V2Pair = IPool & {\n  __typename?: 'V2Pair';\n  address: Scalars['String'];\n  chain: Chain;\n  createdAtTimestamp?: Maybe<Scalars['Int']>;\n  cumulativeVolume?: Maybe<Amount>;\n  historicalVolume?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  id: Scalars['ID'];\n  priceHistory?: Maybe<Array<Maybe<TimestampedPoolPrice>>>;\n  protocolVersion: ProtocolVersion;\n  token0?: Maybe<Token>;\n  token0Supply?: Maybe<Scalars['Float']>;\n  token1?: Maybe<Token>;\n  token1Supply?: Maybe<Scalars['Float']>;\n  totalLiquidity?: Maybe<Amount>;\n  totalLiquidityPercentChange24h?: Maybe<Amount>;\n  transactions?: Maybe<Array<Maybe<PoolTransaction>>>;\n  txCount?: Maybe<Scalars['Int']>;\n};\n\n\nexport type V2PairCumulativeVolumeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type V2PairHistoricalVolumeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type V2PairPriceHistoryArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type V2PairTransactionsArgs = {\n  first: Scalars['Int'];\n  timestampCursor?: InputMaybe<Scalars['Int']>;\n};\n\nexport type V3Pool = IPool & {\n  __typename?: 'V3Pool';\n  address: Scalars['String'];\n  chain: Chain;\n  createdAtTimestamp?: Maybe<Scalars['Int']>;\n  cumulativeVolume?: Maybe<Amount>;\n  feeTier?: Maybe<Scalars['Float']>;\n  historicalVolume?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  id: Scalars['ID'];\n  priceHistory?: Maybe<Array<Maybe<TimestampedPoolPrice>>>;\n  protocolVersion: ProtocolVersion;\n  ticks?: Maybe<Array<Maybe<V3PoolTick>>>;\n  token0?: Maybe<Token>;\n  token0Supply?: Maybe<Scalars['Float']>;\n  token1?: Maybe<Token>;\n  token1Supply?: Maybe<Scalars['Float']>;\n  totalLiquidity?: Maybe<Amount>;\n  totalLiquidityPercentChange24h?: Maybe<Amount>;\n  transactions?: Maybe<Array<Maybe<PoolTransaction>>>;\n  txCount?: Maybe<Scalars['Int']>;\n};\n\n\nexport type V3PoolCumulativeVolumeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type V3PoolHistoricalVolumeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type V3PoolPriceHistoryArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type V3PoolTicksArgs = {\n  first?: InputMaybe<Scalars['Int']>;\n  skip?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type V3PoolTransactionsArgs = {\n  first: Scalars['Int'];\n  timestampCursor?: InputMaybe<Scalars['Int']>;\n};\n\nexport type V3PoolTick = {\n  __typename?: 'V3PoolTick';\n  id: Scalars['ID'];\n  liquidityGross?: Maybe<Scalars['String']>;\n  liquidityNet?: Maybe<Scalars['String']>;\n  price0?: Maybe<Scalars['String']>;\n  price1?: Maybe<Scalars['String']>;\n  tickIdx?: Maybe<Scalars['Int']>;\n};\n\nexport type RecentlySearchedAssetsQueryVariables = Exact<{\n  collectionAddresses: Array<Scalars['String']> | Scalars['String'];\n  contracts: Array<ContractInput> | ContractInput;\n}>;\n\n\nexport type RecentlySearchedAssetsQuery = { __typename?: 'Query', nftCollections?: { __typename?: 'NftCollectionConnection', edges: Array<{ __typename?: 'NftCollectionEdge', node: { __typename?: 'NftCollection', collectionId: string, isVerified?: boolean, name?: string, numAssets?: number, image?: { __typename?: 'Image', url: string }, nftContracts?: Array<{ __typename?: 'NftContract', address: string }>, markets?: Array<{ __typename?: 'NftCollectionMarket', floorPrice?: { __typename?: 'TimestampedAmount', currency?: Currency, value: number } }> } }> }, tokens?: Array<{ __typename?: 'Token', id: string, decimals?: number, name?: string, chain: Chain, standard?: TokenStandard, address?: string, symbol?: string, market?: { __typename?: 'TokenMarket', id: string, price?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, pricePercentChange?: { __typename?: 'Amount', id: string, value: number }, volume24H?: { __typename?: 'Amount', id: string, value: number, currency?: Currency } }, project?: { __typename?: 'TokenProject', id: string, logoUrl?: string, safetyLevel?: SafetyLevel } }> };\n\nexport type SearchTokensQueryVariables = Exact<{\n  searchQuery: Scalars['String'];\n}>;\n\n\nexport type SearchTokensQuery = { __typename?: 'Query', searchTokens?: Array<{ __typename?: 'Token', id: string, decimals?: number, name?: string, chain: Chain, standard?: TokenStandard, address?: string, symbol?: string, market?: { __typename?: 'TokenMarket', id: string, price?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, pricePercentChange?: { __typename?: 'Amount', id: string, value: number }, volume24H?: { __typename?: 'Amount', id: string, value: number, currency?: Currency } }, project?: { __typename?: 'TokenProject', id: string, logoUrl?: string, safetyLevel?: SafetyLevel } }> };\n\nexport type TokenQueryVariables = Exact<{\n  chain: Chain;\n  address?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type TokenQuery = { __typename?: 'Query', token?: { __typename?: 'Token', id: string, decimals?: number, name?: string, chain: Chain, address?: string, symbol?: string, standard?: TokenStandard, market?: { __typename?: 'TokenMarket', id: string, totalValueLocked?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, price?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, volume24H?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, priceHigh52W?: { __typename?: 'Amount', id: string, value: number }, priceLow52W?: { __typename?: 'Amount', id: string, value: number } }, project?: { __typename?: 'TokenProject', id: string, description?: string, homepageUrl?: string, twitterName?: string, logoUrl?: string, tokens: Array<{ __typename?: 'Token', id: string, chain: Chain, address?: string }> } } };\n\nexport type TokenPriceQueryVariables = Exact<{\n  chain: Chain;\n  address?: InputMaybe<Scalars['String']>;\n  duration: HistoryDuration;\n}>;\n\n\nexport type TokenPriceQuery = { __typename?: 'Query', token?: { __typename?: 'Token', id: string, address?: string, chain: Chain, market?: { __typename?: 'TokenMarket', id: string, price?: { __typename?: 'Amount', id: string, value: number }, priceHistory?: Array<{ __typename?: 'TimestampedAmount', id: string, timestamp: number, value: number }> } } };\n\nexport type UniswapPricesQueryVariables = Exact<{\n  contracts: Array<ContractInput> | ContractInput;\n}>;\n\n\nexport type UniswapPricesQuery = { __typename?: 'Query', tokens?: Array<{ __typename?: 'Token', id: string, address?: string, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, markets?: Array<{ __typename?: 'TokenProjectMarket', id: string, price?: { __typename?: 'Amount', id: string, value: number } }> } }> };\n\nexport type TokenSpotPriceQueryVariables = Exact<{\n  chain: Chain;\n  address?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type TokenSpotPriceQuery = { __typename?: 'Query', token?: { __typename?: 'Token', id: string, address?: string, chain: Chain, name?: string, symbol?: string, project?: { __typename?: 'TokenProject', id: string, markets?: Array<{ __typename?: 'TokenProjectMarket', id: string, price?: { __typename?: 'Amount', id: string, value: number } }> } } };\n\nexport type TopTokens100QueryVariables = Exact<{\n  duration: HistoryDuration;\n  chain: Chain;\n}>;\n\n\nexport type TopTokens100Query = { __typename?: 'Query', topTokens?: Array<{ __typename?: 'Token', id: string, name?: string, chain: Chain, address?: string, symbol?: string, standard?: TokenStandard, market?: { __typename?: 'TokenMarket', id: string, totalValueLocked?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, price?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, pricePercentChange?: { __typename?: 'Amount', id: string, currency?: Currency, value: number }, volume?: { __typename?: 'Amount', id: string, value: number, currency?: Currency } }, project?: { __typename?: 'TokenProject', id: string, logoUrl?: string } }> };\n\nexport type TopTokensSparklineQueryVariables = Exact<{\n  duration: HistoryDuration;\n  chain: Chain;\n}>;\n\n\nexport type TopTokensSparklineQuery = { __typename?: 'Query', topTokens?: Array<{ __typename?: 'Token', id: string, address?: string, chain: Chain, market?: { __typename?: 'TokenMarket', id: string, priceHistory?: Array<{ __typename?: 'TimestampedAmount', id: string, timestamp: number, value: number }> } }> };\n\nexport type TrendingTokensQueryVariables = Exact<{\n  chain: Chain;\n}>;\n\n\nexport type TrendingTokensQuery = { __typename?: 'Query', topTokens?: Array<{ __typename?: 'Token', id: string, decimals?: number, name?: string, chain: Chain, standard?: TokenStandard, address?: string, symbol?: string, market?: { __typename?: 'TokenMarket', id: string, price?: { __typename?: 'Amount', id: string, value: number, currency?: Currency }, pricePercentChange?: { __typename?: 'Amount', id: string, value: number }, volume24H?: { __typename?: 'Amount', id: string, value: number, currency?: Currency } }, project?: { __typename?: 'TokenProject', id: string, logoUrl?: string, safetyLevel?: SafetyLevel } }> };\n\nexport type AssetQueryVariables = Exact<{\n  address: Scalars['String'];\n  orderBy?: InputMaybe<NftAssetSortableField>;\n  asc?: InputMaybe<Scalars['Boolean']>;\n  filter?: InputMaybe<NftAssetsFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  after?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type AssetQuery = { __typename?: 'Query', nftAssets?: { __typename?: 'NftAssetConnection', totalCount?: number, edges: Array<{ __typename?: 'NftAssetEdge', cursor: string, node: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, animationUrl?: string, suspiciousFlag?: boolean, image?: { __typename?: 'Image', url: string }, smallImage?: { __typename?: 'Image', url: string }, collection?: { __typename?: 'NftCollection', name?: string, isVerified?: boolean, nftContracts?: Array<{ __typename?: 'NftContract', address: string, standard?: NftStandard }> }, listings?: { __typename?: 'NftOrderConnection', edges: Array<{ __typename?: 'NftOrderEdge', cursor: string, node: { __typename?: 'NftOrder', address: string, createdAt: number, endAt?: number, id: string, maker: string, marketplace: NftMarketplace, marketplaceUrl: string, orderHash?: string, quantity: number, startAt: number, status: OrderStatus, taker?: string, tokenId?: string, type: OrderType, protocolParameters?: any, price: { __typename?: 'Amount', currency?: Currency, value: number } } }> }, rarities?: Array<{ __typename?: 'NftAssetRarity', rank?: number }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\nexport type CollectionQueryVariables = Exact<{\n  addresses: Array<Scalars['String']> | Scalars['String'];\n}>;\n\n\nexport type CollectionQuery = { __typename?: 'Query', nftCollections?: { __typename?: 'NftCollectionConnection', edges: Array<{ __typename?: 'NftCollectionEdge', cursor: string, node: { __typename?: 'NftCollection', collectionId: string, description?: string, discordUrl?: string, homepageUrl?: string, instagramName?: string, isVerified?: boolean, name?: string, numAssets?: number, twitterName?: string, bannerImage?: { __typename?: 'Image', url: string }, image?: { __typename?: 'Image', url: string }, nftContracts?: Array<{ __typename?: 'NftContract', address: string, chain: Chain, name?: string, standard?: NftStandard, symbol?: string, totalSupply?: number }>, traits?: Array<{ __typename?: 'NftCollectionTrait', name?: string, values?: Array<string>, stats?: Array<{ __typename?: 'NftCollectionTraitStats', name?: string, value?: string, assets?: number, listings?: number }> }>, markets?: Array<{ __typename?: 'NftCollectionMarket', owners?: number, floorPrice?: { __typename?: 'TimestampedAmount', currency?: Currency, value: number }, totalVolume?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, listings?: { __typename?: 'TimestampedAmount', value: number }, volume?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, volumePercentChange?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, floorPricePercentChange?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, marketplaces?: Array<{ __typename?: 'NftCollectionMarketplace', marketplace?: NftMarketplace, listings?: number, floorPrice?: number }> }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\nexport type CollectionSearchQueryVariables = Exact<{\n  query: Scalars['String'];\n}>;\n\n\nexport type CollectionSearchQuery = { __typename?: 'Query', nftCollections?: { __typename?: 'NftCollectionConnection', edges: Array<{ __typename?: 'NftCollectionEdge', cursor: string, node: { __typename?: 'NftCollection', isVerified?: boolean, name?: string, numAssets?: number, image?: { __typename?: 'Image', url: string }, nftContracts?: Array<{ __typename?: 'NftContract', address: string, chain: Chain, name?: string, symbol?: string, totalSupply?: number }>, markets?: Array<{ __typename?: 'NftCollectionMarket', floorPrice?: { __typename?: 'TimestampedAmount', currency?: Currency, value: number } }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\nexport type DetailsQueryVariables = Exact<{\n  address: Scalars['String'];\n  tokenId: Scalars['String'];\n}>;\n\n\nexport type DetailsQuery = { __typename?: 'Query', nftAssets?: { __typename?: 'NftAssetConnection', edges: Array<{ __typename?: 'NftAssetEdge', node: { __typename?: 'NftAsset', id: string, name?: string, ownerAddress?: string, tokenId: string, description?: string, animationUrl?: string, suspiciousFlag?: boolean, metadataUrl?: string, image?: { __typename?: 'Image', url: string }, smallImage?: { __typename?: 'Image', url: string }, originalImage?: { __typename?: 'Image', url: string }, creator?: { __typename?: 'NftProfile', address: string, isVerified?: boolean, profileImage?: { __typename?: 'Image', url: string } }, collection?: { __typename?: 'NftCollection', name?: string, isVerified?: boolean, numAssets?: number, twitterName?: string, discordUrl?: string, homepageUrl?: string, description?: string, image?: { __typename?: 'Image', url: string }, nftContracts?: Array<{ __typename?: 'NftContract', address: string, standard?: NftStandard }> }, listings?: { __typename?: 'NftOrderConnection', edges: Array<{ __typename?: 'NftOrderEdge', cursor: string, node: { __typename?: 'NftOrder', address: string, createdAt: number, endAt?: number, id: string, maker: string, marketplace: NftMarketplace, marketplaceUrl: string, orderHash?: string, quantity: number, startAt: number, status: OrderStatus, taker?: string, tokenId?: string, type: OrderType, protocolParameters?: any, price: { __typename?: 'Amount', currency?: Currency, value: number } } }> }, rarities?: Array<{ __typename?: 'NftAssetRarity', provider?: NftRarityProvider, rank?: number, score?: number }>, traits?: Array<{ __typename?: 'NftAssetTrait', name?: string, value?: string }> } }> } };\n\nexport type NftActivityQueryVariables = Exact<{\n  filter?: InputMaybe<NftActivityFilterInput>;\n  after?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n}>;\n\n\nexport type NftActivityQuery = { __typename?: 'Query', nftActivity?: { __typename?: 'NftActivityConnection', edges: Array<{ __typename?: 'NftActivityEdge', node: { __typename?: 'NftActivity', id: string, address: string, tokenId?: string, type: NftActivityType, marketplace?: string, fromAddress: string, toAddress?: string, transactionHash?: string, orderStatus?: OrderStatus, quantity?: number, url?: string, timestamp: number, asset?: { __typename?: 'NftAsset', id: string, metadataUrl?: string, name?: string, suspiciousFlag?: boolean, image?: { __typename?: 'Image', id: string, url: string }, smallImage?: { __typename?: 'Image', id: string, url: string }, rarities?: Array<{ __typename?: 'NftAssetRarity', id: string, provider?: NftRarityProvider, rank?: number, score?: number }>, nftContract?: { __typename?: 'NftContract', id: string, standard?: NftStandard }, collection?: { __typename?: 'NftCollection', id: string, image?: { __typename?: 'Image', id: string, url: string } } }, price?: { __typename?: 'Amount', id: string, value: number } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\nexport type NftBalanceQueryVariables = Exact<{\n  ownerAddress: Scalars['String'];\n  filter?: InputMaybe<NftBalancesFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  after?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type NftBalanceQuery = { __typename?: 'Query', nftBalances?: { __typename?: 'NftBalanceConnection', edges: Array<{ __typename?: 'NftBalanceEdge', node: { __typename?: 'NftBalance', listedMarketplaces?: Array<NftMarketplace>, ownedAsset?: { __typename?: 'NftAsset', id: string, animationUrl?: string, description?: string, flaggedBy?: string, name?: string, ownerAddress?: string, suspiciousFlag?: boolean, tokenId: string, collection?: { __typename?: 'NftCollection', id: string, isVerified?: boolean, name?: string, twitterName?: string, image?: { __typename?: 'Image', id: string, url: string }, nftContracts?: Array<{ __typename?: 'NftContract', id: string, address: string, chain: Chain, name?: string, standard?: NftStandard, symbol?: string, totalSupply?: number }>, markets?: Array<{ __typename?: 'NftCollectionMarket', id: string, floorPrice?: { __typename?: 'TimestampedAmount', id: string, value: number } }> }, image?: { __typename?: 'Image', id: string, url: string }, originalImage?: { __typename?: 'Image', id: string, url: string }, smallImage?: { __typename?: 'Image', id: string, url: string }, thumbnail?: { __typename?: 'Image', id: string, url: string }, listings?: { __typename?: 'NftOrderConnection', edges: Array<{ __typename?: 'NftOrderEdge', node: { __typename?: 'NftOrder', createdAt: number, marketplace: NftMarketplace, endAt?: number, price: { __typename?: 'Amount', id: string, value: number, currency?: Currency } } }> } }, listingFees?: Array<{ __typename?: 'NftFee', id: string, payoutAddress: string, basisPoints: number }>, lastPrice?: { __typename?: 'TimestampedAmount', id: string, currency?: Currency, timestamp: number, value: number } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\nexport type NftRouteQueryVariables = Exact<{\n  chain?: InputMaybe<Chain>;\n  senderAddress: Scalars['String'];\n  nftTrades: Array<NftTradeInput> | NftTradeInput;\n  tokenTrades?: InputMaybe<Array<TokenTradeInput> | TokenTradeInput>;\n}>;\n\n\nexport type NftRouteQuery = { __typename?: 'Query', nftRoute?: { __typename?: 'NftRouteResponse', id: string, calldata: string, toAddress: string, route?: Array<{ __typename?: 'NftTrade', amount: number, contractAddress: string, id: string, marketplace: NftMarketplace, tokenId: string, tokenType?: NftStandard, price: { __typename?: 'TokenAmount', id: string, currency: Currency, value: string }, quotePrice?: { __typename?: 'TokenAmount', id: string, currency: Currency, value: string } }>, sendAmount: { __typename?: 'TokenAmount', id: string, currency: Currency, value: string } } };\n\nexport type TrendingCollectionsQueryVariables = Exact<{\n  size?: InputMaybe<Scalars['Int']>;\n  timePeriod?: InputMaybe<HistoryDuration>;\n}>;\n\n\nexport type TrendingCollectionsQuery = { __typename?: 'Query', topCollections?: { __typename?: 'NftCollectionConnection', edges: Array<{ __typename?: 'NftCollectionEdge', node: { __typename?: 'NftCollection', name?: string, isVerified?: boolean, nftContracts?: Array<{ __typename?: 'NftContract', address: string, totalSupply?: number }>, image?: { __typename?: 'Image', url: string }, bannerImage?: { __typename?: 'Image', url: string }, markets?: Array<{ __typename?: 'NftCollectionMarket', owners?: number, floorPrice?: { __typename?: 'TimestampedAmount', value: number }, totalVolume?: { __typename?: 'TimestampedAmount', value: number }, volume?: { __typename?: 'TimestampedAmount', value: number }, volumePercentChange?: { __typename?: 'TimestampedAmount', value: number }, floorPricePercentChange?: { __typename?: 'TimestampedAmount', value: number }, sales?: { __typename?: 'TimestampedAmount', value: number }, listings?: { __typename?: 'TimestampedAmount', value: number } }> } }> } };\n\nexport type PortfolioBalancesQueryVariables = Exact<{\n  ownerAddress: Scalars['String'];\n}>;\n\n\nexport type PortfolioBalancesQuery = { __typename?: 'Query', portfolios?: Array<{ __typename?: 'Portfolio', id: string, tokensTotalDenominatedValue?: { __typename?: 'Amount', id: string, value: number }, tokensTotalDenominatedValueChange?: { __typename?: 'AmountChange', absolute?: { __typename?: 'Amount', id: string, value: number }, percentage?: { __typename?: 'Amount', id: string, value: number } }, tokenBalances?: Array<{ __typename?: 'TokenBalance', id: string, quantity?: number, denominatedValue?: { __typename?: 'Amount', id: string, currency?: Currency, value: number }, tokenProjectMarket?: { __typename?: 'TokenProjectMarket', id: string, pricePercentChange?: { __typename?: 'Amount', id: string, value: number }, tokenProject: { __typename?: 'TokenProject', id: string, logoUrl?: string } }, token?: { __typename?: 'Token', id: string, chain: Chain, address?: string, name?: string, symbol?: string, standard?: TokenStandard, decimals?: number } }> }> };\n\nexport type NftAssetPartsFragment = { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } };\n\nexport type NftTransferPartsFragment = { __typename?: 'NftTransfer', id: string, nftStandard: NftStandard, sender: string, recipient: string, direction: TransactionDirection, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } };\n\nexport type TokenAssetPartsFragment = { __typename?: 'Token', id: string, name?: string, symbol?: string, address?: string, decimals?: number, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, isSpam?: boolean, logo?: { __typename?: 'Image', id: string, url: string } } };\n\nexport type TokenTransferPartsFragment = { __typename?: 'TokenTransfer', id: string, tokenStandard: TokenStandard, quantity: string, sender: string, recipient: string, direction: TransactionDirection, asset: { __typename?: 'Token', id: string, name?: string, symbol?: string, address?: string, decimals?: number, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, isSpam?: boolean, logo?: { __typename?: 'Image', id: string, url: string } } }, transactedValue?: { __typename?: 'Amount', id: string, currency?: Currency, value: number } };\n\nexport type TokenApprovalPartsFragment = { __typename?: 'TokenApproval', id: string, tokenStandard: TokenStandard, approvedAddress: string, quantity: string, asset: { __typename?: 'Token', id: string, name?: string, symbol?: string, address?: string, decimals?: number, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, isSpam?: boolean, logo?: { __typename?: 'Image', id: string, url: string } } } };\n\nexport type NftApprovalPartsFragment = { __typename?: 'NftApproval', id: string, nftStandard: NftStandard, approvedAddress: string, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } };\n\nexport type NftApproveForAllPartsFragment = { __typename?: 'NftApproveForAll', id: string, nftStandard: NftStandard, operatorAddress: string, approved: boolean, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } };\n\nexport type TransactionPartsFragment = { __typename?: 'Transaction', id: string, blockNumber: number, hash: string, status: TransactionStatus, to: string, from: string };\n\nexport type AssetActivityPartsFragment = { __typename?: 'AssetActivity', id: string, timestamp: number, type: ActivityType, chain: Chain, transaction: { __typename?: 'Transaction', id: string, blockNumber: number, hash: string, status: TransactionStatus, to: string, from: string }, assetChanges: Array<{ __typename: 'NftApproval', id: string, nftStandard: NftStandard, approvedAddress: string, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } } | { __typename: 'NftApproveForAll', id: string, nftStandard: NftStandard, operatorAddress: string, approved: boolean, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } } | { __typename: 'NftTransfer', id: string, nftStandard: NftStandard, sender: string, recipient: string, direction: TransactionDirection, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } } | { __typename: 'OnRampTransfer' } | { __typename: 'TokenApproval', id: string, tokenStandard: TokenStandard, approvedAddress: string, quantity: string, asset: { __typename?: 'Token', id: string, name?: string, symbol?: string, address?: string, decimals?: number, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, isSpam?: boolean, logo?: { __typename?: 'Image', id: string, url: string } } } } | { __typename: 'TokenTransfer', id: string, tokenStandard: TokenStandard, quantity: string, sender: string, recipient: string, direction: TransactionDirection, asset: { __typename?: 'Token', id: string, name?: string, symbol?: string, address?: string, decimals?: number, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, isSpam?: boolean, logo?: { __typename?: 'Image', id: string, url: string } } }, transactedValue?: { __typename?: 'Amount', id: string, currency?: Currency, value: number } }> };\n\nexport type TransactionListQueryVariables = Exact<{\n  account: Scalars['String'];\n}>;\n\n\nexport type TransactionListQuery = { __typename?: 'Query', portfolios?: Array<{ __typename?: 'Portfolio', id: string, assetActivities?: Array<{ __typename?: 'AssetActivity', id: string, timestamp: number, type: ActivityType, chain: Chain, transaction: { __typename?: 'Transaction', id: string, blockNumber: number, hash: string, status: TransactionStatus, to: string, from: string }, assetChanges: Array<{ __typename: 'NftApproval', id: string, nftStandard: NftStandard, approvedAddress: string, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } } | { __typename: 'NftApproveForAll', id: string, nftStandard: NftStandard, operatorAddress: string, approved: boolean, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } } | { __typename: 'NftTransfer', id: string, nftStandard: NftStandard, sender: string, recipient: string, direction: TransactionDirection, asset: { __typename?: 'NftAsset', id: string, name?: string, tokenId: string, nftContract?: { __typename?: 'NftContract', id: string, chain: Chain, address: string }, image?: { __typename?: 'Image', id: string, url: string }, collection?: { __typename?: 'NftCollection', id: string, name?: string } } } | { __typename: 'OnRampTransfer' } | { __typename: 'TokenApproval', id: string, tokenStandard: TokenStandard, approvedAddress: string, quantity: string, asset: { __typename?: 'Token', id: string, name?: string, symbol?: string, address?: string, decimals?: number, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, isSpam?: boolean, logo?: { __typename?: 'Image', id: string, url: string } } } } | { __typename: 'TokenTransfer', id: string, tokenStandard: TokenStandard, quantity: string, sender: string, recipient: string, direction: TransactionDirection, asset: { __typename?: 'Token', id: string, name?: string, symbol?: string, address?: string, decimals?: number, chain: Chain, standard?: TokenStandard, project?: { __typename?: 'TokenProject', id: string, isSpam?: boolean, logo?: { __typename?: 'Image', id: string, url: string } } }, transactedValue?: { __typename?: 'Amount', id: string, currency?: Currency, value: number } }> }> }> };\n\nexport const TransactionPartsFragmentDoc = gql`\n    fragment TransactionParts on Transaction {\n  id\n  blockNumber\n  hash\n  status\n  to\n  from\n}\n    `;\nexport const TokenAssetPartsFragmentDoc = gql`\n    fragment TokenAssetParts on Token {\n  id\n  name\n  symbol\n  address\n  decimals\n  chain\n  standard\n  project {\n    id\n    isSpam\n    logo {\n      id\n      url\n    }\n  }\n}\n    `;\nexport const TokenTransferPartsFragmentDoc = gql`\n    fragment TokenTransferParts on TokenTransfer {\n  id\n  asset {\n    ...TokenAssetParts\n  }\n  tokenStandard\n  quantity\n  sender\n  recipient\n  direction\n  transactedValue {\n    id\n    currency\n    value\n  }\n}\n    ${TokenAssetPartsFragmentDoc}`;\nexport const NftAssetPartsFragmentDoc = gql`\n    fragment NFTAssetParts on NftAsset {\n  id\n  name\n  nftContract {\n    id\n    chain\n    address\n  }\n  tokenId\n  image {\n    id\n    url\n  }\n  collection {\n    id\n    name\n  }\n}\n    `;\nexport const NftTransferPartsFragmentDoc = gql`\n    fragment NFTTransferParts on NftTransfer {\n  id\n  asset {\n    ...NFTAssetParts\n  }\n  nftStandard\n  sender\n  recipient\n  direction\n}\n    ${NftAssetPartsFragmentDoc}`;\nexport const TokenApprovalPartsFragmentDoc = gql`\n    fragment TokenApprovalParts on TokenApproval {\n  id\n  asset {\n    ...TokenAssetParts\n  }\n  tokenStandard\n  approvedAddress\n  quantity\n}\n    ${TokenAssetPartsFragmentDoc}`;\nexport const NftApprovalPartsFragmentDoc = gql`\n    fragment NFTApprovalParts on NftApproval {\n  id\n  asset {\n    ...NFTAssetParts\n  }\n  nftStandard\n  approvedAddress\n}\n    ${NftAssetPartsFragmentDoc}`;\nexport const NftApproveForAllPartsFragmentDoc = gql`\n    fragment NFTApproveForAllParts on NftApproveForAll {\n  id\n  asset {\n    ...NFTAssetParts\n  }\n  nftStandard\n  operatorAddress\n  approved\n}\n    ${NftAssetPartsFragmentDoc}`;\nexport const AssetActivityPartsFragmentDoc = gql`\n    fragment AssetActivityParts on AssetActivity {\n  id\n  timestamp\n  type\n  chain\n  transaction {\n    ...TransactionParts\n  }\n  assetChanges {\n    __typename\n    ... on TokenTransfer {\n      ...TokenTransferParts\n    }\n    ... on NftTransfer {\n      ...NFTTransferParts\n    }\n    ... on TokenApproval {\n      ...TokenApprovalParts\n    }\n    ... on NftApproval {\n      ...NFTApprovalParts\n    }\n    ... on NftApproveForAll {\n      ...NFTApproveForAllParts\n    }\n  }\n}\n    ${TransactionPartsFragmentDoc}\n${TokenTransferPartsFragmentDoc}\n${NftTransferPartsFragmentDoc}\n${TokenApprovalPartsFragmentDoc}\n${NftApprovalPartsFragmentDoc}\n${NftApproveForAllPartsFragmentDoc}`;\nexport const RecentlySearchedAssetsDocument = gql`\n    query RecentlySearchedAssets($collectionAddresses: [String!]!, $contracts: [ContractInput!]!) {\n  nftCollections(filter: {addresses: $collectionAddresses}) {\n    edges {\n      node {\n        collectionId\n        image {\n          url\n        }\n        isVerified\n        name\n        numAssets\n        nftContracts {\n          address\n        }\n        markets(currencies: ETH) {\n          floorPrice {\n            currency\n            value\n          }\n        }\n      }\n    }\n  }\n  tokens(contracts: $contracts) {\n    id\n    decimals\n    name\n    chain\n    standard\n    address\n    symbol\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: DAY) {\n        id\n        value\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n      safetyLevel\n    }\n  }\n}\n    `;\n\n/**\n * __useRecentlySearchedAssetsQuery__\n *\n * To run a query within a React component, call `useRecentlySearchedAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useRecentlySearchedAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRecentlySearchedAssetsQuery({\n *   variables: {\n *      collectionAddresses: // value for 'collectionAddresses'\n *      contracts: // value for 'contracts'\n *   },\n * });\n */\nexport function useRecentlySearchedAssetsQuery(baseOptions: Apollo.QueryHookOptions<RecentlySearchedAssetsQuery, RecentlySearchedAssetsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<RecentlySearchedAssetsQuery, RecentlySearchedAssetsQueryVariables>(RecentlySearchedAssetsDocument, options);\n      }\nexport function useRecentlySearchedAssetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RecentlySearchedAssetsQuery, RecentlySearchedAssetsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<RecentlySearchedAssetsQuery, RecentlySearchedAssetsQueryVariables>(RecentlySearchedAssetsDocument, options);\n        }\nexport type RecentlySearchedAssetsQueryHookResult = ReturnType<typeof useRecentlySearchedAssetsQuery>;\nexport type RecentlySearchedAssetsLazyQueryHookResult = ReturnType<typeof useRecentlySearchedAssetsLazyQuery>;\nexport type RecentlySearchedAssetsQueryResult = Apollo.QueryResult<RecentlySearchedAssetsQuery, RecentlySearchedAssetsQueryVariables>;\nexport const SearchTokensDocument = gql`\n    query SearchTokens($searchQuery: String!) {\n  searchTokens(searchQuery: $searchQuery) {\n    id\n    decimals\n    name\n    chain\n    standard\n    address\n    symbol\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: DAY) {\n        id\n        value\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n      safetyLevel\n    }\n  }\n}\n    `;\n\n/**\n * __useSearchTokensQuery__\n *\n * To run a query within a React component, call `useSearchTokensQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchTokensQuery({\n *   variables: {\n *      searchQuery: // value for 'searchQuery'\n *   },\n * });\n */\nexport function useSearchTokensQuery(baseOptions: Apollo.QueryHookOptions<SearchTokensQuery, SearchTokensQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SearchTokensQuery, SearchTokensQueryVariables>(SearchTokensDocument, options);\n      }\nexport function useSearchTokensLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchTokensQuery, SearchTokensQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SearchTokensQuery, SearchTokensQueryVariables>(SearchTokensDocument, options);\n        }\nexport type SearchTokensQueryHookResult = ReturnType<typeof useSearchTokensQuery>;\nexport type SearchTokensLazyQueryHookResult = ReturnType<typeof useSearchTokensLazyQuery>;\nexport type SearchTokensQueryResult = Apollo.QueryResult<SearchTokensQuery, SearchTokensQueryVariables>;\nexport const TokenDocument = gql`\n    query Token($chain: Chain!, $address: String = null) {\n  token(chain: $chain, address: $address) {\n    id\n    decimals\n    name\n    chain\n    address\n    symbol\n    standard\n    market(currency: USD) {\n      id\n      totalValueLocked {\n        id\n        value\n        currency\n      }\n      price {\n        id\n        value\n        currency\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n      priceHigh52W: priceHighLow(duration: YEAR, highLow: HIGH) {\n        id\n        value\n      }\n      priceLow52W: priceHighLow(duration: YEAR, highLow: LOW) {\n        id\n        value\n      }\n    }\n    project {\n      id\n      description\n      homepageUrl\n      twitterName\n      logoUrl\n      tokens {\n        id\n        chain\n        address\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenQuery__\n *\n * To run a query within a React component, call `useTokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      address: // value for 'address'\n *   },\n * });\n */\nexport function useTokenQuery(baseOptions: Apollo.QueryHookOptions<TokenQuery, TokenQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TokenQuery, TokenQueryVariables>(TokenDocument, options);\n      }\nexport function useTokenLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TokenQuery, TokenQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TokenQuery, TokenQueryVariables>(TokenDocument, options);\n        }\nexport type TokenQueryHookResult = ReturnType<typeof useTokenQuery>;\nexport type TokenLazyQueryHookResult = ReturnType<typeof useTokenLazyQuery>;\nexport type TokenQueryResult = Apollo.QueryResult<TokenQuery, TokenQueryVariables>;\nexport const TokenPriceDocument = gql`\n    query TokenPrice($chain: Chain!, $address: String = null, $duration: HistoryDuration!) {\n  token(chain: $chain, address: $address) {\n    id\n    address\n    chain\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n      }\n      priceHistory(duration: $duration) {\n        id\n        timestamp\n        value\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenPriceQuery__\n *\n * To run a query within a React component, call `useTokenPriceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenPriceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenPriceQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      address: // value for 'address'\n *      duration: // value for 'duration'\n *   },\n * });\n */\nexport function useTokenPriceQuery(baseOptions: Apollo.QueryHookOptions<TokenPriceQuery, TokenPriceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TokenPriceQuery, TokenPriceQueryVariables>(TokenPriceDocument, options);\n      }\nexport function useTokenPriceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TokenPriceQuery, TokenPriceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TokenPriceQuery, TokenPriceQueryVariables>(TokenPriceDocument, options);\n        }\nexport type TokenPriceQueryHookResult = ReturnType<typeof useTokenPriceQuery>;\nexport type TokenPriceLazyQueryHookResult = ReturnType<typeof useTokenPriceLazyQuery>;\nexport type TokenPriceQueryResult = Apollo.QueryResult<TokenPriceQuery, TokenPriceQueryVariables>;\nexport const UniswapPricesDocument = gql`\n    query UniswapPrices($contracts: [ContractInput!]!) {\n  tokens(contracts: $contracts) {\n    id\n    address\n    chain\n    standard\n    project {\n      id\n      markets(currencies: [USD]) {\n        id\n        price {\n          id\n          value\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useUniswapPricesQuery__\n *\n * To run a query within a React component, call `useUniswapPricesQuery` and pass it any options that fit your needs.\n * When your component renders, `useUniswapPricesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUniswapPricesQuery({\n *   variables: {\n *      contracts: // value for 'contracts'\n *   },\n * });\n */\nexport function useUniswapPricesQuery(baseOptions: Apollo.QueryHookOptions<UniswapPricesQuery, UniswapPricesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UniswapPricesQuery, UniswapPricesQueryVariables>(UniswapPricesDocument, options);\n      }\nexport function useUniswapPricesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UniswapPricesQuery, UniswapPricesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UniswapPricesQuery, UniswapPricesQueryVariables>(UniswapPricesDocument, options);\n        }\nexport type UniswapPricesQueryHookResult = ReturnType<typeof useUniswapPricesQuery>;\nexport type UniswapPricesLazyQueryHookResult = ReturnType<typeof useUniswapPricesLazyQuery>;\nexport type UniswapPricesQueryResult = Apollo.QueryResult<UniswapPricesQuery, UniswapPricesQueryVariables>;\nexport const TokenSpotPriceDocument = gql`\n    query TokenSpotPrice($chain: Chain!, $address: String = null) {\n  token(chain: $chain, address: $address) {\n    id\n    address\n    chain\n    name\n    symbol\n    project {\n      id\n      markets(currencies: [USD]) {\n        id\n        price {\n          id\n          value\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenSpotPriceQuery__\n *\n * To run a query within a React component, call `useTokenSpotPriceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenSpotPriceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenSpotPriceQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      address: // value for 'address'\n *   },\n * });\n */\nexport function useTokenSpotPriceQuery(baseOptions: Apollo.QueryHookOptions<TokenSpotPriceQuery, TokenSpotPriceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TokenSpotPriceQuery, TokenSpotPriceQueryVariables>(TokenSpotPriceDocument, options);\n      }\nexport function useTokenSpotPriceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TokenSpotPriceQuery, TokenSpotPriceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TokenSpotPriceQuery, TokenSpotPriceQueryVariables>(TokenSpotPriceDocument, options);\n        }\nexport type TokenSpotPriceQueryHookResult = ReturnType<typeof useTokenSpotPriceQuery>;\nexport type TokenSpotPriceLazyQueryHookResult = ReturnType<typeof useTokenSpotPriceLazyQuery>;\nexport type TokenSpotPriceQueryResult = Apollo.QueryResult<TokenSpotPriceQuery, TokenSpotPriceQueryVariables>;\nexport const TopTokens100Document = gql`\n    query TopTokens100($duration: HistoryDuration!, $chain: Chain!) {\n  topTokens(pageSize: 100, page: 1, chain: $chain, orderBy: VOLUME) {\n    id\n    name\n    chain\n    address\n    symbol\n    standard\n    market(currency: USD) {\n      id\n      totalValueLocked {\n        id\n        value\n        currency\n      }\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: $duration) {\n        id\n        currency\n        value\n      }\n      volume(duration: $duration) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n    }\n  }\n}\n    `;\n\n/**\n * __useTopTokens100Query__\n *\n * To run a query within a React component, call `useTopTokens100Query` and pass it any options that fit your needs.\n * When your component renders, `useTopTokens100Query` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokens100Query({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTopTokens100Query(baseOptions: Apollo.QueryHookOptions<TopTokens100Query, TopTokens100QueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TopTokens100Query, TopTokens100QueryVariables>(TopTokens100Document, options);\n      }\nexport function useTopTokens100LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TopTokens100Query, TopTokens100QueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TopTokens100Query, TopTokens100QueryVariables>(TopTokens100Document, options);\n        }\nexport type TopTokens100QueryHookResult = ReturnType<typeof useTopTokens100Query>;\nexport type TopTokens100LazyQueryHookResult = ReturnType<typeof useTopTokens100LazyQuery>;\nexport type TopTokens100QueryResult = Apollo.QueryResult<TopTokens100Query, TopTokens100QueryVariables>;\nexport const TopTokensSparklineDocument = gql`\n    query TopTokensSparkline($duration: HistoryDuration!, $chain: Chain!) {\n  topTokens(pageSize: 100, page: 1, chain: $chain, orderBy: VOLUME) {\n    id\n    address\n    chain\n    market(currency: USD) {\n      id\n      priceHistory(duration: $duration) {\n        id\n        timestamp\n        value\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTopTokensSparklineQuery__\n *\n * To run a query within a React component, call `useTopTokensSparklineQuery` and pass it any options that fit your needs.\n * When your component renders, `useTopTokensSparklineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokensSparklineQuery({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTopTokensSparklineQuery(baseOptions: Apollo.QueryHookOptions<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>(TopTokensSparklineDocument, options);\n      }\nexport function useTopTokensSparklineLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>(TopTokensSparklineDocument, options);\n        }\nexport type TopTokensSparklineQueryHookResult = ReturnType<typeof useTopTokensSparklineQuery>;\nexport type TopTokensSparklineLazyQueryHookResult = ReturnType<typeof useTopTokensSparklineLazyQuery>;\nexport type TopTokensSparklineQueryResult = Apollo.QueryResult<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>;\nexport const TrendingTokensDocument = gql`\n    query TrendingTokens($chain: Chain!) {\n  topTokens(pageSize: 4, page: 1, chain: $chain, orderBy: VOLUME) {\n    id\n    decimals\n    name\n    chain\n    standard\n    address\n    symbol\n    market(currency: USD) {\n      id\n      price {\n        id\n        value\n        currency\n      }\n      pricePercentChange(duration: DAY) {\n        id\n        value\n      }\n      volume24H: volume(duration: DAY) {\n        id\n        value\n        currency\n      }\n    }\n    project {\n      id\n      logoUrl\n      safetyLevel\n    }\n  }\n}\n    `;\n\n/**\n * __useTrendingTokensQuery__\n *\n * To run a query within a React component, call `useTrendingTokensQuery` and pass it any options that fit your needs.\n * When your component renders, `useTrendingTokensQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTrendingTokensQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTrendingTokensQuery(baseOptions: Apollo.QueryHookOptions<TrendingTokensQuery, TrendingTokensQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TrendingTokensQuery, TrendingTokensQueryVariables>(TrendingTokensDocument, options);\n      }\nexport function useTrendingTokensLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TrendingTokensQuery, TrendingTokensQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TrendingTokensQuery, TrendingTokensQueryVariables>(TrendingTokensDocument, options);\n        }\nexport type TrendingTokensQueryHookResult = ReturnType<typeof useTrendingTokensQuery>;\nexport type TrendingTokensLazyQueryHookResult = ReturnType<typeof useTrendingTokensLazyQuery>;\nexport type TrendingTokensQueryResult = Apollo.QueryResult<TrendingTokensQuery, TrendingTokensQueryVariables>;\nexport const AssetDocument = gql`\n    query Asset($address: String!, $orderBy: NftAssetSortableField, $asc: Boolean, $filter: NftAssetsFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\n  nftAssets(\n    address: $address\n    orderBy: $orderBy\n    asc: $asc\n    filter: $filter\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    edges {\n      node {\n        id\n        name\n        image {\n          url\n        }\n        smallImage {\n          url\n        }\n        tokenId\n        animationUrl\n        suspiciousFlag\n        collection {\n          name\n          isVerified\n          nftContracts {\n            address\n            standard\n          }\n        }\n        listings(first: 1) {\n          edges {\n            node {\n              address\n              createdAt\n              endAt\n              id\n              maker\n              marketplace\n              marketplaceUrl\n              orderHash\n              price {\n                currency\n                value\n              }\n              quantity\n              startAt\n              status\n              taker\n              tokenId\n              type\n              protocolParameters\n            }\n            cursor\n          }\n        }\n        rarities {\n          rank\n        }\n      }\n      cursor\n    }\n    totalCount\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAssetQuery__\n *\n * To run a query within a React component, call `useAssetQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetQuery({\n *   variables: {\n *      address: // value for 'address'\n *      orderBy: // value for 'orderBy'\n *      asc: // value for 'asc'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */\nexport function useAssetQuery(baseOptions: Apollo.QueryHookOptions<AssetQuery, AssetQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AssetQuery, AssetQueryVariables>(AssetDocument, options);\n      }\nexport function useAssetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssetQuery, AssetQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AssetQuery, AssetQueryVariables>(AssetDocument, options);\n        }\nexport type AssetQueryHookResult = ReturnType<typeof useAssetQuery>;\nexport type AssetLazyQueryHookResult = ReturnType<typeof useAssetLazyQuery>;\nexport type AssetQueryResult = Apollo.QueryResult<AssetQuery, AssetQueryVariables>;\nexport const CollectionDocument = gql`\n    query Collection($addresses: [String!]!) {\n  nftCollections(filter: {addresses: $addresses}) {\n    edges {\n      cursor\n      node {\n        bannerImage {\n          url\n        }\n        collectionId\n        description\n        discordUrl\n        homepageUrl\n        image {\n          url\n        }\n        instagramName\n        isVerified\n        name\n        numAssets\n        twitterName\n        nftContracts {\n          address\n          chain\n          name\n          standard\n          symbol\n          totalSupply\n        }\n        traits {\n          name\n          values\n          stats {\n            name\n            value\n            assets\n            listings\n          }\n        }\n        markets(currencies: ETH) {\n          floorPrice {\n            currency\n            value\n          }\n          owners\n          totalVolume {\n            value\n            currency\n          }\n          listings {\n            value\n          }\n          volume(duration: DAY) {\n            value\n            currency\n          }\n          volumePercentChange(duration: DAY) {\n            value\n            currency\n          }\n          floorPricePercentChange(duration: DAY) {\n            value\n            currency\n          }\n          marketplaces {\n            marketplace\n            listings\n            floorPrice\n          }\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCollectionQuery__\n *\n * To run a query within a React component, call `useCollectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionQuery({\n *   variables: {\n *      addresses: // value for 'addresses'\n *   },\n * });\n */\nexport function useCollectionQuery(baseOptions: Apollo.QueryHookOptions<CollectionQuery, CollectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CollectionQuery, CollectionQueryVariables>(CollectionDocument, options);\n      }\nexport function useCollectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CollectionQuery, CollectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CollectionQuery, CollectionQueryVariables>(CollectionDocument, options);\n        }\nexport type CollectionQueryHookResult = ReturnType<typeof useCollectionQuery>;\nexport type CollectionLazyQueryHookResult = ReturnType<typeof useCollectionLazyQuery>;\nexport type CollectionQueryResult = Apollo.QueryResult<CollectionQuery, CollectionQueryVariables>;\nexport const CollectionSearchDocument = gql`\n    query CollectionSearch($query: String!) {\n  nftCollections(filter: {nameQuery: $query}) {\n    edges {\n      cursor\n      node {\n        image {\n          url\n        }\n        isVerified\n        name\n        numAssets\n        nftContracts {\n          address\n          chain\n          name\n          symbol\n          totalSupply\n        }\n        markets(currencies: ETH) {\n          floorPrice {\n            currency\n            value\n          }\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCollectionSearchQuery__\n *\n * To run a query within a React component, call `useCollectionSearchQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionSearchQuery({\n *   variables: {\n *      query: // value for 'query'\n *   },\n * });\n */\nexport function useCollectionSearchQuery(baseOptions: Apollo.QueryHookOptions<CollectionSearchQuery, CollectionSearchQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CollectionSearchQuery, CollectionSearchQueryVariables>(CollectionSearchDocument, options);\n      }\nexport function useCollectionSearchLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CollectionSearchQuery, CollectionSearchQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CollectionSearchQuery, CollectionSearchQueryVariables>(CollectionSearchDocument, options);\n        }\nexport type CollectionSearchQueryHookResult = ReturnType<typeof useCollectionSearchQuery>;\nexport type CollectionSearchLazyQueryHookResult = ReturnType<typeof useCollectionSearchLazyQuery>;\nexport type CollectionSearchQueryResult = Apollo.QueryResult<CollectionSearchQuery, CollectionSearchQueryVariables>;\nexport const DetailsDocument = gql`\n    query Details($address: String!, $tokenId: String!) {\n  nftAssets(address: $address, filter: {listed: false, tokenIds: [$tokenId]}) {\n    edges {\n      node {\n        id\n        name\n        ownerAddress\n        image {\n          url\n        }\n        smallImage {\n          url\n        }\n        originalImage {\n          url\n        }\n        tokenId\n        description\n        animationUrl\n        suspiciousFlag\n        creator {\n          address\n          profileImage {\n            url\n          }\n          isVerified\n        }\n        collection {\n          name\n          isVerified\n          numAssets\n          twitterName\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          nftContracts {\n            address\n            standard\n          }\n          description\n        }\n        listings(first: 1) {\n          edges {\n            node {\n              address\n              createdAt\n              endAt\n              id\n              maker\n              marketplace\n              marketplaceUrl\n              orderHash\n              price {\n                currency\n                value\n              }\n              quantity\n              startAt\n              status\n              taker\n              tokenId\n              type\n              protocolParameters\n            }\n            cursor\n          }\n        }\n        rarities {\n          provider\n          rank\n          score\n        }\n        metadataUrl\n        traits {\n          name\n          value\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useDetailsQuery__\n *\n * To run a query within a React component, call `useDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDetailsQuery({\n *   variables: {\n *      address: // value for 'address'\n *      tokenId: // value for 'tokenId'\n *   },\n * });\n */\nexport function useDetailsQuery(baseOptions: Apollo.QueryHookOptions<DetailsQuery, DetailsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DetailsQuery, DetailsQueryVariables>(DetailsDocument, options);\n      }\nexport function useDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DetailsQuery, DetailsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DetailsQuery, DetailsQueryVariables>(DetailsDocument, options);\n        }\nexport type DetailsQueryHookResult = ReturnType<typeof useDetailsQuery>;\nexport type DetailsLazyQueryHookResult = ReturnType<typeof useDetailsLazyQuery>;\nexport type DetailsQueryResult = Apollo.QueryResult<DetailsQuery, DetailsQueryVariables>;\nexport const NftActivityDocument = gql`\n    query NftActivity($filter: NftActivityFilterInput, $after: String, $first: Int) {\n  nftActivity(filter: $filter, after: $after, first: $first) {\n    edges {\n      node {\n        id\n        address\n        tokenId\n        asset {\n          id\n          metadataUrl\n          image {\n            id\n            url\n          }\n          smallImage {\n            id\n            url\n          }\n          name\n          rarities {\n            id\n            provider\n            rank\n            score\n          }\n          suspiciousFlag\n          nftContract {\n            id\n            standard\n          }\n          collection {\n            id\n            image {\n              id\n              url\n            }\n          }\n        }\n        type\n        marketplace\n        fromAddress\n        toAddress\n        transactionHash\n        price {\n          id\n          value\n        }\n        orderStatus\n        quantity\n        url\n        timestamp\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useNftActivityQuery__\n *\n * To run a query within a React component, call `useNftActivityQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftActivityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftActivityQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      after: // value for 'after'\n *      first: // value for 'first'\n *   },\n * });\n */\nexport function useNftActivityQuery(baseOptions?: Apollo.QueryHookOptions<NftActivityQuery, NftActivityQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<NftActivityQuery, NftActivityQueryVariables>(NftActivityDocument, options);\n      }\nexport function useNftActivityLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NftActivityQuery, NftActivityQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<NftActivityQuery, NftActivityQueryVariables>(NftActivityDocument, options);\n        }\nexport type NftActivityQueryHookResult = ReturnType<typeof useNftActivityQuery>;\nexport type NftActivityLazyQueryHookResult = ReturnType<typeof useNftActivityLazyQuery>;\nexport type NftActivityQueryResult = Apollo.QueryResult<NftActivityQuery, NftActivityQueryVariables>;\nexport const NftBalanceDocument = gql`\n    query NftBalance($ownerAddress: String!, $filter: NftBalancesFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\n  nftBalances(\n    ownerAddress: $ownerAddress\n    filter: $filter\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    edges {\n      node {\n        ownedAsset {\n          id\n          animationUrl\n          collection {\n            id\n            isVerified\n            image {\n              id\n              url\n            }\n            name\n            twitterName\n            nftContracts {\n              id\n              address\n              chain\n              name\n              standard\n              symbol\n              totalSupply\n            }\n            markets(currencies: ETH) {\n              id\n              floorPrice {\n                id\n                value\n              }\n            }\n          }\n          description\n          flaggedBy\n          image {\n            id\n            url\n          }\n          originalImage {\n            id\n            url\n          }\n          name\n          ownerAddress\n          smallImage {\n            id\n            url\n          }\n          suspiciousFlag\n          tokenId\n          thumbnail {\n            id\n            url\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                price {\n                  id\n                  value\n                  currency\n                }\n                createdAt\n                marketplace\n                endAt\n              }\n            }\n          }\n        }\n        listedMarketplaces\n        listingFees {\n          id\n          payoutAddress\n          basisPoints\n        }\n        lastPrice {\n          id\n          currency\n          timestamp\n          value\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useNftBalanceQuery__\n *\n * To run a query within a React component, call `useNftBalanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftBalanceQuery({\n *   variables: {\n *      ownerAddress: // value for 'ownerAddress'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */\nexport function useNftBalanceQuery(baseOptions: Apollo.QueryHookOptions<NftBalanceQuery, NftBalanceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<NftBalanceQuery, NftBalanceQueryVariables>(NftBalanceDocument, options);\n      }\nexport function useNftBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NftBalanceQuery, NftBalanceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<NftBalanceQuery, NftBalanceQueryVariables>(NftBalanceDocument, options);\n        }\nexport type NftBalanceQueryHookResult = ReturnType<typeof useNftBalanceQuery>;\nexport type NftBalanceLazyQueryHookResult = ReturnType<typeof useNftBalanceLazyQuery>;\nexport type NftBalanceQueryResult = Apollo.QueryResult<NftBalanceQuery, NftBalanceQueryVariables>;\nexport const NftRouteDocument = gql`\n    query NftRoute($chain: Chain = ETHEREUM, $senderAddress: String!, $nftTrades: [NftTradeInput!]!, $tokenTrades: [TokenTradeInput!]) {\n  nftRoute(\n    chain: $chain\n    senderAddress: $senderAddress\n    nftTrades: $nftTrades\n    tokenTrades: $tokenTrades\n  ) {\n    id\n    calldata\n    route {\n      amount\n      contractAddress\n      id\n      marketplace\n      price {\n        id\n        currency\n        value\n      }\n      quotePrice {\n        id\n        currency\n        value\n      }\n      tokenId\n      tokenType\n    }\n    sendAmount {\n      id\n      currency\n      value\n    }\n    toAddress\n  }\n}\n    `;\n\n/**\n * __useNftRouteQuery__\n *\n * To run a query within a React component, call `useNftRouteQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftRouteQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftRouteQuery({\n *   variables: {\n *      chain: // value for 'chain'\n *      senderAddress: // value for 'senderAddress'\n *      nftTrades: // value for 'nftTrades'\n *      tokenTrades: // value for 'tokenTrades'\n *   },\n * });\n */\nexport function useNftRouteQuery(baseOptions: Apollo.QueryHookOptions<NftRouteQuery, NftRouteQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<NftRouteQuery, NftRouteQueryVariables>(NftRouteDocument, options);\n      }\nexport function useNftRouteLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NftRouteQuery, NftRouteQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<NftRouteQuery, NftRouteQueryVariables>(NftRouteDocument, options);\n        }\nexport type NftRouteQueryHookResult = ReturnType<typeof useNftRouteQuery>;\nexport type NftRouteLazyQueryHookResult = ReturnType<typeof useNftRouteLazyQuery>;\nexport type NftRouteQueryResult = Apollo.QueryResult<NftRouteQuery, NftRouteQueryVariables>;\nexport const TrendingCollectionsDocument = gql`\n    query TrendingCollections($size: Int, $timePeriod: HistoryDuration) {\n  topCollections(first: $size, duration: $timePeriod) {\n    edges {\n      node {\n        name\n        nftContracts {\n          address\n          totalSupply\n        }\n        image {\n          url\n        }\n        bannerImage {\n          url\n        }\n        isVerified\n        markets(currencies: ETH) {\n          floorPrice {\n            value\n          }\n          owners\n          totalVolume {\n            value\n          }\n          volume(duration: $timePeriod) {\n            value\n          }\n          volumePercentChange(duration: $timePeriod) {\n            value\n          }\n          floorPricePercentChange(duration: $timePeriod) {\n            value\n          }\n          sales {\n            value\n          }\n          listings {\n            value\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTrendingCollectionsQuery__\n *\n * To run a query within a React component, call `useTrendingCollectionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTrendingCollectionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTrendingCollectionsQuery({\n *   variables: {\n *      size: // value for 'size'\n *      timePeriod: // value for 'timePeriod'\n *   },\n * });\n */\nexport function useTrendingCollectionsQuery(baseOptions?: Apollo.QueryHookOptions<TrendingCollectionsQuery, TrendingCollectionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TrendingCollectionsQuery, TrendingCollectionsQueryVariables>(TrendingCollectionsDocument, options);\n      }\nexport function useTrendingCollectionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TrendingCollectionsQuery, TrendingCollectionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TrendingCollectionsQuery, TrendingCollectionsQueryVariables>(TrendingCollectionsDocument, options);\n        }\nexport type TrendingCollectionsQueryHookResult = ReturnType<typeof useTrendingCollectionsQuery>;\nexport type TrendingCollectionsLazyQueryHookResult = ReturnType<typeof useTrendingCollectionsLazyQuery>;\nexport type TrendingCollectionsQueryResult = Apollo.QueryResult<TrendingCollectionsQuery, TrendingCollectionsQueryVariables>;\nexport const PortfolioBalancesDocument = gql`\n    query PortfolioBalances($ownerAddress: String!) {\n  portfolios(\n    ownerAddresses: [$ownerAddress]\n    chains: [ETHEREUM, POLYGON, ARBITRUM, OPTIMISM, BNB]\n  ) {\n    id\n    tokensTotalDenominatedValue {\n      id\n      value\n    }\n    tokensTotalDenominatedValueChange(duration: DAY) {\n      absolute {\n        id\n        value\n      }\n      percentage {\n        id\n        value\n      }\n    }\n    tokenBalances {\n      id\n      quantity\n      denominatedValue {\n        id\n        currency\n        value\n      }\n      tokenProjectMarket {\n        id\n        pricePercentChange(duration: DAY) {\n          id\n          value\n        }\n        tokenProject {\n          id\n          logoUrl\n        }\n      }\n      token {\n        id\n        chain\n        address\n        name\n        symbol\n        standard\n        decimals\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __usePortfolioBalancesQuery__\n *\n * To run a query within a React component, call `usePortfolioBalancesQuery` and pass it any options that fit your needs.\n * When your component renders, `usePortfolioBalancesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePortfolioBalancesQuery({\n *   variables: {\n *      ownerAddress: // value for 'ownerAddress'\n *   },\n * });\n */\nexport function usePortfolioBalancesQuery(baseOptions: Apollo.QueryHookOptions<PortfolioBalancesQuery, PortfolioBalancesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<PortfolioBalancesQuery, PortfolioBalancesQueryVariables>(PortfolioBalancesDocument, options);\n      }\nexport function usePortfolioBalancesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PortfolioBalancesQuery, PortfolioBalancesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<PortfolioBalancesQuery, PortfolioBalancesQueryVariables>(PortfolioBalancesDocument, options);\n        }\nexport type PortfolioBalancesQueryHookResult = ReturnType<typeof usePortfolioBalancesQuery>;\nexport type PortfolioBalancesLazyQueryHookResult = ReturnType<typeof usePortfolioBalancesLazyQuery>;\nexport type PortfolioBalancesQueryResult = Apollo.QueryResult<PortfolioBalancesQuery, PortfolioBalancesQueryVariables>;\nexport const TransactionListDocument = gql`\n    query TransactionList($account: String!) {\n  portfolios(ownerAddresses: [$account]) {\n    id\n    assetActivities(pageSize: 50, page: 1) {\n      ...AssetActivityParts\n    }\n  }\n}\n    ${AssetActivityPartsFragmentDoc}`;\n\n/**\n * __useTransactionListQuery__\n *\n * To run a query within a React component, call `useTransactionListQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionListQuery({\n *   variables: {\n *      account: // value for 'account'\n *   },\n * });\n */\nexport function useTransactionListQuery(baseOptions: Apollo.QueryHookOptions<TransactionListQuery, TransactionListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TransactionListQuery, TransactionListQueryVariables>(TransactionListDocument, options);\n      }\nexport function useTransactionListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransactionListQuery, TransactionListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TransactionListQuery, TransactionListQueryVariables>(TransactionListDocument, options);\n        }\nexport type TransactionListQueryHookResult = ReturnType<typeof useTransactionListQuery>;\nexport type TransactionListLazyQueryHookResult = ReturnType<typeof useTransactionListLazyQuery>;\nexport type TransactionListQueryResult = Apollo.QueryResult<TransactionListQuery, TransactionListQueryVariables>;"],"mappings":"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;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;AAAA,GAAfA,eAAe,KAAfA,eAAe;AAyS3B,OAAO,MAAMC,2BAA2B,GAAG/B,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMgC,0BAA0B,GAAGhC,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMiC,6BAA6B,GAAGjC,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgC,0BAA2B,EAAC;AAClC,OAAO,MAAME,wBAAwB,GAAGlC,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,OAAO,MAAMmC,2BAA2B,GAAGnC,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkC,wBAAyB,EAAC;AAChC,OAAO,MAAME,6BAA6B,GAAGpC,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgC,0BAA2B,EAAC;AAClC,OAAO,MAAMK,2BAA2B,GAAGrC,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkC,wBAAyB,EAAC;AAChC,OAAO,MAAMI,gCAAgC,GAAGtC,GAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkC,wBAAyB,EAAC;AAChC,OAAO,MAAMK,6BAA6B,GAAGvC,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM+B,2BAA4B;AAClC,EAAEE,6BAA8B;AAChC,EAAEE,2BAA4B;AAC9B,EAAEC,6BAA8B;AAChC,EAAEC,2BAA4B;AAC9B,EAAEC,gCAAiC,EAAC;AACpC,OAAO,MAAME,8BAA8B,GAAGxC,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASyC,8BAA8B,CAACC,WAAuG,EAAE;EAAA;EAChJ,MAAMC,OAAO,GAAG;IAAC,GAAGzC,cAAc;IAAE,GAAGwC;EAAW,CAAC;EACnD,OAAOzC,MAAM,CAAC2C,QAAQ,CAAoEJ,8BAA8B,EAAEG,OAAO,CAAC;AACpI;AAAC,GAHSF,8BAA8B;EAAA,QAE/BxC,MAAM,CAAC2C,QAAQ;AAAA;AAE9B,OAAO,SAASC,kCAAkC,CAACH,WAA4G,EAAE;EAAA;EACvJ,MAAMC,OAAO,GAAG;IAAC,GAAGzC,cAAc;IAAE,GAAGwC;EAAW,CAAC;EACnD,OAAOzC,MAAM,CAAC6C,YAAY,CAAoEN,8BAA8B,EAAEG,OAAO,CAAC;AACxI;AAAC,IAHOE,kCAAkC;EAAA,QAEjC5C,MAAM,CAAC6C,YAAY;AAAA;AAKpC,OAAO,MAAMC,oBAAoB,GAAG/C,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA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"},"metadata":{},"sourceType":"module"}