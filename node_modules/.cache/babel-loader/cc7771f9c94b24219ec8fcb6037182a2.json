{"ast":null,"code":"import { formatPrice, NumberType } from '@uniswap/conedison/format';\nimport { Bound } from '../state/mint/v3/actions';\nexport function formatTickPrice(_ref) {\n  let {\n    price,\n    atLimit,\n    direction,\n    placeholder,\n    numberType\n  } = _ref;\n  if (atLimit[direction]) {\n    return direction === Bound.LOWER ? '0' : '∞';\n  }\n  if (!price && placeholder !== undefined) {\n    return placeholder;\n  }\n  return formatPrice(price, numberType !== null && numberType !== void 0 ? numberType : NumberType.TokenNonTx);\n}","map":{"version":3,"names":["formatPrice","NumberType","Bound","formatTickPrice","price","atLimit","direction","placeholder","numberType","LOWER","undefined","TokenNonTx"],"sources":["/home/diep/freelance/interface/src/utils/formatTickPrice.ts"],"sourcesContent":["import { formatPrice, NumberType } from '@uniswap/conedison/format'\nimport { Price, Token } from '@uniswap/sdk-core'\n\nimport { Bound } from '../state/mint/v3/actions'\n\ninterface FormatTickPriceArgs {\n  price: Price<Token, Token> | undefined\n  atLimit: { [bound in Bound]?: boolean | undefined }\n  direction: Bound\n  placeholder?: string\n  numberType?: NumberType\n}\n\nexport function formatTickPrice({ price, atLimit, direction, placeholder, numberType }: FormatTickPriceArgs) {\n  if (atLimit[direction]) {\n    return direction === Bound.LOWER ? '0' : '∞'\n  }\n\n  if (!price && placeholder !== undefined) {\n    return placeholder\n  }\n\n  return formatPrice(price, numberType ?? NumberType.TokenNonTx)\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,UAAU,QAAQ,2BAA2B;AAGnE,SAASC,KAAK,QAAQ,0BAA0B;AAUhD,OAAO,SAASC,eAAe,OAA8E;EAAA,IAA7E;IAAEC,KAAK;IAAEC,OAAO;IAAEC,SAAS;IAAEC,WAAW;IAAEC;EAAgC,CAAC;EACzG,IAAIH,OAAO,CAACC,SAAS,CAAC,EAAE;IACtB,OAAOA,SAAS,KAAKJ,KAAK,CAACO,KAAK,GAAG,GAAG,GAAG,GAAG;EAC9C;EAEA,IAAI,CAACL,KAAK,IAAIG,WAAW,KAAKG,SAAS,EAAE;IACvC,OAAOH,WAAW;EACpB;EAEA,OAAOP,WAAW,CAACI,KAAK,EAAEI,UAAU,aAAVA,UAAU,cAAVA,UAAU,GAAIP,UAAU,CAACU,UAAU,CAAC;AAChE"},"metadata":{},"sourceType":"module"}