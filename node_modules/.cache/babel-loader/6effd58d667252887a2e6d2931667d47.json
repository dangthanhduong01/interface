{"ast":null,"code":"var _s = $RefreshSig$();\nimport { CurrencyAmount, TradeType } from '@uniswap/sdk-core';\nimport { SwapQuoter } from '@uniswap/v3-sdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { SupportedChainId } from 'constants/chains';\nimport JSBI from 'jsbi';\nimport { useSingleContractWithCallData } from 'lib/hooks/multicall';\nimport { useMemo } from 'react';\nimport { InterfaceTrade, TradeState } from 'state/routing/types';\nimport { isCelo } from '../constants/tokens';\nimport { useAllV3Routes } from './useAllV3Routes';\nimport { useQuoter } from './useContract';\nconst QUOTE_GAS_OVERRIDES = {\n  [SupportedChainId.ARBITRUM_ONE]: 25000000,\n  [SupportedChainId.ARBITRUM_GOERLI]: 25000000,\n  [SupportedChainId.CELO]: 50000000,\n  [SupportedChainId.CELO_ALFAJORES]: 50000000,\n  [SupportedChainId.POLYGON]: 40000000,\n  [SupportedChainId.POLYGON_MUMBAI]: 40000000,\n  [SupportedChainId.BNB]: 50000000\n};\nconst DEFAULT_GAS_QUOTE = 2000000;\n\n/**\n * Returns the best v3 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useClientSideV3Trade(tradeType, amountSpecified, otherCurrency) {\n  _s();\n  var _QUOTE_GAS_OVERRIDES$;\n  const [currencyIn, currencyOut] = tradeType === TradeType.EXACT_INPUT ? [amountSpecified === null || amountSpecified === void 0 ? void 0 : amountSpecified.currency, otherCurrency] : [otherCurrency, amountSpecified === null || amountSpecified === void 0 ? void 0 : amountSpecified.currency];\n  const {\n    routes,\n    loading: routesLoading\n  } = useAllV3Routes(currencyIn, currencyOut);\n  const {\n    chainId\n  } = useWeb3React();\n  // Chains deployed using the deploy-v3 script only deploy QuoterV2.\n  const useQuoterV2 = useMemo(() => Boolean(chainId && isCelo(chainId)), [chainId]);\n  const quoter = useQuoter(useQuoterV2);\n  const callData = useMemo(() => amountSpecified ? routes.map(route => SwapQuoter.quoteCallParameters(route, amountSpecified, tradeType, {\n    useQuoterV2\n  }).calldata) : [], [amountSpecified, routes, tradeType, useQuoterV2]);\n  const quotesResults = useSingleContractWithCallData(quoter, callData, {\n    gasRequired: chainId ? (_QUOTE_GAS_OVERRIDES$ = QUOTE_GAS_OVERRIDES[chainId]) !== null && _QUOTE_GAS_OVERRIDES$ !== void 0 ? _QUOTE_GAS_OVERRIDES$ : DEFAULT_GAS_QUOTE : undefined\n  });\n  const currenciesAreTheSame = useMemo(() => currencyIn && currencyOut && (currencyIn.equals(currencyOut) || currencyIn.wrapped.equals(currencyOut)), [currencyIn, currencyOut]);\n  return useMemo(() => {\n    if (!amountSpecified || !currencyIn || !currencyOut || quotesResults.some(_ref => {\n      let {\n        valid\n      } = _ref;\n      return !valid;\n    }) || currenciesAreTheSame) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined\n      };\n    }\n    if (routesLoading || quotesResults.some(_ref2 => {\n      let {\n        loading\n      } = _ref2;\n      return loading;\n    })) {\n      return {\n        state: TradeState.LOADING,\n        trade: undefined\n      };\n    }\n    const {\n      bestRoute,\n      amountIn,\n      amountOut\n    } = quotesResults.reduce((currentBest, _ref3, i) => {\n      let {\n        result\n      } = _ref3;\n      if (!result) return currentBest;\n\n      // overwrite the current best if it's not defined or if this route is better\n      if (tradeType === TradeType.EXACT_INPUT) {\n        const amountOut = CurrencyAmount.fromRawAmount(currencyOut, result.amountOut.toString());\n        if (currentBest.amountOut === null || JSBI.lessThan(currentBest.amountOut.quotient, amountOut.quotient)) {\n          return {\n            bestRoute: routes[i],\n            amountIn: amountSpecified,\n            amountOut\n          };\n        }\n      } else {\n        const amountIn = CurrencyAmount.fromRawAmount(currencyIn, result.amountIn.toString());\n        if (currentBest.amountIn === null || JSBI.greaterThan(currentBest.amountIn.quotient, amountIn.quotient)) {\n          return {\n            bestRoute: routes[i],\n            amountIn,\n            amountOut: amountSpecified\n          };\n        }\n      }\n      return currentBest;\n    }, {\n      bestRoute: null,\n      amountIn: null,\n      amountOut: null\n    });\n    if (!bestRoute || !amountIn || !amountOut) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined\n      };\n    }\n    return {\n      state: TradeState.VALID,\n      trade: new InterfaceTrade({\n        v2Routes: [],\n        v3Routes: [{\n          routev3: bestRoute,\n          inputAmount: amountIn,\n          outputAmount: amountOut\n        }],\n        tradeType\n      })\n    };\n  }, [amountSpecified, currenciesAreTheSame, currencyIn, currencyOut, quotesResults, routes, routesLoading, tradeType]);\n}\n_s(useClientSideV3Trade, \"YVsykL0kiwutGHyrNclgjxb+ToY=\", false, function () {\n  return [useAllV3Routes, useWeb3React, useQuoter, useSingleContractWithCallData];\n});","map":{"version":3,"names":["CurrencyAmount","TradeType","SwapQuoter","useWeb3React","SupportedChainId","JSBI","useSingleContractWithCallData","useMemo","InterfaceTrade","TradeState","isCelo","useAllV3Routes","useQuoter","QUOTE_GAS_OVERRIDES","ARBITRUM_ONE","ARBITRUM_GOERLI","CELO","CELO_ALFAJORES","POLYGON","POLYGON_MUMBAI","BNB","DEFAULT_GAS_QUOTE","useClientSideV3Trade","tradeType","amountSpecified","otherCurrency","currencyIn","currencyOut","EXACT_INPUT","currency","routes","loading","routesLoading","chainId","useQuoterV2","Boolean","quoter","callData","map","route","quoteCallParameters","calldata","quotesResults","gasRequired","undefined","currenciesAreTheSame","equals","wrapped","some","valid","state","INVALID","trade","LOADING","bestRoute","amountIn","amountOut","reduce","currentBest","i","result","fromRawAmount","toString","lessThan","quotient","greaterThan","NO_ROUTE_FOUND","VALID","v2Routes","v3Routes","routev3","inputAmount","outputAmount"],"sources":["/home/diep/freelance/interface/src/hooks/useClientSideV3Trade.ts"],"sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Route, SwapQuoter } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useSingleContractWithCallData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { isCelo } from '../constants/tokens'\nimport { useAllV3Routes } from './useAllV3Routes'\nimport { useQuoter } from './useContract'\n\nconst QUOTE_GAS_OVERRIDES: { [chainId: number]: number } = {\n  [SupportedChainId.ARBITRUM_ONE]: 25_000_000,\n  [SupportedChainId.ARBITRUM_GOERLI]: 25_000_000,\n  [SupportedChainId.CELO]: 50_000_000,\n  [SupportedChainId.CELO_ALFAJORES]: 50_000_000,\n  [SupportedChainId.POLYGON]: 40_000_000,\n  [SupportedChainId.POLYGON_MUMBAI]: 40_000_000,\n  [SupportedChainId.BNB]: 50_000_000,\n}\n\nconst DEFAULT_GAS_QUOTE = 2_000_000\n\n/**\n * Returns the best v3 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useClientSideV3Trade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): { state: TradeState; trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined } {\n  const [currencyIn, currencyOut] =\n    tradeType === TradeType.EXACT_INPUT\n      ? [amountSpecified?.currency, otherCurrency]\n      : [otherCurrency, amountSpecified?.currency]\n  const { routes, loading: routesLoading } = useAllV3Routes(currencyIn, currencyOut)\n\n  const { chainId } = useWeb3React()\n  // Chains deployed using the deploy-v3 script only deploy QuoterV2.\n  const useQuoterV2 = useMemo(() => Boolean(chainId && isCelo(chainId)), [chainId])\n  const quoter = useQuoter(useQuoterV2)\n  const callData = useMemo(\n    () =>\n      amountSpecified\n        ? routes.map(\n            (route) => SwapQuoter.quoteCallParameters(route, amountSpecified, tradeType, { useQuoterV2 }).calldata\n          )\n        : [],\n    [amountSpecified, routes, tradeType, useQuoterV2]\n  )\n\n  const quotesResults = useSingleContractWithCallData(quoter, callData, {\n    gasRequired: chainId ? QUOTE_GAS_OVERRIDES[chainId] ?? DEFAULT_GAS_QUOTE : undefined,\n  })\n\n  const currenciesAreTheSame = useMemo(\n    () => currencyIn && currencyOut && (currencyIn.equals(currencyOut) || currencyIn.wrapped.equals(currencyOut)),\n    [currencyIn, currencyOut]\n  )\n\n  return useMemo(() => {\n    if (\n      !amountSpecified ||\n      !currencyIn ||\n      !currencyOut ||\n      quotesResults.some(({ valid }) => !valid) ||\n      currenciesAreTheSame\n    ) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (routesLoading || quotesResults.some(({ loading }) => loading)) {\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    const { bestRoute, amountIn, amountOut } = quotesResults.reduce(\n      (\n        currentBest: {\n          bestRoute: Route<Currency, Currency> | null\n          amountIn: CurrencyAmount<Currency> | null\n          amountOut: CurrencyAmount<Currency> | null\n        },\n        { result },\n        i\n      ) => {\n        if (!result) return currentBest\n\n        // overwrite the current best if it's not defined or if this route is better\n        if (tradeType === TradeType.EXACT_INPUT) {\n          const amountOut = CurrencyAmount.fromRawAmount(currencyOut, result.amountOut.toString())\n          if (currentBest.amountOut === null || JSBI.lessThan(currentBest.amountOut.quotient, amountOut.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn: amountSpecified,\n              amountOut,\n            }\n          }\n        } else {\n          const amountIn = CurrencyAmount.fromRawAmount(currencyIn, result.amountIn.toString())\n          if (currentBest.amountIn === null || JSBI.greaterThan(currentBest.amountIn.quotient, amountIn.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn,\n              amountOut: amountSpecified,\n            }\n          }\n        }\n\n        return currentBest\n      },\n      {\n        bestRoute: null,\n        amountIn: null,\n        amountOut: null,\n      }\n    )\n\n    if (!bestRoute || !amountIn || !amountOut) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    return {\n      state: TradeState.VALID,\n      trade: new InterfaceTrade({\n        v2Routes: [],\n        v3Routes: [\n          {\n            routev3: bestRoute,\n            inputAmount: amountIn,\n            outputAmount: amountOut,\n          },\n        ],\n        tradeType,\n      }),\n    }\n  }, [amountSpecified, currenciesAreTheSame, currencyIn, currencyOut, quotesResults, routes, routesLoading, tradeType])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}