{"ast":null,"code":"import { dsnToString } from './dsn.js';\nimport { normalize } from './normalize.js';\nimport { dropUndefinedKeys } from './object.js';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers) {\n  let items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return [headers, items];\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]];\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(envelope, callback) {\n  const envelopeItems = envelope[1];\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n    if (result) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input, textEncoder) {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope, textEncoder) {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env, textEncoder, textDecoder) {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n    return JSON.parse(textDecoder.decode(readBinary(i)));\n  }\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment, textEncoder) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n  return [dropUndefinedKeys({\n    type: 'attachment',\n    length: buffer.length,\n    filename: attachment.filename,\n    content_type: attachment.contentType,\n    attachment_type: attachment.attachmentType\n  }), buffer];\n}\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay'\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const {\n    name,\n    version\n  } = metadataOrEvent.sdk;\n  return {\n    name,\n    version\n  };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && {\n      sdk: sdkInfo\n    }),\n    ...(!!tunnel && {\n      dsn: dsnToString(dsn)\n    }),\n    ...(event.type === 'transaction' && dynamicSamplingContext && {\n      trace: dropUndefinedKeys({\n        ...dynamicSamplingContext\n      })\n    })\n  };\n}\nexport { addItemToEnvelope, createAttachmentEnvelopeItem, createEnvelope, createEventEnvelopeHeaders, envelopeContainsItemType, envelopeItemTypeToDataCategory, forEachEnvelopeItem, getSdkMetadataForEnvelopeHeader, parseEnvelope, serializeEnvelope };","map":{"version":3,"sources":["../../src/envelope.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Attachment,\n  AttachmentItem,\n  BaseEnvelopeHeaders,\n  BaseEnvelopeItemHeaders,\n  DataCategory,\n  DsnComponents,\n  Envelope,\n  EnvelopeItemType,\n  Event,\n  EventEnvelopeHeaders,\n  SdkInfo,\n  SdkMetadata,\n  TextEncoderInternal,\n} from '@sentry/types';\n\nimport { dsnToString } from './dsn';\nimport { normalize } from './normalize';\nimport { dropUndefinedKeys } from './object';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nexport function forEachEnvelopeItem<E extends Envelope>(\n  envelope: Envelope,\n  callback: (envelopeItem: E[1][number], envelopeItemType: E[1][number][0]['type']) => boolean | void,\n): boolean {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nexport function envelopeContainsItemType(envelope: Envelope, types: EnvelopeItemType[]): boolean {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8.\n */\nfunction encodeUTF8(input: string, textEncoder?: TextEncoderInternal): Uint8Array {\n  const utf8 = textEncoder || new TextEncoder();\n  return utf8.encode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nexport function serializeEnvelope(envelope: Envelope, textEncoder?: TextEncoderInternal): string | Uint8Array {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts: string | Uint8Array[] = JSON.stringify(envHeaders);\n\n  function append(next: string | Uint8Array): void {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts, textEncoder), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next, textEncoder) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload: string;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers: Uint8Array[]): Uint8Array {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\nexport interface TextDecoderInternal {\n  decode(input?: Uint8Array): string;\n}\n\n/**\n * Parses an envelope\n */\nexport function parseEnvelope(\n  env: string | Uint8Array,\n  textEncoder: TextEncoderInternal,\n  textDecoder: TextDecoderInternal,\n): Envelope {\n  let buffer = typeof env === 'string' ? textEncoder.encode(env) : env;\n\n  function readBinary(length: number): Uint8Array {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson<T>(): T {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(textDecoder.decode(readBinary(i))) as T;\n  }\n\n  const envelopeHeader = readJson<BaseEnvelopeHeaders>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items: [any, any][] = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson<BaseEnvelopeItemHeaders>();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates attachment envelope items\n */\nexport function createAttachmentEnvelopeItem(\n  attachment: Attachment,\n  textEncoder?: TextEncoderInternal,\n): AttachmentItem {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data, textEncoder) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP: Record<EnvelopeItemType, DataCategory> = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nexport function envelopeItemTypeToDataCategory(type: EnvelopeItemType): DataCategory {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from from the metadata or an events */\nexport function getSdkMetadataForEnvelopeHeader(metadataOrEvent?: SdkMetadata | Event): SdkInfo | undefined {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nexport function createEventEnvelopeHeaders(\n  event: Event,\n  sdkInfo: SdkInfo | undefined,\n  tunnel: string | undefined,\n  dsn: DsnComponents,\n): EventEnvelopeHeaders {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n\n  return {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && { dsn: dsnToString(dsn) }),\n    ...(event.type === 'transaction' &&\n      dynamicSamplingContext && {\n        trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n      }),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}