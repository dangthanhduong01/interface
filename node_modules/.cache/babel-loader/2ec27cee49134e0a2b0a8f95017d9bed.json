{"ast":null,"code":"/**\n * Divides an array into slices of a given size\n * @param items\n * @param size\n * @returns\n */\nexport function arrayToSlices(items, size) {\n  if (items.length % size !== 0) throw new Error('Input array length must be a multiple of desired output size');\n  return Array.from({\n    length: Math.floor(items.length / size)\n  }, (_v, i) => items.slice(i * size, i * size + size));\n}","map":{"version":3,"names":["arrayToSlices","items","size","length","Error","Array","from","Math","floor","_v","i","slice"],"sources":["/home/diep/freelance/interface/src/utils/arrays.ts"],"sourcesContent":["/**\n * Divides an array into slices of a given size\n * @param items\n * @param size\n * @returns\n */\nexport function arrayToSlices<T>(items: Array<T>, size: number): T[][] {\n  if (items.length % size !== 0) throw new Error('Input array length must be a multiple of desired output size')\n  return Array.from({ length: Math.floor(items.length / size) }, (_v, i) => items.slice(i * size, i * size + size))\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAa,CAAIC,KAAe,EAAEC,IAAY,EAAS;EACrE,IAAID,KAAK,CAACE,MAAM,GAAGD,IAAI,KAAK,CAAC,EAAE,MAAM,IAAIE,KAAK,CAAC,8DAA8D,CAAC;EAC9G,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEH,MAAM,EAAEI,IAAI,CAACC,KAAK,CAACP,KAAK,CAACE,MAAM,GAAGD,IAAI;EAAE,CAAC,EAAE,CAACO,EAAE,EAAEC,CAAC,KAAKT,KAAK,CAACU,KAAK,CAACD,CAAC,GAAGR,IAAI,EAAEQ,CAAC,GAAGR,IAAI,GAAGA,IAAI,CAAC,CAAC;AACnH"},"metadata":{},"sourceType":"module"}