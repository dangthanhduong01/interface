{"ast":null,"code":"import { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { relayStylePagination } from '@apollo/client/utilities';\nconst GRAPHQL_URL = process.env.REACT_APP_AWS_API_ENDPOINT;\nif (!GRAPHQL_URL) {\n  throw new Error('AWS URL MISSING FROM ENVIRONMENT');\n}\nexport const apolloClient = new ApolloClient({\n  connectToDevTools: true,\n  uri: GRAPHQL_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Origin: 'https://app.uniswap.org'\n  },\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          nftBalances: relayStylePagination(['ownerAddress', 'filter']),\n          nftAssets: relayStylePagination(),\n          nftActivity: relayStylePagination(),\n          // tell apollo client how to reference Token items in the cache after being fetched by queries that return Token[]\n          token: {\n            read(_, _ref) {\n              let {\n                args,\n                toReference\n              } = _ref;\n              return toReference({\n                __typename: 'Token',\n                chain: args === null || args === void 0 ? void 0 : args.chain,\n                address: args === null || args === void 0 ? void 0 : args.address\n              });\n            }\n          }\n        }\n      },\n      Token: {\n        // key by chain, address combination so that Token(chain, address) endpoint can read from cache\n        /**\n         * NOTE: In any query for `token` or `tokens`, you must include the `chain` and `address` fields\n         * in order for result to normalize properly in the cache.\n         */\n        keyFields: ['chain', 'address'],\n        fields: {\n          address: {\n            read(address) {\n              var _address$toLowerCase;\n              // backend endpoint sometimes returns checksummed, sometimes lowercased addresses\n              // always use lowercased addresses in our app for consistency\n              return (_address$toLowerCase = address === null || address === void 0 ? void 0 : address.toLowerCase()) !== null && _address$toLowerCase !== void 0 ? _address$toLowerCase : null;\n            }\n          }\n        }\n      }\n    }\n  }),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network'\n    }\n  }\n});","map":{"version":3,"names":["ApolloClient","InMemoryCache","relayStylePagination","GRAPHQL_URL","process","env","REACT_APP_AWS_API_ENDPOINT","Error","apolloClient","connectToDevTools","uri","headers","Origin","cache","typePolicies","Query","fields","nftBalances","nftAssets","nftActivity","token","read","_","args","toReference","__typename","chain","address","Token","keyFields","toLowerCase","defaultOptions","watchQuery","fetchPolicy"],"sources":["/home/diep/freelance/interface/src/graphql/data/apollo.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { Reference, relayStylePagination } from '@apollo/client/utilities'\n\nconst GRAPHQL_URL = process.env.REACT_APP_AWS_API_ENDPOINT\nif (!GRAPHQL_URL) {\n  throw new Error('AWS URL MISSING FROM ENVIRONMENT')\n}\n\nexport const apolloClient = new ApolloClient({\n  connectToDevTools: true,\n  uri: GRAPHQL_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Origin: 'https://app.uniswap.org',\n  },\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          nftBalances: relayStylePagination(['ownerAddress', 'filter']),\n          nftAssets: relayStylePagination(),\n          nftActivity: relayStylePagination(),\n          // tell apollo client how to reference Token items in the cache after being fetched by queries that return Token[]\n          token: {\n            read(_, { args, toReference }): Reference | undefined {\n              return toReference({\n                __typename: 'Token',\n                chain: args?.chain,\n                address: args?.address,\n              })\n            },\n          },\n        },\n      },\n      Token: {\n        // key by chain, address combination so that Token(chain, address) endpoint can read from cache\n        /**\n         * NOTE: In any query for `token` or `tokens`, you must include the `chain` and `address` fields\n         * in order for result to normalize properly in the cache.\n         */\n        keyFields: ['chain', 'address'],\n        fields: {\n          address: {\n            read(address: string | null): string | null {\n              // backend endpoint sometimes returns checksummed, sometimes lowercased addresses\n              // always use lowercased addresses in our app for consistency\n              return address?.toLowerCase() ?? null\n            },\n          },\n        },\n      },\n    },\n  }),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network',\n    },\n  },\n})\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,gBAAgB;AAC5D,SAAoBC,oBAAoB,QAAQ,0BAA0B;AAE1E,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,0BAA0B;AAC1D,IAAI,CAACH,WAAW,EAAE;EAChB,MAAM,IAAII,KAAK,CAAC,kCAAkC,CAAC;AACrD;AAEA,OAAO,MAAMC,YAAY,GAAG,IAAIR,YAAY,CAAC;EAC3CS,iBAAiB,EAAE,IAAI;EACvBC,GAAG,EAAEP,WAAW;EAChBQ,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV,CAAC;EACDC,KAAK,EAAE,IAAIZ,aAAa,CAAC;IACvBa,YAAY,EAAE;MACZC,KAAK,EAAE;QACLC,MAAM,EAAE;UACNC,WAAW,EAAEf,oBAAoB,CAAC,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;UAC7DgB,SAAS,EAAEhB,oBAAoB,EAAE;UACjCiB,WAAW,EAAEjB,oBAAoB,EAAE;UACnC;UACAkB,KAAK,EAAE;YACLC,IAAI,CAACC,CAAC,QAAgD;cAAA,IAA9C;gBAAEC,IAAI;gBAAEC;cAAY,CAAC;cAC3B,OAAOA,WAAW,CAAC;gBACjBC,UAAU,EAAE,OAAO;gBACnBC,KAAK,EAAEH,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,KAAK;gBAClBC,OAAO,EAAEJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI;cACjB,CAAC,CAAC;YACJ;UACF;QACF;MACF,CAAC;MACDC,KAAK,EAAE;QACL;QACA;AACR;AACA;AACA;QACQC,SAAS,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC;QAC/Bb,MAAM,EAAE;UACNW,OAAO,EAAE;YACPN,IAAI,CAACM,OAAsB,EAAiB;cAAA;cAC1C;cACA;cACA,+BAAOA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,WAAW,EAAE,uEAAI,IAAI;YACvC;UACF;QACF;MACF;IACF;EACF,CAAC,CAAC;EACFC,cAAc,EAAE;IACdC,UAAU,EAAE;MACVC,WAAW,EAAE;IACf;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}