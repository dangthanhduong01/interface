{"ast":null,"code":"import { isAddress } from '@ethersproject/address';\n\n/**\n * Shortens an Ethereum address by N characters\n * @param address blockchain address\n * @param charsStart amount of character to shorten (from both ends / in the beginning)\n * @param charsEnd amount of characters to shorten in the end\n * @returns formatted string\n */\nexport function shortenAddress(address) {\n  let charsStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let charsEnd = arguments.length > 2 ? arguments[2] : undefined;\n  const parsed = isAddress(address);\n  if (!parsed) return '';\n  return `${address.substring(0, charsStart + 2)}...${address.substring(42 - (charsEnd || charsStart))}`;\n}","map":{"version":3,"names":["isAddress","shortenAddress","address","charsStart","charsEnd","parsed","substring"],"sources":["/home/diep/freelance/interface/src/nft/utils/address.ts"],"sourcesContent":["import { isAddress } from '@ethersproject/address'\n\n/**\n * Shortens an Ethereum address by N characters\n * @param address blockchain address\n * @param charsStart amount of character to shorten (from both ends / in the beginning)\n * @param charsEnd amount of characters to shorten in the end\n * @returns formatted string\n */\nexport function shortenAddress(address: string, charsStart = 4, charsEnd?: number): string {\n  const parsed = isAddress(address)\n  if (!parsed) return ''\n\n  return `${address.substring(0, charsStart + 2)}...${address.substring(42 - (charsEnd || charsStart))}`\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,wBAAwB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAc,CAACC,OAAe,EAA6C;EAAA,IAA3CC,UAAU,uEAAG,CAAC;EAAA,IAAEC,QAAiB;EAC/E,MAAMC,MAAM,GAAGL,SAAS,CAACE,OAAO,CAAC;EACjC,IAAI,CAACG,MAAM,EAAE,OAAO,EAAE;EAEtB,OAAQ,GAAEH,OAAO,CAACI,SAAS,CAAC,CAAC,EAAEH,UAAU,GAAG,CAAC,CAAE,MAAKD,OAAO,CAACI,SAAS,CAAC,EAAE,IAAIF,QAAQ,IAAID,UAAU,CAAC,CAAE,EAAC;AACxG"},"metadata":{},"sourceType":"module"}