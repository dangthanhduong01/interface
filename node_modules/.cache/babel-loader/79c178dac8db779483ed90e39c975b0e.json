{"ast":null,"code":"import { TradeType } from '@uniswap/sdk-core';\nimport _ from 'lodash';\nimport { TokenValidationResult } from '../../../providers';\nimport { log, metric, MetricLoggerUnit, routeToString } from '../../../util';\nimport { MixedRouteWithValidQuote } from '../entities';\nimport { computeAllMixedRoutes } from '../functions/compute-all-routes';\nimport { getMixedRouteCandidatePools } from '../functions/get-candidate-pools';\nimport { BaseQuoter } from './base-quoter';\nexport class MixedQuoter extends BaseQuoter {\n  constructor(v3SubgraphProvider, v3PoolProvider, v2SubgraphProvider, v2PoolProvider, onChainQuoteProvider, tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider) {\n    super(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider);\n    this.v3SubgraphProvider = v3SubgraphProvider;\n    this.v3PoolProvider = v3PoolProvider;\n    this.v2SubgraphProvider = v2SubgraphProvider;\n    this.v2PoolProvider = v2PoolProvider;\n    this.onChainQuoteProvider = onChainQuoteProvider;\n  }\n  async getRoutes(tokenIn, tokenOut, tradeType, routingConfig) {\n    if (tradeType != TradeType.EXACT_INPUT) {\n      throw new Error('Mixed route quotes are not supported for EXACT_OUTPUT');\n    }\n    const {\n      V2poolAccessor,\n      V3poolAccessor,\n      candidatePools: mixedRouteCandidatePools\n    } = await getMixedRouteCandidatePools({\n      tokenIn,\n      tokenOut,\n      tokenProvider: this.tokenProvider,\n      blockedTokenListProvider: this.blockedTokenListProvider,\n      v3poolProvider: this.v3PoolProvider,\n      v2poolProvider: this.v2PoolProvider,\n      routeType: tradeType,\n      v3subgraphProvider: this.v3SubgraphProvider,\n      v2subgraphProvider: this.v2SubgraphProvider,\n      routingConfig,\n      chainId: this.chainId\n    });\n    const V3poolsRaw = V3poolAccessor.getAllPools();\n    const V2poolsRaw = V2poolAccessor.getAllPools();\n    const poolsRaw = [...V3poolsRaw, ...V2poolsRaw];\n    const candidatePools = mixedRouteCandidatePools;\n    // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.\n    const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n      // If there is no available validation result we assume the token is fine.\n      if (!tokenValidation) {\n        return false;\n      }\n      // Only filters out *intermediate* pools that involve tokens that we detect\n      // cant be transferred. This prevents us trying to route through tokens that may\n      // not be transferrable, but allows users to still swap those tokens if they\n      // specify.\n      //\n      if (tokenValidation == TokenValidationResult.STF && (token.equals(tokenIn) || token.equals(tokenOut))) {\n        return false;\n      }\n      return tokenValidation == TokenValidationResult.FOT || tokenValidation == TokenValidationResult.STF;\n    });\n    const {\n      maxSwapsPerPath\n    } = routingConfig;\n    const routes = computeAllMixedRoutes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n    return {\n      routes,\n      candidatePools\n    };\n  }\n  async getQuotes(routes, amounts, percents, quoteToken, tradeType, routingConfig, candidatePools, gasModel) {\n    log.info('Starting to get mixed quotes');\n    if (gasModel === undefined) {\n      throw new Error('GasModel for MixedRouteWithValidQuote is required to getQuotes');\n    }\n    if (routes.length == 0) {\n      return {\n        routesWithValidQuotes: [],\n        candidatePools\n      };\n    }\n    // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n    const quoteFn = this.onChainQuoteProvider.getQuotesManyExactIn.bind(this.onChainQuoteProvider);\n    const beforeQuotes = Date.now();\n    log.info(`Getting quotes for mixed for ${routes.length} routes with ${amounts.length} amounts per route.`);\n    const {\n      routesWithQuotes\n    } = await quoteFn(amounts, routes, {\n      blockNumber: routingConfig.blockNumber\n    });\n    metric.putMetric('MixedQuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n    metric.putMetric('MixedQuotesFetched', _(routesWithQuotes).map(_ref => {\n      let [, quotes] = _ref;\n      return quotes.length;\n    }).sum(), MetricLoggerUnit.Count);\n    const routesWithValidQuotes = [];\n    for (const routeWithQuote of routesWithQuotes) {\n      const [route, quotes] = routeWithQuote;\n      for (let i = 0; i < quotes.length; i++) {\n        const percent = percents[i];\n        const amountQuote = quotes[i];\n        const {\n          quote,\n          amount,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          gasEstimate\n        } = amountQuote;\n        if (!quote || !sqrtPriceX96AfterList || !initializedTicksCrossedList || !gasEstimate) {\n          log.debug({\n            route: routeToString(route),\n            amountQuote\n          }, 'Dropping a null mixed quote for route.');\n          continue;\n        }\n        const routeWithValidQuote = new MixedRouteWithValidQuote({\n          route,\n          rawQuote: quote,\n          amount,\n          percent,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          quoterGasEstimate: gasEstimate,\n          mixedRouteGasModel: gasModel,\n          quoteToken,\n          tradeType,\n          v3PoolProvider: this.v3PoolProvider,\n          v2PoolProvider: this.v2PoolProvider\n        });\n        routesWithValidQuotes.push(routeWithValidQuote);\n      }\n    }\n    return {\n      routesWithValidQuotes,\n      candidatePools\n    };\n  }\n}","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/quoters/mixed-quoter.ts"],"names":[],"mappings":"AAAA,SAA0B,SAAS,QAAQ,mBAAmB;AAC9D,OAAO,CAAC,MAAM,QAAQ;AAEtB,SASE,qBAAqB,QAChB,oBAAoB;AAC3B,SAAkC,GAAG,EAAE,MAAM,EAAE,gBAAgB,EAAE,aAAa,QAAQ,eAAe;AAGrG,SAAS,wBAAwB,QAAQ,aAAa;AACtD,SAAS,qBAAqB,QAAQ,iCAAiC;AACvE,SAA4C,2BAA2B,QAAQ,kCAAkC;AAGjH,SAAS,UAAU,QAAQ,eAAe;AAG1C,OAAM,MAAO,WAAY,SAAQ,UAAsB,CAAA;EAOrD,WAAA,CACE,kBAAuC,EACvC,cAA+B,EAC/B,kBAAuC,EACvC,cAA+B,EAC/B,oBAA2C,EAC3C,aAA6B,EAC7B,OAAgB,EAChB,wBAA6C,EAC7C,sBAAgD,EAAA;IAEhD,KAAK,CAAC,aAAa,EAAE,OAAO,EAAE,wBAAwB,EAAE,sBAAsB,CAAC;IAC/E,IAAI,CAAC,kBAAkB,GAAG,kBAAkB;IAC5C,IAAI,CAAC,cAAc,GAAG,cAAc;IACpC,IAAI,CAAC,kBAAkB,GAAG,kBAAkB;IAC5C,IAAI,CAAC,cAAc,GAAG,cAAc;IACpC,IAAI,CAAC,oBAAoB,GAAG,oBAAoB;EAClD;EAEU,MAAM,SAAS,CACvB,OAAc,EACd,QAAe,EACf,SAAoB,EACpB,aAAgC,EAAA;IAEhC,IAAI,SAAS,IAAI,SAAS,CAAC,WAAW,EAAE;MACtC,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC;IACzE;IAED,MAAM;MACJ,cAAc;MACd,cAAc;MACd,cAAc,EAAE;IAAwB,CACzC,GAAG,MAAM,2BAA2B,CAAC;MACpC,OAAO;MACP,QAAQ;MACR,aAAa,EAAE,IAAI,CAAC,aAAa;MACjC,wBAAwB,EAAE,IAAI,CAAC,wBAAwB;MACvD,cAAc,EAAE,IAAI,CAAC,cAAc;MACnC,cAAc,EAAE,IAAI,CAAC,cAAc;MACnC,SAAS,EAAE,SAAS;MACpB,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;MAC3C,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;MAC3C,aAAa;MACb,OAAO,EAAE,IAAI,CAAC;KACf,CAAC;IAEF,MAAM,UAAU,GAAG,cAAc,CAAC,WAAW,EAAE;IAC/C,MAAM,UAAU,GAAG,cAAc,CAAC,WAAW,EAAE;IAE/C,MAAM,QAAQ,GAAG,CAAC,GAAG,UAAU,EAAE,GAAG,UAAU,CAAC;IAE/C,MAAM,cAAc,GAAG,wBAAwB;IAE/C;IACA,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,0BAA0B,CACjD,QAAQ,EACR,CACE,KAAe,EACf,eAAkD,KACvC;MACX;MACA,IAAI,CAAC,eAAe,EAAE;QACpB,OAAO,KAAK;MACb;MAED;MACA;MACA;MACA;MACA;MACA,IACE,eAAe,IAAI,qBAAqB,CAAC,GAAG,KAC3C,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EACjD;QACA,OAAO,KAAK;MACb;MAED,OACE,eAAe,IAAI,qBAAqB,CAAC,GAAG,IAC5C,eAAe,IAAI,qBAAqB,CAAC,GAAG;IAEhD,CAAC,CACF;IAED,MAAM;MAAE;IAAe,CAAE,GAAG,aAAa;IAEzC,MAAM,MAAM,GAAG,qBAAqB,CAClC,OAAO,EACP,QAAQ,EACR,KAAK,EACL,eAAe,CAChB;IAED,OAAO;MACL,MAAM;MACN;KACD;EACH;EAEO,MAAM,SAAS,CACpB,MAAoB,EACpB,OAAyB,EACzB,QAAkB,EAClB,UAAiB,EACjB,SAAoB,EACpB,aAAgC,EAChC,cAAiD,EACjD,QAA8C,EAAA;IAE9C,GAAG,CAAC,IAAI,CAAC,8BAA8B,CAAC;IACxC,IAAI,QAAQ,KAAK,SAAS,EAAE;MAC1B,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC;IAClF;IACD,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE;MACtB,OAAO;QAAE,qBAAqB,EAAE,EAAE;QAAE;MAAc,CAAE;IACrD;IAED;IACA,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,IAAI,CACjE,IAAI,CAAC,oBAAoB,CAC1B;IAED,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE;IAC/B,GAAG,CAAC,IAAI,CACN,gCAAgC,MAAM,CAAC,MAAM,gBAAgB,OAAO,CAAC,MAAM,qBAAqB,CACjG;IAED,MAAM;MAAE;IAAgB,CAAE,GAAG,MAAM,OAAO,CAAa,OAAO,EAAE,MAAM,EAAE;MACtE,WAAW,EAAE,aAAa,CAAC;KAC5B,CAAC;IAEF,MAAM,CAAC,SAAS,CACd,iBAAiB,EACjB,IAAI,CAAC,GAAG,EAAE,GAAG,YAAY,EACzB,gBAAgB,CAAC,YAAY,CAC9B;IAED,MAAM,CAAC,SAAS,CACd,oBAAoB,EACpB,CAAC,CAAC,gBAAgB,CAAC,CAChB,GAAG,CAAC;MAAA,IAAC,GAAG,MAAM,CAAC;MAAA,OAAK,MAAM,CAAC,MAAM;IAAA,EAAC,CAClC,GAAG,EAAE,EACR,gBAAgB,CAAC,KAAK,CACvB;IAED,MAAM,qBAAqB,GAAG,EAAE;IAEhC,KAAK,MAAM,cAAc,IAAI,gBAAgB,EAAE;MAC7C,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,cAAc;MAEtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAE;QAC5B,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAE;QAC9B,MAAM;UACJ,KAAK;UACL,MAAM;UACN,qBAAqB;UACrB,2BAA2B;UAC3B;QAAW,CACZ,GAAG,WAAW;QAEf,IACE,CAAC,KAAK,IACN,CAAC,qBAAqB,IACtB,CAAC,2BAA2B,IAC5B,CAAC,WAAW,EACZ;UACA,GAAG,CAAC,KAAK,CACP;YACE,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC;YAC3B;WACD,EACD,wCAAwC,CACzC;UACD;QACD;QAED,MAAM,mBAAmB,GAAG,IAAI,wBAAwB,CAAC;UACvD,KAAK;UACL,QAAQ,EAAE,KAAK;UACf,MAAM;UACN,OAAO;UACP,qBAAqB;UACrB,2BAA2B;UAC3B,iBAAiB,EAAE,WAAW;UAC9B,kBAAkB,EAAE,QAAQ;UAC5B,UAAU;UACV,SAAS;UACT,cAAc,EAAE,IAAI,CAAC,cAAc;UACnC,cAAc,EAAE,IAAI,CAAC;SACtB,CAAC;QAEF,qBAAqB,CAAC,IAAI,CAAC,mBAAmB,CAAC;MAChD;IACF;IAED,OAAO;MACL,qBAAqB;MACrB;KACD;EACH;AAED","sourceRoot":"","sourcesContent":["import { TradeType } from '@uniswap/sdk-core';\nimport _ from 'lodash';\nimport { TokenValidationResult } from '../../../providers';\nimport { log, metric, MetricLoggerUnit, routeToString } from '../../../util';\nimport { MixedRouteWithValidQuote } from '../entities';\nimport { computeAllMixedRoutes } from '../functions/compute-all-routes';\nimport { getMixedRouteCandidatePools } from '../functions/get-candidate-pools';\nimport { BaseQuoter } from './base-quoter';\nexport class MixedQuoter extends BaseQuoter {\n    constructor(v3SubgraphProvider, v3PoolProvider, v2SubgraphProvider, v2PoolProvider, onChainQuoteProvider, tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider) {\n        super(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider);\n        this.v3SubgraphProvider = v3SubgraphProvider;\n        this.v3PoolProvider = v3PoolProvider;\n        this.v2SubgraphProvider = v2SubgraphProvider;\n        this.v2PoolProvider = v2PoolProvider;\n        this.onChainQuoteProvider = onChainQuoteProvider;\n    }\n    async getRoutes(tokenIn, tokenOut, tradeType, routingConfig) {\n        if (tradeType != TradeType.EXACT_INPUT) {\n            throw new Error('Mixed route quotes are not supported for EXACT_OUTPUT');\n        }\n        const { V2poolAccessor, V3poolAccessor, candidatePools: mixedRouteCandidatePools, } = await getMixedRouteCandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            v3poolProvider: this.v3PoolProvider,\n            v2poolProvider: this.v2PoolProvider,\n            routeType: tradeType,\n            v3subgraphProvider: this.v3SubgraphProvider,\n            v2subgraphProvider: this.v2SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const V3poolsRaw = V3poolAccessor.getAllPools();\n        const V2poolsRaw = V2poolAccessor.getAllPools();\n        const poolsRaw = [...V3poolsRaw, ...V2poolsRaw];\n        const candidatePools = mixedRouteCandidatePools;\n        // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.\n        const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n            // If there is no available validation result we assume the token is fine.\n            if (!tokenValidation) {\n                return false;\n            }\n            // Only filters out *intermediate* pools that involve tokens that we detect\n            // cant be transferred. This prevents us trying to route through tokens that may\n            // not be transferrable, but allows users to still swap those tokens if they\n            // specify.\n            //\n            if (tokenValidation == TokenValidationResult.STF &&\n                (token.equals(tokenIn) || token.equals(tokenOut))) {\n                return false;\n            }\n            return (tokenValidation == TokenValidationResult.FOT ||\n                tokenValidation == TokenValidationResult.STF);\n        });\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllMixedRoutes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        return {\n            routes,\n            candidatePools\n        };\n    }\n    async getQuotes(routes, amounts, percents, quoteToken, tradeType, routingConfig, candidatePools, gasModel) {\n        log.info('Starting to get mixed quotes');\n        if (gasModel === undefined) {\n            throw new Error('GasModel for MixedRouteWithValidQuote is required to getQuotes');\n        }\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = this.onChainQuoteProvider.getQuotesManyExactIn.bind(this.onChainQuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for mixed for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes, {\n            blockNumber: routingConfig.blockNumber,\n        });\n        metric.putMetric('MixedQuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('MixedQuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate, } = amountQuote;\n                if (!quote ||\n                    !sqrtPriceX96AfterList ||\n                    !initializedTicksCrossedList ||\n                    !gasEstimate) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null mixed quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new MixedRouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    sqrtPriceX96AfterList,\n                    initializedTicksCrossedList,\n                    quoterGasEstimate: gasEstimate,\n                    mixedRouteGasModel: gasModel,\n                    quoteToken,\n                    tradeType,\n                    v3PoolProvider: this.v3PoolProvider,\n                    v2PoolProvider: this.v2PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return {\n            routesWithValidQuotes,\n            candidatePools\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWl4ZWQtcXVvdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3JvdXRlcnMvYWxwaGEtcm91dGVyL3F1b3RlcnMvbWl4ZWQtcXVvdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUIsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0QsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXZCLE9BQU8sRUFTTCxxQkFBcUIsRUFDdEIsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQTJCLEdBQUcsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3RHLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RSxPQUFPLEVBQXFDLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFHbEgsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxNQUFNLE9BQU8sV0FBWSxTQUFRLFVBQXNCO0lBT3JELFlBQ0Usa0JBQXVDLEVBQ3ZDLGNBQStCLEVBQy9CLGtCQUF1QyxFQUN2QyxjQUErQixFQUMvQixvQkFBMkMsRUFDM0MsYUFBNkIsRUFDN0IsT0FBZ0IsRUFDaEIsd0JBQTZDLEVBQzdDLHNCQUFnRDtRQUVoRCxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2hGLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztRQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFB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"]},"metadata":{},"sourceType":"module"}