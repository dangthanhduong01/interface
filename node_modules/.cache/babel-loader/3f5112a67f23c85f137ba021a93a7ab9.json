{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { CurrencyAmount, MaxUint256 } from '@uniswap/sdk-core';\nimport { useTokenContract } from 'hooks/useContract';\nimport { useSingleCallResult } from 'lib/hooks/multicall';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { TransactionType } from 'state/transactions/types';\nexport function useTokenAllowance(token, owner, spender) {\n  _s();\n  const contract = useTokenContract(token === null || token === void 0 ? void 0 : token.address, false);\n  const inputs = useMemo(() => [owner, spender], [owner, spender]);\n\n  // If there is no allowance yet, re-check next observed block.\n  // This guarantees that the tokenAllowance is marked isSyncing upon approval and updated upon being synced.\n  const [blocksPerFetch, setBlocksPerFetch] = useState();\n  const {\n    result,\n    syncing: isSyncing\n  } = useSingleCallResult(contract, 'allowance', inputs, {\n    blocksPerFetch\n  });\n  const rawAmount = result === null || result === void 0 ? void 0 : result.toString(); // convert to a string before using in a hook, to avoid spurious rerenders\n  const allowance = useMemo(() => token && rawAmount ? CurrencyAmount.fromRawAmount(token, rawAmount) : undefined, [token, rawAmount]);\n  useEffect(() => setBlocksPerFetch((allowance === null || allowance === void 0 ? void 0 : allowance.equalTo(0)) ? 1 : undefined), [allowance]);\n  return useMemo(() => ({\n    tokenAllowance: allowance,\n    isSyncing\n  }), [allowance, isSyncing]);\n}\n_s(useTokenAllowance, \"mOZOr4MjswvruWJ9TcEWX8jxARQ=\", false, function () {\n  return [useTokenContract, useSingleCallResult];\n});\nexport function useUpdateTokenAllowance(amount, spender) {\n  _s2();\n  const contract = useTokenContract(amount === null || amount === void 0 ? void 0 : amount.currency.address);\n  return useCallback(async () => {\n    try {\n      if (!amount) throw new Error('missing amount');\n      if (!contract) throw new Error('missing contract');\n      if (!spender) throw new Error('missing spender');\n      const allowance = MaxUint256.toString();\n      const response = await contract.approve(spender, allowance);\n      return {\n        response,\n        info: {\n          type: TransactionType.APPROVAL,\n          tokenAddress: contract.address,\n          spender\n        }\n      };\n    } catch (e) {\n      var _amount$currency$symb;\n      const symbol = (_amount$currency$symb = amount === null || amount === void 0 ? void 0 : amount.currency.symbol) !== null && _amount$currency$symb !== void 0 ? _amount$currency$symb : 'Token';\n      throw new Error(`${symbol} token allowance failed: ${e instanceof Error ? e.message : e}`);\n    }\n  }, [amount, contract, spender]);\n}\n_s2(useUpdateTokenAllowance, \"DblhWWnW9TIWqQzz+A+t95M6Aa4=\", false, function () {\n  return [useTokenContract];\n});","map":{"version":3,"names":["CurrencyAmount","MaxUint256","useTokenContract","useSingleCallResult","useCallback","useEffect","useMemo","useState","TransactionType","useTokenAllowance","token","owner","spender","contract","address","inputs","blocksPerFetch","setBlocksPerFetch","result","syncing","isSyncing","rawAmount","toString","allowance","fromRawAmount","undefined","equalTo","tokenAllowance","useUpdateTokenAllowance","amount","currency","Error","response","approve","info","type","APPROVAL","tokenAddress","e","symbol","message"],"sources":["/home/diep/freelance/interface/src/hooks/useTokenAllowance.ts"],"sourcesContent":["import { BigNumberish } from '@ethersproject/bignumber'\nimport { ContractTransaction } from '@ethersproject/contracts'\nimport { CurrencyAmount, MaxUint256, Token } from '@uniswap/sdk-core'\nimport { useTokenContract } from 'hooks/useContract'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { ApproveTransactionInfo, TransactionType } from 'state/transactions/types'\n\nexport function useTokenAllowance(\n  token?: Token,\n  owner?: string,\n  spender?: string\n): {\n  tokenAllowance: CurrencyAmount<Token> | undefined\n  isSyncing: boolean\n} {\n  const contract = useTokenContract(token?.address, false)\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n\n  // If there is no allowance yet, re-check next observed block.\n  // This guarantees that the tokenAllowance is marked isSyncing upon approval and updated upon being synced.\n  const [blocksPerFetch, setBlocksPerFetch] = useState<1>()\n  const { result, syncing: isSyncing } = useSingleCallResult(contract, 'allowance', inputs, { blocksPerFetch }) as {\n    result: Awaited<ReturnType<NonNullable<typeof contract>['allowance']>> | undefined\n    syncing: boolean\n  }\n\n  const rawAmount = result?.toString() // convert to a string before using in a hook, to avoid spurious rerenders\n  const allowance = useMemo(\n    () => (token && rawAmount ? CurrencyAmount.fromRawAmount(token, rawAmount) : undefined),\n    [token, rawAmount]\n  )\n  useEffect(() => setBlocksPerFetch(allowance?.equalTo(0) ? 1 : undefined), [allowance])\n\n  return useMemo(() => ({ tokenAllowance: allowance, isSyncing }), [allowance, isSyncing])\n}\n\nexport function useUpdateTokenAllowance(\n  amount: CurrencyAmount<Token> | undefined,\n  spender: string\n): () => Promise<{ response: ContractTransaction; info: ApproveTransactionInfo }> {\n  const contract = useTokenContract(amount?.currency.address)\n\n  return useCallback(async () => {\n    try {\n      if (!amount) throw new Error('missing amount')\n      if (!contract) throw new Error('missing contract')\n      if (!spender) throw new Error('missing spender')\n\n      const allowance: BigNumberish = MaxUint256.toString()\n      const response = await contract.approve(spender, allowance)\n      return {\n        response,\n        info: {\n          type: TransactionType.APPROVAL,\n          tokenAddress: contract.address,\n          spender,\n        },\n      }\n    } catch (e: unknown) {\n      const symbol = amount?.currency.symbol ?? 'Token'\n      throw new Error(`${symbol} token allowance failed: ${e instanceof Error ? e.message : e}`)\n    }\n  }, [amount, contract, spender])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}