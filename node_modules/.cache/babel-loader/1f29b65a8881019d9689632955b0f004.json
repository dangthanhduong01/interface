{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, loadModule, fill, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for node-postgres package */\nclass Postgres {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Postgres';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Postgres.id;\n  }\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Postgres.prototype.__init.call(this);\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    const pkg = loadModule('pg');\n    if (!pkg) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n    if (this._usePgNative && !_optionalChain([pkg, 'access', _2 => _2.native, 'optionalAccess', _3 => _3.Client])) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n    const {\n      Client\n    } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig) {\n      return function (config, values, callback) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = _optionalChain([scope, 'optionalAccess', _4 => _4.getSpan, 'call', _5 => _5()]);\n        const span = _optionalChain([parentSpan, 'optionalAccess', _6 => _6.startChild, 'call', _7 => _7({\n          description: typeof config === 'string' ? config : config.text,\n          op: 'db'\n        })]);\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err, result) {\n            _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n            callback(err, result);\n          });\n        }\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err, result) {\n            _optionalChain([span, 'optionalAccess', _10 => _10.finish, 'call', _11 => _11()]);\n            values(err, result);\n          });\n        }\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n        if (isThenable(rv)) {\n          return rv.then(res => {\n            _optionalChain([span, 'optionalAccess', _12 => _12.finish, 'call', _13 => _13()]);\n            return res;\n          });\n        }\n        _optionalChain([span, 'optionalAccess', _14 => _14.finish, 'call', _15 => _15()]);\n        return rv;\n      };\n    });\n  }\n}\nPostgres.__initStatic();\nexport { Postgres };","map":{"version":3,"sources":["../../../../src/node/integrations/postgres.ts"],"names":[],"mappings":";;;;AAgBA;AACA,MAAA,QAAA,CAAA;EACA;AACA;AACA;EACA,OAAA,YAAA,GAAA;IAAA,IAAA,CAAA,EAAA,GAAA,UAAA;EAAA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,IAAA,GAAA,QAAA,CAAA,EAAA;EAAA;EAIA,WAAA,GAAA;IAAA,IAAA,OAAA,uEAAA,CAAA,CAAA;IAAA,QAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,IAAA,CAAA,YAAA,GAAA,CAAA,CAAA,OAAA,CAAA,WAAA;EACA;;EAEA;AACA;AACA;EACA,SAAA,CAAA,CAAA,EAAA,aAAA,EAAA;IACA,IAAA,gCAAA,CAAA,aAAA,CAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,wEAAA,CAAA;MACA;IACA;IAEA,MAAA,GAAA,GAAA,UAAA,CAAA,IAAA,CAAA;IAEA,IAAA,CAAA,GAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,0DAAA,CAAA;MACA;IACA;IAEA,IAAA,IAAA,CAAA,YAAA,IAAA,CAAA,cAAA,CAAA,CAAA,GAAA,EAAA,QAAA,EAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,iEAAA,CAAA;MACA;IACA;IAEA,MAAA;MAAA;IAAA,CAAA,GAAA,IAAA,CAAA,YAAA,GAAA,GAAA,CAAA,MAAA,GAAA,GAAA;;IAEA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,OAAA,EAAA,UAAA,IAAA,EAAA;MACA,OAAA,UAAA,MAAA,EAAA,MAAA,EAAA,QAAA,EAAA;QACA,MAAA,KAAA,GAAA,aAAA,EAAA,CAAA,QAAA,EAAA;QACA,MAAA,UAAA,GAAA,cAAA,CAAA,CAAA,KAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;QACA,MAAA,IAAA,GAAA,cAAA,CAAA,CAAA,UAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,UAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,CAAA;UACA,WAAA,EAAA,OAAA,MAAA,KAAA,QAAA,GAAA,MAAA,GAAA,MAAA,CAAA,IAAA;UACA,EAAA,EAAA;QACA,CAAA,CAAA,CAAA,CAAA;QAEA,IAAA,OAAA,QAAA,KAAA,UAAA,EAAA;UACA,OAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,EAAA,UAAA,GAAA,EAAA,MAAA,EAAA;YACA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,CAAA;YACA,QAAA,CAAA,GAAA,EAAA,MAAA,CAAA;UACA,CAAA,CAAA;QACA;QAEA,IAAA,OAAA,MAAA,KAAA,UAAA,EAAA;UACA,OAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,UAAA,GAAA,EAAA,MAAA,EAAA;YACA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,GAAA,IAAA,GAAA,EAAA,CAAA,CAAA;YACA,MAAA,CAAA,GAAA,EAAA,MAAA,CAAA;UACA,CAAA,CAAA;QACA;QAEA,MAAA,EAAA,GAAA,OAAA,MAAA,KAAA,WAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,MAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA;QAEA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;UACA,OAAA,EAAA,CAAA,IAAA,CAAA,GAAA,IAAA;YACA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,GAAA,IAAA,GAAA,EAAA,CAAA,CAAA;YACA,OAAA,GAAA;UACA,CAAA,CAAA;QACA;QAEA,cAAA,CAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,GAAA,IAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,GAAA,IAAA,GAAA,EAAA,CAAA,CAAA;QACA,OAAA,EAAA;MACA,CAAA;IACA,CAAA,CAAA;EACA;AACA;AAAA,QAAA,CAAA,YAAA,EAAA","sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface PgClient {\n  prototype: {\n    query: () => void | Promise<unknown>;\n  };\n}\n\ninterface PgOptions {\n  usePgNative?: boolean;\n}\n\n/** Tracing integration for node-postgres package */\nexport class Postgres implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Postgres';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Postgres.id;\n\n  private _usePgNative: boolean;\n\n  public constructor(options: PgOptions = {}) {\n    this._usePgNative = !!options.usePgNative;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Postgres Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    const pkg = loadModule<{ Client: PgClient; native: { Client: PgClient } }>('pg');\n\n    if (!pkg) {\n      __DEBUG_BUILD__ && logger.error('Postgres Integration was unable to require `pg` package.');\n      return;\n    }\n\n    if (this._usePgNative && !pkg.native?.Client) {\n      __DEBUG_BUILD__ && logger.error(\"Postgres Integration was unable to access 'pg-native' bindings.\");\n      return;\n    }\n\n    const { Client } = this._usePgNative ? pkg.native : pkg;\n\n    /**\n     * function (query, callback) => void\n     * function (query, params, callback) => void\n     * function (query) => Promise\n     * function (query, params) => Promise\n     * function (pg.Cursor) => pg.Cursor\n     */\n    fill(Client.prototype, 'query', function (orig: () => void | Promise<unknown>) {\n      return function (this: unknown, config: unknown, values: unknown, callback: unknown) {\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n        const span = parentSpan?.startChild({\n          description: typeof config === 'string' ? config : (config as { text: string }).text,\n          op: 'db',\n        });\n\n        if (typeof callback === 'function') {\n          return orig.call(this, config, values, function (err: Error, result: unknown) {\n            span?.finish();\n            callback(err, result);\n          });\n        }\n\n        if (typeof values === 'function') {\n          return orig.call(this, config, function (err: Error, result: unknown) {\n            span?.finish();\n            values(err, result);\n          });\n        }\n\n        const rv = typeof values !== 'undefined' ? orig.call(this, config, values) : orig.call(this, config);\n\n        if (isThenable(rv)) {\n          return rv.then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        span?.finish();\n        return rv;\n      };\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}