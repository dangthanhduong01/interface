{"ast":null,"code":"var _s = $RefreshSig$();\nimport { i18n } from \"@lingui/core\";\nimport { formatNumberOrString, NumberType } from '@uniswap/conedison/format';\nimport { SupportedChainId } from '@uniswap/sdk-core';\nimport { NONFUNGIBLE_POSITION_MANAGER_ADDRESSES, UNI_ADDRESS } from 'constants/addresses';\nimport { nativeOnChain } from 'constants/tokens';\nimport { ActivityType } from 'graphql/data/__generated__/types-and-hooks';\nimport { fromGraphQLChain } from 'graphql/data/util';\nimport { useEffect, useState } from 'react';\nimport { isAddress } from 'utils';\n// TODO: Move common contract metadata to a backend service\nconst UNI_IMG = 'https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/ethereum/assets/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984/logo.png';\nconst ENS_IMG = 'https://464911102-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/collections%2F2TjMAeHSzwlQgcOdL48E%2Ficon%2FKWP0gk2C6bdRPliWIA6o%2Fens%20transparent%20background.png?alt=media&token=bd28b063-5a75-4971-890c-97becea09076';\nconst COMMON_CONTRACTS = {\n  [UNI_ADDRESS[SupportedChainId.MAINNET].toLowerCase()]: {\n    title: /*i18n*/i18n._(\"UNI Governance\"),\n    descriptor: /*i18n*/i18n._(\"Contract Interaction\"),\n    logos: [UNI_IMG]\n  },\n  // TODO(cartcrom): Add permit2-specific logo\n  '0x000000000022d473030f116ddee9f6b43ac78ba3': {\n    title: /*i18n*/i18n._(\"Permit2\"),\n    descriptor: /*i18n*/i18n._(\"Uniswap Protocol\"),\n    logos: [UNI_IMG]\n  },\n  '0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41': {\n    title: /*i18n*/i18n._(\"Ethereum Name Service\"),\n    descriptor: /*i18n*/i18n._(\"Public Resolver\"),\n    logos: [ENS_IMG]\n  },\n  '0x58774bb8acd458a640af0b88238369a167546ef2': {\n    title: /*i18n*/i18n._(\"Ethereum Name Service\"),\n    descriptor: /*i18n*/i18n._(\"DNS Registrar\"),\n    logos: [ENS_IMG]\n  },\n  '0x084b1c3c81545d370f3634392de611caabff8148': {\n    title: /*i18n*/i18n._(\"Ethereum Name Service\"),\n    descriptor: /*i18n*/i18n._(\"Reverse Registrar\"),\n    logos: [ENS_IMG]\n  },\n  '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5': {\n    title: /*i18n*/i18n._(\"Ethereum Name Service\"),\n    descriptor: /*i18n*/i18n._(\"ETH Registrar Controller\"),\n    logos: [ENS_IMG]\n  }\n};\nfunction isSameAddress(a, b) {\n  return a === b || (a === null || a === void 0 ? void 0 : a.toLowerCase()) === (b === null || b === void 0 ? void 0 : b.toLowerCase()); // Lazy-lowercases the addresses\n}\n\nfunction callsPositionManagerContract(assetActivity) {\n  return isSameAddress(assetActivity.transaction.to, NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[fromGraphQLChain(assetActivity.chain)]);\n}\n\n// Gets counts for number of NFTs in each collection present\nfunction getCollectionCounts(nftTransfers) {\n  return nftTransfers.reduce((acc, NFTChange) => {\n    var _NFTChange$asset$coll, _NFTChange$asset$coll2;\n    const key = (_NFTChange$asset$coll = (_NFTChange$asset$coll2 = NFTChange.asset.collection) === null || _NFTChange$asset$coll2 === void 0 ? void 0 : _NFTChange$asset$coll2.name) !== null && _NFTChange$asset$coll !== void 0 ? _NFTChange$asset$coll : NFTChange.asset.name;\n    if (key) {\n      var _acc$key;\n      acc[key] = ((_acc$key = acc === null || acc === void 0 ? void 0 : acc[key]) !== null && _acc$key !== void 0 ? _acc$key : 0) + 1;\n    }\n    return acc;\n  }, {});\n}\nfunction getSwapTitle(sent, received) {\n  if (sent.tokenStandard === 'NATIVE' && isSameAddress(nativeOnChain(fromGraphQLChain(sent.asset.chain)).wrapped.address, received.asset.address)) return (/*i18n*/i18n._(\"Wrapped\")\n  );else if (received.tokenStandard === 'NATIVE' && isSameAddress(nativeOnChain(fromGraphQLChain(received.asset.chain)).wrapped.address, received.asset.address)) {\n    return (/*i18n*/i18n._(\"Unwrapped\")\n    );\n  } else {\n    return (/*i18n*/i18n._(\"Swapped\")\n    );\n  }\n}\nfunction parseSwap(changes) {\n  if (changes.NftTransfer.length > 0 && changes.TokenTransfer.length === 1) {\n    const collectionCounts = getCollectionCounts(changes.NftTransfer);\n    const title = changes.NftTransfer[0].direction === 'IN' ? /*i18n*/i18n._(\"Bought\") : /*i18n*/i18n._(\"Sold\");\n    const descriptor = Object.entries(collectionCounts).map(_ref => {\n      let [collectionName, count] = _ref;\n      return `${count} ${collectionName}`;\n    }).join();\n    return {\n      title,\n      descriptor\n    };\n  } else if (changes.TokenTransfer.length === 2) {\n    const sent = changes.TokenTransfer.find(t => (t === null || t === void 0 ? void 0 : t.__typename) === 'TokenTransfer' && t.direction === 'OUT');\n    const received = changes.TokenTransfer.find(t => (t === null || t === void 0 ? void 0 : t.__typename) === 'TokenTransfer' && t.direction === 'IN');\n    if (sent && received) {\n      const inputAmount = formatNumberOrString(sent.quantity, NumberType.TokenNonTx);\n      const outputAmount = formatNumberOrString(received.quantity, NumberType.TokenNonTx);\n      return {\n        title: getSwapTitle(sent, received),\n        descriptor: `${inputAmount} ${sent.asset.symbol} for ${outputAmount} ${received.asset.symbol}`\n      };\n    }\n  }\n  return {\n    title: /*i18n*/i18n._(\"Unknown Swap\")\n  };\n}\nfunction parseApprove(changes) {\n  if (changes.TokenApproval.length === 1) {\n    const title = parseInt(changes.TokenApproval[0].quantity) === 0 ? /*i18n*/i18n._(\"Revoked Approval\") : /*i18n*/i18n._(\"Approved\");\n    const descriptor = `${changes.TokenApproval[0].asset.symbol}`;\n    return {\n      title,\n      descriptor\n    };\n  }\n  return {\n    title: /*i18n*/i18n._(\"Unknown Approval\")\n  };\n}\nfunction parseLPTransfers(changes) {\n  var _poolTokenA$asset$pro, _poolTokenA$asset$pro2, _poolTokenB$asset$pro, _poolTokenB$asset$pro2;\n  const poolTokenA = changes.TokenTransfer[0];\n  const poolTokenB = changes.TokenTransfer[1];\n  const tokenAQuanitity = formatNumberOrString(poolTokenA.quantity, NumberType.TokenNonTx);\n  const tokenBQuantity = formatNumberOrString(poolTokenB.quantity, NumberType.TokenNonTx);\n  return {\n    descriptor: `${tokenAQuanitity} ${poolTokenA.asset.symbol} and ${tokenBQuantity} ${poolTokenB.asset.symbol}`,\n    logos: [(_poolTokenA$asset$pro = poolTokenA.asset.project) === null || _poolTokenA$asset$pro === void 0 ? void 0 : (_poolTokenA$asset$pro2 = _poolTokenA$asset$pro.logo) === null || _poolTokenA$asset$pro2 === void 0 ? void 0 : _poolTokenA$asset$pro2.url, (_poolTokenB$asset$pro = poolTokenB.asset.project) === null || _poolTokenB$asset$pro === void 0 ? void 0 : (_poolTokenB$asset$pro2 = _poolTokenB$asset$pro.logo) === null || _poolTokenB$asset$pro2 === void 0 ? void 0 : _poolTokenB$asset$pro2.url]\n  };\n}\nfunction parseSendReceive(changes, assetActivity) {\n  // TODO(cartcrom): remove edge cases after backend implements\n  // Edge case: Receiving two token transfers in interaction w/ V3 manager === removing liquidity. These edge cases should potentially be moved to backend\n  if (changes.TokenTransfer.length === 2 && callsPositionManagerContract(assetActivity)) {\n    return {\n      title: /*i18n*/i18n._(\"Removed Liquidity\"),\n      ...parseLPTransfers(changes)\n    };\n  }\n  let transfer;\n  let assetName;\n  let amount;\n  if (changes.NftTransfer.length === 1) {\n    var _transfer$asset$colle;\n    transfer = changes.NftTransfer[0];\n    assetName = (_transfer$asset$colle = transfer.asset.collection) === null || _transfer$asset$colle === void 0 ? void 0 : _transfer$asset$colle.name;\n    amount = '1';\n  } else if (changes.TokenTransfer.length === 1) {\n    transfer = changes.TokenTransfer[0];\n    assetName = transfer.asset.symbol;\n    amount = formatNumberOrString(transfer.quantity, NumberType.TokenNonTx);\n  }\n  if (transfer && assetName && amount) {\n    return transfer.direction === 'IN' ? {\n      title: /*i18n*/i18n._(\"Received\"),\n      descriptor: `${amount} ${assetName} ${/*i18n*/i18n._(\"from\")} `,\n      otherAccount: isAddress(transfer.sender) || undefined\n    } : {\n      title: /*i18n*/i18n._(\"Sent\"),\n      descriptor: `${amount} ${assetName} ${/*i18n*/i18n._(\"to\")} `,\n      otherAccount: isAddress(transfer.recipient) || undefined\n    };\n  }\n  return {\n    title: /*i18n*/i18n._(\"Unknown Send\")\n  };\n}\nfunction parseMint(changes, assetActivity) {\n  const collectionMap = getCollectionCounts(changes.NftTransfer);\n  if (Object.keys(collectionMap).length === 1) {\n    const collectionName = Object.keys(collectionMap)[0];\n\n    // Edge case: Minting a v3 positon represents adding liquidity\n    if (changes.TokenTransfer.length === 2 && callsPositionManagerContract(assetActivity)) {\n      return {\n        title: /*i18n*/i18n._(\"Added Liquidity\"),\n        ...parseLPTransfers(changes)\n      };\n    }\n    return {\n      title: /*i18n*/i18n._(\"Minted\"),\n      descriptor: `${collectionMap[collectionName]} ${collectionName}`\n    };\n  }\n  return {\n    title: /*i18n*/i18n._(\"Unknown Mint\")\n  };\n}\nfunction parseUnknown(_changes, assetActivity) {\n  return {\n    title: /*i18n*/i18n._(\"Contract Interaction\"),\n    ...COMMON_CONTRACTS[assetActivity.transaction.to.toLowerCase()]\n  };\n}\nconst ActivityParserByType = {\n  [ActivityType.Swap]: parseSwap,\n  [ActivityType.Approve]: parseApprove,\n  [ActivityType.Send]: parseSendReceive,\n  [ActivityType.Receive]: parseSendReceive,\n  [ActivityType.Mint]: parseMint,\n  [ActivityType.Unknown]: parseUnknown\n};\nfunction getLogoSrcs(changes) {\n  // Uses set to avoid duplicate logos (e.g. nft's w/ same image url)\n  const logoSet = new Set();\n  // Uses only NFT logos if they are present (will not combine nft image w/ token image)\n  if (changes.NftTransfer.length > 0) {\n    changes.NftTransfer.forEach(nftChange => {\n      var _nftChange$asset$imag;\n      return logoSet.add((_nftChange$asset$imag = nftChange.asset.image) === null || _nftChange$asset$imag === void 0 ? void 0 : _nftChange$asset$imag.url);\n    });\n  } else {\n    changes.TokenTransfer.forEach(tokenChange => {\n      var _tokenChange$asset$pr, _tokenChange$asset$pr2;\n      return logoSet.add((_tokenChange$asset$pr = tokenChange.asset.project) === null || _tokenChange$asset$pr === void 0 ? void 0 : (_tokenChange$asset$pr2 = _tokenChange$asset$pr.logo) === null || _tokenChange$asset$pr2 === void 0 ? void 0 : _tokenChange$asset$pr2.url);\n    });\n    changes.TokenApproval.forEach(tokenChange => {\n      var _tokenChange$asset$pr3, _tokenChange$asset$pr4;\n      return logoSet.add((_tokenChange$asset$pr3 = tokenChange.asset.project) === null || _tokenChange$asset$pr3 === void 0 ? void 0 : (_tokenChange$asset$pr4 = _tokenChange$asset$pr3.logo) === null || _tokenChange$asset$pr4 === void 0 ? void 0 : _tokenChange$asset$pr4.url);\n    });\n  }\n  return Array.from(logoSet).filter(Boolean);\n}\nfunction parseRemoteActivity(assetActivity) {\n  try {\n    var _ActivityParserByType;\n    const changes = assetActivity.assetChanges.reduce((acc, assetChange) => {\n      if (assetChange.__typename === 'NftApproval') acc.NftApproval.push(assetChange);else if (assetChange.__typename === 'NftApproveForAll') acc.NftApproveForAll.push(assetChange);else if (assetChange.__typename === 'NftTransfer') acc.NftTransfer.push(assetChange);else if (assetChange.__typename === 'TokenTransfer') acc.TokenTransfer.push(assetChange);else if (assetChange.__typename === 'TokenApproval') acc.TokenApproval.push(assetChange);\n      return acc;\n    }, {\n      NftTransfer: [],\n      TokenTransfer: [],\n      TokenApproval: [],\n      NftApproval: [],\n      NftApproveForAll: []\n    });\n    const defaultFields = {\n      hash: assetActivity.transaction.hash,\n      chainId: fromGraphQLChain(assetActivity.chain),\n      status: assetActivity.transaction.status,\n      timestamp: assetActivity.timestamp,\n      logos: getLogoSrcs(changes),\n      title: assetActivity.type,\n      descriptor: assetActivity.transaction.to,\n      receipt: assetActivity.transaction\n    };\n    const parsedFields = (_ActivityParserByType = ActivityParserByType[assetActivity.type]) === null || _ActivityParserByType === void 0 ? void 0 : _ActivityParserByType.call(ActivityParserByType, changes, assetActivity);\n    return {\n      ...defaultFields,\n      ...parsedFields\n    };\n  } catch (e) {\n    console.error('Failed to parse activity', e, assetActivity);\n    return undefined;\n  }\n}\nexport function parseRemoteActivities(assetActivities) {\n  return assetActivities === null || assetActivities === void 0 ? void 0 : assetActivities.reduce((acc, assetActivity) => {\n    const activity = parseRemoteActivity(assetActivity);\n    if (activity) acc[activity.hash] = activity;\n    return acc;\n  }, {});\n}\nconst getTimeSince = timestamp => {\n  const seconds = Math.floor(Date.now() - timestamp * 1000);\n  let interval;\n  // TODO(cartcrom): use locale to determine date shorthands to use for non-english\n  if ((interval = seconds / 31557600000) > 1) return Math.floor(interval) + 'y';\n  if ((interval = seconds / 2592000000) > 1) return Math.floor(interval) + 'mo';\n  if ((interval = seconds / 86400000) > 1) return Math.floor(interval) + 'd';\n  if ((interval = seconds / 3600000) > 1) return Math.floor(interval) + 'h';\n  if ((interval = seconds / 60000) > 1) return Math.floor(interval) + 'm';else return Math.floor(seconds / 1000) + 's';\n};\n\n/**\n * Keeps track of the time since a given timestamp, keeping it up to date every second when necessary\n * @param timestamp\n * @returns\n */\nexport function useTimeSince(timestamp) {\n  _s();\n  const [timeSince, setTimeSince] = useState(getTimeSince(timestamp));\n  useEffect(() => {\n    const refreshTime = () => {\n      if (Math.floor(Date.now() - timestamp * 1000) / 61000 <= 1) {\n        setTimeSince(getTimeSince(timestamp));\n        setTimeout(() => {\n          refreshTime();\n        }, 1000);\n      }\n    };\n    refreshTime();\n  }, [timestamp]);\n  return timeSince;\n}\n_s(useTimeSince, \"uYKrRXCjidL/A7JN1GJN09Tj27A=\");","map":{"version":3,"names":["formatNumberOrString","NumberType","SupportedChainId","NONFUNGIBLE_POSITION_MANAGER_ADDRESSES","UNI_ADDRESS","nativeOnChain","ActivityType","fromGraphQLChain","useEffect","useState","isAddress","UNI_IMG","ENS_IMG","COMMON_CONTRACTS","MAINNET","toLowerCase","title","descriptor","logos","isSameAddress","a","b","callsPositionManagerContract","assetActivity","transaction","to","chain","getCollectionCounts","nftTransfers","reduce","acc","NFTChange","key","asset","collection","name","getSwapTitle","sent","received","tokenStandard","wrapped","address","parseSwap","changes","NftTransfer","length","TokenTransfer","collectionCounts","direction","Object","entries","map","collectionName","count","join","find","t","__typename","inputAmount","quantity","TokenNonTx","outputAmount","symbol","parseApprove","TokenApproval","parseInt","parseLPTransfers","poolTokenA","poolTokenB","tokenAQuanitity","tokenBQuantity","project","logo","url","parseSendReceive","transfer","assetName","amount","otherAccount","sender","undefined","recipient","parseMint","collectionMap","keys","parseUnknown","_changes","ActivityParserByType","Swap","Approve","Send","Receive","Mint","Unknown","getLogoSrcs","logoSet","Set","forEach","nftChange","add","image","tokenChange","Array","from","filter","Boolean","parseRemoteActivity","assetChanges","assetChange","NftApproval","push","NftApproveForAll","defaultFields","hash","chainId","status","timestamp","type","receipt","parsedFields","e","console","error","parseRemoteActivities","assetActivities","activity","getTimeSince","seconds","Math","floor","Date","now","interval","useTimeSince","timeSince","setTimeSince","refreshTime","setTimeout"],"sources":["/home/diep/freelance/interface/src/components/AccountDrawer/MiniPortfolio/Activity/parseRemote.tsx"],"sourcesContent":["import { t } from '@lingui/macro'\nimport { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { SupportedChainId } from '@uniswap/sdk-core'\nimport { NONFUNGIBLE_POSITION_MANAGER_ADDRESSES, UNI_ADDRESS } from 'constants/addresses'\nimport { nativeOnChain } from 'constants/tokens'\nimport {\n  ActivityType,\n  AssetActivityPartsFragment,\n  NftApprovalPartsFragment,\n  NftApproveForAllPartsFragment,\n  NftTransferPartsFragment,\n  TokenApprovalPartsFragment,\n  TokenTransferPartsFragment,\n} from 'graphql/data/__generated__/types-and-hooks'\nimport { fromGraphQLChain } from 'graphql/data/util'\nimport ms from 'ms.macro'\nimport { useEffect, useState } from 'react'\nimport { isAddress } from 'utils'\n\nimport { Activity } from './types'\n\ntype TransactionChanges = {\n  NftTransfer: NftTransferPartsFragment[]\n  TokenTransfer: TokenTransferPartsFragment[]\n  TokenApproval: TokenApprovalPartsFragment[]\n  NftApproval: NftApprovalPartsFragment[]\n  NftApproveForAll: NftApproveForAllPartsFragment[]\n}\n\n// TODO: Move common contract metadata to a backend service\nconst UNI_IMG =\n  'https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/ethereum/assets/0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984/logo.png'\n\nconst ENS_IMG =\n  'https://464911102-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/collections%2F2TjMAeHSzwlQgcOdL48E%2Ficon%2FKWP0gk2C6bdRPliWIA6o%2Fens%20transparent%20background.png?alt=media&token=bd28b063-5a75-4971-890c-97becea09076'\n\nconst COMMON_CONTRACTS: { [key: string]: Partial<Activity> | undefined } = {\n  [UNI_ADDRESS[SupportedChainId.MAINNET].toLowerCase()]: {\n    title: t`UNI Governance`,\n    descriptor: t`Contract Interaction`,\n    logos: [UNI_IMG],\n  },\n  // TODO(cartcrom): Add permit2-specific logo\n  '0x000000000022d473030f116ddee9f6b43ac78ba3': {\n    title: t`Permit2`,\n    descriptor: t`Uniswap Protocol`,\n    logos: [UNI_IMG],\n  },\n  '0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`Public Resolver`,\n    logos: [ENS_IMG],\n  },\n  '0x58774bb8acd458a640af0b88238369a167546ef2': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`DNS Registrar`,\n    logos: [ENS_IMG],\n  },\n  '0x084b1c3c81545d370f3634392de611caabff8148': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`Reverse Registrar`,\n    logos: [ENS_IMG],\n  },\n  '0x283af0b28c62c092c9727f1ee09c02ca627eb7f5': {\n    title: t`Ethereum Name Service`,\n    descriptor: t`ETH Registrar Controller`,\n    logos: [ENS_IMG],\n  },\n}\n\nfunction isSameAddress(a?: string, b?: string) {\n  return a === b || a?.toLowerCase() === b?.toLowerCase() // Lazy-lowercases the addresses\n}\n\nfunction callsPositionManagerContract(assetActivity: AssetActivityPartsFragment) {\n  return isSameAddress(\n    assetActivity.transaction.to,\n    NONFUNGIBLE_POSITION_MANAGER_ADDRESSES[fromGraphQLChain(assetActivity.chain)]\n  )\n}\n\n// Gets counts for number of NFTs in each collection present\nfunction getCollectionCounts(nftTransfers: NftTransferPartsFragment[]): { [key: string]: number | undefined } {\n  return nftTransfers.reduce((acc, NFTChange) => {\n    const key = NFTChange.asset.collection?.name ?? NFTChange.asset.name\n    if (key) {\n      acc[key] = (acc?.[key] ?? 0) + 1\n    }\n    return acc\n  }, {} as { [key: string]: number | undefined })\n}\n\nfunction getSwapTitle(sent: TokenTransferPartsFragment, received: TokenTransferPartsFragment) {\n  if (\n    sent.tokenStandard === 'NATIVE' &&\n    isSameAddress(nativeOnChain(fromGraphQLChain(sent.asset.chain)).wrapped.address, received.asset.address)\n  )\n    return t`Wrapped`\n  else if (\n    received.tokenStandard === 'NATIVE' &&\n    isSameAddress(nativeOnChain(fromGraphQLChain(received.asset.chain)).wrapped.address, received.asset.address)\n  ) {\n    return t`Unwrapped`\n  } else {\n    return t`Swapped`\n  }\n}\n\nfunction parseSwap(changes: TransactionChanges) {\n  if (changes.NftTransfer.length > 0 && changes.TokenTransfer.length === 1) {\n    const collectionCounts = getCollectionCounts(changes.NftTransfer)\n\n    const title = changes.NftTransfer[0].direction === 'IN' ? t`Bought` : t`Sold`\n    const descriptor = Object.entries(collectionCounts)\n      .map(([collectionName, count]) => `${count} ${collectionName}`)\n      .join()\n\n    return { title, descriptor }\n  } else if (changes.TokenTransfer.length === 2) {\n    const sent = changes.TokenTransfer.find((t) => t?.__typename === 'TokenTransfer' && t.direction === 'OUT')\n    const received = changes.TokenTransfer.find((t) => t?.__typename === 'TokenTransfer' && t.direction === 'IN')\n    if (sent && received) {\n      const inputAmount = formatNumberOrString(sent.quantity, NumberType.TokenNonTx)\n      const outputAmount = formatNumberOrString(received.quantity, NumberType.TokenNonTx)\n      return {\n        title: getSwapTitle(sent, received),\n        descriptor: `${inputAmount} ${sent.asset.symbol} for ${outputAmount} ${received.asset.symbol}`,\n      }\n    }\n  }\n  return { title: t`Unknown Swap` }\n}\n\nfunction parseApprove(changes: TransactionChanges) {\n  if (changes.TokenApproval.length === 1) {\n    const title = parseInt(changes.TokenApproval[0].quantity) === 0 ? t`Revoked Approval` : t`Approved`\n    const descriptor = `${changes.TokenApproval[0].asset.symbol}`\n    return { title, descriptor }\n  }\n  return { title: t`Unknown Approval` }\n}\n\nfunction parseLPTransfers(changes: TransactionChanges) {\n  const poolTokenA = changes.TokenTransfer[0]\n  const poolTokenB = changes.TokenTransfer[1]\n\n  const tokenAQuanitity = formatNumberOrString(poolTokenA.quantity, NumberType.TokenNonTx)\n  const tokenBQuantity = formatNumberOrString(poolTokenB.quantity, NumberType.TokenNonTx)\n\n  return {\n    descriptor: `${tokenAQuanitity} ${poolTokenA.asset.symbol} and ${tokenBQuantity} ${poolTokenB.asset.symbol}`,\n    logos: [poolTokenA.asset.project?.logo?.url, poolTokenB.asset.project?.logo?.url],\n  }\n}\n\nfunction parseSendReceive(changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) {\n  // TODO(cartcrom): remove edge cases after backend implements\n  // Edge case: Receiving two token transfers in interaction w/ V3 manager === removing liquidity. These edge cases should potentially be moved to backend\n  if (changes.TokenTransfer.length === 2 && callsPositionManagerContract(assetActivity)) {\n    return { title: t`Removed Liquidity`, ...parseLPTransfers(changes) }\n  }\n\n  let transfer: NftTransferPartsFragment | TokenTransferPartsFragment | undefined\n  let assetName: string | undefined\n  let amount: string | undefined\n\n  if (changes.NftTransfer.length === 1) {\n    transfer = changes.NftTransfer[0]\n    assetName = transfer.asset.collection?.name\n    amount = '1'\n  } else if (changes.TokenTransfer.length === 1) {\n    transfer = changes.TokenTransfer[0]\n    assetName = transfer.asset.symbol\n    amount = formatNumberOrString(transfer.quantity, NumberType.TokenNonTx)\n  }\n\n  if (transfer && assetName && amount) {\n    return transfer.direction === 'IN'\n      ? {\n          title: t`Received`,\n          descriptor: `${amount} ${assetName} ${t`from`} `,\n          otherAccount: isAddress(transfer.sender) || undefined,\n        }\n      : {\n          title: t`Sent`,\n          descriptor: `${amount} ${assetName} ${t`to`} `,\n          otherAccount: isAddress(transfer.recipient) || undefined,\n        }\n  }\n  return { title: t`Unknown Send` }\n}\n\nfunction parseMint(changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) {\n  const collectionMap = getCollectionCounts(changes.NftTransfer)\n  if (Object.keys(collectionMap).length === 1) {\n    const collectionName = Object.keys(collectionMap)[0]\n\n    // Edge case: Minting a v3 positon represents adding liquidity\n    if (changes.TokenTransfer.length === 2 && callsPositionManagerContract(assetActivity)) {\n      return { title: t`Added Liquidity`, ...parseLPTransfers(changes) }\n    }\n    return { title: t`Minted`, descriptor: `${collectionMap[collectionName]} ${collectionName}` }\n  }\n  return { title: t`Unknown Mint` }\n}\n\nfunction parseUnknown(_changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) {\n  return { title: t`Contract Interaction`, ...COMMON_CONTRACTS[assetActivity.transaction.to.toLowerCase()] }\n}\n\ntype ActivityTypeParser = (changes: TransactionChanges, assetActivity: AssetActivityPartsFragment) => Partial<Activity>\nconst ActivityParserByType: { [key: string]: ActivityTypeParser | undefined } = {\n  [ActivityType.Swap]: parseSwap,\n  [ActivityType.Approve]: parseApprove,\n  [ActivityType.Send]: parseSendReceive,\n  [ActivityType.Receive]: parseSendReceive,\n  [ActivityType.Mint]: parseMint,\n  [ActivityType.Unknown]: parseUnknown,\n}\n\nfunction getLogoSrcs(changes: TransactionChanges): string[] {\n  // Uses set to avoid duplicate logos (e.g. nft's w/ same image url)\n  const logoSet = new Set<string | undefined>()\n  // Uses only NFT logos if they are present (will not combine nft image w/ token image)\n  if (changes.NftTransfer.length > 0) {\n    changes.NftTransfer.forEach((nftChange) => logoSet.add(nftChange.asset.image?.url))\n  } else {\n    changes.TokenTransfer.forEach((tokenChange) => logoSet.add(tokenChange.asset.project?.logo?.url))\n    changes.TokenApproval.forEach((tokenChange) => logoSet.add(tokenChange.asset.project?.logo?.url))\n  }\n  return Array.from(logoSet).filter(Boolean) as string[]\n}\n\nfunction parseRemoteActivity(assetActivity: AssetActivityPartsFragment): Activity | undefined {\n  try {\n    const changes = assetActivity.assetChanges.reduce(\n      (acc: TransactionChanges, assetChange) => {\n        if (assetChange.__typename === 'NftApproval') acc.NftApproval.push(assetChange)\n        else if (assetChange.__typename === 'NftApproveForAll') acc.NftApproveForAll.push(assetChange)\n        else if (assetChange.__typename === 'NftTransfer') acc.NftTransfer.push(assetChange)\n        else if (assetChange.__typename === 'TokenTransfer') acc.TokenTransfer.push(assetChange)\n        else if (assetChange.__typename === 'TokenApproval') acc.TokenApproval.push(assetChange)\n\n        return acc\n      },\n      { NftTransfer: [], TokenTransfer: [], TokenApproval: [], NftApproval: [], NftApproveForAll: [] }\n    )\n    const defaultFields = {\n      hash: assetActivity.transaction.hash,\n      chainId: fromGraphQLChain(assetActivity.chain),\n      status: assetActivity.transaction.status,\n      timestamp: assetActivity.timestamp,\n      logos: getLogoSrcs(changes),\n      title: assetActivity.type,\n      descriptor: assetActivity.transaction.to,\n      receipt: assetActivity.transaction,\n    }\n    const parsedFields = ActivityParserByType[assetActivity.type]?.(changes, assetActivity)\n\n    return { ...defaultFields, ...parsedFields }\n  } catch (e) {\n    console.error('Failed to parse activity', e, assetActivity)\n    return undefined\n  }\n}\n\nexport function parseRemoteActivities(assetActivities?: AssetActivityPartsFragment[]) {\n  return assetActivities?.reduce((acc: { [hash: string]: Activity }, assetActivity) => {\n    const activity = parseRemoteActivity(assetActivity)\n    if (activity) acc[activity.hash] = activity\n    return acc\n  }, {})\n}\n\nconst getTimeSince = (timestamp: number) => {\n  const seconds = Math.floor(Date.now() - timestamp * 1000)\n\n  let interval\n  // TODO(cartcrom): use locale to determine date shorthands to use for non-english\n  if ((interval = seconds / ms`1y`) > 1) return Math.floor(interval) + 'y'\n  if ((interval = seconds / ms`30d`) > 1) return Math.floor(interval) + 'mo'\n  if ((interval = seconds / ms`1d`) > 1) return Math.floor(interval) + 'd'\n  if ((interval = seconds / ms`1h`) > 1) return Math.floor(interval) + 'h'\n  if ((interval = seconds / ms`1m`) > 1) return Math.floor(interval) + 'm'\n  else return Math.floor(seconds / ms`1s`) + 's'\n}\n\n/**\n * Keeps track of the time since a given timestamp, keeping it up to date every second when necessary\n * @param timestamp\n * @returns\n */\nexport function useTimeSince(timestamp: number) {\n  const [timeSince, setTimeSince] = useState<string>(getTimeSince(timestamp))\n\n  useEffect(() => {\n    const refreshTime = () => {\n      if (Math.floor(Date.now() - timestamp * 1000) / ms`61s` <= 1) {\n        setTimeSince(getTimeSince(timestamp))\n        setTimeout(() => {\n          refreshTime()\n        }, ms`1s`)\n      }\n    }\n    refreshTime()\n  }, [timestamp])\n\n  return timeSince\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}