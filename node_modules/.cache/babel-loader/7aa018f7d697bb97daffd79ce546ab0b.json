{"ast":null,"code":"import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';\nimport { logger, loadModule, fill, arrayify, isThenable } from '@sentry/utils';\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils.js';\n\n/** Tracing integration for Apollo */\nclass Apollo {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Apollo';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Apollo.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      useNestjs: false\n    };\n    Apollo.prototype.__init.call(this);\n    this._useNest = !!options.useNestjs;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_, getCurrentHub) {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n    if (this._useNest) {\n      const pkg = loadModule('@nestjs/graphql');\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(pkg.GraphQLFactory.prototype, 'mergeWithSchema', function (orig) {\n        return function () {\n          fill(this.resolversExplorerService, 'explore', function (orig) {\n            return function () {\n              const resolvers = arrayify(orig.call(this));\n              const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n              return instrumentedResolvers;\n            };\n          });\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return orig.call(this, ...args);\n        };\n      });\n    } else {\n      const pkg = loadModule('apollo-server-core');\n      if (!pkg) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig) {\n        return function () {\n          if (!this.config.resolvers) {\n            if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n              if (this.config.schema) {\n                logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' + 'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.');\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn('Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.');\n              }\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n            return orig.call(this);\n          }\n          const resolvers = arrayify(this.config.resolvers);\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\nApollo.__initStatic();\nfunction instrumentResolvers(resolvers, getCurrentHub) {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(model, resolverGroupName, resolverName, getCurrentHub) {\n  fill(model[resolverGroupName], resolverName, function (orig) {\n    return function () {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = _optionalChain([scope, 'optionalAccess', _2 => _2.getSpan, 'call', _3 => _3()]);\n      const span = _optionalChain([parentSpan, 'optionalAccess', _4 => _4.startChild, 'call', _5 => _5({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve'\n      })]);\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const rv = orig.call(this, ...args);\n      if (isThenable(rv)) {\n        return rv.then(res => {\n          _optionalChain([span, 'optionalAccess', _6 => _6.finish, 'call', _7 => _7()]);\n          return res;\n        });\n      }\n      _optionalChain([span, 'optionalAccess', _8 => _8.finish, 'call', _9 => _9()]);\n      return rv;\n    };\n  });\n}\nexport { Apollo };","map":{"version":3,"sources":["../../../../src/node/integrations/apollo.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport { arrayify, fill, isThenable, loadModule, logger } from '@sentry/utils';\n\nimport { shouldDisableAutoInstrumentation } from './utils/node-utils';\n\ninterface ApolloOptions {\n  useNestjs?: boolean;\n}\n\ntype ApolloResolverGroup = {\n  [key: string]: () => unknown;\n};\n\ntype ApolloModelResolvers = {\n  [key: string]: ApolloResolverGroup;\n};\n\n/** Tracing integration for Apollo */\nexport class Apollo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Apollo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Apollo.id;\n\n  private readonly _useNest: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: ApolloOptions = {\n      useNestjs: false,\n    },\n  ) {\n    this._useNest = !!options.useNestjs;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (shouldDisableAutoInstrumentation(getCurrentHub)) {\n      __DEBUG_BUILD__ && logger.log('Apollo Integration is skipped because of instrumenter configuration.');\n      return;\n    }\n\n    if (this._useNest) {\n      const pkg = loadModule<{\n        GraphQLFactory: {\n          prototype: {\n            create: (resolvers: ApolloModelResolvers[]) => unknown;\n          };\n        };\n      }>('@nestjs/graphql');\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo-NestJS Integration was unable to require @nestjs/graphql package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of NestJS ResolversExplorerService before schemas are constructed.\n       */\n      fill(\n        pkg.GraphQLFactory.prototype,\n        'mergeWithSchema',\n        function (orig: (this: unknown, ...args: unknown[]) => unknown) {\n          return function (\n            this: { resolversExplorerService: { explore: () => ApolloModelResolvers[] } },\n            ...args: unknown[]\n          ) {\n            fill(this.resolversExplorerService, 'explore', function (orig: () => ApolloModelResolvers[]) {\n              return function (this: unknown) {\n                const resolvers = arrayify(orig.call(this));\n\n                const instrumentedResolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n                return instrumentedResolvers;\n              };\n            });\n\n            return orig.call(this, ...args);\n          };\n        },\n      );\n    } else {\n      const pkg = loadModule<{\n        ApolloServerBase: {\n          prototype: {\n            constructSchema: (config: unknown) => unknown;\n          };\n        };\n      }>('apollo-server-core');\n\n      if (!pkg) {\n        __DEBUG_BUILD__ && logger.error('Apollo Integration was unable to require apollo-server-core package.');\n        return;\n      }\n\n      /**\n       * Iterate over resolvers of the ApolloServer instance before schemas are constructed.\n       */\n      fill(pkg.ApolloServerBase.prototype, 'constructSchema', function (orig: (config: unknown) => unknown) {\n        return function (this: {\n          config: { resolvers?: ApolloModelResolvers[]; schema?: unknown; modules?: unknown };\n        }) {\n          if (!this.config.resolvers) {\n            if (__DEBUG_BUILD__) {\n              if (this.config.schema) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `schema` property.' +\n                    'If you are using NestJS with Apollo, please use `Sentry.Integrations.Apollo({ useNestjs: true })` instead.',\n                );\n                logger.warn();\n              } else if (this.config.modules) {\n                logger.warn(\n                  'Apollo integration is not able to trace `ApolloServer` instances constructed via `modules` property.',\n                );\n              }\n\n              logger.error('Skipping tracing as no resolvers found on the `ApolloServer` instance.');\n            }\n\n            return orig.call(this);\n          }\n\n          const resolvers = arrayify(this.config.resolvers);\n\n          this.config.resolvers = instrumentResolvers(resolvers, getCurrentHub);\n\n          return orig.call(this);\n        };\n      });\n    }\n  }\n}\n\nfunction instrumentResolvers(resolvers: ApolloModelResolvers[], getCurrentHub: () => Hub): ApolloModelResolvers[] {\n  return resolvers.map(model => {\n    Object.keys(model).forEach(resolverGroupName => {\n      Object.keys(model[resolverGroupName]).forEach(resolverName => {\n        if (typeof model[resolverGroupName][resolverName] !== 'function') {\n          return;\n        }\n\n        wrapResolver(model, resolverGroupName, resolverName, getCurrentHub);\n      });\n    });\n\n    return model;\n  });\n}\n\n/**\n * Wrap a single resolver which can be a parent of other resolvers and/or db operations.\n */\nfunction wrapResolver(\n  model: ApolloModelResolvers,\n  resolverGroupName: string,\n  resolverName: string,\n  getCurrentHub: () => Hub,\n): void {\n  fill(model[resolverGroupName], resolverName, function (orig: () => unknown | Promise<unknown>) {\n    return function (this: unknown, ...args: unknown[]) {\n      const scope = getCurrentHub().getScope();\n      const parentSpan = scope?.getSpan();\n      const span = parentSpan?.startChild({\n        description: `${resolverGroupName}.${resolverName}`,\n        op: 'graphql.resolve',\n      });\n\n      const rv = orig.call(this, ...args);\n\n      if (isThenable(rv)) {\n        return rv.then((res: unknown) => {\n          span?.finish();\n          return res;\n        });\n      }\n\n      span?.finish();\n\n      return rv;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}