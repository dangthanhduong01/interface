{"ast":null,"code":"import { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nexport const useSellAsset = create()(devtools(set => ({\n  sellAssets: [],\n  issues: 0,\n  showResolveIssues: false,\n  selectSellAsset: asset => set(_ref => {\n    let {\n      sellAssets\n    } = _ref;\n    if (sellAssets.length === 0) return {\n      sellAssets: [asset]\n    };else return {\n      sellAssets: [...sellAssets, asset]\n    };\n  }),\n  removeSellAsset: asset => {\n    set(_ref2 => {\n      let {\n        sellAssets\n      } = _ref2;\n      if (sellAssets.length === 0) return {\n        sellAssets: []\n      };else sellAssets.find(x => asset.tokenId === x.tokenId && x.asset_contract.address === asset.asset_contract.address);\n      const assetsCopy = [...sellAssets];\n      assetsCopy.splice(sellAssets.findIndex(n => n.tokenId === asset.tokenId && n.asset_contract.address === asset.asset_contract.address), 1);\n      return {\n        sellAssets: assetsCopy\n      };\n    });\n  },\n  reset: () => set(() => ({\n    sellAssets: []\n  })),\n  setGlobalExpiration: expirationTime => {\n    set(_ref3 => {\n      let {\n        sellAssets\n      } = _ref3;\n      const assetsCopy = [...sellAssets];\n      assetsCopy.map(asset => {\n        asset.expirationTime = expirationTime;\n        return asset;\n      });\n      return {\n        sellAssets: assetsCopy\n      };\n    });\n  },\n  setAssetListPrice: (asset, price, marketplace) => {\n    set(_ref4 => {\n      let {\n        sellAssets\n      } = _ref4;\n      const assetsCopy = [...sellAssets];\n      if (marketplace) {\n        var _asset$newListings, _asset$newListings2;\n        const listingIndex = (_asset$newListings = asset.newListings) === null || _asset$newListings === void 0 ? void 0 : _asset$newListings.findIndex(listing => listing.marketplace.name === marketplace.name);\n        if (asset.newListings && listingIndex != null && listingIndex > -1) {\n          asset.newListings[listingIndex] = {\n            price,\n            marketplace,\n            overrideFloorPrice: false\n          };\n          if (listingIndex === 0) asset.marketAgnosticPrice = price;\n        } else (_asset$newListings2 = asset.newListings) === null || _asset$newListings2 === void 0 ? void 0 : _asset$newListings2.push({\n          price,\n          marketplace,\n          overrideFloorPrice: false\n        });\n      } else asset.marketAgnosticPrice = price;\n      const index = sellAssets.findIndex(n => n.tokenId === asset.tokenId && n.asset_contract.address === asset.asset_contract.address);\n      assetsCopy[index] = asset;\n      return {\n        sellAssets: assetsCopy\n      };\n    });\n  },\n  setGlobalMarketplaces: marketplaces => {\n    set(_ref5 => {\n      let {\n        sellAssets\n      } = _ref5;\n      const assetsCopy = [...sellAssets];\n      assetsCopy.map(asset => {\n        asset.marketplaces = marketplaces;\n        asset.newListings = [];\n        for (const marketplace of marketplaces) {\n          const listingIndex = asset.newListings.findIndex(listing => listing.marketplace.name === marketplace.name);\n          const newListing = {\n            price: asset.marketAgnosticPrice,\n            marketplace,\n            overrideFloorPrice: false\n          };\n          listingIndex > -1 ? asset.newListings[listingIndex] = newListing : asset.newListings.push(newListing);\n        }\n        return asset;\n      });\n      return {\n        sellAssets: assetsCopy\n      };\n    });\n  },\n  removeAssetMarketplace: (asset, marketplace) => {\n    set(_ref6 => {\n      var _asset$marketplaces$f, _asset$marketplaces, _asset$newListings3;\n      let {\n        sellAssets\n      } = _ref6;\n      const assetsCopy = [...sellAssets];\n      const assetIndex = sellAssets.indexOf(asset);\n      const marketplaceIndex = (_asset$marketplaces$f = (_asset$marketplaces = asset.marketplaces) === null || _asset$marketplaces === void 0 ? void 0 : _asset$marketplaces.findIndex(oldMarket => oldMarket.name === marketplace.name)) !== null && _asset$marketplaces$f !== void 0 ? _asset$marketplaces$f : -1;\n      const listingIndex = (_asset$newListings3 = asset.newListings) === null || _asset$newListings3 === void 0 ? void 0 : _asset$newListings3.findIndex(listing => listing.marketplace.name === marketplace.name);\n      const assetCopy = JSON.parse(JSON.stringify(asset));\n      if (marketplaceIndex > -1) {\n        assetCopy.marketplaces.splice(marketplaceIndex, 1);\n        assetCopy.newListings.splice(listingIndex, 1);\n      }\n      assetsCopy.splice(assetIndex, 1, assetCopy);\n      return {\n        sellAssets: assetsCopy\n      };\n    });\n  },\n  toggleShowResolveIssues: () => {\n    set(_ref7 => {\n      let {\n        showResolveIssues\n      } = _ref7;\n      return {\n        showResolveIssues: !showResolveIssues\n      };\n    });\n  },\n  setIssues: issues => set(() => ({\n    issues\n  }))\n}), {\n  name: 'useSelectAsset'\n}));","map":{"version":3,"names":["create","devtools","useSellAsset","set","sellAssets","issues","showResolveIssues","selectSellAsset","asset","length","removeSellAsset","find","x","tokenId","asset_contract","address","assetsCopy","splice","findIndex","n","reset","setGlobalExpiration","expirationTime","map","setAssetListPrice","price","marketplace","listingIndex","newListings","listing","name","overrideFloorPrice","marketAgnosticPrice","push","index","setGlobalMarketplaces","marketplaces","newListing","removeAssetMarketplace","assetIndex","indexOf","marketplaceIndex","oldMarket","assetCopy","JSON","parse","stringify","toggleShowResolveIssues","setIssues"],"sources":["/home/diep/freelance/interface/src/nft/hooks/useSellAsset.ts"],"sourcesContent":["import { create } from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { ListingMarket, WalletAsset } from '../types'\n\ninterface SellAssetState {\n  sellAssets: WalletAsset[]\n  issues: number\n  showResolveIssues: boolean\n  selectSellAsset: (asset: WalletAsset) => void\n  removeSellAsset: (asset: WalletAsset) => void\n  reset: () => void\n  setGlobalExpiration: (expirationTime: number) => void\n  setAssetListPrice: (asset: WalletAsset, price?: number, marketplace?: ListingMarket) => void\n  setGlobalMarketplaces: (marketplaces: ListingMarket[]) => void\n  removeAssetMarketplace: (asset: WalletAsset, marketplace: ListingMarket) => void\n  toggleShowResolveIssues: () => void\n  setIssues: (issues: number) => void\n}\n\nexport const useSellAsset = create<SellAssetState>()(\n  devtools(\n    (set) => ({\n      sellAssets: [],\n      issues: 0,\n      showResolveIssues: false,\n      selectSellAsset: (asset) =>\n        set(({ sellAssets }) => {\n          if (sellAssets.length === 0) return { sellAssets: [asset] }\n          else return { sellAssets: [...sellAssets, asset] }\n        }),\n      removeSellAsset: (asset) => {\n        set(({ sellAssets }) => {\n          if (sellAssets.length === 0) return { sellAssets: [] }\n          else\n            sellAssets.find(\n              (x) => asset.tokenId === x.tokenId && x.asset_contract.address === asset.asset_contract.address\n            )\n          const assetsCopy = [...sellAssets]\n          assetsCopy.splice(\n            sellAssets.findIndex(\n              (n) => n.tokenId === asset.tokenId && n.asset_contract.address === asset.asset_contract.address\n            ),\n            1\n          )\n          return { sellAssets: assetsCopy }\n        })\n      },\n      reset: () => set(() => ({ sellAssets: [] })),\n      setGlobalExpiration: (expirationTime) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          assetsCopy.map((asset) => {\n            asset.expirationTime = expirationTime\n            return asset\n          })\n          return { sellAssets: assetsCopy }\n        })\n      },\n      setAssetListPrice: (asset, price, marketplace?) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          if (marketplace) {\n            const listingIndex = asset.newListings?.findIndex(\n              (listing) => listing.marketplace.name === marketplace.name\n            )\n            if (asset.newListings && listingIndex != null && listingIndex > -1) {\n              asset.newListings[listingIndex] = { price, marketplace, overrideFloorPrice: false }\n              if (listingIndex === 0) asset.marketAgnosticPrice = price\n            } else asset.newListings?.push({ price, marketplace, overrideFloorPrice: false })\n          } else asset.marketAgnosticPrice = price\n          const index = sellAssets.findIndex(\n            (n) => n.tokenId === asset.tokenId && n.asset_contract.address === asset.asset_contract.address\n          )\n          assetsCopy[index] = asset\n          return { sellAssets: assetsCopy }\n        })\n      },\n      setGlobalMarketplaces: (marketplaces) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          assetsCopy.map((asset) => {\n            asset.marketplaces = marketplaces\n            asset.newListings = []\n            for (const marketplace of marketplaces) {\n              const listingIndex = asset.newListings.findIndex(\n                (listing) => listing.marketplace.name === marketplace.name\n              )\n              const newListing = {\n                price: asset.marketAgnosticPrice,\n                marketplace,\n                overrideFloorPrice: false,\n              }\n              listingIndex > -1 ? (asset.newListings[listingIndex] = newListing) : asset.newListings.push(newListing)\n            }\n            return asset\n          })\n          return { sellAssets: assetsCopy }\n        })\n      },\n      removeAssetMarketplace: (asset, marketplace) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          const assetIndex = sellAssets.indexOf(asset)\n          const marketplaceIndex =\n            asset.marketplaces?.findIndex((oldMarket) => oldMarket.name === marketplace.name) ?? -1\n          const listingIndex = asset.newListings?.findIndex((listing) => listing.marketplace.name === marketplace.name)\n          const assetCopy = JSON.parse(JSON.stringify(asset))\n          if (marketplaceIndex > -1) {\n            assetCopy.marketplaces.splice(marketplaceIndex, 1)\n            assetCopy.newListings.splice(listingIndex, 1)\n          }\n          assetsCopy.splice(assetIndex, 1, assetCopy)\n          return { sellAssets: assetsCopy }\n        })\n      },\n      toggleShowResolveIssues: () => {\n        set(({ showResolveIssues }) => {\n          return { showResolveIssues: !showResolveIssues }\n        })\n      },\n      setIssues: (issues) =>\n        set(() => ({\n          issues,\n        })),\n    }),\n    { name: 'useSelectAsset' }\n  )\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}