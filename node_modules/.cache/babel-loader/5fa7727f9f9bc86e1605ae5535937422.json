{"ast":null,"code":"import { isAddress } from 'ethers/lib/utils';\nimport { svgPaths as containerPaths } from './Container';\nimport { svgPaths as emblemPaths } from './Emblem';\nimport { gradientEnds, gradientStarts, UniconAttributes, UniconAttributesArray, UniconNumOptions } from './types';\nconst NUM_CHARS_TO_USE_PER_ATTRIBUTE = 2;\nexport const isEthAddress = address => {\n  return address.startsWith('0x') && isAddress(address.toLowerCase());\n};\nexport const deriveUniconAttributeIndices = function (address) {\n  let randomSeed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!isEthAddress(address)) return;\n  const hexAddr = address.slice(-40);\n  const newIndices = {\n    [UniconAttributes.GradientStart]: 0,\n    [UniconAttributes.GradientEnd]: 0,\n    [UniconAttributes.Container]: 0,\n    [UniconAttributes.Shape]: 0\n  };\n  for (const a of UniconAttributesArray) {\n    const optionHex = hexAddr.slice(NUM_CHARS_TO_USE_PER_ATTRIBUTE * a, NUM_CHARS_TO_USE_PER_ATTRIBUTE * (a + 1));\n    const optionDec = parseInt(optionHex, 16) + randomSeed;\n    const optionIndex = optionDec % UniconNumOptions[a];\n    newIndices[a] = optionIndex;\n  }\n  return newIndices;\n};\nexport const getUniconAttributeData = attributeIndices => {\n  return {\n    [UniconAttributes.GradientStart]: gradientStarts[attributeIndices[UniconAttributes.GradientStart]],\n    [UniconAttributes.GradientEnd]: gradientEnds[attributeIndices[UniconAttributes.GradientEnd]],\n    [UniconAttributes.Container]: containerPaths[attributeIndices[UniconAttributes.Container]],\n    [UniconAttributes.Shape]: emblemPaths[attributeIndices[UniconAttributes.Shape]]\n  };\n};","map":{"version":3,"names":["isAddress","svgPaths","containerPaths","emblemPaths","gradientEnds","gradientStarts","UniconAttributes","UniconAttributesArray","UniconNumOptions","NUM_CHARS_TO_USE_PER_ATTRIBUTE","isEthAddress","address","startsWith","toLowerCase","deriveUniconAttributeIndices","randomSeed","hexAddr","slice","newIndices","GradientStart","GradientEnd","Container","Shape","a","optionHex","optionDec","parseInt","optionIndex","getUniconAttributeData","attributeIndices"],"sources":["/home/diep/freelance/interface/src/components/Unicon/utils.ts"],"sourcesContent":["import { isAddress } from 'ethers/lib/utils'\n\nimport { svgPaths as containerPaths } from './Container'\nimport { svgPaths as emblemPaths } from './Emblem'\nimport {\n  gradientEnds,\n  gradientStarts,\n  UniconAttributeData,\n  UniconAttributes,\n  UniconAttributesArray,\n  UniconAttributesToIndices,\n  UniconNumOptions,\n} from './types'\n\nconst NUM_CHARS_TO_USE_PER_ATTRIBUTE = 2\n\nexport const isEthAddress = (address: string) => {\n  return address.startsWith('0x') && isAddress(address.toLowerCase())\n}\n\nexport const deriveUniconAttributeIndices = (\n  address: string,\n  randomSeed = 0\n): UniconAttributesToIndices | undefined => {\n  if (!isEthAddress(address)) return\n\n  const hexAddr = address.slice(-40)\n  const newIndices = {\n    [UniconAttributes.GradientStart]: 0,\n    [UniconAttributes.GradientEnd]: 0,\n    [UniconAttributes.Container]: 0,\n    [UniconAttributes.Shape]: 0,\n  } as UniconAttributesToIndices\n  for (const a of UniconAttributesArray) {\n    const optionHex = hexAddr.slice(NUM_CHARS_TO_USE_PER_ATTRIBUTE * a, NUM_CHARS_TO_USE_PER_ATTRIBUTE * (a + 1))\n    const optionDec = parseInt(optionHex, 16) + randomSeed\n    const optionIndex = optionDec % UniconNumOptions[a]\n    newIndices[a] = optionIndex\n  }\n  return newIndices\n}\n\nexport const getUniconAttributeData = (attributeIndices: UniconAttributesToIndices): UniconAttributeData => {\n  return {\n    [UniconAttributes.GradientStart]: gradientStarts[attributeIndices[UniconAttributes.GradientStart]],\n    [UniconAttributes.GradientEnd]: gradientEnds[attributeIndices[UniconAttributes.GradientEnd]],\n    [UniconAttributes.Container]: containerPaths[attributeIndices[UniconAttributes.Container]],\n    [UniconAttributes.Shape]: emblemPaths[attributeIndices[UniconAttributes.Shape]],\n  } as UniconAttributeData\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAE5C,SAASC,QAAQ,IAAIC,cAAc,QAAQ,aAAa;AACxD,SAASD,QAAQ,IAAIE,WAAW,QAAQ,UAAU;AAClD,SACEC,YAAY,EACZC,cAAc,EAEdC,gBAAgB,EAChBC,qBAAqB,EAErBC,gBAAgB,QACX,SAAS;AAEhB,MAAMC,8BAA8B,GAAG,CAAC;AAExC,OAAO,MAAMC,YAAY,GAAIC,OAAe,IAAK;EAC/C,OAAOA,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC,IAAIZ,SAAS,CAACW,OAAO,CAACE,WAAW,EAAE,CAAC;AACrE,CAAC;AAED,OAAO,MAAMC,4BAA4B,GAAG,UAC1CH,OAAe,EAE2B;EAAA,IAD1CI,UAAU,uEAAG,CAAC;EAEd,IAAI,CAACL,YAAY,CAACC,OAAO,CAAC,EAAE;EAE5B,MAAMK,OAAO,GAAGL,OAAO,CAACM,KAAK,CAAC,CAAC,EAAE,CAAC;EAClC,MAAMC,UAAU,GAAG;IACjB,CAACZ,gBAAgB,CAACa,aAAa,GAAG,CAAC;IACnC,CAACb,gBAAgB,CAACc,WAAW,GAAG,CAAC;IACjC,CAACd,gBAAgB,CAACe,SAAS,GAAG,CAAC;IAC/B,CAACf,gBAAgB,CAACgB,KAAK,GAAG;EAC5B,CAA8B;EAC9B,KAAK,MAAMC,CAAC,IAAIhB,qBAAqB,EAAE;IACrC,MAAMiB,SAAS,GAAGR,OAAO,CAACC,KAAK,CAACR,8BAA8B,GAAGc,CAAC,EAAEd,8BAA8B,IAAIc,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7G,MAAME,SAAS,GAAGC,QAAQ,CAACF,SAAS,EAAE,EAAE,CAAC,GAAGT,UAAU;IACtD,MAAMY,WAAW,GAAGF,SAAS,GAAGjB,gBAAgB,CAACe,CAAC,CAAC;IACnDL,UAAU,CAACK,CAAC,CAAC,GAAGI,WAAW;EAC7B;EACA,OAAOT,UAAU;AACnB,CAAC;AAED,OAAO,MAAMU,sBAAsB,GAAIC,gBAA2C,IAA0B;EAC1G,OAAO;IACL,CAACvB,gBAAgB,CAACa,aAAa,GAAGd,cAAc,CAACwB,gBAAgB,CAACvB,gBAAgB,CAACa,aAAa,CAAC,CAAC;IAClG,CAACb,gBAAgB,CAACc,WAAW,GAAGhB,YAAY,CAACyB,gBAAgB,CAACvB,gBAAgB,CAACc,WAAW,CAAC,CAAC;IAC5F,CAACd,gBAAgB,CAACe,SAAS,GAAGnB,cAAc,CAAC2B,gBAAgB,CAACvB,gBAAgB,CAACe,SAAS,CAAC,CAAC;IAC1F,CAACf,gBAAgB,CAACgB,KAAK,GAAGnB,WAAW,CAAC0B,gBAAgB,CAACvB,gBAAgB,CAACgB,KAAK,CAAC;EAChF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}