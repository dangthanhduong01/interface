{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { SwapType } from '../routers';\nimport { log } from '../util';\nimport { calculateGasUsed, initSwapRouteFromExisting } from '../util/gas-factory-helpers';\nimport { SimulationStatus, Simulator } from './simulation-provider';\nexport class EthEstimateGasSimulator extends Simulator {\n  constructor(chainId, provider, v2PoolProvider, v3PoolProvider) {\n    super(provider, chainId);\n    this.v2PoolProvider = v2PoolProvider;\n    this.v3PoolProvider = v3PoolProvider;\n  }\n  async ethEstimateGas(fromAddress, swapOptions, route, l2GasData) {\n    const currencyIn = route.trade.inputAmount.currency;\n    let estimatedGasUsed;\n    if (swapOptions.type == SwapType.UNIVERSAL_ROUTER) {\n      log.info({\n        methodParameters: route.methodParameters\n      }, 'Simulating using eth_estimateGas on Universal Router');\n      try {\n        estimatedGasUsed = await this.provider.estimateGas({\n          data: route.methodParameters.calldata,\n          to: route.methodParameters.to,\n          from: fromAddress,\n          value: BigNumber.from(currencyIn.isNative ? route.methodParameters.value : '0')\n        });\n      } catch (e) {\n        log.error({\n          e\n        }, 'Error estimating gas');\n        return {\n          ...route,\n          simulationStatus: SimulationStatus.Failed\n        };\n      }\n    } else if (swapOptions.type == SwapType.SWAP_ROUTER_02) {\n      log.info({\n        methodParameters: route.methodParameters\n      }, 'Simulating using eth_estimateGas on SwapRouter02');\n      try {\n        estimatedGasUsed = await this.provider.estimateGas({\n          data: route.methodParameters.calldata,\n          to: route.methodParameters.to,\n          from: fromAddress,\n          value: BigNumber.from(currencyIn.isNative ? route.methodParameters.value : '0')\n        });\n      } catch (e) {\n        log.error({\n          e\n        }, 'Error estimating gas');\n        return {\n          ...route,\n          simulationStatus: SimulationStatus.Failed\n        };\n      }\n    } else {\n      throw new Error(`Unsupported swap type ${swapOptions}`);\n    }\n    estimatedGasUsed = this.inflateGasLimit(estimatedGasUsed);\n    const {\n      estimatedGasUsedUSD,\n      estimatedGasUsedQuoteToken,\n      quoteGasAdjusted\n    } = await calculateGasUsed(route.quote.currency.chainId, route, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);\n    return {\n      ...initSwapRouteFromExisting(route, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD),\n      simulationStatus: SimulationStatus.Succeeded\n    };\n  }\n  inflateGasLimit(gasLimit) {\n    // multiply by 1.2\n    return gasLimit.add(gasLimit.div(5));\n  }\n  async simulateTransaction(fromAddress, swapOptions, swapRoute, l2GasData,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _providerConfig) {\n    const inputAmount = swapRoute.trade.inputAmount;\n    if (inputAmount.currency.isNative || (await this.checkTokenApproved(fromAddress, inputAmount, swapOptions, this.provider))) {\n      return await this.ethEstimateGas(fromAddress, swapOptions, swapRoute, l2GasData);\n    } else {\n      log.info('Token not approved, skipping simulation');\n      return {\n        ...swapRoute,\n        simulationStatus: SimulationStatus.NotApproved\n      };\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/providers/eth-estimate-gas-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { SwapType } from '../routers';\nimport { log } from '../util';\nimport { calculateGasUsed, initSwapRouteFromExisting, } from '../util/gas-factory-helpers';\nimport { SimulationStatus, Simulator } from './simulation-provider';\nexport class EthEstimateGasSimulator extends Simulator {\n    constructor(chainId, provider, v2PoolProvider, v3PoolProvider) {\n        super(provider, chainId);\n        this.v2PoolProvider = v2PoolProvider;\n        this.v3PoolProvider = v3PoolProvider;\n    }\n    async ethEstimateGas(fromAddress, swapOptions, route, l2GasData) {\n        const currencyIn = route.trade.inputAmount.currency;\n        let estimatedGasUsed;\n        if (swapOptions.type == SwapType.UNIVERSAL_ROUTER) {\n            log.info({ methodParameters: route.methodParameters }, 'Simulating using eth_estimateGas on Universal Router');\n            try {\n                estimatedGasUsed = await this.provider.estimateGas({\n                    data: route.methodParameters.calldata,\n                    to: route.methodParameters.to,\n                    from: fromAddress,\n                    value: BigNumber.from(currencyIn.isNative ? route.methodParameters.value : '0'),\n                });\n            }\n            catch (e) {\n                log.error({ e }, 'Error estimating gas');\n                return {\n                    ...route,\n                    simulationStatus: SimulationStatus.Failed,\n                };\n            }\n        }\n        else if (swapOptions.type == SwapType.SWAP_ROUTER_02) {\n            log.info({ methodParameters: route.methodParameters }, 'Simulating using eth_estimateGas on SwapRouter02');\n            try {\n                estimatedGasUsed = await this.provider.estimateGas({\n                    data: route.methodParameters.calldata,\n                    to: route.methodParameters.to,\n                    from: fromAddress,\n                    value: BigNumber.from(currencyIn.isNative ? route.methodParameters.value : '0'),\n                });\n            }\n            catch (e) {\n                log.error({ e }, 'Error estimating gas');\n                return {\n                    ...route,\n                    simulationStatus: SimulationStatus.Failed,\n                };\n            }\n        }\n        else {\n            throw new Error(`Unsupported swap type ${swapOptions}`);\n        }\n        estimatedGasUsed = this.inflateGasLimit(estimatedGasUsed);\n        const { estimatedGasUsedUSD, estimatedGasUsedQuoteToken, quoteGasAdjusted, } = await calculateGasUsed(route.quote.currency.chainId, route, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);\n        return {\n            ...initSwapRouteFromExisting(route, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD),\n            simulationStatus: SimulationStatus.Succeeded,\n        };\n    }\n    inflateGasLimit(gasLimit) {\n        // multiply by 1.2\n        return gasLimit.add(gasLimit.div(5));\n    }\n    async simulateTransaction(fromAddress, swapOptions, swapRoute, l2GasData, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _providerConfig) {\n        const inputAmount = swapRoute.trade.inputAmount;\n        if (inputAmount.currency.isNative ||\n            (await this.checkTokenApproved(fromAddress, inputAmount, swapOptions, this.provider))) {\n            return await this.ethEstimateGas(fromAddress, swapOptions, swapRoute, l2GasData);\n        }\n        else {\n            log.info('Token not approved, skipping simulation');\n            return {\n                ...swapRoute,\n                simulationStatus: SimulationStatus.NotApproved,\n            };\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoLWVzdGltYXRlLWdhcy1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm92aWRlcnMvZXRoLWVzdGltYXRlLWdhcy1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHckQsT0FBTyxFQUEwQixRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDOUQsT0FBTyxFQUFXLEdBQUcsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLHlCQUF5QixHQUMxQixNQUFNLDZCQUE2QixDQUFDO0FBR3JDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUtwRSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsU0FBUztJQUdwRCxZQUNFLE9BQWdCLEVBQ2hCLFFBQXlCLEVBQ3pCLGNBQStCLEVBQy9CLGNBQStCO1FBRS9CLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdkMsQ0FBQztJQUNELEtBQUssQ0FBQyxjQUFjLENBQ2xCLFdBQW1CLEVBQ25CLFdBQXdCLEVBQ3hCLEtBQWdCLEVBQ2hCLFNBQTZDO1FBRTdDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUNwRCxJQUFJLGdCQUEyQixDQUFDO1FBQ2hDLElBQUksV0FBVyxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsZ0JBQWdCLEVBQUU7WUFDakQsR0FBRyxDQUFDLElBQUksQ0FDTixFQUFFLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUM1QyxzREFBc0QsQ0FDdkQsQ0FBQztZ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"]},"metadata":{},"sourceType":"module"}