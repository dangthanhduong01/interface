{"ast":null,"code":"import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport { isNodeEnv, loadModule, dynamicRequire } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  const packageToIntegrationMapping = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql');\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres');\n      return new integration.Postgres();\n    }\n  };\n  const mappedPackages = Object.keys(packageToIntegrationMapping).filter(moduleName => !!loadModule(moduleName)).map(pkg => {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(p => p);\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nfunction addExtensionMethods() {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\nexport { addExtensionMethods };","map":{"version":3,"sources":["../../src/extensions.ts"],"names":[],"mappings":";;;AAIA;AACA;AACA;AACA,SAAA,6BAAA,GAAA;EACA,MAAA,OAAA,GAAA,cAAA,EAAA;EACA,IAAA,CAAA,OAAA,CAAA,UAAA,EAAA;IACA;EACA;EAEA,MAAA,2BAAA,GAAA;IACA,OAAA,GAAA;MACA,MAAA,WAAA,GAAA,cAAA,CAAA,MAAA,EAAA,2BAAA,CAAA;MAGA,OAAA,IAAA,WAAA,CAAA,KAAA,EAAA;IACA,CAAA;IACA,QAAA,GAAA;MACA,MAAA,WAAA,GAAA,cAAA,CAAA,MAAA,EAAA,2BAAA,CAAA;MAGA,OAAA,IAAA,WAAA,CAAA,KAAA,CAAA;QAAA,QAAA,EAAA;MAAA,CAAA,CAAA;IACA,CAAA;IACA,KAAA,GAAA;MACA,MAAA,WAAA,GAAA,cAAA,CAAA,MAAA,EAAA,2BAAA,CAAA;MAGA,OAAA,IAAA,WAAA,CAAA,KAAA,EAAA;IACA,CAAA;IACA,EAAA,GAAA;MACA,MAAA,WAAA,GAAA,cAAA,CAAA,MAAA,EAAA,8BAAA,CAAA;MAGA,OAAA,IAAA,WAAA,CAAA,QAAA,EAAA;IACA;EACA,CAAA;EAEA,MAAA,cAAA,GAAA,MAAA,CAAA,IAAA,CAAA,2BAAA,CAAA,CACA,MAAA,CAAA,UAAA,IAAA,CAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CAAA,CACA,GAAA,CAAA,GAAA,IAAA;IACA,IAAA;MACA,OAAA,2BAAA,CAAA,GAAA,CAAA,EAAA;IACA,CAAA,CAAA,OAAA,CAAA,EAAA;MACA,OAAA,SAAA;IACA;EACA,CAAA,CAAA,CACA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA;EAEA,IAAA,cAAA,CAAA,MAAA,GAAA,CAAA,EAAA;IACA,OAAA,CAAA,UAAA,CAAA,YAAA,GAAA,CAAA,IAAA,OAAA,CAAA,UAAA,CAAA,YAAA,IAAA,EAAA,CAAA,EAAA,GAAA,cAAA,CAAA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAA,mBAAA,GAAA;EACA,oBAAA,EAAA;;EAEA;EACA,IAAA,SAAA,EAAA,EAAA;IACA,6BAAA,EAAA;EACA;AACA","sourcesContent":["import { addTracingExtensions, getMainCarrier } from '@sentry/core';\nimport type { Integration, IntegrationClass } from '@sentry/types';\nimport { dynamicRequire, isNodeEnv, loadModule } from '@sentry/utils';\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './node/integrations/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './node/integrations/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './node/integrations/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}