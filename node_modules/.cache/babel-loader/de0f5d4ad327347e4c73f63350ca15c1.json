{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/home/diep/freelance/interface/src/components/AccountDrawer/MiniPortfolio/Activity/index.tsx\",\n  _s = $RefreshSig$();\nimport { i18n } from \"@lingui/core\";\nimport { useAccountDrawer } from 'components/AccountDrawer';\nimport Column from 'components/Column';\nimport { LoadingBubble } from 'components/Tokens/loading';\nimport { getYear, isSameDay, isSameMonth, isSameWeek, isSameYear } from 'date-fns';\nimport { TransactionStatus, useTransactionListQuery } from 'graphql/data/__generated__/types-and-hooks';\nimport { PollingInterval } from 'graphql/data/util';\nimport { atom, useAtom } from 'jotai';\nimport { EmptyWalletModule } from 'nft/components/profile/view/EmptyWalletContent';\nimport { useEffect, useMemo } from 'react';\nimport { ThemedText } from 'theme';\nimport { PortfolioSkeleton, PortfolioTabWrapper } from '../PortfolioRow';\nimport { ActivityRow } from './ActivityRow';\nimport { useLocalActivities } from './parseLocal';\nimport { parseRemoteActivities } from './parseRemote';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst sortActivities = (a, b) => b.timestamp - a.timestamp;\nconst createGroups = activities => {\n  if (!activities || !activities.length) return [];\n  const now = Date.now();\n  const pending = [];\n  const today = [];\n  const currentWeek = [];\n  const last30Days = [];\n  const currentYear = [];\n  const yearMap = {};\n\n  // TODO(cartcrom): create different time bucket system for activities to fall in based on design wants\n  activities.forEach(activity => {\n    if (activity.status === TransactionStatus.Pending) {\n      pending.push(activity);\n      return;\n    }\n    const addedTime = activity.timestamp * 1000;\n    if (isSameDay(now, addedTime)) {\n      today.push(activity);\n    } else if (isSameWeek(addedTime, now)) {\n      currentWeek.push(activity);\n    } else if (isSameMonth(addedTime, now)) {\n      last30Days.push(activity);\n    } else if (isSameYear(addedTime, now)) {\n      currentYear.push(activity);\n    } else {\n      const year = getYear(addedTime);\n      if (!yearMap[year]) {\n        yearMap[year] = [activity];\n      } else {\n        yearMap[year].push(activity);\n      }\n    }\n  });\n  const sortedYears = Object.keys(yearMap).sort((a, b) => parseInt(b) - parseInt(a)).map(year => ({\n    title: year,\n    transactions: yearMap[year]\n  }));\n  const transactionGroups = [{\n    title: /*i18n*/i18n._(\"Pending\"),\n    transactions: pending.sort(sortActivities)\n  }, {\n    title: /*i18n*/i18n._(\"Today\"),\n    transactions: today.sort(sortActivities)\n  }, {\n    title: /*i18n*/i18n._(\"This week\"),\n    transactions: currentWeek.sort(sortActivities)\n  }, {\n    title: /*i18n*/i18n._(\"This month\"),\n    transactions: last30Days.sort(sortActivities)\n  }, {\n    title: /*i18n*/i18n._(\"This year\"),\n    transactions: currentYear.sort(sortActivities)\n  }, ...sortedYears];\n  return transactionGroups.filter(transactionInformation => transactionInformation.transactions.length > 0);\n};\nconst ActivityGroupWrapper = _styled(Column).withConfig({\n  displayName: \"Activity__ActivityGroupWrapper\",\n  componentId: \"sc-1kpa2d1-0\"\n})([\"margin-top:16px;gap:8px;\"]);\nfunction combineActivities() {\n  let localMap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let remoteMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const txHashes = [...new Set([...Object.keys(localMap), ...Object.keys(remoteMap)])];\n\n  // Merges local and remote activities w/ same hash, preferring remote data\n  return txHashes.reduce((acc, hash) => {\n    var _localMap$hash, _remoteMap$hash;\n    const localActivity = (_localMap$hash = localMap === null || localMap === void 0 ? void 0 : localMap[hash]) !== null && _localMap$hash !== void 0 ? _localMap$hash : {};\n    const remoteActivity = (_remoteMap$hash = remoteMap === null || remoteMap === void 0 ? void 0 : remoteMap[hash]) !== null && _remoteMap$hash !== void 0 ? _remoteMap$hash : {};\n    // TODO(cartcrom): determine best logic for which fields to prefer from which sources, i.e. prefer remote exact swap output instead of local estimated output\n    acc.push({\n      ...remoteActivity,\n      ...localActivity\n    });\n    return acc;\n  }, []);\n}\nconst lastFetchedAtom = atom(0);\nexport function ActivityTab(_ref) {\n  _s();\n  let {\n    account\n  } = _ref;\n  const [drawerOpen, toggleWalletDrawer] = useAccountDrawer();\n  const [lastFetched, setLastFetched] = useAtom(lastFetchedAtom);\n  const localMap = useLocalActivities(account);\n  const {\n    data,\n    loading,\n    refetch\n  } = useTransactionListQuery({\n    variables: {\n      account\n    },\n    errorPolicy: 'all',\n    fetchPolicy: 'cache-first'\n  });\n\n  // We only refetch remote activity if the user renavigates to the activity tab by changing tabs or opening the drawer\n  useEffect(() => {\n    const currentTime = Date.now();\n    if (!lastFetched) {\n      setLastFetched(currentTime);\n    } else if (drawerOpen && lastFetched && currentTime - lastFetched > PollingInterval.Slow) {\n      refetch();\n      setLastFetched(currentTime);\n    }\n  }, [drawerOpen, lastFetched, refetch, setLastFetched]);\n  const activityGroups = useMemo(() => {\n    var _data$portfolios;\n    const remoteMap = parseRemoteActivities(data === null || data === void 0 ? void 0 : (_data$portfolios = data.portfolios) === null || _data$portfolios === void 0 ? void 0 : _data$portfolios[0].assetActivities);\n    const allActivities = combineActivities(localMap, remoteMap);\n    return createGroups(allActivities);\n  }, [data === null || data === void 0 ? void 0 : data.portfolios, localMap]);\n  if (!data && loading) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(LoadingBubble, {\n      height: \"16px\",\n      width: \"80px\",\n      margin: \"16px 16px 8px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(PortfolioSkeleton, {\n      shrinkRight: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);else if (activityGroups.length === 0) {\n    return /*#__PURE__*/_jsxDEV(EmptyWalletModule, {\n      type: \"activity\",\n      onNavigateClick: toggleWalletDrawer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(PortfolioTabWrapper, {\n      children: activityGroups.map(activityGroup => /*#__PURE__*/_jsxDEV(ActivityGroupWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(ThemedText.SubHeader, {\n          color: \"textSecondary\",\n          fontWeight: 500,\n          marginLeft: \"16px\",\n          children: activityGroup.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Column, {\n          children: activityGroup.transactions.map(activity => /*#__PURE__*/_jsxDEV(ActivityRow, {\n            activity: activity\n          }, activity.hash, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, activityGroup.title, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(ActivityTab, \"1Q/Dbs+M5dl1Qz78I2lMcJL4geE=\", false, function () {\n  return [useAccountDrawer, useAtom, useLocalActivities, useTransactionListQuery];\n});\n_c = ActivityTab;\nvar _c;\n$RefreshReg$(_c, \"ActivityTab\");","map":{"version":3,"names":["useAccountDrawer","Column","LoadingBubble","getYear","isSameDay","isSameMonth","isSameWeek","isSameYear","TransactionStatus","useTransactionListQuery","PollingInterval","atom","useAtom","EmptyWalletModule","useEffect","useMemo","ThemedText","PortfolioSkeleton","PortfolioTabWrapper","ActivityRow","useLocalActivities","parseRemoteActivities","sortActivities","a","b","timestamp","createGroups","activities","length","now","Date","pending","today","currentWeek","last30Days","currentYear","yearMap","forEach","activity","status","Pending","push","addedTime","year","sortedYears","Object","keys","sort","parseInt","map","title","transactions","transactionGroups","filter","transactionInformation","ActivityGroupWrapper","styled","combineActivities","localMap","remoteMap","txHashes","Set","reduce","acc","hash","localActivity","remoteActivity","lastFetchedAtom","ActivityTab","account","drawerOpen","toggleWalletDrawer","lastFetched","setLastFetched","data","loading","refetch","variables","errorPolicy","fetchPolicy","currentTime","Slow","activityGroups","portfolios","assetActivities","allActivities","activityGroup"],"sources":["/home/diep/freelance/interface/src/components/AccountDrawer/MiniPortfolio/Activity/index.tsx"],"sourcesContent":["import { t } from '@lingui/macro'\nimport { useAccountDrawer } from 'components/AccountDrawer'\nimport Column from 'components/Column'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { getYear, isSameDay, isSameMonth, isSameWeek, isSameYear } from 'date-fns'\nimport { TransactionStatus, useTransactionListQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { PollingInterval } from 'graphql/data/util'\nimport { atom, useAtom } from 'jotai'\nimport { EmptyWalletModule } from 'nft/components/profile/view/EmptyWalletContent'\nimport { useEffect, useMemo } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { PortfolioSkeleton, PortfolioTabWrapper } from '../PortfolioRow'\nimport { ActivityRow } from './ActivityRow'\nimport { useLocalActivities } from './parseLocal'\nimport { parseRemoteActivities } from './parseRemote'\nimport { Activity, ActivityMap } from './types'\n\ninterface ActivityGroup {\n  title: string\n  transactions: Array<Activity>\n}\n\nconst sortActivities = (a: Activity, b: Activity) => b.timestamp - a.timestamp\n\nconst createGroups = (activities?: Array<Activity>) => {\n  if (!activities || !activities.length) return []\n  const now = Date.now()\n\n  const pending: Array<Activity> = []\n  const today: Array<Activity> = []\n  const currentWeek: Array<Activity> = []\n  const last30Days: Array<Activity> = []\n  const currentYear: Array<Activity> = []\n  const yearMap: { [key: string]: Array<Activity> } = {}\n\n  // TODO(cartcrom): create different time bucket system for activities to fall in based on design wants\n  activities.forEach((activity) => {\n    if (activity.status === TransactionStatus.Pending) {\n      pending.push(activity)\n      return\n    }\n    const addedTime = activity.timestamp * 1000\n\n    if (isSameDay(now, addedTime)) {\n      today.push(activity)\n    } else if (isSameWeek(addedTime, now)) {\n      currentWeek.push(activity)\n    } else if (isSameMonth(addedTime, now)) {\n      last30Days.push(activity)\n    } else if (isSameYear(addedTime, now)) {\n      currentYear.push(activity)\n    } else {\n      const year = getYear(addedTime)\n\n      if (!yearMap[year]) {\n        yearMap[year] = [activity]\n      } else {\n        yearMap[year].push(activity)\n      }\n    }\n  })\n  const sortedYears = Object.keys(yearMap)\n    .sort((a, b) => parseInt(b) - parseInt(a))\n    .map((year) => ({ title: year, transactions: yearMap[year] }))\n\n  const transactionGroups: Array<ActivityGroup> = [\n    { title: t`Pending`, transactions: pending.sort(sortActivities) },\n    { title: t`Today`, transactions: today.sort(sortActivities) },\n    { title: t`This week`, transactions: currentWeek.sort(sortActivities) },\n    { title: t`This month`, transactions: last30Days.sort(sortActivities) },\n    { title: t`This year`, transactions: currentYear.sort(sortActivities) },\n    ...sortedYears,\n  ]\n\n  return transactionGroups.filter((transactionInformation) => transactionInformation.transactions.length > 0)\n}\n\nconst ActivityGroupWrapper = styled(Column)`\n  margin-top: 16px;\n  gap: 8px;\n`\n\nfunction combineActivities(localMap: ActivityMap = {}, remoteMap: ActivityMap = {}): Array<Activity> {\n  const txHashes = [...new Set([...Object.keys(localMap), ...Object.keys(remoteMap)])]\n\n  // Merges local and remote activities w/ same hash, preferring remote data\n  return txHashes.reduce((acc: Array<Activity>, hash) => {\n    const localActivity = localMap?.[hash] ?? {}\n    const remoteActivity = remoteMap?.[hash] ?? {}\n    // TODO(cartcrom): determine best logic for which fields to prefer from which sources, i.e. prefer remote exact swap output instead of local estimated output\n    acc.push({ ...remoteActivity, ...localActivity } as Activity)\n    return acc\n  }, [])\n}\n\nconst lastFetchedAtom = atom<number | undefined>(0)\n\nexport function ActivityTab({ account }: { account: string }) {\n  const [drawerOpen, toggleWalletDrawer] = useAccountDrawer()\n  const [lastFetched, setLastFetched] = useAtom(lastFetchedAtom)\n\n  const localMap = useLocalActivities(account)\n\n  const { data, loading, refetch } = useTransactionListQuery({\n    variables: { account },\n    errorPolicy: 'all',\n    fetchPolicy: 'cache-first',\n  })\n\n  // We only refetch remote activity if the user renavigates to the activity tab by changing tabs or opening the drawer\n  useEffect(() => {\n    const currentTime = Date.now()\n    if (!lastFetched) {\n      setLastFetched(currentTime)\n    } else if (drawerOpen && lastFetched && currentTime - lastFetched > PollingInterval.Slow) {\n      refetch()\n      setLastFetched(currentTime)\n    }\n  }, [drawerOpen, lastFetched, refetch, setLastFetched])\n\n  const activityGroups = useMemo(() => {\n    const remoteMap = parseRemoteActivities(data?.portfolios?.[0].assetActivities)\n    const allActivities = combineActivities(localMap, remoteMap)\n    return createGroups(allActivities)\n  }, [data?.portfolios, localMap])\n\n  if (!data && loading)\n    return (\n      <>\n        <LoadingBubble height=\"16px\" width=\"80px\" margin=\"16px 16px 8px\" />\n        <PortfolioSkeleton shrinkRight />\n      </>\n    )\n  else if (activityGroups.length === 0) {\n    return <EmptyWalletModule type=\"activity\" onNavigateClick={toggleWalletDrawer} />\n  } else {\n    return (\n      <PortfolioTabWrapper>\n        {activityGroups.map((activityGroup) => (\n          <ActivityGroupWrapper key={activityGroup.title}>\n            <ThemedText.SubHeader color=\"textSecondary\" fontWeight={500} marginLeft=\"16px\">\n              {activityGroup.title}\n            </ThemedText.SubHeader>\n            <Column>\n              {activityGroup.transactions.map((activity) => (\n                <ActivityRow key={activity.hash} activity={activity} />\n              ))}\n            </Column>\n          </ActivityGroupWrapper>\n        ))}\n      </PortfolioTabWrapper>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}