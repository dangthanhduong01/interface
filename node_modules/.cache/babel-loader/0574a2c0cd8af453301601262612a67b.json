{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport { useTokenBalancesWithLoadingIndicator } from 'lib/hooks/useCurrencyBalance';\nimport { useMemo } from 'react';\nimport { useDefaultActiveTokens } from '../../hooks/Tokens';\nexport { default as useCurrencyBalance, useCurrencyBalances, useNativeCurrencyBalances, useTokenBalance, useTokenBalances, useTokenBalancesWithLoadingIndicator } from 'lib/hooks/useCurrencyBalance';\n\n// mimics useAllBalances\nexport function useAllTokenBalances() {\n  _s();\n  const {\n    account\n  } = useWeb3React();\n  const allTokens = useDefaultActiveTokens();\n  const allTokensArray = useMemo(() => Object.values(allTokens !== null && allTokens !== void 0 ? allTokens : {}), [allTokens]);\n  const [balances, balancesIsLoading] = useTokenBalancesWithLoadingIndicator(account !== null && account !== void 0 ? account : undefined, allTokensArray);\n  return [balances !== null && balances !== void 0 ? balances : {}, balancesIsLoading];\n}\n_s(useAllTokenBalances, \"3+CNnkUCbGqGJGbv5mZ5GTHyVCo=\", false, function () {\n  return [useWeb3React, useDefaultActiveTokens, useTokenBalancesWithLoadingIndicator];\n});","map":{"version":3,"names":["useWeb3React","useTokenBalancesWithLoadingIndicator","useMemo","useDefaultActiveTokens","default","useCurrencyBalance","useCurrencyBalances","useNativeCurrencyBalances","useTokenBalance","useTokenBalances","useAllTokenBalances","account","allTokens","allTokensArray","Object","values","balances","balancesIsLoading","undefined"],"sources":["/home/diep/freelance/interface/src/state/connection/hooks.ts"],"sourcesContent":["import { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTokenBalancesWithLoadingIndicator } from 'lib/hooks/useCurrencyBalance'\nimport { useMemo } from 'react'\n\nimport { useDefaultActiveTokens } from '../../hooks/Tokens'\n\nexport {\n  default as useCurrencyBalance,\n  useCurrencyBalances,\n  useNativeCurrencyBalances,\n  useTokenBalance,\n  useTokenBalances,\n  useTokenBalancesWithLoadingIndicator,\n} from 'lib/hooks/useCurrencyBalance'\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): [{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }, boolean] {\n  const { account } = useWeb3React()\n  const allTokens = useDefaultActiveTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const [balances, balancesIsLoading] = useTokenBalancesWithLoadingIndicator(account ?? undefined, allTokensArray)\n  return [balances ?? {}, balancesIsLoading]\n}\n"],"mappings":";AACA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,oCAAoC,QAAQ,8BAA8B;AACnF,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,sBAAsB,QAAQ,oBAAoB;AAE3D,SACEC,OAAO,IAAIC,kBAAkB,EAC7BC,mBAAmB,EACnBC,yBAAyB,EACzBC,eAAe,EACfC,gBAAgB,EAChBR,oCAAoC,QAC/B,8BAA8B;;AAErC;AACA,OAAO,SAASS,mBAAmB,GAA6E;EAAA;EAC9G,MAAM;IAAEC;EAAQ,CAAC,GAAGX,YAAY,EAAE;EAClC,MAAMY,SAAS,GAAGT,sBAAsB,EAAE;EAC1C,MAAMU,cAAc,GAAGX,OAAO,CAAC,MAAMY,MAAM,CAACC,MAAM,CAACH,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,CAAC,CAAC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EACjF,MAAM,CAACI,QAAQ,EAAEC,iBAAiB,CAAC,GAAGhB,oCAAoC,CAACU,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAIO,SAAS,EAAEL,cAAc,CAAC;EAChH,OAAO,CAACG,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,CAAC,CAAC,EAAEC,iBAAiB,CAAC;AAC5C;AAAC,GANeP,mBAAmB;EAAA,QACbV,YAAY,EACdG,sBAAsB,EAEFF,oCAAoC;AAAA"},"metadata":{},"sourceType":"module"}