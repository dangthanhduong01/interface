{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport { WRAPPED_NATIVE_CURRENCY } from 'constants/tokens';\nimport { useMemo } from 'react';\nimport { RouterPreference } from 'state/routing/slice';\nimport { TradeState } from 'state/routing/types';\nimport { useRoutingAPITrade } from 'state/routing/useRoutingAPITrade';\nimport { useClientSideRouter } from 'state/user/hooks';\nimport useAutoRouterSupported from './useAutoRouterSupported';\nimport { useClientSideV3Trade } from './useClientSideV3Trade';\nimport useDebounce from './useDebounce';\nimport useIsWindowVisible from './useIsWindowVisible';\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(tradeType, amountSpecified, otherCurrency) {\n  _s();\n  const {\n    chainId\n  } = useWeb3React();\n  const autoRouterSupported = useAutoRouterSupported();\n  const isWindowVisible = useIsWindowVisible();\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce(useMemo(() => [amountSpecified, otherCurrency], [amountSpecified, otherCurrency]), 200);\n  const isAWrapTransaction = useMemo(() => {\n    if (!chainId || !amountSpecified || !debouncedOtherCurrency) return false;\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n    return amountSpecified.currency.isNative && (weth === null || weth === void 0 ? void 0 : weth.equals(debouncedOtherCurrency)) || debouncedOtherCurrency.isNative && (weth === null || weth === void 0 ? void 0 : weth.equals(amountSpecified.currency));\n  }, [amountSpecified, chainId, debouncedOtherCurrency]);\n  const shouldGetTrade = !isAWrapTransaction && isWindowVisible;\n  const [clientSideRouter] = useClientSideRouter();\n  const routingAPITrade = useRoutingAPITrade(tradeType, autoRouterSupported && shouldGetTrade ? debouncedAmount : undefined, debouncedOtherCurrency, clientSideRouter ? RouterPreference.CLIENT : RouterPreference.API);\n  const isLoading = routingAPITrade.state === TradeState.LOADING;\n  const useFallback = (!autoRouterSupported || routingAPITrade.state === TradeState.NO_ROUTE_FOUND) && shouldGetTrade;\n\n  // only use client side router if routing api trade failed or is not supported\n  const bestV3Trade = useClientSideV3Trade(tradeType, useFallback ? debouncedAmount : undefined, useFallback ? debouncedOtherCurrency : undefined);\n\n  // only return gas estimate from api if routing api trade is used\n  return useMemo(() => ({\n    ...(useFallback ? bestV3Trade : routingAPITrade),\n    ...(isLoading ? {\n      state: TradeState.LOADING\n    } : {})\n  }), [bestV3Trade, isLoading, routingAPITrade, useFallback]);\n}\n_s(useBestTrade, \"U1QY5DHTixcDc7YLM5CQNl1mHhI=\", false, function () {\n  return [useWeb3React, useAutoRouterSupported, useIsWindowVisible, useDebounce, useClientSideRouter, useRoutingAPITrade, useClientSideV3Trade];\n});","map":{"version":3,"names":["useWeb3React","WRAPPED_NATIVE_CURRENCY","useMemo","RouterPreference","TradeState","useRoutingAPITrade","useClientSideRouter","useAutoRouterSupported","useClientSideV3Trade","useDebounce","useIsWindowVisible","useBestTrade","tradeType","amountSpecified","otherCurrency","chainId","autoRouterSupported","isWindowVisible","debouncedAmount","debouncedOtherCurrency","isAWrapTransaction","weth","currency","isNative","equals","shouldGetTrade","clientSideRouter","routingAPITrade","undefined","CLIENT","API","isLoading","state","LOADING","useFallback","NO_ROUTE_FOUND","bestV3Trade"],"sources":["/home/diep/freelance/interface/src/hooks/useBestTrade.ts"],"sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { WRAPPED_NATIVE_CURRENCY } from 'constants/tokens'\nimport { useMemo } from 'react'\nimport { RouterPreference } from 'state/routing/slice'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport { useRoutingAPITrade } from 'state/routing/useRoutingAPITrade'\nimport { useClientSideRouter } from 'state/user/hooks'\n\nimport useAutoRouterSupported from './useAutoRouterSupported'\nimport { useClientSideV3Trade } from './useClientSideV3Trade'\nimport useDebounce from './useDebounce'\nimport useIsWindowVisible from './useIsWindowVisible'\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(\n  tradeType: TradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n} {\n  const { chainId } = useWeb3React()\n  const autoRouterSupported = useAutoRouterSupported()\n  const isWindowVisible = useIsWindowVisible()\n\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce(\n    useMemo(() => [amountSpecified, otherCurrency], [amountSpecified, otherCurrency]),\n    200\n  )\n\n  const isAWrapTransaction = useMemo(() => {\n    if (!chainId || !amountSpecified || !debouncedOtherCurrency) return false\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId]\n    return (\n      (amountSpecified.currency.isNative && weth?.equals(debouncedOtherCurrency)) ||\n      (debouncedOtherCurrency.isNative && weth?.equals(amountSpecified.currency))\n    )\n  }, [amountSpecified, chainId, debouncedOtherCurrency])\n\n  const shouldGetTrade = !isAWrapTransaction && isWindowVisible\n\n  const [clientSideRouter] = useClientSideRouter()\n  const routingAPITrade = useRoutingAPITrade(\n    tradeType,\n    autoRouterSupported && shouldGetTrade ? debouncedAmount : undefined,\n    debouncedOtherCurrency,\n    clientSideRouter ? RouterPreference.CLIENT : RouterPreference.API\n  )\n\n  const isLoading = routingAPITrade.state === TradeState.LOADING\n  const useFallback = (!autoRouterSupported || routingAPITrade.state === TradeState.NO_ROUTE_FOUND) && shouldGetTrade\n\n  // only use client side router if routing api trade failed or is not supported\n  const bestV3Trade = useClientSideV3Trade(\n    tradeType,\n    useFallback ? debouncedAmount : undefined,\n    useFallback ? debouncedOtherCurrency : undefined\n  )\n\n  // only return gas estimate from api if routing api trade is used\n  return useMemo(\n    () => ({\n      ...(useFallback ? bestV3Trade : routingAPITrade),\n      ...(isLoading ? { state: TradeState.LOADING } : {}),\n    }),\n    [bestV3Trade, isLoading, routingAPITrade, useFallback]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}