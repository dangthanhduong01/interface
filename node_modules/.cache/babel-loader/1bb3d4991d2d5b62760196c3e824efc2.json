{"ast":null,"code":"var _s = $RefreshSig$();\nimport { TradeType } from '@uniswap/sdk-core';\nimport { useMemo } from 'react';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { TransactionType } from '../state/transactions/types';\nimport { currencyId } from '../utils/currencyId';\nimport useTransactionDeadline from './useTransactionDeadline';\nimport { useUniversalRouterSwapCallback } from './useUniversalRouter';\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade,\n// trade to execute, required\nfiatValues,\n// usd values for amount in and out, logged for analytics\nallowedSlippage,\n// in bips\npermitSignature) {\n  _s();\n  const deadline = useTransactionDeadline();\n  const addTransaction = useTransactionAdder();\n  const universalRouterSwapCallback = useUniversalRouterSwapCallback(trade, fiatValues, {\n    slippageTolerance: allowedSlippage,\n    deadline,\n    permit: permitSignature\n  });\n  const swapCallback = universalRouterSwapCallback;\n  const callback = useMemo(() => {\n    if (!trade || !swapCallback) return null;\n    return () => swapCallback().then(response => {\n      addTransaction(response, trade.tradeType === TradeType.EXACT_INPUT ? {\n        type: TransactionType.SWAP,\n        tradeType: TradeType.EXACT_INPUT,\n        inputCurrencyId: currencyId(trade.inputAmount.currency),\n        inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n        expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n        outputCurrencyId: currencyId(trade.outputAmount.currency),\n        minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(allowedSlippage).quotient.toString()\n      } : {\n        type: TransactionType.SWAP,\n        tradeType: TradeType.EXACT_OUTPUT,\n        inputCurrencyId: currencyId(trade.inputAmount.currency),\n        maximumInputCurrencyAmountRaw: trade.maximumAmountIn(allowedSlippage).quotient.toString(),\n        outputCurrencyId: currencyId(trade.outputAmount.currency),\n        outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n        expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString()\n      });\n      return response.hash;\n    });\n  }, [addTransaction, allowedSlippage, swapCallback, trade]);\n  return {\n    callback\n  };\n}\n_s(useSwapCallback, \"2Kggz9Kb1l7A2DeaqvL7EFi5/fg=\", false, function () {\n  return [useTransactionDeadline, useTransactionAdder, useUniversalRouterSwapCallback];\n});","map":{"version":3,"names":["TradeType","useMemo","useTransactionAdder","TransactionType","currencyId","useTransactionDeadline","useUniversalRouterSwapCallback","useSwapCallback","trade","fiatValues","allowedSlippage","permitSignature","deadline","addTransaction","universalRouterSwapCallback","slippageTolerance","permit","swapCallback","callback","then","response","tradeType","EXACT_INPUT","type","SWAP","inputCurrencyId","inputAmount","currency","inputCurrencyAmountRaw","quotient","toString","expectedOutputCurrencyAmountRaw","outputAmount","outputCurrencyId","minimumOutputCurrencyAmountRaw","minimumAmountOut","EXACT_OUTPUT","maximumInputCurrencyAmountRaw","maximumAmountIn","outputCurrencyAmountRaw","expectedInputCurrencyAmountRaw","hash"],"sources":["/home/diep/freelance/interface/src/hooks/useSwapCallback.tsx"],"sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { PermitSignature } from 'hooks/usePermitAllowance'\nimport { useMemo } from 'react'\n\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { TransactionType } from '../state/transactions/types'\nimport { currencyId } from '../utils/currencyId'\nimport useTransactionDeadline from './useTransactionDeadline'\nimport { useUniversalRouterSwapCallback } from './useUniversalRouter'\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade<Currency, Currency, TradeType> | undefined, // trade to execute, required\n  fiatValues: { amountIn: number | undefined; amountOut: number | undefined }, // usd values for amount in and out, logged for analytics\n  allowedSlippage: Percent, // in bips\n  permitSignature: PermitSignature | undefined\n): { callback: null | (() => Promise<string>) } {\n  const deadline = useTransactionDeadline()\n\n  const addTransaction = useTransactionAdder()\n\n  const universalRouterSwapCallback = useUniversalRouterSwapCallback(trade, fiatValues, {\n    slippageTolerance: allowedSlippage,\n    deadline,\n    permit: permitSignature,\n  })\n  const swapCallback = universalRouterSwapCallback\n\n  const callback = useMemo(() => {\n    if (!trade || !swapCallback) return null\n    return () =>\n      swapCallback().then((response) => {\n        addTransaction(\n          response,\n          trade.tradeType === TradeType.EXACT_INPUT\n            ? {\n                type: TransactionType.SWAP,\n                tradeType: TradeType.EXACT_INPUT,\n                inputCurrencyId: currencyId(trade.inputAmount.currency),\n                inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n                expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n                outputCurrencyId: currencyId(trade.outputAmount.currency),\n                minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(allowedSlippage).quotient.toString(),\n              }\n            : {\n                type: TransactionType.SWAP,\n                tradeType: TradeType.EXACT_OUTPUT,\n                inputCurrencyId: currencyId(trade.inputAmount.currency),\n                maximumInputCurrencyAmountRaw: trade.maximumAmountIn(allowedSlippage).quotient.toString(),\n                outputCurrencyId: currencyId(trade.outputAmount.currency),\n                outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n                expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n              }\n        )\n        return response.hash\n      })\n  }, [addTransaction, allowedSlippage, swapCallback, trade])\n\n  return {\n    callback,\n  }\n}\n"],"mappings":";AACA,SAA4BA,SAAS,QAAQ,mBAAmB;AAEhE,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,mBAAmB,QAAQ,6BAA6B;AACjE,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,UAAU,QAAQ,qBAAqB;AAChD,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,SAASC,8BAA8B,QAAQ,sBAAsB;;AAErE;AACA;AACA,OAAO,SAASC,eAAe,CAC7BC,KAAuD;AAAE;AACzDC,UAA2E;AAAE;AAC7EC,eAAwB;AAAE;AAC1BC,eAA4C,EACE;EAAA;EAC9C,MAAMC,QAAQ,GAAGP,sBAAsB,EAAE;EAEzC,MAAMQ,cAAc,GAAGX,mBAAmB,EAAE;EAE5C,MAAMY,2BAA2B,GAAGR,8BAA8B,CAACE,KAAK,EAAEC,UAAU,EAAE;IACpFM,iBAAiB,EAAEL,eAAe;IAClCE,QAAQ;IACRI,MAAM,EAAEL;EACV,CAAC,CAAC;EACF,MAAMM,YAAY,GAAGH,2BAA2B;EAEhD,MAAMI,QAAQ,GAAGjB,OAAO,CAAC,MAAM;IAC7B,IAAI,CAACO,KAAK,IAAI,CAACS,YAAY,EAAE,OAAO,IAAI;IACxC,OAAO,MACLA,YAAY,EAAE,CAACE,IAAI,CAAEC,QAAQ,IAAK;MAChCP,cAAc,CACZO,QAAQ,EACRZ,KAAK,CAACa,SAAS,KAAKrB,SAAS,CAACsB,WAAW,GACrC;QACEC,IAAI,EAAEpB,eAAe,CAACqB,IAAI;QAC1BH,SAAS,EAAErB,SAAS,CAACsB,WAAW;QAChCG,eAAe,EAAErB,UAAU,CAACI,KAAK,CAACkB,WAAW,CAACC,QAAQ,CAAC;QACvDC,sBAAsB,EAAEpB,KAAK,CAACkB,WAAW,CAACG,QAAQ,CAACC,QAAQ,EAAE;QAC7DC,+BAA+B,EAAEvB,KAAK,CAACwB,YAAY,CAACH,QAAQ,CAACC,QAAQ,EAAE;QACvEG,gBAAgB,EAAE7B,UAAU,CAACI,KAAK,CAACwB,YAAY,CAACL,QAAQ,CAAC;QACzDO,8BAA8B,EAAE1B,KAAK,CAAC2B,gBAAgB,CAACzB,eAAe,CAAC,CAACmB,QAAQ,CAACC,QAAQ;MAC3F,CAAC,GACD;QACEP,IAAI,EAAEpB,eAAe,CAACqB,IAAI;QAC1BH,SAAS,EAAErB,SAAS,CAACoC,YAAY;QACjCX,eAAe,EAAErB,UAAU,CAACI,KAAK,CAACkB,WAAW,CAACC,QAAQ,CAAC;QACvDU,6BAA6B,EAAE7B,KAAK,CAAC8B,eAAe,CAAC5B,eAAe,CAAC,CAACmB,QAAQ,CAACC,QAAQ,EAAE;QACzFG,gBAAgB,EAAE7B,UAAU,CAACI,KAAK,CAACwB,YAAY,CAACL,QAAQ,CAAC;QACzDY,uBAAuB,EAAE/B,KAAK,CAACwB,YAAY,CAACH,QAAQ,CAACC,QAAQ,EAAE;QAC/DU,8BAA8B,EAAEhC,KAAK,CAACkB,WAAW,CAACG,QAAQ,CAACC,QAAQ;MACrE,CAAC,CACN;MACD,OAAOV,QAAQ,CAACqB,IAAI;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,CAAC5B,cAAc,EAAEH,eAAe,EAAEO,YAAY,EAAET,KAAK,CAAC,CAAC;EAE1D,OAAO;IACLU;EACF,CAAC;AACH;AAAC,GAlDeX,eAAe;EAAA,QAMZF,sBAAsB,EAEhBH,mBAAmB,EAENI,8BAA8B;AAAA"},"metadata":{},"sourceType":"module"}