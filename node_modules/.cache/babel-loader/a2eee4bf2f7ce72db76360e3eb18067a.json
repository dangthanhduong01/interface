{"ast":null,"code":"import * as Sentry from '@sentry/react';\nimport noop from 'utils/noop';\n/**\n * This enhancer will automatically store the latest state in Sentry's scope, so that it will be available\n * in the Sentry dashboard when an exception happens.\n */\nexport const sentryEnhancer = Sentry.createReduxEnhancer({\n  /**\n   * We don't want to store actions as breadcrumbs in Sentry, so we return null to disable the default behavior.\n   */\n  actionTransformer: noop,\n  /**\n   * We only want to store a subset of the state in Sentry, containing only the relevant parts for debugging.\n   * Note: This function runs on every state update, so we're keeping it as fast as possible by avoiding any function\n   * calls and deep object traversals.\n   */\n  stateTransformer: state => {\n    const {\n      application,\n      user,\n      connection,\n      transactions\n    } = state;\n    return {\n      application: {\n        fiatOnramp: application.fiatOnramp,\n        chainId: application.chainId,\n        openModal: application.openModal,\n        popupList: application.popupList\n      },\n      user: {\n        selectedWallet: user.selectedWallet,\n        lastUpdateVersionTimestamp: user.lastUpdateVersionTimestamp,\n        userLocale: user.userLocale,\n        userExpertMode: user.userExpertMode,\n        userClientSideRouter: user.userClientSideRouter,\n        userHideClosedPositions: user.userHideClosedPositions,\n        userSlippageTolerance: user.userSlippageTolerance,\n        userSlippageToleranceHasBeenMigratedToAuto: user.userSlippageToleranceHasBeenMigratedToAuto,\n        userDeadline: user.userDeadline,\n        timestamp: user.timestamp,\n        URLWarningVisible: user.URLWarningVisible,\n        showSurveyPopup: user.showSurveyPopup\n      },\n      connection: {\n        errorByConnectionType: connection.errorByConnectionType\n      },\n      transactions\n    };\n  }\n});","map":{"version":3,"names":["Sentry","noop","sentryEnhancer","createReduxEnhancer","actionTransformer","stateTransformer","state","application","user","connection","transactions","fiatOnramp","chainId","openModal","popupList","selectedWallet","lastUpdateVersionTimestamp","userLocale","userExpertMode","userClientSideRouter","userHideClosedPositions","userSlippageTolerance","userSlippageToleranceHasBeenMigratedToAuto","userDeadline","timestamp","URLWarningVisible","showSurveyPopup","errorByConnectionType"],"sources":["/home/diep/freelance/interface/src/state/logging.ts"],"sourcesContent":["import * as Sentry from '@sentry/react'\nimport noop from 'utils/noop'\n\nimport { AppState } from './types'\n\n/* Utility type to mark all properties of a type as optional */\ntype DeepPartial<T> = T extends object\n  ? {\n      [P in keyof T]?: DeepPartial<T[P]>\n    }\n  : T\n\n/**\n * This enhancer will automatically store the latest state in Sentry's scope, so that it will be available\n * in the Sentry dashboard when an exception happens.\n */\nexport const sentryEnhancer = Sentry.createReduxEnhancer({\n  /**\n   * We don't want to store actions as breadcrumbs in Sentry, so we return null to disable the default behavior.\n   */\n  actionTransformer: noop,\n  /**\n   * We only want to store a subset of the state in Sentry, containing only the relevant parts for debugging.\n   * Note: This function runs on every state update, so we're keeping it as fast as possible by avoiding any function\n   * calls and deep object traversals.\n   */\n  stateTransformer: (state: AppState): DeepPartial<AppState> => {\n    const { application, user, connection, transactions } = state\n    return {\n      application: {\n        fiatOnramp: application.fiatOnramp,\n        chainId: application.chainId,\n        openModal: application.openModal,\n        popupList: application.popupList,\n      },\n      user: {\n        selectedWallet: user.selectedWallet,\n        lastUpdateVersionTimestamp: user.lastUpdateVersionTimestamp,\n        userLocale: user.userLocale,\n        userExpertMode: user.userExpertMode,\n        userClientSideRouter: user.userClientSideRouter,\n        userHideClosedPositions: user.userHideClosedPositions,\n        userSlippageTolerance: user.userSlippageTolerance,\n        userSlippageToleranceHasBeenMigratedToAuto: user.userSlippageToleranceHasBeenMigratedToAuto,\n        userDeadline: user.userDeadline,\n        timestamp: user.timestamp,\n        URLWarningVisible: user.URLWarningVisible,\n        showSurveyPopup: user.showSurveyPopup,\n      },\n      connection: {\n        errorByConnectionType: connection.errorByConnectionType,\n      },\n      transactions,\n    }\n  },\n})\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,YAAY;AAW7B;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGF,MAAM,CAACG,mBAAmB,CAAC;EACvD;AACF;AACA;EACEC,iBAAiB,EAAEH,IAAI;EACvB;AACF;AACA;AACA;AACA;EACEI,gBAAgB,EAAGC,KAAe,IAA4B;IAC5D,MAAM;MAAEC,WAAW;MAAEC,IAAI;MAAEC,UAAU;MAAEC;IAAa,CAAC,GAAGJ,KAAK;IAC7D,OAAO;MACLC,WAAW,EAAE;QACXI,UAAU,EAAEJ,WAAW,CAACI,UAAU;QAClCC,OAAO,EAAEL,WAAW,CAACK,OAAO;QAC5BC,SAAS,EAAEN,WAAW,CAACM,SAAS;QAChCC,SAAS,EAAEP,WAAW,CAACO;MACzB,CAAC;MACDN,IAAI,EAAE;QACJO,cAAc,EAAEP,IAAI,CAACO,cAAc;QACnCC,0BAA0B,EAAER,IAAI,CAACQ,0BAA0B;QAC3DC,UAAU,EAAET,IAAI,CAACS,UAAU;QAC3BC,cAAc,EAAEV,IAAI,CAACU,cAAc;QACnCC,oBAAoB,EAAEX,IAAI,CAACW,oBAAoB;QAC/CC,uBAAuB,EAAEZ,IAAI,CAACY,uBAAuB;QACrDC,qBAAqB,EAAEb,IAAI,CAACa,qBAAqB;QACjDC,0CAA0C,EAAEd,IAAI,CAACc,0CAA0C;QAC3FC,YAAY,EAAEf,IAAI,CAACe,YAAY;QAC/BC,SAAS,EAAEhB,IAAI,CAACgB,SAAS;QACzBC,iBAAiB,EAAEjB,IAAI,CAACiB,iBAAiB;QACzCC,eAAe,EAAElB,IAAI,CAACkB;MACxB,CAAC;MACDjB,UAAU,EAAE;QACVkB,qBAAqB,EAAElB,UAAU,CAACkB;MACpC,CAAC;MACDjB;IACF,CAAC;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module"}