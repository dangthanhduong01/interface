{"ast":null,"code":"var _s = $RefreshSig$();\nimport { ConnectionType } from 'connection';\nimport { useGetConnection } from 'connection';\nimport { useMemo } from 'react';\nimport { useAppSelector } from 'state/hooks';\nconst SELECTABLE_WALLETS = [ConnectionType.UNIWALLET, ConnectionType.INJECTED, ConnectionType.WALLET_CONNECT, ConnectionType.COINBASE_WALLET];\nexport default function useOrderedConnections() {\n  _s();\n  const selectedWallet = useAppSelector(state => state.user.selectedWallet);\n  const getConnection = useGetConnection();\n  return useMemo(() => {\n    const orderedConnectionTypes = [];\n\n    // Always attempt to use to Gnosis Safe first, as we can't know if we're in a SafeContext.\n    orderedConnectionTypes.push(ConnectionType.GNOSIS_SAFE);\n\n    // Add the `selectedWallet` to the top so it's prioritized, then add the other selectable wallets.\n    if (selectedWallet) {\n      orderedConnectionTypes.push(selectedWallet);\n    }\n    orderedConnectionTypes.push(...SELECTABLE_WALLETS.filter(wallet => wallet !== selectedWallet));\n\n    // Add network connection last as it should be the fallback.\n    orderedConnectionTypes.push(ConnectionType.NETWORK);\n    return orderedConnectionTypes.map(connectionType => getConnection(connectionType));\n  }, [getConnection, selectedWallet]);\n}\n_s(useOrderedConnections, \"Ro1zfbg5GhUCVFuLNvZGwisohYQ=\", false, function () {\n  return [useAppSelector, useGetConnection];\n});","map":{"version":3,"names":["ConnectionType","useGetConnection","useMemo","useAppSelector","SELECTABLE_WALLETS","UNIWALLET","INJECTED","WALLET_CONNECT","COINBASE_WALLET","useOrderedConnections","selectedWallet","state","user","getConnection","orderedConnectionTypes","push","GNOSIS_SAFE","filter","wallet","NETWORK","map","connectionType"],"sources":["/home/diep/freelance/interface/src/hooks/useOrderedConnections.ts"],"sourcesContent":["import { ConnectionType } from 'connection'\nimport { useGetConnection } from 'connection'\nimport { useMemo } from 'react'\nimport { useAppSelector } from 'state/hooks'\n\nconst SELECTABLE_WALLETS = [\n  ConnectionType.UNIWALLET,\n  ConnectionType.INJECTED,\n  ConnectionType.WALLET_CONNECT,\n  ConnectionType.COINBASE_WALLET,\n]\n\nexport default function useOrderedConnections() {\n  const selectedWallet = useAppSelector((state) => state.user.selectedWallet)\n  const getConnection = useGetConnection()\n  return useMemo(() => {\n    const orderedConnectionTypes: ConnectionType[] = []\n\n    // Always attempt to use to Gnosis Safe first, as we can't know if we're in a SafeContext.\n    orderedConnectionTypes.push(ConnectionType.GNOSIS_SAFE)\n\n    // Add the `selectedWallet` to the top so it's prioritized, then add the other selectable wallets.\n    if (selectedWallet) {\n      orderedConnectionTypes.push(selectedWallet)\n    }\n    orderedConnectionTypes.push(...SELECTABLE_WALLETS.filter((wallet) => wallet !== selectedWallet))\n\n    // Add network connection last as it should be the fallback.\n    orderedConnectionTypes.push(ConnectionType.NETWORK)\n\n    return orderedConnectionTypes.map((connectionType) => getConnection(connectionType))\n  }, [getConnection, selectedWallet])\n}\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,YAAY;AAC3C,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,cAAc,QAAQ,aAAa;AAE5C,MAAMC,kBAAkB,GAAG,CACzBJ,cAAc,CAACK,SAAS,EACxBL,cAAc,CAACM,QAAQ,EACvBN,cAAc,CAACO,cAAc,EAC7BP,cAAc,CAACQ,eAAe,CAC/B;AAED,eAAe,SAASC,qBAAqB,GAAG;EAAA;EAC9C,MAAMC,cAAc,GAAGP,cAAc,CAAEQ,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,cAAc,CAAC;EAC3E,MAAMG,aAAa,GAAGZ,gBAAgB,EAAE;EACxC,OAAOC,OAAO,CAAC,MAAM;IACnB,MAAMY,sBAAwC,GAAG,EAAE;;IAEnD;IACAA,sBAAsB,CAACC,IAAI,CAACf,cAAc,CAACgB,WAAW,CAAC;;IAEvD;IACA,IAAIN,cAAc,EAAE;MAClBI,sBAAsB,CAACC,IAAI,CAACL,cAAc,CAAC;IAC7C;IACAI,sBAAsB,CAACC,IAAI,CAAC,GAAGX,kBAAkB,CAACa,MAAM,CAAEC,MAAM,IAAKA,MAAM,KAAKR,cAAc,CAAC,CAAC;;IAEhG;IACAI,sBAAsB,CAACC,IAAI,CAACf,cAAc,CAACmB,OAAO,CAAC;IAEnD,OAAOL,sBAAsB,CAACM,GAAG,CAAEC,cAAc,IAAKR,aAAa,CAACQ,cAAc,CAAC,CAAC;EACtF,CAAC,EAAE,CAACR,aAAa,EAAEH,cAAc,CAAC,CAAC;AACrC;AAAC,GApBuBD,qBAAqB;EAAA,QACpBN,cAAc,EACfF,gBAAgB;AAAA"},"metadata":{},"sourceType":"module"}