{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport { SupportedChainId } from 'constants/chains';\nimport useBlockNumber, { useFastForwardBlockNumber } from 'lib/hooks/useBlockNumber';\nimport { useCallback, useEffect } from 'react';\nimport { retry, RetryableError } from 'utils/retry';\nexport function shouldCheck(lastBlockNumber, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 60000;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending longer than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\nconst RETRY_OPTIONS_BY_CHAIN_ID = {\n  [SupportedChainId.ARBITRUM_ONE]: {\n    n: 10,\n    minWait: 250,\n    maxWait: 1000\n  },\n  [SupportedChainId.ARBITRUM_GOERLI]: {\n    n: 10,\n    minWait: 250,\n    maxWait: 1000\n  },\n  [SupportedChainId.OPTIMISM]: {\n    n: 10,\n    minWait: 250,\n    maxWait: 1000\n  },\n  [SupportedChainId.OPTIMISM_GOERLI]: {\n    n: 10,\n    minWait: 250,\n    maxWait: 1000\n  }\n};\nconst DEFAULT_RETRY_OPTIONS = {\n  n: 1,\n  minWait: 0,\n  maxWait: 0\n};\nexport default function Updater(_ref) {\n  _s();\n  let {\n    pendingTransactions,\n    onCheck,\n    onReceipt\n  } = _ref;\n  const {\n    chainId,\n    provider\n  } = useWeb3React();\n  const lastBlockNumber = useBlockNumber();\n  const fastForwardBlockNumber = useFastForwardBlockNumber();\n  const getReceipt = useCallback(hash => {\n    var _RETRY_OPTIONS_BY_CHA;\n    if (!provider || !chainId) throw new Error('No provider or chainId');\n    const retryOptions = (_RETRY_OPTIONS_BY_CHA = RETRY_OPTIONS_BY_CHAIN_ID[chainId]) !== null && _RETRY_OPTIONS_BY_CHA !== void 0 ? _RETRY_OPTIONS_BY_CHA : DEFAULT_RETRY_OPTIONS;\n    return retry(() => provider.getTransactionReceipt(hash).then(receipt => {\n      if (receipt === null) {\n        console.debug(`Retrying tranasaction receipt for ${hash}`);\n        throw new RetryableError();\n      }\n      return receipt;\n    }), retryOptions);\n  }, [chainId, provider]);\n  useEffect(() => {\n    if (!chainId || !provider || !lastBlockNumber) return;\n    const cancels = Object.keys(pendingTransactions).filter(hash => shouldCheck(lastBlockNumber, pendingTransactions[hash])).map(hash => {\n      const {\n        promise,\n        cancel\n      } = getReceipt(hash);\n      promise.then(receipt => {\n        if (receipt) {\n          fastForwardBlockNumber(receipt.blockNumber);\n          onReceipt({\n            chainId,\n            hash,\n            receipt\n          });\n        } else {\n          onCheck({\n            chainId,\n            hash,\n            blockNumber: lastBlockNumber\n          });\n        }\n      }).catch(error => {\n        if (!error.isCancelledError) {\n          console.warn(`Failed to get transaction receipt for ${hash}`, error);\n        }\n      });\n      return cancel;\n    });\n    return () => {\n      cancels.forEach(cancel => cancel());\n    };\n  }, [chainId, provider, lastBlockNumber, getReceipt, onReceipt, onCheck, pendingTransactions, fastForwardBlockNumber]);\n  return null;\n}\n_s(Updater, \"ohPuTuneb8fmybelGVNV7hjkoaU=\", false, function () {\n  return [useWeb3React, useBlockNumber, useFastForwardBlockNumber];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["useWeb3React","SupportedChainId","useBlockNumber","useFastForwardBlockNumber","useCallback","useEffect","retry","RetryableError","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","RETRY_OPTIONS_BY_CHAIN_ID","ARBITRUM_ONE","n","minWait","maxWait","ARBITRUM_GOERLI","OPTIMISM","OPTIMISM_GOERLI","DEFAULT_RETRY_OPTIONS","Updater","pendingTransactions","onCheck","onReceipt","chainId","provider","fastForwardBlockNumber","getReceipt","hash","Error","retryOptions","getTransactionReceipt","then","console","debug","cancels","Object","keys","filter","map","promise","cancel","blockNumber","catch","error","isCancelledError","warn","forEach"],"sources":["/home/diep/freelance/interface/src/lib/hooks/transactions/updater.tsx"],"sourcesContent":["import { TransactionReceipt } from '@ethersproject/abstract-provider'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport useBlockNumber, { useFastForwardBlockNumber } from 'lib/hooks/useBlockNumber'\nimport ms from 'ms.macro'\nimport { useCallback, useEffect } from 'react'\nimport { retry, RetryableError, RetryOptions } from 'utils/retry'\n\ninterface Transaction {\n  addedTime: number\n  receipt?: unknown\n  lastCheckedBlockNumber?: number\n}\n\nexport function shouldCheck(lastBlockNumber: number, tx: Transaction): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / ms`1m`\n  if (minutesPending > 60) {\n    // every 10 blocks if pending longer than an hour\n    return blocksSinceCheck > 9\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending longer than 5 minutes\n    return blocksSinceCheck > 2\n  } else {\n    // otherwise every block\n    return true\n  }\n}\n\nconst RETRY_OPTIONS_BY_CHAIN_ID: { [chainId: number]: RetryOptions } = {\n  [SupportedChainId.ARBITRUM_ONE]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.ARBITRUM_GOERLI]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.OPTIMISM]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.OPTIMISM_GOERLI]: { n: 10, minWait: 250, maxWait: 1000 },\n}\nconst DEFAULT_RETRY_OPTIONS: RetryOptions = { n: 1, minWait: 0, maxWait: 0 }\n\ninterface UpdaterProps {\n  pendingTransactions: { [hash: string]: Transaction }\n  onCheck: (tx: { chainId: number; hash: string; blockNumber: number }) => void\n  onReceipt: (tx: { chainId: number; hash: string; receipt: TransactionReceipt }) => void\n}\n\nexport default function Updater({ pendingTransactions, onCheck, onReceipt }: UpdaterProps): null {\n  const { chainId, provider } = useWeb3React()\n\n  const lastBlockNumber = useBlockNumber()\n  const fastForwardBlockNumber = useFastForwardBlockNumber()\n\n  const getReceipt = useCallback(\n    (hash: string) => {\n      if (!provider || !chainId) throw new Error('No provider or chainId')\n      const retryOptions = RETRY_OPTIONS_BY_CHAIN_ID[chainId] ?? DEFAULT_RETRY_OPTIONS\n      return retry(\n        () =>\n          provider.getTransactionReceipt(hash).then((receipt) => {\n            if (receipt === null) {\n              console.debug(`Retrying tranasaction receipt for ${hash}`)\n              throw new RetryableError()\n            }\n            return receipt\n          }),\n        retryOptions\n      )\n    },\n    [chainId, provider]\n  )\n\n  useEffect(() => {\n    if (!chainId || !provider || !lastBlockNumber) return\n\n    const cancels = Object.keys(pendingTransactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, pendingTransactions[hash]))\n      .map((hash) => {\n        const { promise, cancel } = getReceipt(hash)\n        promise\n          .then((receipt) => {\n            if (receipt) {\n              fastForwardBlockNumber(receipt.blockNumber)\n              onReceipt({ chainId, hash, receipt })\n            } else {\n              onCheck({ chainId, hash, blockNumber: lastBlockNumber })\n            }\n          })\n          .catch((error) => {\n            if (!error.isCancelledError) {\n              console.warn(`Failed to get transaction receipt for ${hash}`, error)\n            }\n          })\n        return cancel\n      })\n\n    return () => {\n      cancels.forEach((cancel) => cancel())\n    }\n  }, [chainId, provider, lastBlockNumber, getReceipt, onReceipt, onCheck, pendingTransactions, fastForwardBlockNumber])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}