{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { Logger } from '@ethersproject/logger';\nimport { SwapRouter, Trade } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount, Route } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { DAI_MAINNET, USDC_MAINNET } from '../../providers/token-provider';\nimport { SWAP_ROUTER_02_ADDRESSES } from '../../util';\nimport { CurrencyAmount } from '../../util/amounts';\nimport { log } from '../../util/log';\nimport { routeToString } from '../../util/routes';\nimport { V3RouteWithValidQuote } from '../alpha-router';\nimport { V3Route } from '../router';\nimport { ADDITIONAL_BASES, BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from './bases';\n// Interface defaults to 2.\nconst MAX_HOPS = 2;\n/**\n * Replicates the router implemented in the V3 interface.\n * Code is mostly a copy from https://github.com/Uniswap/uniswap-interface/blob/0190b5a408c13016c87e1030ffc59326c085f389/src/hooks/useBestV3Trade.ts#L22-L23\n * with React/Redux hooks removed, and refactoring to allow re-use in other routers.\n */\nexport class LegacyRouter {\n  constructor(_ref) {\n    let {\n      chainId,\n      multicall2Provider,\n      poolProvider,\n      quoteProvider,\n      tokenProvider\n    } = _ref;\n    this.chainId = chainId;\n    this.multicall2Provider = multicall2Provider;\n    this.poolProvider = poolProvider;\n    this.quoteProvider = quoteProvider;\n    this.tokenProvider = tokenProvider;\n  }\n  async route(amount, quoteCurrency, swapType, swapConfig, partialRoutingConfig) {\n    if (swapType == TradeType.EXACT_INPUT) {\n      return this.routeExactIn(amount.currency, quoteCurrency, amount, swapConfig, partialRoutingConfig);\n    }\n    return this.routeExactOut(quoteCurrency, amount.currency, amount, swapConfig, partialRoutingConfig);\n  }\n  async routeExactIn(currencyIn, currencyOut, amountIn, swapConfig, routingConfig) {\n    const tokenIn = currencyIn.wrapped;\n    const tokenOut = currencyOut.wrapped;\n    const routes = await this.getAllRoutes(tokenIn, tokenOut, routingConfig);\n    const routeQuote = await this.findBestRouteExactIn(amountIn, tokenOut, routes, routingConfig);\n    if (!routeQuote) {\n      return null;\n    }\n    const trade = this.buildTrade(currencyIn, currencyOut, TradeType.EXACT_INPUT, routeQuote);\n    return {\n      quote: routeQuote.quote,\n      quoteGasAdjusted: routeQuote.quote,\n      route: [routeQuote],\n      estimatedGasUsed: BigNumber.from(0),\n      estimatedGasUsedQuoteToken: CurrencyAmount.fromFractionalAmount(tokenOut, 0, 1),\n      estimatedGasUsedUSD: CurrencyAmount.fromFractionalAmount(DAI_MAINNET, 0, 1),\n      gasPriceWei: BigNumber.from(0),\n      trade,\n      methodParameters: swapConfig ? {\n        ...this.buildMethodParameters(trade, swapConfig),\n        to: SWAP_ROUTER_02_ADDRESSES(this.chainId)\n      } : undefined,\n      blockNumber: BigNumber.from(0)\n    };\n  }\n  async routeExactOut(currencyIn, currencyOut, amountOut, swapConfig, routingConfig) {\n    const tokenIn = currencyIn.wrapped;\n    const tokenOut = currencyOut.wrapped;\n    const routes = await this.getAllRoutes(tokenIn, tokenOut, routingConfig);\n    const routeQuote = await this.findBestRouteExactOut(amountOut, tokenIn, routes, routingConfig);\n    if (!routeQuote) {\n      return null;\n    }\n    const trade = this.buildTrade(currencyIn, currencyOut, TradeType.EXACT_OUTPUT, routeQuote);\n    return {\n      quote: routeQuote.quote,\n      quoteGasAdjusted: routeQuote.quote,\n      route: [routeQuote],\n      estimatedGasUsed: BigNumber.from(0),\n      estimatedGasUsedQuoteToken: CurrencyAmount.fromFractionalAmount(tokenIn, 0, 1),\n      estimatedGasUsedUSD: CurrencyAmount.fromFractionalAmount(DAI_MAINNET, 0, 1),\n      gasPriceWei: BigNumber.from(0),\n      trade,\n      methodParameters: swapConfig ? {\n        ...this.buildMethodParameters(trade, swapConfig),\n        to: SWAP_ROUTER_02_ADDRESSES(this.chainId)\n      } : undefined,\n      blockNumber: BigNumber.from(0)\n    };\n  }\n  async findBestRouteExactIn(amountIn, tokenOut, routes, routingConfig) {\n    const {\n      routesWithQuotes: quotesRaw\n    } = await this.quoteProvider.getQuotesManyExactIn([amountIn], routes, {\n      blockNumber: routingConfig === null || routingConfig === void 0 ? void 0 : routingConfig.blockNumber\n    });\n    const quotes100Percent = _.map(quotesRaw, _ref2 => {\n      let [route, quotes] = _ref2;\n      var _a, _b;\n      return `${routeToString(route)} : ${(_b = (_a = quotes[0]) === null || _a === void 0 ? void 0 : _a.quote) === null || _b === void 0 ? void 0 : _b.toString()}`;\n    });\n    log.info({\n      quotes100Percent\n    }, '100% Quotes');\n    const bestQuote = await this.getBestQuote(routes, quotesRaw, tokenOut, TradeType.EXACT_INPUT);\n    return bestQuote;\n  }\n  async findBestRouteExactOut(amountOut, tokenIn, routes, routingConfig) {\n    const {\n      routesWithQuotes: quotesRaw\n    } = await this.quoteProvider.getQuotesManyExactOut([amountOut], routes, {\n      blockNumber: routingConfig === null || routingConfig === void 0 ? void 0 : routingConfig.blockNumber\n    });\n    const bestQuote = await this.getBestQuote(routes, quotesRaw, tokenIn, TradeType.EXACT_OUTPUT);\n    return bestQuote;\n  }\n  async getBestQuote(routes, quotesRaw, quoteToken, routeType) {\n    log.debug(`Got ${_.filter(quotesRaw, _ref3 => {\n      let [_, quotes] = _ref3;\n      return !!quotes[0];\n    }).length} valid quotes from ${routes.length} possible routes.`);\n    const routeQuotesRaw = [];\n    for (let i = 0; i < quotesRaw.length; i++) {\n      const [route, quotes] = quotesRaw[i];\n      const {\n        quote,\n        amount\n      } = quotes[0];\n      if (!quote) {\n        Logger.globalLogger().debug(`No quote for ${routeToString(route)}`);\n        continue;\n      }\n      routeQuotesRaw.push({\n        route,\n        quote,\n        amount\n      });\n    }\n    if (routeQuotesRaw.length == 0) {\n      return null;\n    }\n    routeQuotesRaw.sort((routeQuoteA, routeQuoteB) => {\n      if (routeType == TradeType.EXACT_INPUT) {\n        return routeQuoteA.quote.gt(routeQuoteB.quote) ? -1 : 1;\n      } else {\n        return routeQuoteA.quote.lt(routeQuoteB.quote) ? -1 : 1;\n      }\n    });\n    const routeQuotes = _.map(routeQuotesRaw, _ref4 => {\n      let {\n        route,\n        quote,\n        amount\n      } = _ref4;\n      return new V3RouteWithValidQuote({\n        route,\n        rawQuote: quote,\n        amount,\n        percent: 100,\n        gasModel: {\n          estimateGasCost: () => ({\n            gasCostInToken: CurrencyAmount.fromRawAmount(quoteToken, 0),\n            gasCostInUSD: CurrencyAmount.fromRawAmount(USDC_MAINNET, 0),\n            gasEstimate: BigNumber.from(0)\n          })\n        },\n        sqrtPriceX96AfterList: [],\n        initializedTicksCrossedList: [],\n        quoterGasEstimate: BigNumber.from(0),\n        tradeType: routeType,\n        quoteToken,\n        v3PoolProvider: this.poolProvider\n      });\n    });\n    for (const rq of routeQuotes) {\n      log.debug(`Quote: ${rq.amount.toFixed(Math.min(rq.amount.currency.decimals, 2))} Route: ${routeToString(rq.route)}`);\n    }\n    return routeQuotes[0];\n  }\n  async getAllRoutes(tokenIn, tokenOut, routingConfig) {\n    const tokenPairs = await this.getAllPossiblePairings(tokenIn, tokenOut);\n    const poolAccessor = await this.poolProvider.getPools(tokenPairs, {\n      blockNumber: routingConfig === null || routingConfig === void 0 ? void 0 : routingConfig.blockNumber\n    });\n    const pools = poolAccessor.getAllPools();\n    const routes = this.computeAllRoutes(tokenIn, tokenOut, pools, this.chainId, [], [], tokenIn, MAX_HOPS);\n    log.info({\n      routes: _.map(routes, routeToString)\n    }, `Computed ${routes.length} possible routes.`);\n    return routes;\n  }\n  async getAllPossiblePairings(tokenIn, tokenOut) {\n    var _a, _b, _c, _d, _e;\n    const common = (_a = BASES_TO_CHECK_TRADES_AGAINST(this.tokenProvider)[this.chainId]) !== null && _a !== void 0 ? _a : [];\n    const additionalA = (_c = (_b = (await ADDITIONAL_BASES(this.tokenProvider))[this.chainId]) === null || _b === void 0 ? void 0 : _b[tokenIn.address]) !== null && _c !== void 0 ? _c : [];\n    const additionalB = (_e = (_d = (await ADDITIONAL_BASES(this.tokenProvider))[this.chainId]) === null || _d === void 0 ? void 0 : _d[tokenOut.address]) !== null && _e !== void 0 ? _e : [];\n    const bases = [...common, ...additionalA, ...additionalB];\n    const basePairs = _.flatMap(bases, base => bases.map(otherBase => [base, otherBase]));\n    const customBases = (await CUSTOM_BASES(this.tokenProvider))[this.chainId];\n    const allPairs = _([\n    // the direct pair\n    [tokenIn, tokenOut],\n    // token A against all bases\n    ...bases.map(base => [tokenIn, base]),\n    // token B against all bases\n    ...bases.map(base => [tokenOut, base]),\n    // each base against all bases\n    ...basePairs]).filter(tokens => Boolean(tokens[0] && tokens[1])).filter(_ref5 => {\n      let [tokenA, tokenB] = _ref5;\n      return tokenA.address !== tokenB.address && !tokenA.equals(tokenB);\n    }).filter(_ref6 => {\n      let [tokenA, tokenB] = _ref6;\n      const customBasesA = customBases === null || customBases === void 0 ? void 0 : customBases[tokenA.address];\n      const customBasesB = customBases === null || customBases === void 0 ? void 0 : customBases[tokenB.address];\n      if (!customBasesA && !customBasesB) return true;\n      if (customBasesA && !customBasesA.find(base => tokenB.equals(base))) return false;\n      if (customBasesB && !customBasesB.find(base => tokenA.equals(base))) return false;\n      return true;\n    }).flatMap(_ref7 => {\n      let [tokenA, tokenB] = _ref7;\n      return [[tokenA, tokenB, FeeAmount.LOW], [tokenA, tokenB, FeeAmount.MEDIUM], [tokenA, tokenB, FeeAmount.HIGH]];\n    }).value();\n    return allPairs;\n  }\n  computeAllRoutes(tokenIn, tokenOut, pools, chainId) {\n    let currentPath = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    let allPaths = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];\n    let startTokenIn = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : tokenIn;\n    let maxHops = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 2;\n    for (const pool of pools) {\n      if (currentPath.indexOf(pool) !== -1 || !pool.involvesToken(tokenIn)) continue;\n      const outputToken = pool.token0.equals(tokenIn) ? pool.token1 : pool.token0;\n      if (outputToken.equals(tokenOut)) {\n        allPaths.push(new V3Route([...currentPath, pool], startTokenIn, tokenOut));\n      } else if (maxHops > 1) {\n        this.computeAllRoutes(outputToken, tokenOut, pools, chainId, [...currentPath, pool], allPaths, startTokenIn, maxHops - 1);\n      }\n    }\n    return allPaths;\n  }\n  buildTrade(tokenInCurrency, tokenOutCurrency, tradeType, routeAmount) {\n    const {\n      route,\n      amount,\n      quote\n    } = routeAmount;\n    // The route, amount and quote are all in terms of wrapped tokens.\n    // When constructing the Trade object the inputAmount/outputAmount must\n    // use native currencies if necessary. This is so that the Trade knows to wrap/unwrap.\n    if (tradeType == TradeType.EXACT_INPUT) {\n      const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n      const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n      const routeCurrency = new Route(route.pools, amountCurrency.currency, quoteCurrency.currency);\n      return new Trade({\n        v3Routes: [{\n          routev3: routeCurrency,\n          inputAmount: amountCurrency,\n          outputAmount: quoteCurrency\n        }],\n        v2Routes: [],\n        tradeType: tradeType\n      });\n    } else {\n      const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n      const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n      const routeCurrency = new Route(route.pools, quoteCurrency.currency, amountCurrency.currency);\n      return new Trade({\n        v3Routes: [{\n          routev3: routeCurrency,\n          inputAmount: quoteCurrency,\n          outputAmount: amountCurrency\n        }],\n        v2Routes: [],\n        tradeType: tradeType\n      });\n    }\n  }\n  buildMethodParameters(trade, swapConfig) {\n    const {\n      recipient,\n      slippageTolerance,\n      deadline\n    } = swapConfig;\n    const methodParameters = SwapRouter.swapCallParameters(trade, {\n      recipient,\n      slippageTolerance,\n      deadlineOrPreviousBlockhash: deadline\n      // ...(signatureData\n      //   ? {\n      //       inputTokenPermit:\n      //         'allowed' in signatureData\n      //           ? {\n      //               expiry: signatureData.deadline,\n      //               nonce: signatureData.nonce,\n      //               s: signatureData.s,\n      //               r: signatureData.r,\n      //               v: signatureData.v as any,\n      //             }\n      //           : {\n      //               deadline: signatureData.deadline,\n      //               amount: signatureData.amount,\n      //               s: signatureData.s,\n      //               r: signatureData.r,\n      //               v: signatureData.v as any,\n      //             },\n      //     }\n      //   : {}),\n    });\n\n    return methodParameters;\n  }\n}","map":{"version":3,"sources":["../../../../src/routers/legacy-router/legacy-router.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,0BAA0B;AACpD,SAAS,MAAM,QAAQ,uBAAuB;AAC9C,SAAS,UAAU,EAAE,KAAK,QAAQ,qBAAqB;AACvD,SAA0B,SAAS,QAAQ,mBAAmB;AAC9D,SAAS,SAAS,EAA0B,KAAK,QAAQ,iBAAiB;AAC1E,OAAO,CAAC,MAAM,QAAQ;AAItB,SACE,WAAW,EAEX,YAAY,QACP,gCAAgC;AAEvC,SAAS,wBAAwB,QAAQ,YAAY;AACrD,SAAS,cAAc,QAAQ,oBAAoB;AAEnD,SAAS,GAAG,QAAQ,gBAAgB;AACpC,SAAS,aAAa,QAAQ,mBAAmB;AACjD,SAAS,qBAAqB,QAAQ,iBAAiB;AACvD,SAA6C,OAAO,QAAQ,WAAW;AAEvE,SACE,gBAAgB,EAChB,6BAA6B,EAC7B,YAAY,QACP,SAAS;AAUhB;AACA,MAAM,QAAQ,GAAG,CAAC;AAMlB;;;;AAIG;AACH,OAAM,MAAO,YAAY,CAAA;EAOvB,WAAA,OAMqB;IAAA,IANT;MACV,OAAO;MACP,kBAAkB;MAClB,YAAY;MACZ,aAAa;MACb;IAAa,CACM;IACnB,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,kBAAkB,GAAG,kBAAkB;IAC5C,IAAI,CAAC,YAAY,GAAG,YAAY;IAChC,IAAI,CAAC,aAAa,GAAG,aAAa;IAClC,IAAI,CAAC,aAAa,GAAG,aAAa;EACpC;EACO,MAAM,KAAK,CAChB,MAAsB,EACtB,aAAuB,EACvB,QAAmB,EACnB,UAAoC,EACpC,oBAAmD,EAAA;IAEnD,IAAI,QAAQ,IAAI,SAAS,CAAC,WAAW,EAAE;MACrC,OAAO,IAAI,CAAC,YAAY,CACtB,MAAM,CAAC,QAAQ,EACf,aAAa,EACb,MAAM,EACN,UAAU,EACV,oBAAoB,CACrB;IACF;IAED,OAAO,IAAI,CAAC,aAAa,CACvB,aAAa,EACb,MAAM,CAAC,QAAQ,EACf,MAAM,EACN,UAAU,EACV,oBAAoB,CACrB;EACH;EAEO,MAAM,YAAY,CACvB,UAAoB,EACpB,WAAqB,EACrB,QAAwB,EACxB,UAAoC,EACpC,aAAmC,EAAA;IAEnC,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO;IAClC,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO;IACpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC;IACxE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAChD,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,aAAa,CACd;IAED,IAAI,CAAC,UAAU,EAAE;MACf,OAAO,IAAI;IACZ;IAED,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAC3B,UAAU,EACV,WAAW,EACX,SAAS,CAAC,WAAW,EACrB,UAAU,CACX;IAED,OAAO;MACL,KAAK,EAAE,UAAU,CAAC,KAAK;MACvB,gBAAgB,EAAE,UAAU,CAAC,KAAK;MAClC,KAAK,EAAE,CAAC,UAAU,CAAC;MACnB,gBAAgB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;MACnC,0BAA0B,EAAE,cAAc,CAAC,oBAAoB,CAC7D,QAAQ,EACR,CAAC,EACD,CAAC,CACF;MACD,mBAAmB,EAAE,cAAc,CAAC,oBAAoB,CACtD,WAAY,EACZ,CAAC,EACD,CAAC,CACF;MACD,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;MAC9B,KAAK;MACL,gBAAgB,EAAE,UAAU,GACxB;QACE,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,CAAC;QAChD,EAAE,EAAE,wBAAwB,CAAC,IAAI,CAAC,OAAO;OAC1C,GACD,SAAS;MACb,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;KAC9B;EACH;EAEO,MAAM,aAAa,CACxB,UAAoB,EACpB,WAAqB,EACrB,SAAyB,EACzB,UAAoC,EACpC,aAAmC,EAAA;IAEnC,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO;IAClC,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO;IACpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,CAAC;IACxE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,qBAAqB,CACjD,SAAS,EACT,OAAO,EACP,MAAM,EACN,aAAa,CACd;IAED,IAAI,CAAC,UAAU,EAAE;MACf,OAAO,IAAI;IACZ;IAED,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAC3B,UAAU,EACV,WAAW,EACX,SAAS,CAAC,YAAY,EACtB,UAAU,CACX;IAED,OAAO;MACL,KAAK,EAAE,UAAU,CAAC,KAAK;MACvB,gBAAgB,EAAE,UAAU,CAAC,KAAK;MAClC,KAAK,EAAE,CAAC,UAAU,CAAC;MACnB,gBAAgB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;MACnC,0BAA0B,EAAE,cAAc,CAAC,oBAAoB,CAC7D,OAAO,EACP,CAAC,EACD,CAAC,CACF;MACD,mBAAmB,EAAE,cAAc,CAAC,oBAAoB,CACtD,WAAW,EACX,CAAC,EACD,CAAC,CACF;MACD,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;MAC9B,KAAK;MACL,gBAAgB,EAAE,UAAU,GACxB;QACE,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,UAAU,CAAC;QAChD,EAAE,EAAE,wBAAwB,CAAC,IAAI,CAAC,OAAO;OAC1C,GACD,SAAS;MACb,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;KAC9B;EACH;EAEQ,MAAM,oBAAoB,CAChC,QAAwB,EACxB,QAAe,EACf,MAAiB,EACjB,aAAmC,EAAA;IAEnC,MAAM;MAAE,gBAAgB,EAAE;IAAS,CAAE,GACnC,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAC3C,CAAC,QAAQ,CAAC,EACV,MAAM,EACN;MACE,WAAW,EAAE,aAAa,KAAA,IAAA,IAAb,aAAa,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,aAAa,CAAE;KAC7B,CACF;IAEH,MAAM,gBAAgB,GAAG,CAAC,CAAC,GAAG,CAC5B,SAAS,EACT,SAA8C;MAAA,IAA7C,CAAC,KAAK,EAAE,MAAM,CAA2B;MAAI,IAAA,EAAA,EAAA,EAAA;MAC5C,OAAA,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAM,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,QAAQ,EAAE,EAAE;IAAA,CAAA,CAC9D;IACD,GAAG,CAAC,IAAI,CAAC;MAAE;IAAgB,CAAE,EAAE,aAAa,CAAC;IAE7C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CACvC,MAAM,EACN,SAAS,EACT,QAAQ,EACR,SAAS,CAAC,WAAW,CACtB;IAED,OAAO,SAAS;EAClB;EAEQ,MAAM,qBAAqB,CACjC,SAAyB,EACzB,OAAc,EACd,MAAiB,EACjB,aAAmC,EAAA;IAEnC,MAAM;MAAE,gBAAgB,EAAE;IAAS,CAAE,GACnC,MAAM,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAC5C,CAAC,SAAS,CAAC,EACX,MAAM,EACN;MACE,WAAW,EAAE,aAAa,KAAA,IAAA,IAAb,aAAa,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,aAAa,CAAE;KAC7B,CACF;IACH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,CACvC,MAAM,EACN,SAAS,EACT,OAAO,EACP,SAAS,CAAC,YAAY,CACvB;IAED,OAAO,SAAS;EAClB;EAEQ,MAAM,YAAY,CACxB,MAAiB,EACjB,SAAqC,EACrC,UAAiB,EACjB,SAAoB,EAAA;IAEpB,GAAG,CAAC,KAAK,CACP,OACE,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE;MAAA,IAAC,CAAC,CAAC,EAAE,MAAM,CAAC;MAAA,OAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IAAA,EAAC,CAAC,MACpD,sBAAsB,MAAM,CAAC,MAAM,mBAAmB,CACvD;IAED,MAAM,cAAc,GAId,EAAE;IAER,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;MACzC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAE;MACrC,MAAM;QAAE,KAAK;QAAE;MAAM,CAAE,GAAG,MAAM,CAAC,CAAC,CAAE;MAEpC,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,gBAAgB,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC;QACnE;MACD;MAED,cAAc,CAAC,IAAI,CAAC;QAAE,KAAK;QAAE,KAAK;QAAE;MAAM,CAAE,CAAC;IAC9C;IAED,IAAI,cAAc,CAAC,MAAM,IAAI,CAAC,EAAE;MAC9B,OAAO,IAAI;IACZ;IAED,cAAc,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,WAAW,KAAI;MAC/C,IAAI,SAAS,IAAI,SAAS,CAAC,WAAW,EAAE;QACtC,OAAO,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;OACxD,MAAM;QACL,OAAO,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MACxD;IACH,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,SAA6B;MAAA,IAA5B;QAAE,KAAK;QAAE,KAAK;QAAE;MAAM,CAAE;MACjE,OAAO,IAAI,qBAAqB,CAAC;QAC/B,KAAK;QACL,QAAQ,EAAE,KAAK;QACf,MAAM;QACN,OAAO,EAAE,GAAG;QACZ,QAAQ,EAAE;UACR,eAAe,EAAE,OAAO;YACtB,cAAc,EAAE,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC,CAAC;YAC3D,YAAY,EAAE,cAAc,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,CAAC;YAC3D,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;WAC9B;SACF;QACD,qBAAqB,EAAE,EAAE;QACzB,2BAA2B,EAAE,EAAE;QAC/B,iBAAiB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACpC,SAAS,EAAE,SAAS;QACpB,UAAU;QACV,cAAc,EAAE,IAAI,CAAC;OACtB,CAAC;IACJ,CAAC,CAAC;IAEF,KAAK,MAAM,EAAE,IAAI,WAAW,EAAE;MAC5B,GAAG,CAAC,KAAK,CACP,UAAU,EAAE,CAAC,MAAM,CAAC,OAAO,CACzB,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CACzC,WAAW,aAAa,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CACtC;IACF;IAED,OAAO,WAAW,CAAC,CAAC,CAAE;EACxB;EAEQ,MAAM,YAAY,CACxB,OAAc,EACd,QAAe,EACf,aAAmC,EAAA;IAEnC,MAAM,UAAU,GACd,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,EAAE,QAAQ,CAAC;IAEtD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,EAAE;MAChE,WAAW,EAAE,aAAa,KAAA,IAAA,IAAb,aAAa,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAb,aAAa,CAAE;KAC7B,CAAC;IACF,MAAM,KAAK,GAAG,YAAY,CAAC,WAAW,EAAE;IAExC,MAAM,MAAM,GAAc,IAAI,CAAC,gBAAgB,CAC7C,OAAO,EACP,QAAQ,EACR,KAAK,EACL,IAAI,CAAC,OAAO,EACZ,EAAE,EACF,EAAE,EACF,OAAO,EACP,QAAQ,CACT;IAED,GAAG,CAAC,IAAI,CACN;MAAE,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa;IAAC,CAAE,EACxC,YAAY,MAAM,CAAC,MAAM,mBAAmB,CAC7C;IAED,OAAO,MAAM;EACf;EAEQ,MAAM,sBAAsB,CAClC,OAAc,EACd,QAAe,EAAA;;IAEf,MAAM,MAAM,GACV,CAAA,EAAA,GAAA,6BAA6B,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IACvE,MAAM,WAAW,GACf,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,MAAM,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CACxD,OAAO,CAAC,OAAO,CAChB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IACT,MAAM,WAAW,GACf,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAC,MAAM,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CACxD,QAAQ,CAAC,OAAO,CACjB,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,EAAE;IACT,MAAM,KAAK,GAAG,CAAC,GAAG,MAAM,EAAE,GAAG,WAAW,EAAE,GAAG,WAAW,CAAC;IAEzD,MAAM,SAAS,GAAqB,CAAC,CAAC,OAAO,CAC3C,KAAK,EACJ,IAAI,IAAuB,KAAK,CAAC,GAAG,CAAE,SAAS,IAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CACxE;IAED,MAAM,WAAW,GAAG,CAAC,MAAM,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC;IAE1E,MAAM,QAAQ,GAAgC,CAAC,CAAC;IAC9C;IACA,CAAC,OAAO,EAAE,QAAQ,CAAC;IACnB;IACA,GAAG,KAAK,CAAC,GAAG,CAAE,IAAI,IAAqB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IACvD;IACA,GAAG,KAAK,CAAC,GAAG,CAAE,IAAI,IAAqB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACxD;IACA,GAAG,SAAS,CACb,CAAC,CACC,MAAM,CAAE,MAAM,IACb,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAChC,CACA,MAAM,CACL;MAAA,IAAC,CAAC,MAAM,EAAE,MAAM,CAAC;MAAA,OACf,MAAM,CAAC,OAAO,KAAK,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;IAAA,EAC9D,CACA,MAAM,CAAC,SAAqB;MAAA,IAApB,CAAC,MAAM,EAAE,MAAM,CAAC;MACvB,MAAM,YAAY,GAAwB,WAAW,KAAA,IAAA,IAAX,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,WAAW,CAAG,MAAM,CAAC,OAAO,CAAC;MACvE,MAAM,YAAY,GAAwB,WAAW,KAAA,IAAA,IAAX,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAX,WAAW,CAAG,MAAM,CAAC,OAAO,CAAC;MAEvE,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,EAAE,OAAO,IAAI;MAE/C,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE,IAAI,IAAK,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EACnE,OAAO,KAAK;MACd,IAAI,YAAY,IAAI,CAAC,YAAY,CAAC,IAAI,CAAE,IAAI,IAAK,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EACnE,OAAO,KAAK;MAEd,OAAO,IAAI;IACb,CAAC,CAAC,CACD,OAAO,CAA4B,SAAqB;MAAA,IAApB,CAAC,MAAM,EAAE,MAAM,CAAC;MACnD,OAAO,CACL,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,GAAG,CAAC,EAC/B,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,EAClC,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,CACjC;IACH,CAAC,CAAC,CACD,KAAK,EAAE;IAEV,OAAO,QAAQ;EACjB;EAEQ,gBAAgB,CACtB,OAAc,EACd,QAAe,EACf,KAAa,EACb,OAAgB,EAIL;IAAA,IAHX,WAAA,uEAAsB,EAAE;IAAA,IACxB,QAAA,uEAAsB,EAAE;IAAA,IACxB,YAAA,uEAAsB,OAAO;IAAA,IAC7B,OAAO,uEAAG,CAAC;IAEX,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;MACxB,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAClE;MAEF,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAC3C,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,MAAM;MACf,IAAI,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;QAChC,QAAQ,CAAC,IAAI,CACX,IAAI,OAAO,CAAC,CAAC,GAAG,WAAW,EAAE,IAAI,CAAC,EAAE,YAAY,EAAE,QAAQ,CAAC,CAC5D;OACF,MAAM,IAAI,OAAO,GAAG,CAAC,EAAE;QACtB,IAAI,CAAC,gBAAgB,CACnB,WAAW,EACX,QAAQ,EACR,KAAK,EACL,OAAO,EACP,CAAC,GAAG,WAAW,EAAE,IAAI,CAAC,EACtB,QAAQ,EACR,YAAY,EACZ,OAAO,GAAG,CAAC,CACZ;MACF;IACF;IAED,OAAO,QAAQ;EACjB;EAEQ,UAAU,CAChB,eAAyB,EACzB,gBAA0B,EAC1B,SAAqB,EACrB,WAAkC,EAAA;IAElC,MAAM;MAAE,KAAK;MAAE,MAAM;MAAE;IAAK,CAAE,GAAG,WAAW;IAE5C;IACA;IACA;IACA,IAAI,SAAS,IAAI,SAAS,CAAC,WAAW,EAAE;MACtC,MAAM,cAAc,GAAG,cAAc,CAAC,oBAAoB,CACxD,eAAe,EACf,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,WAAW,CACnB;MACD,MAAM,aAAa,GAAG,cAAc,CAAC,oBAAoB,CACvD,gBAAgB,EAChB,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,WAAW,CAClB;MAED,MAAM,aAAa,GAAG,IAAI,KAAK,CAC7B,KAAK,CAAC,KAAK,EACX,cAAc,CAAC,QAAQ,EACvB,aAAa,CAAC,QAAQ,CACvB;MAED,OAAO,IAAI,KAAK,CAAC;QACf,QAAQ,EAAE,CACR;UACE,OAAO,EAAE,aAAa;UACtB,WAAW,EAAE,cAAc;UAC3B,YAAY,EAAE;SACf,CACF;QACD,QAAQ,EAAE,EAAE;QACZ,SAAS,EAAE;OACZ,CAAC;KACH,MAAM;MACL,MAAM,aAAa,GAAG,cAAc,CAAC,oBAAoB,CACvD,eAAe,EACf,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,WAAW,CAClB;MAED,MAAM,cAAc,GAAG,cAAc,CAAC,oBAAoB,CACxD,gBAAgB,EAChB,MAAM,CAAC,SAAS,EAChB,MAAM,CAAC,WAAW,CACnB;MAED,MAAM,aAAa,GAAG,IAAI,KAAK,CAC7B,KAAK,CAAC,KAAK,EACX,aAAa,CAAC,QAAQ,EACtB,cAAc,CAAC,QAAQ,CACxB;MAED,OAAO,IAAI,KAAK,CAAC;QACf,QAAQ,EAAE,CACR;UACE,OAAO,EAAE,aAAa;UACtB,WAAW,EAAE,aAAa;UAC1B,YAAY,EAAE;SACf,CACF;QACD,QAAQ,EAAE,EAAE;QACZ,SAAS,EAAE;OACZ,CAAC;IACH;EACH;EAEQ,qBAAqB,CAC3B,KAA4C,EAC5C,UAAmC,EAAA;IAEnC,MAAM;MAAE,SAAS;MAAE,iBAAiB;MAAE;IAAQ,CAAE,GAAG,UAAU;IAE7D,MAAM,gBAAgB,GAAG,UAAU,CAAC,kBAAkB,CAAC,KAAK,EAAE;MAC5D,SAAS;MACT,iBAAiB;MACjB,2BAA2B,EAAE;MAC7B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;KACD,CAAC;;IAEF,OAAO,gBAAgB;EACzB;AACD","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { Logger } from '@ethersproject/logger';\nimport { SwapRouter, Trade } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount, Route } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { DAI_MAINNET, USDC_MAINNET, } from '../../providers/token-provider';\nimport { SWAP_ROUTER_02_ADDRESSES } from '../../util';\nimport { CurrencyAmount } from '../../util/amounts';\nimport { log } from '../../util/log';\nimport { routeToString } from '../../util/routes';\nimport { V3RouteWithValidQuote } from '../alpha-router';\nimport { V3Route } from '../router';\nimport { ADDITIONAL_BASES, BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES, } from './bases';\n// Interface defaults to 2.\nconst MAX_HOPS = 2;\n/**\n * Replicates the router implemented in the V3 interface.\n * Code is mostly a copy from https://github.com/Uniswap/uniswap-interface/blob/0190b5a408c13016c87e1030ffc59326c085f389/src/hooks/useBestV3Trade.ts#L22-L23\n * with React/Redux hooks removed, and refactoring to allow re-use in other routers.\n */\nexport class LegacyRouter {\n    constructor({ chainId, multicall2Provider, poolProvider, quoteProvider, tokenProvider, }) {\n        this.chainId = chainId;\n        this.multicall2Provider = multicall2Provider;\n        this.poolProvider = poolProvider;\n        this.quoteProvider = quoteProvider;\n        this.tokenProvider = tokenProvider;\n    }\n    async route(amount, quoteCurrency, swapType, swapConfig, partialRoutingConfig) {\n        if (swapType == TradeType.EXACT_INPUT) {\n            return this.routeExactIn(amount.currency, quoteCurrency, amount, swapConfig, partialRoutingConfig);\n        }\n        return this.routeExactOut(quoteCurrency, amount.currency, amount, swapConfig, partialRoutingConfig);\n    }\n    async routeExactIn(currencyIn, currencyOut, amountIn, swapConfig, routingConfig) {\n        const tokenIn = currencyIn.wrapped;\n        const tokenOut = currencyOut.wrapped;\n        const routes = await this.getAllRoutes(tokenIn, tokenOut, routingConfig);\n        const routeQuote = await this.findBestRouteExactIn(amountIn, tokenOut, routes, routingConfig);\n        if (!routeQuote) {\n            return null;\n        }\n        const trade = this.buildTrade(currencyIn, currencyOut, TradeType.EXACT_INPUT, routeQuote);\n        return {\n            quote: routeQuote.quote,\n            quoteGasAdjusted: routeQuote.quote,\n            route: [routeQuote],\n            estimatedGasUsed: BigNumber.from(0),\n            estimatedGasUsedQuoteToken: CurrencyAmount.fromFractionalAmount(tokenOut, 0, 1),\n            estimatedGasUsedUSD: CurrencyAmount.fromFractionalAmount(DAI_MAINNET, 0, 1),\n            gasPriceWei: BigNumber.from(0),\n            trade,\n            methodParameters: swapConfig\n                ? {\n                    ...this.buildMethodParameters(trade, swapConfig),\n                    to: SWAP_ROUTER_02_ADDRESSES(this.chainId),\n                }\n                : undefined,\n            blockNumber: BigNumber.from(0),\n        };\n    }\n    async routeExactOut(currencyIn, currencyOut, amountOut, swapConfig, routingConfig) {\n        const tokenIn = currencyIn.wrapped;\n        const tokenOut = currencyOut.wrapped;\n        const routes = await this.getAllRoutes(tokenIn, tokenOut, routingConfig);\n        const routeQuote = await this.findBestRouteExactOut(amountOut, tokenIn, routes, routingConfig);\n        if (!routeQuote) {\n            return null;\n        }\n        const trade = this.buildTrade(currencyIn, currencyOut, TradeType.EXACT_OUTPUT, routeQuote);\n        return {\n            quote: routeQuote.quote,\n            quoteGasAdjusted: routeQuote.quote,\n            route: [routeQuote],\n            estimatedGasUsed: BigNumber.from(0),\n            estimatedGasUsedQuoteToken: CurrencyAmount.fromFractionalAmount(tokenIn, 0, 1),\n            estimatedGasUsedUSD: CurrencyAmount.fromFractionalAmount(DAI_MAINNET, 0, 1),\n            gasPriceWei: BigNumber.from(0),\n            trade,\n            methodParameters: swapConfig\n                ? {\n                    ...this.buildMethodParameters(trade, swapConfig),\n                    to: SWAP_ROUTER_02_ADDRESSES(this.chainId),\n                }\n                : undefined,\n            blockNumber: BigNumber.from(0),\n        };\n    }\n    async findBestRouteExactIn(amountIn, tokenOut, routes, routingConfig) {\n        const { routesWithQuotes: quotesRaw } = await this.quoteProvider.getQuotesManyExactIn([amountIn], routes, {\n            blockNumber: routingConfig === null || routingConfig === void 0 ? void 0 : routingConfig.blockNumber,\n        });\n        const quotes100Percent = _.map(quotesRaw, ([route, quotes]) => { var _a, _b; return `${routeToString(route)} : ${(_b = (_a = quotes[0]) === null || _a === void 0 ? void 0 : _a.quote) === null || _b === void 0 ? void 0 : _b.toString()}`; });\n        log.info({ quotes100Percent }, '100% Quotes');\n        const bestQuote = await this.getBestQuote(routes, quotesRaw, tokenOut, TradeType.EXACT_INPUT);\n        return bestQuote;\n    }\n    async findBestRouteExactOut(amountOut, tokenIn, routes, routingConfig) {\n        const { routesWithQuotes: quotesRaw } = await this.quoteProvider.getQuotesManyExactOut([amountOut], routes, {\n            blockNumber: routingConfig === null || routingConfig === void 0 ? void 0 : routingConfig.blockNumber,\n        });\n        const bestQuote = await this.getBestQuote(routes, quotesRaw, tokenIn, TradeType.EXACT_OUTPUT);\n        return bestQuote;\n    }\n    async getBestQuote(routes, quotesRaw, quoteToken, routeType) {\n        log.debug(`Got ${_.filter(quotesRaw, ([_, quotes]) => !!quotes[0]).length} valid quotes from ${routes.length} possible routes.`);\n        const routeQuotesRaw = [];\n        for (let i = 0; i < quotesRaw.length; i++) {\n            const [route, quotes] = quotesRaw[i];\n            const { quote, amount } = quotes[0];\n            if (!quote) {\n                Logger.globalLogger().debug(`No quote for ${routeToString(route)}`);\n                continue;\n            }\n            routeQuotesRaw.push({ route, quote, amount });\n        }\n        if (routeQuotesRaw.length == 0) {\n            return null;\n        }\n        routeQuotesRaw.sort((routeQuoteA, routeQuoteB) => {\n            if (routeType == TradeType.EXACT_INPUT) {\n                return routeQuoteA.quote.gt(routeQuoteB.quote) ? -1 : 1;\n            }\n            else {\n                return routeQuoteA.quote.lt(routeQuoteB.quote) ? -1 : 1;\n            }\n        });\n        const routeQuotes = _.map(routeQuotesRaw, ({ route, quote, amount }) => {\n            return new V3RouteWithValidQuote({\n                route,\n                rawQuote: quote,\n                amount,\n                percent: 100,\n                gasModel: {\n                    estimateGasCost: () => ({\n                        gasCostInToken: CurrencyAmount.fromRawAmount(quoteToken, 0),\n                        gasCostInUSD: CurrencyAmount.fromRawAmount(USDC_MAINNET, 0),\n                        gasEstimate: BigNumber.from(0),\n                    }),\n                },\n                sqrtPriceX96AfterList: [],\n                initializedTicksCrossedList: [],\n                quoterGasEstimate: BigNumber.from(0),\n                tradeType: routeType,\n                quoteToken,\n                v3PoolProvider: this.poolProvider,\n            });\n        });\n        for (const rq of routeQuotes) {\n            log.debug(`Quote: ${rq.amount.toFixed(Math.min(rq.amount.currency.decimals, 2))} Route: ${routeToString(rq.route)}`);\n        }\n        return routeQuotes[0];\n    }\n    async getAllRoutes(tokenIn, tokenOut, routingConfig) {\n        const tokenPairs = await this.getAllPossiblePairings(tokenIn, tokenOut);\n        const poolAccessor = await this.poolProvider.getPools(tokenPairs, {\n            blockNumber: routingConfig === null || routingConfig === void 0 ? void 0 : routingConfig.blockNumber,\n        });\n        const pools = poolAccessor.getAllPools();\n        const routes = this.computeAllRoutes(tokenIn, tokenOut, pools, this.chainId, [], [], tokenIn, MAX_HOPS);\n        log.info({ routes: _.map(routes, routeToString) }, `Computed ${routes.length} possible routes.`);\n        return routes;\n    }\n    async getAllPossiblePairings(tokenIn, tokenOut) {\n        var _a, _b, _c, _d, _e;\n        const common = (_a = BASES_TO_CHECK_TRADES_AGAINST(this.tokenProvider)[this.chainId]) !== null && _a !== void 0 ? _a : [];\n        const additionalA = (_c = (_b = (await ADDITIONAL_BASES(this.tokenProvider))[this.chainId]) === null || _b === void 0 ? void 0 : _b[tokenIn.address]) !== null && _c !== void 0 ? _c : [];\n        const additionalB = (_e = (_d = (await ADDITIONAL_BASES(this.tokenProvider))[this.chainId]) === null || _d === void 0 ? void 0 : _d[tokenOut.address]) !== null && _e !== void 0 ? _e : [];\n        const bases = [...common, ...additionalA, ...additionalB];\n        const basePairs = _.flatMap(bases, (base) => bases.map((otherBase) => [base, otherBase]));\n        const customBases = (await CUSTOM_BASES(this.tokenProvider))[this.chainId];\n        const allPairs = _([\n            // the direct pair\n            [tokenIn, tokenOut],\n            // token A against all bases\n            ...bases.map((base) => [tokenIn, base]),\n            // token B against all bases\n            ...bases.map((base) => [tokenOut, base]),\n            // each base against all bases\n            ...basePairs,\n        ])\n            .filter((tokens) => Boolean(tokens[0] && tokens[1]))\n            .filter(([tokenA, tokenB]) => tokenA.address !== tokenB.address && !tokenA.equals(tokenB))\n            .filter(([tokenA, tokenB]) => {\n            const customBasesA = customBases === null || customBases === void 0 ? void 0 : customBases[tokenA.address];\n            const customBasesB = customBases === null || customBases === void 0 ? void 0 : customBases[tokenB.address];\n            if (!customBasesA && !customBasesB)\n                return true;\n            if (customBasesA && !customBasesA.find((base) => tokenB.equals(base)))\n                return false;\n            if (customBasesB && !customBasesB.find((base) => tokenA.equals(base)))\n                return false;\n            return true;\n        })\n            .flatMap(([tokenA, tokenB]) => {\n            return [\n                [tokenA, tokenB, FeeAmount.LOW],\n                [tokenA, tokenB, FeeAmount.MEDIUM],\n                [tokenA, tokenB, FeeAmount.HIGH],\n            ];\n        })\n            .value();\n        return allPairs;\n    }\n    computeAllRoutes(tokenIn, tokenOut, pools, chainId, currentPath = [], allPaths = [], startTokenIn = tokenIn, maxHops = 2) {\n        for (const pool of pools) {\n            if (currentPath.indexOf(pool) !== -1 || !pool.involvesToken(tokenIn))\n                continue;\n            const outputToken = pool.token0.equals(tokenIn)\n                ? pool.token1\n                : pool.token0;\n            if (outputToken.equals(tokenOut)) {\n                allPaths.push(new V3Route([...currentPath, pool], startTokenIn, tokenOut));\n            }\n            else if (maxHops > 1) {\n                this.computeAllRoutes(outputToken, tokenOut, pools, chainId, [...currentPath, pool], allPaths, startTokenIn, maxHops - 1);\n            }\n        }\n        return allPaths;\n    }\n    buildTrade(tokenInCurrency, tokenOutCurrency, tradeType, routeAmount) {\n        const { route, amount, quote } = routeAmount;\n        // The route, amount and quote are all in terms of wrapped tokens.\n        // When constructing the Trade object the inputAmount/outputAmount must\n        // use native currencies if necessary. This is so that the Trade knows to wrap/unwrap.\n        if (tradeType == TradeType.EXACT_INPUT) {\n            const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n            const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n            const routeCurrency = new Route(route.pools, amountCurrency.currency, quoteCurrency.currency);\n            return new Trade({\n                v3Routes: [\n                    {\n                        routev3: routeCurrency,\n                        inputAmount: amountCurrency,\n                        outputAmount: quoteCurrency,\n                    },\n                ],\n                v2Routes: [],\n                tradeType: tradeType,\n            });\n        }\n        else {\n            const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n            const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n            const routeCurrency = new Route(route.pools, quoteCurrency.currency, amountCurrency.currency);\n            return new Trade({\n                v3Routes: [\n                    {\n                        routev3: routeCurrency,\n                        inputAmount: quoteCurrency,\n                        outputAmount: amountCurrency,\n                    },\n                ],\n                v2Routes: [],\n                tradeType: tradeType,\n            });\n        }\n    }\n    buildMethodParameters(trade, swapConfig) {\n        const { recipient, slippageTolerance, deadline } = swapConfig;\n        const methodParameters = SwapRouter.swapCallParameters(trade, {\n            recipient,\n            slippageTolerance,\n            deadlineOrPreviousBlockhash: deadline,\n            // ...(signatureData\n            //   ? {\n            //       inputTokenPermit:\n            //         'allowed' in signatureData\n            //           ? {\n            //               expiry: signatureData.deadline,\n            //               nonce: signatureData.nonce,\n            //               s: signatureData.s,\n            //               r: signatureData.r,\n            //               v: signatureData.v as any,\n            //             }\n            //           : {\n            //               deadline: signatureData.deadline,\n            //               amount: signatureData.amount,\n            //               s: signatureData.s,\n            //               r: signatureData.r,\n            //               v: signatureData.v as any,\n            //             },\n            //     }\n            //   : {}),\n        });\n        return methodParameters;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}