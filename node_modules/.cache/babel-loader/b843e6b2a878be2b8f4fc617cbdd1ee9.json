{"ast":null,"code":"var _s = $RefreshSig$();\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { useWeb3React } from '@web3-react/core';\nimport { DEFAULT_LIST_OF_LISTS, UNSUPPORTED_LIST_URLS } from 'constants/lists';\nimport useInterval from 'lib/hooks/useInterval';\nimport { useCallback, useEffect } from 'react';\nimport { useAppDispatch } from 'state/hooks';\nimport { useAllLists } from 'state/lists/hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { acceptListUpdate } from './actions';\nimport { shouldAcceptVersionUpdate } from './utils';\nexport default function Updater() {\n  _s();\n  const {\n    provider\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const isWindowVisible = useIsWindowVisible();\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    DEFAULT_LIST_OF_LISTS.forEach(url => {\n      // Skip validation on unsupported lists\n      const isUnsupportedList = UNSUPPORTED_LIST_URLS.includes(url);\n      fetchList(url, isUnsupportedList).catch(error => console.debug('interval list fetching error', error));\n    });\n  }, [fetchList, isWindowVisible]);\n\n  // fetch all lists every 10 minutes, but only after we initialize provider\n  useInterval(fetchAllListsCallback, provider ? 600000 : null);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, lists]);\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach(listUrl => {\n      const list = lists[listUrl];\n      if (!list || !list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl, /* isUnsupportedList= */true).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, lists]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            {\n              if (shouldAcceptVersionUpdate(listUrl, list.current, list.pendingUpdate, bump)) {\n                dispatch(acceptListUpdate(listUrl));\n              }\n              break;\n            }\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl));\n        }\n      }\n    });\n  }, [dispatch, lists]);\n  return null;\n}\n_s(Updater, \"VeGr6SgMmP5fS77ql2Qjdi55kns=\", false, function () {\n  return [useWeb3React, useAppDispatch, useIsWindowVisible, useAllLists, useFetchListCallback, useInterval];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["getVersionUpgrade","VersionUpgrade","useWeb3React","DEFAULT_LIST_OF_LISTS","UNSUPPORTED_LIST_URLS","useInterval","useCallback","useEffect","useAppDispatch","useAllLists","useFetchListCallback","useIsWindowVisible","acceptListUpdate","shouldAcceptVersionUpdate","Updater","provider","dispatch","isWindowVisible","lists","fetchList","fetchAllListsCallback","forEach","url","isUnsupportedList","includes","catch","error","console","debug","Object","keys","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR"],"sources":["/home/diep/freelance/interface/src/state/lists/updater.ts"],"sourcesContent":["import { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\nimport { useWeb3React } from '@web3-react/core'\nimport { DEFAULT_LIST_OF_LISTS, UNSUPPORTED_LIST_URLS } from 'constants/lists'\nimport useInterval from 'lib/hooks/useInterval'\nimport ms from 'ms.macro'\nimport { useCallback, useEffect } from 'react'\nimport { useAppDispatch } from 'state/hooks'\nimport { useAllLists } from 'state/lists/hooks'\n\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { acceptListUpdate } from './actions'\nimport { shouldAcceptVersionUpdate } from './utils'\n\nexport default function Updater(): null {\n  const { provider } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    DEFAULT_LIST_OF_LISTS.forEach((url) => {\n      // Skip validation on unsupported lists\n      const isUnsupportedList = UNSUPPORTED_LIST_URLS.includes(url)\n      fetchList(url, isUnsupportedList).catch((error) => console.debug('interval list fetching error', error))\n    })\n  }, [fetchList, isWindowVisible])\n\n  // fetch all lists every 10 minutes, but only after we initialize provider\n  useInterval(fetchAllListsCallback, provider ? ms`10m` : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl, /* isUnsupportedList= */ true).catch((error) =>\n          console.debug('list added fetching error', error)\n        )\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR: {\n            if (shouldAcceptVersionUpdate(listUrl, list.current, list.pendingUpdate, bump)) {\n              dispatch(acceptListUpdate(listUrl))\n            }\n            break\n          }\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}