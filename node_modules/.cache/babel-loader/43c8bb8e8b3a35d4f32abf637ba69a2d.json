{"ast":null,"code":"var _s = $RefreshSig$();\nimport { CoinbaseWallet } from '@web3-react/coinbase-wallet';\nimport { initializeConnector } from '@web3-react/core';\nimport { GnosisSafe } from '@web3-react/gnosis-safe';\nimport { MetaMask } from '@web3-react/metamask';\nimport { Network } from '@web3-react/network';\nimport { Connector } from '@web3-react/types';\nimport COINBASE_ICON from \"assets/images/coinbaseWalletIcon.svg\";\nimport GNOSIS_ICON from 'assets/images/gnosis.png';\nimport METAMASK_ICON from \"assets/images/metamask.svg\";\nimport UNIWALLET_ICON from 'assets/images/uniwallet.png';\nimport WALLET_CONNECT_ICON from \"assets/images/walletConnectIcon.svg\";\nimport INJECTED_DARK_ICON from \"assets/svg/browser-wallet-dark.svg\";\nimport INJECTED_LIGHT_ICON from \"assets/svg/browser-wallet-light.svg\";\nimport UNISWAP_LOGO from \"assets/svg/logo.svg\";\nimport { SupportedChainId } from 'constants/chains';\nimport { useCallback } from 'react';\nimport { isMobile, isNonIOSPhone } from 'utils/userAgent';\nimport { RPC_URLS } from '../constants/networks';\nimport { RPC_PROVIDERS } from '../constants/providers';\nimport { getIsCoinbaseWallet, getIsInjected, getIsMetaMaskWallet } from './utils';\nimport { UniwalletConnect, WalletConnectPopup } from './WalletConnect';\nexport let ConnectionType;\n(function (ConnectionType) {\n  ConnectionType[\"UNIWALLET\"] = \"UNIWALLET\";\n  ConnectionType[\"INJECTED\"] = \"INJECTED\";\n  ConnectionType[\"COINBASE_WALLET\"] = \"COINBASE_WALLET\";\n  ConnectionType[\"WALLET_CONNECT\"] = \"WALLET_CONNECT\";\n  ConnectionType[\"NETWORK\"] = \"NETWORK\";\n  ConnectionType[\"GNOSIS_SAFE\"] = \"GNOSIS_SAFE\";\n})(ConnectionType || (ConnectionType = {}));\nfunction onError(error) {\n  console.debug(`web3-react error: ${error}`);\n}\nconst [web3Network, web3NetworkHooks] = initializeConnector(actions => new Network({\n  actions,\n  urlMap: RPC_PROVIDERS,\n  defaultChainId: 1\n}));\nexport const networkConnection = {\n  getName: () => 'Network',\n  connector: web3Network,\n  hooks: web3NetworkHooks,\n  type: ConnectionType.NETWORK,\n  shouldDisplay: () => false\n};\nconst getIsCoinbaseWalletBrowser = () => isMobile && getIsCoinbaseWallet();\nconst getIsMetaMaskBrowser = () => isMobile && getIsMetaMaskWallet();\nconst getIsInjectedMobileBrowser = () => getIsCoinbaseWalletBrowser() || getIsMetaMaskBrowser();\nconst getShouldAdvertiseMetaMask = () => !getIsMetaMaskWallet() && !isMobile && (!getIsInjected() || getIsCoinbaseWallet());\nconst getIsGenericInjector = () => getIsInjected() && !getIsMetaMaskWallet() && !getIsCoinbaseWallet();\nconst [web3Injected, web3InjectedHooks] = initializeConnector(actions => new MetaMask({\n  actions,\n  onError\n}));\nconst injectedConnection = {\n  // TODO(WEB-3131) re-add \"Install MetaMask\" string when no injector is present\n  getName: () => getIsGenericInjector() ? 'Browser Wallet' : 'MetaMask',\n  connector: web3Injected,\n  hooks: web3InjectedHooks,\n  type: ConnectionType.INJECTED,\n  getIcon: isDarkMode => getIsGenericInjector() ? isDarkMode ? INJECTED_DARK_ICON : INJECTED_LIGHT_ICON : METAMASK_ICON,\n  shouldDisplay: () => getIsMetaMaskWallet() || getShouldAdvertiseMetaMask() || getIsGenericInjector(),\n  // If on non-injected, non-mobile browser, prompt user to install Metamask\n  overrideActivate: () => {\n    if (getShouldAdvertiseMetaMask()) {\n      window.open('https://metamask.io/', 'inst_metamask');\n      return true;\n    }\n    return false;\n  }\n};\nconst [web3GnosisSafe, web3GnosisSafeHooks] = initializeConnector(actions => new GnosisSafe({\n  actions\n}));\nexport const gnosisSafeConnection = {\n  getName: () => 'Gnosis Safe',\n  connector: web3GnosisSafe,\n  hooks: web3GnosisSafeHooks,\n  type: ConnectionType.GNOSIS_SAFE,\n  getIcon: () => GNOSIS_ICON,\n  shouldDisplay: () => false\n};\nconst [web3WalletConnect, web3WalletConnectHooks] = initializeConnector(actions => new WalletConnectPopup({\n  actions,\n  onError\n}));\nexport const walletConnectConnection = {\n  getName: () => 'WalletConnect',\n  connector: web3WalletConnect,\n  hooks: web3WalletConnectHooks,\n  type: ConnectionType.WALLET_CONNECT,\n  getIcon: () => WALLET_CONNECT_ICON,\n  shouldDisplay: () => !getIsInjectedMobileBrowser()\n};\nconst [web3UniwalletConnect, web3UniwalletConnectHooks] = initializeConnector(actions => new UniwalletConnect({\n  actions,\n  onError\n}));\nexport const uniwalletConnectConnection = {\n  getName: () => 'Uniswap Wallet',\n  connector: web3UniwalletConnect,\n  hooks: web3UniwalletConnectHooks,\n  type: ConnectionType.UNIWALLET,\n  getIcon: () => UNIWALLET_ICON,\n  shouldDisplay: () => Boolean(!getIsInjectedMobileBrowser() && !isNonIOSPhone),\n  isNew: true\n};\nconst [web3CoinbaseWallet, web3CoinbaseWalletHooks] = initializeConnector(actions => new CoinbaseWallet({\n  actions,\n  options: {\n    url: RPC_URLS[SupportedChainId.MAINNET][0],\n    appName: 'Uniswap',\n    appLogoUrl: UNISWAP_LOGO,\n    reloadOnDisconnect: false\n  },\n  onError\n}));\nconst coinbaseWalletConnection = {\n  getName: () => 'Coinbase Wallet',\n  connector: web3CoinbaseWallet,\n  hooks: web3CoinbaseWalletHooks,\n  type: ConnectionType.COINBASE_WALLET,\n  getIcon: () => COINBASE_ICON,\n  shouldDisplay: () => Boolean(isMobile && !getIsInjectedMobileBrowser() || !isMobile || getIsCoinbaseWalletBrowser()),\n  // If on a mobile browser that isn't the coinbase wallet browser, deeplink to the coinbase wallet app\n  overrideActivate: () => {\n    if (isMobile && !getIsInjectedMobileBrowser()) {\n      window.open('https://go.cb-w.com/mtUDhEZPy1', 'cbwallet');\n      return true;\n    }\n    return false;\n  }\n};\nexport function getConnections() {\n  return [uniwalletConnectConnection, injectedConnection, walletConnectConnection, coinbaseWalletConnection, gnosisSafeConnection, networkConnection];\n}\nexport function useGetConnection() {\n  _s();\n  return useCallback(c => {\n    if (c instanceof Connector) {\n      const connection = getConnections().find(connection => connection.connector === c);\n      if (!connection) {\n        throw Error('unsupported connector');\n      }\n      return connection;\n    } else {\n      switch (c) {\n        case ConnectionType.INJECTED:\n          return injectedConnection;\n        case ConnectionType.COINBASE_WALLET:\n          return coinbaseWalletConnection;\n        case ConnectionType.WALLET_CONNECT:\n          return walletConnectConnection;\n        case ConnectionType.UNIWALLET:\n          return uniwalletConnectConnection;\n        case ConnectionType.NETWORK:\n          return networkConnection;\n        case ConnectionType.GNOSIS_SAFE:\n          return gnosisSafeConnection;\n      }\n    }\n  }, []);\n}\n_s(useGetConnection, \"epj4qY15NHsef74wNqHIp5fdZmg=\");","map":{"version":3,"names":["CoinbaseWallet","initializeConnector","GnosisSafe","MetaMask","Network","Connector","GNOSIS_ICON","UNIWALLET_ICON","SupportedChainId","useCallback","isMobile","isNonIOSPhone","RPC_URLS","RPC_PROVIDERS","getIsCoinbaseWallet","getIsInjected","getIsMetaMaskWallet","UniwalletConnect","WalletConnectPopup","ConnectionType","onError","error","console","debug","web3Network","web3NetworkHooks","actions","urlMap","defaultChainId","networkConnection","getName","connector","hooks","type","NETWORK","shouldDisplay","getIsCoinbaseWalletBrowser","getIsMetaMaskBrowser","getIsInjectedMobileBrowser","getShouldAdvertiseMetaMask","getIsGenericInjector","web3Injected","web3InjectedHooks","injectedConnection","INJECTED","getIcon","isDarkMode","INJECTED_DARK_ICON","INJECTED_LIGHT_ICON","METAMASK_ICON","overrideActivate","window","open","web3GnosisSafe","web3GnosisSafeHooks","gnosisSafeConnection","GNOSIS_SAFE","web3WalletConnect","web3WalletConnectHooks","walletConnectConnection","WALLET_CONNECT","WALLET_CONNECT_ICON","web3UniwalletConnect","web3UniwalletConnectHooks","uniwalletConnectConnection","UNIWALLET","Boolean","isNew","web3CoinbaseWallet","web3CoinbaseWalletHooks","options","url","MAINNET","appName","appLogoUrl","UNISWAP_LOGO","reloadOnDisconnect","coinbaseWalletConnection","COINBASE_WALLET","COINBASE_ICON","getConnections","useGetConnection","c","connection","find","Error"],"sources":["/home/diep/freelance/interface/src/connection/index.ts"],"sourcesContent":["import { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { initializeConnector, Web3ReactHooks } from '@web3-react/core'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\nimport { MetaMask } from '@web3-react/metamask'\nimport { Network } from '@web3-react/network'\nimport { Connector } from '@web3-react/types'\nimport COINBASE_ICON from 'assets/images/coinbaseWalletIcon.svg'\nimport GNOSIS_ICON from 'assets/images/gnosis.png'\nimport METAMASK_ICON from 'assets/images/metamask.svg'\nimport UNIWALLET_ICON from 'assets/images/uniwallet.png'\nimport WALLET_CONNECT_ICON from 'assets/images/walletConnectIcon.svg'\nimport INJECTED_DARK_ICON from 'assets/svg/browser-wallet-dark.svg'\nimport INJECTED_LIGHT_ICON from 'assets/svg/browser-wallet-light.svg'\nimport UNISWAP_LOGO from 'assets/svg/logo.svg'\nimport { SupportedChainId } from 'constants/chains'\nimport { useCallback } from 'react'\nimport { isMobile, isNonIOSPhone } from 'utils/userAgent'\n\nimport { RPC_URLS } from '../constants/networks'\nimport { RPC_PROVIDERS } from '../constants/providers'\nimport { getIsCoinbaseWallet, getIsInjected, getIsMetaMaskWallet } from './utils'\nimport { UniwalletConnect, WalletConnectPopup } from './WalletConnect'\n\nexport enum ConnectionType {\n  UNIWALLET = 'UNIWALLET',\n  INJECTED = 'INJECTED',\n  COINBASE_WALLET = 'COINBASE_WALLET',\n  WALLET_CONNECT = 'WALLET_CONNECT',\n  NETWORK = 'NETWORK',\n  GNOSIS_SAFE = 'GNOSIS_SAFE',\n}\n\nexport interface Connection {\n  getName(): string\n  connector: Connector\n  hooks: Web3ReactHooks\n  type: ConnectionType\n  getIcon?(isDarkMode: boolean): string\n  shouldDisplay(): boolean\n  overrideActivate?: () => boolean\n  isNew?: boolean\n}\n\nfunction onError(error: Error) {\n  console.debug(`web3-react error: ${error}`)\n}\n\nconst [web3Network, web3NetworkHooks] = initializeConnector<Network>(\n  (actions) => new Network({ actions, urlMap: RPC_PROVIDERS, defaultChainId: 1 })\n)\nexport const networkConnection: Connection = {\n  getName: () => 'Network',\n  connector: web3Network,\n  hooks: web3NetworkHooks,\n  type: ConnectionType.NETWORK,\n  shouldDisplay: () => false,\n}\n\nconst getIsCoinbaseWalletBrowser = () => isMobile && getIsCoinbaseWallet()\nconst getIsMetaMaskBrowser = () => isMobile && getIsMetaMaskWallet()\nconst getIsInjectedMobileBrowser = () => getIsCoinbaseWalletBrowser() || getIsMetaMaskBrowser()\n\nconst getShouldAdvertiseMetaMask = () =>\n  !getIsMetaMaskWallet() && !isMobile && (!getIsInjected() || getIsCoinbaseWallet())\nconst getIsGenericInjector = () => getIsInjected() && !getIsMetaMaskWallet() && !getIsCoinbaseWallet()\n\nconst [web3Injected, web3InjectedHooks] = initializeConnector<MetaMask>((actions) => new MetaMask({ actions, onError }))\n\nconst injectedConnection: Connection = {\n  // TODO(WEB-3131) re-add \"Install MetaMask\" string when no injector is present\n  getName: () => (getIsGenericInjector() ? 'Browser Wallet' : 'MetaMask'),\n  connector: web3Injected,\n  hooks: web3InjectedHooks,\n  type: ConnectionType.INJECTED,\n  getIcon: (isDarkMode: boolean) =>\n    getIsGenericInjector() ? (isDarkMode ? INJECTED_DARK_ICON : INJECTED_LIGHT_ICON) : METAMASK_ICON,\n  shouldDisplay: () => getIsMetaMaskWallet() || getShouldAdvertiseMetaMask() || getIsGenericInjector(),\n  // If on non-injected, non-mobile browser, prompt user to install Metamask\n  overrideActivate: () => {\n    if (getShouldAdvertiseMetaMask()) {\n      window.open('https://metamask.io/', 'inst_metamask')\n      return true\n    }\n    return false\n  },\n}\nconst [web3GnosisSafe, web3GnosisSafeHooks] = initializeConnector<GnosisSafe>((actions) => new GnosisSafe({ actions }))\nexport const gnosisSafeConnection: Connection = {\n  getName: () => 'Gnosis Safe',\n  connector: web3GnosisSafe,\n  hooks: web3GnosisSafeHooks,\n  type: ConnectionType.GNOSIS_SAFE,\n  getIcon: () => GNOSIS_ICON,\n  shouldDisplay: () => false,\n}\n\nconst [web3WalletConnect, web3WalletConnectHooks] = initializeConnector<WalletConnectPopup>(\n  (actions) => new WalletConnectPopup({ actions, onError })\n)\nexport const walletConnectConnection: Connection = {\n  getName: () => 'WalletConnect',\n  connector: web3WalletConnect,\n  hooks: web3WalletConnectHooks,\n  type: ConnectionType.WALLET_CONNECT,\n  getIcon: () => WALLET_CONNECT_ICON,\n  shouldDisplay: () => !getIsInjectedMobileBrowser(),\n}\n\nconst [web3UniwalletConnect, web3UniwalletConnectHooks] = initializeConnector<UniwalletConnect>(\n  (actions) => new UniwalletConnect({ actions, onError })\n)\nexport const uniwalletConnectConnection: Connection = {\n  getName: () => 'Uniswap Wallet',\n  connector: web3UniwalletConnect,\n  hooks: web3UniwalletConnectHooks,\n  type: ConnectionType.UNIWALLET,\n  getIcon: () => UNIWALLET_ICON,\n  shouldDisplay: () => Boolean(!getIsInjectedMobileBrowser() && !isNonIOSPhone),\n  isNew: true,\n}\n\nconst [web3CoinbaseWallet, web3CoinbaseWalletHooks] = initializeConnector<CoinbaseWallet>(\n  (actions) =>\n    new CoinbaseWallet({\n      actions,\n      options: {\n        url: RPC_URLS[SupportedChainId.MAINNET][0],\n        appName: 'Uniswap',\n        appLogoUrl: UNISWAP_LOGO,\n        reloadOnDisconnect: false,\n      },\n      onError,\n    })\n)\n\nconst coinbaseWalletConnection: Connection = {\n  getName: () => 'Coinbase Wallet',\n  connector: web3CoinbaseWallet,\n  hooks: web3CoinbaseWalletHooks,\n  type: ConnectionType.COINBASE_WALLET,\n  getIcon: () => COINBASE_ICON,\n  shouldDisplay: () =>\n    Boolean((isMobile && !getIsInjectedMobileBrowser()) || !isMobile || getIsCoinbaseWalletBrowser()),\n  // If on a mobile browser that isn't the coinbase wallet browser, deeplink to the coinbase wallet app\n  overrideActivate: () => {\n    if (isMobile && !getIsInjectedMobileBrowser()) {\n      window.open('https://go.cb-w.com/mtUDhEZPy1', 'cbwallet')\n      return true\n    }\n    return false\n  },\n}\n\nexport function getConnections() {\n  return [\n    uniwalletConnectConnection,\n    injectedConnection,\n    walletConnectConnection,\n    coinbaseWalletConnection,\n    gnosisSafeConnection,\n    networkConnection,\n  ]\n}\n\nexport function useGetConnection() {\n  return useCallback((c: Connector | ConnectionType) => {\n    if (c instanceof Connector) {\n      const connection = getConnections().find((connection) => connection.connector === c)\n      if (!connection) {\n        throw Error('unsupported connector')\n      }\n      return connection\n    } else {\n      switch (c) {\n        case ConnectionType.INJECTED:\n          return injectedConnection\n        case ConnectionType.COINBASE_WALLET:\n          return coinbaseWalletConnection\n        case ConnectionType.WALLET_CONNECT:\n          return walletConnectConnection\n        case ConnectionType.UNIWALLET:\n          return uniwalletConnectConnection\n        case ConnectionType.NETWORK:\n          return networkConnection\n        case ConnectionType.GNOSIS_SAFE:\n          return gnosisSafeConnection\n      }\n    }\n  }, [])\n}\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,6BAA6B;AAC5D,SAASC,mBAAmB,QAAwB,kBAAkB;AACtE,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,SAAS,QAAQ,mBAAmB;AAAA;AAE7C,OAAOC,WAAW,MAAM,0BAA0B;AAAA;AAElD,OAAOC,cAAc,MAAM,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAKxD,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,QAAQ,EAAEC,aAAa,QAAQ,iBAAiB;AAEzD,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,mBAAmB,EAAEC,aAAa,EAAEC,mBAAmB,QAAQ,SAAS;AACjF,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,iBAAiB;AAEtE,WAAYC,cAAc;AAOzB,WAPWA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;EAAdA,cAAc;AAAA,GAAdA,cAAc,KAAdA,cAAc;AAoB1B,SAASC,OAAO,CAACC,KAAY,EAAE;EAC7BC,OAAO,CAACC,KAAK,CAAE,qBAAoBF,KAAM,EAAC,CAAC;AAC7C;AAEA,MAAM,CAACG,WAAW,EAAEC,gBAAgB,CAAC,GAAGxB,mBAAmB,CACxDyB,OAAO,IAAK,IAAItB,OAAO,CAAC;EAAEsB,OAAO;EAAEC,MAAM,EAAEd,aAAa;EAAEe,cAAc,EAAE;AAAE,CAAC,CAAC,CAChF;AACD,OAAO,MAAMC,iBAA6B,GAAG;EAC3CC,OAAO,EAAE,MAAM,SAAS;EACxBC,SAAS,EAAEP,WAAW;EACtBQ,KAAK,EAAEP,gBAAgB;EACvBQ,IAAI,EAAEd,cAAc,CAACe,OAAO;EAC5BC,aAAa,EAAE,MAAM;AACvB,CAAC;AAED,MAAMC,0BAA0B,GAAG,MAAM1B,QAAQ,IAAII,mBAAmB,EAAE;AAC1E,MAAMuB,oBAAoB,GAAG,MAAM3B,QAAQ,IAAIM,mBAAmB,EAAE;AACpE,MAAMsB,0BAA0B,GAAG,MAAMF,0BAA0B,EAAE,IAAIC,oBAAoB,EAAE;AAE/F,MAAME,0BAA0B,GAAG,MACjC,CAACvB,mBAAmB,EAAE,IAAI,CAACN,QAAQ,KAAK,CAACK,aAAa,EAAE,IAAID,mBAAmB,EAAE,CAAC;AACpF,MAAM0B,oBAAoB,GAAG,MAAMzB,aAAa,EAAE,IAAI,CAACC,mBAAmB,EAAE,IAAI,CAACF,mBAAmB,EAAE;AAEtG,MAAM,CAAC2B,YAAY,EAAEC,iBAAiB,CAAC,GAAGzC,mBAAmB,CAAYyB,OAAO,IAAK,IAAIvB,QAAQ,CAAC;EAAEuB,OAAO;EAAEN;AAAQ,CAAC,CAAC,CAAC;AAExH,MAAMuB,kBAA8B,GAAG;EACrC;EACAb,OAAO,EAAE,MAAOU,oBAAoB,EAAE,GAAG,gBAAgB,GAAG,UAAW;EACvET,SAAS,EAAEU,YAAY;EACvBT,KAAK,EAAEU,iBAAiB;EACxBT,IAAI,EAAEd,cAAc,CAACyB,QAAQ;EAC7BC,OAAO,EAAGC,UAAmB,IAC3BN,oBAAoB,EAAE,GAAIM,UAAU,GAAGC,kBAAkB,GAAGC,mBAAmB,GAAIC,aAAa;EAClGd,aAAa,EAAE,MAAMnB,mBAAmB,EAAE,IAAIuB,0BAA0B,EAAE,IAAIC,oBAAoB,EAAE;EACpG;EACAU,gBAAgB,EAAE,MAAM;IACtB,IAAIX,0BAA0B,EAAE,EAAE;MAChCY,MAAM,CAACC,IAAI,CAAC,sBAAsB,EAAE,eAAe,CAAC;MACpD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;AACF,CAAC;AACD,MAAM,CAACC,cAAc,EAAEC,mBAAmB,CAAC,GAAGrD,mBAAmB,CAAcyB,OAAO,IAAK,IAAIxB,UAAU,CAAC;EAAEwB;AAAQ,CAAC,CAAC,CAAC;AACvH,OAAO,MAAM6B,oBAAgC,GAAG;EAC9CzB,OAAO,EAAE,MAAM,aAAa;EAC5BC,SAAS,EAAEsB,cAAc;EACzBrB,KAAK,EAAEsB,mBAAmB;EAC1BrB,IAAI,EAAEd,cAAc,CAACqC,WAAW;EAChCX,OAAO,EAAE,MAAMvC,WAAW;EAC1B6B,aAAa,EAAE,MAAM;AACvB,CAAC;AAED,MAAM,CAACsB,iBAAiB,EAAEC,sBAAsB,CAAC,GAAGzD,mBAAmB,CACpEyB,OAAO,IAAK,IAAIR,kBAAkB,CAAC;EAAEQ,OAAO;EAAEN;AAAQ,CAAC,CAAC,CAC1D;AACD,OAAO,MAAMuC,uBAAmC,GAAG;EACjD7B,OAAO,EAAE,MAAM,eAAe;EAC9BC,SAAS,EAAE0B,iBAAiB;EAC5BzB,KAAK,EAAE0B,sBAAsB;EAC7BzB,IAAI,EAAEd,cAAc,CAACyC,cAAc;EACnCf,OAAO,EAAE,MAAMgB,mBAAmB;EAClC1B,aAAa,EAAE,MAAM,CAACG,0BAA0B;AAClD,CAAC;AAED,MAAM,CAACwB,oBAAoB,EAAEC,yBAAyB,CAAC,GAAG9D,mBAAmB,CAC1EyB,OAAO,IAAK,IAAIT,gBAAgB,CAAC;EAAES,OAAO;EAAEN;AAAQ,CAAC,CAAC,CACxD;AACD,OAAO,MAAM4C,0BAAsC,GAAG;EACpDlC,OAAO,EAAE,MAAM,gBAAgB;EAC/BC,SAAS,EAAE+B,oBAAoB;EAC/B9B,KAAK,EAAE+B,yBAAyB;EAChC9B,IAAI,EAAEd,cAAc,CAAC8C,SAAS;EAC9BpB,OAAO,EAAE,MAAMtC,cAAc;EAC7B4B,aAAa,EAAE,MAAM+B,OAAO,CAAC,CAAC5B,0BAA0B,EAAE,IAAI,CAAC3B,aAAa,CAAC;EAC7EwD,KAAK,EAAE;AACT,CAAC;AAED,MAAM,CAACC,kBAAkB,EAAEC,uBAAuB,CAAC,GAAGpE,mBAAmB,CACtEyB,OAAO,IACN,IAAI1B,cAAc,CAAC;EACjB0B,OAAO;EACP4C,OAAO,EAAE;IACPC,GAAG,EAAE3D,QAAQ,CAACJ,gBAAgB,CAACgE,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1CC,OAAO,EAAE,SAAS;IAClBC,UAAU,EAAEC,YAAY;IACxBC,kBAAkB,EAAE;EACtB,CAAC;EACDxD;AACF,CAAC,CAAC,CACL;AAED,MAAMyD,wBAAoC,GAAG;EAC3C/C,OAAO,EAAE,MAAM,iBAAiB;EAChCC,SAAS,EAAEqC,kBAAkB;EAC7BpC,KAAK,EAAEqC,uBAAuB;EAC9BpC,IAAI,EAAEd,cAAc,CAAC2D,eAAe;EACpCjC,OAAO,EAAE,MAAMkC,aAAa;EAC5B5C,aAAa,EAAE,MACb+B,OAAO,CAAExD,QAAQ,IAAI,CAAC4B,0BAA0B,EAAE,IAAK,CAAC5B,QAAQ,IAAI0B,0BAA0B,EAAE,CAAC;EACnG;EACAc,gBAAgB,EAAE,MAAM;IACtB,IAAIxC,QAAQ,IAAI,CAAC4B,0BAA0B,EAAE,EAAE;MAC7Ca,MAAM,CAACC,IAAI,CAAC,gCAAgC,EAAE,UAAU,CAAC;MACzD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,SAAS4B,cAAc,GAAG;EAC/B,OAAO,CACLhB,0BAA0B,EAC1BrB,kBAAkB,EAClBgB,uBAAuB,EACvBkB,wBAAwB,EACxBtB,oBAAoB,EACpB1B,iBAAiB,CAClB;AACH;AAEA,OAAO,SAASoD,gBAAgB,GAAG;EAAA;EACjC,OAAOxE,WAAW,CAAEyE,CAA6B,IAAK;IACpD,IAAIA,CAAC,YAAY7E,SAAS,EAAE;MAC1B,MAAM8E,UAAU,GAAGH,cAAc,EAAE,CAACI,IAAI,CAAED,UAAU,IAAKA,UAAU,CAACpD,SAAS,KAAKmD,CAAC,CAAC;MACpF,IAAI,CAACC,UAAU,EAAE;QACf,MAAME,KAAK,CAAC,uBAAuB,CAAC;MACtC;MACA,OAAOF,UAAU;IACnB,CAAC,MAAM;MACL,QAAQD,CAAC;QACP,KAAK/D,cAAc,CAACyB,QAAQ;UAC1B,OAAOD,kBAAkB;QAC3B,KAAKxB,cAAc,CAAC2D,eAAe;UACjC,OAAOD,wBAAwB;QACjC,KAAK1D,cAAc,CAACyC,cAAc;UAChC,OAAOD,uBAAuB;QAChC,KAAKxC,cAAc,CAAC8C,SAAS;UAC3B,OAAOD,0BAA0B;QACnC,KAAK7C,cAAc,CAACe,OAAO;UACzB,OAAOL,iBAAiB;QAC1B,KAAKV,cAAc,CAACqC,WAAW;UAC7B,OAAOD,oBAAoB;MAAA;IAEjC;EACF,CAAC,EAAE,EAAE,CAAC;AACR;AAAC,GAzBe0B,gBAAgB"},"metadata":{},"sourceType":"module"}