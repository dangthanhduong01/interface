{"ast":null,"code":"import { minVersionBump } from '@uniswap/token-lists';\nexport function shouldAcceptVersionUpdate(listUrl, current, update, targetBump) {\n  const min = minVersionBump(current.tokens, update.tokens);\n  // Automatically update minor/patch as long as bump matches the min update.\n  if (targetBump >= min) {\n    return true;\n  } else {\n    console.debug(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n    return false;\n  }\n}","map":{"version":3,"names":["minVersionBump","shouldAcceptVersionUpdate","listUrl","current","update","targetBump","min","tokens","console","debug"],"sources":["/home/diep/freelance/interface/src/state/lists/utils.ts"],"sourcesContent":["import { minVersionBump, TokenList, VersionUpgrade } from '@uniswap/token-lists'\n\nexport function shouldAcceptVersionUpdate(\n  listUrl: string,\n  current: TokenList,\n  update: TokenList,\n  targetBump: VersionUpgrade.PATCH | VersionUpgrade.MINOR\n): boolean {\n  const min = minVersionBump(current.tokens, update.tokens)\n  // Automatically update minor/patch as long as bump matches the min update.\n  if (targetBump >= min) {\n    return true\n  } else {\n    console.debug(\n      `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n    )\n    return false\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAmC,sBAAsB;AAEhF,OAAO,SAASC,yBAAyB,CACvCC,OAAe,EACfC,OAAkB,EAClBC,MAAiB,EACjBC,UAAuD,EAC9C;EACT,MAAMC,GAAG,GAAGN,cAAc,CAACG,OAAO,CAACI,MAAM,EAAEH,MAAM,CAACG,MAAM,CAAC;EACzD;EACA,IAAIF,UAAU,IAAIC,GAAG,EAAE;IACrB,OAAO,IAAI;EACb,CAAC,MAAM;IACLE,OAAO,CAACC,KAAK,CACV,eAAcP,OAAQ,gJAA+I,CACvK;IACD,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module"}