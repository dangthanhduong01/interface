{"ast":null,"code":"import { Percent } from '@uniswap/sdk-core';\nimport { NATIVE_CHAIN_ID } from 'constants/tokens';\nimport { computeRealizedPriceImpact } from 'utils/prices';\nexport const getDurationUntilTimestampSeconds = futureTimestampInSecondsSinceEpoch => {\n  if (!futureTimestampInSecondsSinceEpoch) return undefined;\n  return futureTimestampInSecondsSinceEpoch - new Date().getTime() / 1000;\n};\nexport const getDurationFromDateMilliseconds = start => {\n  if (!start) return undefined;\n  return new Date().getTime() - start.getTime();\n};\nexport const formatToDecimal = (intialNumberObject, decimalPlace) => parseFloat(intialNumberObject.toFixed(decimalPlace));\nexport const getTokenAddress = currency => currency.isNative ? NATIVE_CHAIN_ID : currency.address;\nexport const formatPercentInBasisPointsNumber = percent => parseFloat(percent.toFixed(2)) * 100;\nexport const formatPercentNumber = percent => parseFloat(percent.toFixed(2));\nexport const getPriceUpdateBasisPoints = (prevPrice, newPrice) => {\n  const changeFraction = newPrice.subtract(prevPrice).divide(prevPrice);\n  const changePercentage = new Percent(changeFraction.numerator, changeFraction.denominator);\n  return formatPercentInBasisPointsNumber(changePercentage);\n};\nexport const formatSwapSignedAnalyticsEventProperties = _ref => {\n  let {\n    trade,\n    fiatValues,\n    txHash\n  } = _ref;\n  return {\n    transaction_hash: txHash,\n    token_in_address: getTokenAddress(trade.inputAmount.currency),\n    token_out_address: getTokenAddress(trade.outputAmount.currency),\n    token_in_symbol: trade.inputAmount.currency.symbol,\n    token_out_symbol: trade.outputAmount.currency.symbol,\n    token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n    token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n    token_in_amount_usd: fiatValues.amountIn,\n    token_out_amount_usd: fiatValues.amountOut,\n    price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n    chain_id: trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId ? trade.inputAmount.currency.chainId : undefined\n  };\n};\nexport const formatSwapQuoteReceivedEventProperties = (trade, gasUseEstimateUSD, fetchingSwapQuoteStartTime) => {\n  return {\n    token_in_symbol: trade.inputAmount.currency.symbol,\n    token_out_symbol: trade.outputAmount.currency.symbol,\n    token_in_address: getTokenAddress(trade.inputAmount.currency),\n    token_out_address: getTokenAddress(trade.outputAmount.currency),\n    price_impact_basis_points: trade ? formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)) : undefined,\n    estimated_network_fee_usd: gasUseEstimateUSD ? formatToDecimal(gasUseEstimateUSD, 2) : undefined,\n    chain_id: trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId ? trade.inputAmount.currency.chainId : undefined,\n    token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n    token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n    quote_latency_milliseconds: fetchingSwapQuoteStartTime ? getDurationFromDateMilliseconds(fetchingSwapQuoteStartTime) : undefined\n  };\n};","map":{"version":3,"names":["Percent","NATIVE_CHAIN_ID","computeRealizedPriceImpact","getDurationUntilTimestampSeconds","futureTimestampInSecondsSinceEpoch","undefined","Date","getTime","getDurationFromDateMilliseconds","start","formatToDecimal","intialNumberObject","decimalPlace","parseFloat","toFixed","getTokenAddress","currency","isNative","address","formatPercentInBasisPointsNumber","percent","formatPercentNumber","getPriceUpdateBasisPoints","prevPrice","newPrice","changeFraction","subtract","divide","changePercentage","numerator","denominator","formatSwapSignedAnalyticsEventProperties","trade","fiatValues","txHash","transaction_hash","token_in_address","inputAmount","token_out_address","outputAmount","token_in_symbol","symbol","token_out_symbol","token_in_amount","decimals","token_out_amount","token_in_amount_usd","amountIn","token_out_amount_usd","amountOut","price_impact_basis_points","chain_id","chainId","formatSwapQuoteReceivedEventProperties","gasUseEstimateUSD","fetchingSwapQuoteStartTime","estimated_network_fee_usd","quote_latency_milliseconds"],"sources":["/home/diep/freelance/interface/src/lib/utils/analytics.ts"],"sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, Price, Token, TradeType } from '@uniswap/sdk-core'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { computeRealizedPriceImpact } from 'utils/prices'\n\nexport const getDurationUntilTimestampSeconds = (futureTimestampInSecondsSinceEpoch?: number): number | undefined => {\n  if (!futureTimestampInSecondsSinceEpoch) return undefined\n  return futureTimestampInSecondsSinceEpoch - new Date().getTime() / 1000\n}\n\nexport const getDurationFromDateMilliseconds = (start?: Date): number | undefined => {\n  if (!start) return undefined\n  return new Date().getTime() - start.getTime()\n}\n\nexport const formatToDecimal = (\n  intialNumberObject: Percent | CurrencyAmount<Token | Currency>,\n  decimalPlace: number\n): number => parseFloat(intialNumberObject.toFixed(decimalPlace))\n\nexport const getTokenAddress = (currency: Currency) => (currency.isNative ? NATIVE_CHAIN_ID : currency.address)\n\nexport const formatPercentInBasisPointsNumber = (percent: Percent): number => parseFloat(percent.toFixed(2)) * 100\n\nexport const formatPercentNumber = (percent: Percent): number => parseFloat(percent.toFixed(2))\n\nexport const getPriceUpdateBasisPoints = (\n  prevPrice: Price<Currency, Currency>,\n  newPrice: Price<Currency, Currency>\n): number => {\n  const changeFraction = newPrice.subtract(prevPrice).divide(prevPrice)\n  const changePercentage = new Percent(changeFraction.numerator, changeFraction.denominator)\n  return formatPercentInBasisPointsNumber(changePercentage)\n}\n\nexport const formatSwapSignedAnalyticsEventProperties = ({\n  trade,\n  fiatValues,\n  txHash,\n}: {\n  trade: InterfaceTrade<Currency, Currency, TradeType> | Trade<Currency, Currency, TradeType>\n  fiatValues: { amountIn: number | undefined; amountOut: number | undefined }\n  txHash: string\n}) => ({\n  transaction_hash: txHash,\n  token_in_address: getTokenAddress(trade.inputAmount.currency),\n  token_out_address: getTokenAddress(trade.outputAmount.currency),\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n  token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n  token_in_amount_usd: fiatValues.amountIn,\n  token_out_amount_usd: fiatValues.amountOut,\n  price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n})\n\nexport const formatSwapQuoteReceivedEventProperties = (\n  trade: Trade<Currency, Currency, TradeType>,\n  gasUseEstimateUSD?: CurrencyAmount<Token>,\n  fetchingSwapQuoteStartTime?: Date\n) => {\n  return {\n    token_in_symbol: trade.inputAmount.currency.symbol,\n    token_out_symbol: trade.outputAmount.currency.symbol,\n    token_in_address: getTokenAddress(trade.inputAmount.currency),\n    token_out_address: getTokenAddress(trade.outputAmount.currency),\n    price_impact_basis_points: trade ? formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)) : undefined,\n    estimated_network_fee_usd: gasUseEstimateUSD ? formatToDecimal(gasUseEstimateUSD, 2) : undefined,\n    chain_id:\n      trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n        ? trade.inputAmount.currency.chainId\n        : undefined,\n    token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n    token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n    quote_latency_milliseconds: fetchingSwapQuoteStartTime\n      ? getDurationFromDateMilliseconds(fetchingSwapQuoteStartTime)\n      : undefined,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}