{"ast":null,"code":"import retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId } from '../../util/chains';\nimport { log } from '../../util/log';\nconst SUBGRAPH_URL_BY_CHAIN = {\n  [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswapv2',\n  [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-rinkeby'\n};\nconst threshold = 0.025;\nconst PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\nexport class V2SubgraphProvider {\n  constructor(chainId) {\n    let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 360000;\n    let rollback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let pageSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : PAGE_SIZE;\n    this.chainId = chainId;\n    this.retries = retries;\n    this.timeout = timeout;\n    this.rollback = rollback;\n    this.pageSize = pageSize;\n    const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n    if (!subgraphUrl) {\n      throw new Error(`No subgraph url for chain id: ${this.chainId}`);\n    }\n    this.client = new GraphQLClient(subgraphUrl);\n  }\n  async getPools(_tokenIn, _tokenOut, providerConfig) {\n    let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) ? await providerConfig.blockNumber : undefined;\n    // Due to limitations with the Subgraph API this is the only way to parameterize the query.\n    const query2 = gql`\n      query getPools($pageSize: Int!, $id: String) {\n        pairs(\n          first: $pageSize\n          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}\n          where: { id_gt: $id }\n        ) {\n          id\n          token0 { id, symbol }\n          token1 { id, symbol }\n          totalSupply\n          trackedReserveETH\n          reserveUSD\n        }\n      }\n    `;\n    let pools = [];\n    log.info(`Getting V2 pools from the subgraph with page size ${this.pageSize}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}` : ''}.`);\n    await retry(async () => {\n      const timeout = new Timeout();\n      const getPools = async () => {\n        let lastId = '';\n        let pairs = [];\n        let pairsPage = [];\n        do {\n          await retry(async () => {\n            const poolsResult = await this.client.request(query2, {\n              pageSize: this.pageSize,\n              id: lastId\n            });\n            pairsPage = poolsResult.pairs;\n            pairs = pairs.concat(pairsPage);\n            lastId = pairs[pairs.length - 1].id;\n          }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n              pools = [];\n              log.info({\n                err\n              }, `Failed request for page of pools from subgraph. Retry attempt: ${retry}`);\n            }\n          });\n        } while (pairsPage.length > 0);\n        return pairs;\n      };\n      /* eslint-disable no-useless-catch */\n      try {\n        const getPoolsPromise = getPools();\n        const timerPromise = timeout.set(this.timeout).then(() => {\n          throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n        });\n        pools = await Promise.race([getPoolsPromise, timerPromise]);\n        return;\n      } catch (err) {\n        throw err;\n      } finally {\n        timeout.clear();\n      }\n      /* eslint-enable no-useless-catch */\n    }, {\n      retries: this.retries,\n      onRetry: (err, retry) => {\n        if (this.rollback && blockNumber && _.includes(err.message, 'indexed up to')) {\n          blockNumber = blockNumber - 10;\n          log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);\n        }\n        pools = [];\n        log.info({\n          err\n        }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);\n      }\n    });\n    // Filter pools that have tracked reserve ETH less than threshold.\n    // trackedReserveETH filters pools that do not involve a pool from this allowlist:\n    // https://github.com/Uniswap/v2-subgraph/blob/7c82235cad7aee4cfce8ea82f0030af3d224833e/src/mappings/pricing.ts#L43\n    // Which helps filter pools with manipulated prices/liquidity.\n    // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.\n    const FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';\n    const poolsSanitized = pools.filter(pool => {\n      return pool.token0.id == FEI || pool.token1.id == FEI || parseFloat(pool.trackedReserveETH) > threshold;\n    }).map(pool => {\n      return {\n        ...pool,\n        id: pool.id.toLowerCase(),\n        token0: {\n          id: pool.token0.id.toLowerCase()\n        },\n        token1: {\n          id: pool.token1.id.toLowerCase()\n        },\n        supply: parseFloat(pool.totalSupply),\n        reserve: parseFloat(pool.trackedReserveETH),\n        reserveUSD: parseFloat(pool.reserveUSD)\n      };\n    });\n    log.info(`Got ${pools.length} V2 pools from the subgraph. ${poolsSanitized.length} after filtering`);\n    return poolsSanitized;\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/v2/subgraph-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId } from '../../util/chains';\nimport { log } from '../../util/log';\nconst SUBGRAPH_URL_BY_CHAIN = {\n    [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswapv2',\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-rinkeby',\n};\nconst threshold = 0.025;\nconst PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\nexport class V2SubgraphProvider {\n    constructor(chainId, retries = 2, timeout = 360000, rollback = true, pageSize = PAGE_SIZE) {\n        this.chainId = chainId;\n        this.retries = retries;\n        this.timeout = timeout;\n        this.rollback = rollback;\n        this.pageSize = pageSize;\n        const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n        if (!subgraphUrl) {\n            throw new Error(`No subgraph url for chain id: ${this.chainId}`);\n        }\n        this.client = new GraphQLClient(subgraphUrl);\n    }\n    async getPools(_tokenIn, _tokenOut, providerConfig) {\n        let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? await providerConfig.blockNumber\n            : undefined;\n        // Due to limitations with the Subgraph API this is the only way to parameterize the query.\n        const query2 = gql `\n      query getPools($pageSize: Int!, $id: String) {\n        pairs(\n          first: $pageSize\n          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}\n          where: { id_gt: $id }\n        ) {\n          id\n          token0 { id, symbol }\n          token1 { id, symbol }\n          totalSupply\n          trackedReserveETH\n          reserveUSD\n        }\n      }\n    `;\n        let pools = [];\n        log.info(`Getting V2 pools from the subgraph with page size ${this.pageSize}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}`\n            : ''}.`);\n        await retry(async () => {\n            const timeout = new Timeout();\n            const getPools = async () => {\n                let lastId = '';\n                let pairs = [];\n                let pairsPage = [];\n                do {\n                    await retry(async () => {\n                        const poolsResult = await this.client.request(query2, {\n                            pageSize: this.pageSize,\n                            id: lastId,\n                        });\n                        pairsPage = poolsResult.pairs;\n                        pairs = pairs.concat(pairsPage);\n                        lastId = pairs[pairs.length - 1].id;\n                    }, {\n                        retries: this.retries,\n                        onRetry: (err, retry) => {\n                            pools = [];\n                            log.info({ err }, `Failed request for page of pools from subgraph. Retry attempt: ${retry}`);\n                        },\n                    });\n                } while (pairsPage.length > 0);\n                return pairs;\n            };\n            /* eslint-disable no-useless-catch */\n            try {\n                const getPoolsPromise = getPools();\n                const timerPromise = timeout.set(this.timeout).then(() => {\n                    throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n                });\n                pools = await Promise.race([getPoolsPromise, timerPromise]);\n                return;\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n            /* eslint-enable no-useless-catch */\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                if (this.rollback &&\n                    blockNumber &&\n                    _.includes(err.message, 'indexed up to')) {\n                    blockNumber = blockNumber - 10;\n                    log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);\n                }\n                pools = [];\n                log.info({ err }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);\n            },\n        });\n        // Filter pools that have tracked reserve ETH less than threshold.\n        // trackedReserveETH filters pools that do not involve a pool from this allowlist:\n        // https://github.com/Uniswap/v2-subgraph/blob/7c82235cad7aee4cfce8ea82f0030af3d224833e/src/mappings/pricing.ts#L43\n        // Which helps filter pools with manipulated prices/liquidity.\n        // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.\n        const FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';\n        const poolsSanitized = pools\n            .filter((pool) => {\n            return (pool.token0.id == FEI ||\n                pool.token1.id == FEI ||\n                parseFloat(pool.trackedReserveETH) > threshold);\n        })\n            .map((pool) => {\n            return {\n                ...pool,\n                id: pool.id.toLowerCase(),\n                token0: {\n                    id: pool.token0.id.toLowerCase(),\n                },\n                token1: {\n                    id: pool.token1.id.toLowerCase(),\n                },\n                supply: parseFloat(pool.totalSupply),\n                reserve: parseFloat(pool.trackedReserveETH),\n                reserveUSD: parseFloat(pool.reserveUSD),\n            };\n        });\n        log.info(`Got ${pools.length} V2 pools from the subgraph. ${poolsSanitized.length} after filtering`);\n        return poolsSanitized;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViZ3JhcGgtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YyL3N1YmdyYXBoLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxNQUFNLGFBQWEsQ0FBQztBQUNoQyxPQUFPLE9BQU8sTUFBTSxlQUFlLENBQUM7QUFDcEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRCxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQStCckMsTUFBTSxxQkFBcUIsR0FBc0M7SUFDL0QsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQ2YsNkRBQTZEO0lBQy9ELENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUNmLHNFQUFzRTtDQUN6RSxDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBRXhCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLCtDQUErQztBQWdCdkUsTUFBTSxPQUFPLGtCQUFrQjtJQUc3QixZQUNVLE9BQWdCLEVBQ2hCLFVBQVUsQ0FBQyxFQUNYLFVBQVUsTUFBTSxFQUNoQixXQUFXLElBQUksRUFDZixXQUFXLFNBQVM7UUFKcEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixZQUFPLEdBQVAsT0FBTyxDQUFJO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFPO1FBQ2YsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUU1QixNQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLElB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"]},"metadata":{},"sourceType":"module"}