{"ast":null,"code":"import { css as _css } from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/home/diep/freelance/interface/src/theme/components/SegmentedControl.tsx\";\nimport Row, { AutoRow } from 'components/Row';\nimport { ThemedText } from 'theme';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst SegmentWrapper = _styled(AutoRow).withConfig({\n  displayName: \"SegmentedControl__SegmentWrapper\",\n  componentId: \"sc-1euncec-0\"\n})([\"display:flex;flex-direction:row;justify-content:center;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;cursor:pointer;border-radius:12px;padding:6px;color:\", \";gap:4px;\", \";:hover{background-color:\", \";color:\", \";}transition:\", \";\"], _ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.textSecondary;\n}, _ref2 => {\n  let {\n    theme,\n    active\n  } = _ref2;\n  return active && _css`\n      background-color: ${theme.accentActionSoft};\n      color: ${_ref3 => {\n    let {\n      theme\n    } = _ref3;\n    return theme.accentAction;\n  }};\n    `;\n}, _ref4 => {\n  let {\n    theme,\n    active\n  } = _ref4;\n  return active ? theme.backgroundInteractive : theme.backgroundModule;\n}, _ref5 => {\n  let {\n    theme\n  } = _ref5;\n  return theme.textPrimary;\n}, _ref6 => {\n  let {\n    theme\n  } = _ref6;\n  return `${theme.transition.duration.medium} ${theme.transition.timing.ease}`;\n});\nexport function Segment(_ref7) {\n  let {\n    active,\n    value,\n    Icon,\n    onSelect,\n    testId,\n    children\n  } = _ref7;\n  return /*#__PURE__*/_jsxDEV(SegmentWrapper, {\n    active: active,\n    onClick: () => onSelect === null || onSelect === void 0 ? void 0 : onSelect(value),\n    \"data-testid\": testId,\n    children: [Icon && /*#__PURE__*/_jsxDEV(Icon, {\n      size: 20,\n      stroke: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(ThemedText.SubHeader, {\n      color: \"currentColor\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_c = Segment;\nconst SegmentedControlWrapper = _styled(Row).withConfig({\n  displayName: \"SegmentedControl__SegmentedControlWrapper\",\n  componentId: \"sc-1euncec-1\"\n})([\"border-radius:16px;gap:4px;padding:4px;outline:1px solid \", \";outline-offset:-1px;\"], _ref8 => {\n  let {\n    theme\n  } = _ref8;\n  return theme.backgroundOutline;\n});\nexport function SegmentedControl(_ref9) {\n  let {\n    selected,\n    onSelect,\n    children\n  } = _ref9;\n  return /*#__PURE__*/_jsxDEV(SegmentedControlWrapper, {\n    children: children.map((segment, index) => {\n      var _segment$props$onSele, _segment$props$active;\n      if ((segment === null || segment === void 0 ? void 0 : segment.type) != Segment) {\n        console.warn('<SegmentedControl> children must be of type <Segment>');\n        return null;\n      }\n      return /*#__PURE__*/_createElement(Segment, {\n        ...segment.props,\n        onSelect: (_segment$props$onSele = segment.props.onSelect) !== null && _segment$props$onSele !== void 0 ? _segment$props$onSele : onSelect,\n        active: (_segment$props$active = segment.props.active) !== null && _segment$props$active !== void 0 ? _segment$props$active : segment.props.value === selected,\n        key: `segment ${index}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_c2 = SegmentedControl;\nvar _c, _c2;\n$RefreshReg$(_c, \"Segment\");\n$RefreshReg$(_c2, \"SegmentedControl\");","map":{"version":3,"names":["Row","AutoRow","ThemedText","SegmentWrapper","styled","theme","textSecondary","active","css","accentActionSoft","accentAction","backgroundInteractive","backgroundModule","textPrimary","transition","duration","medium","timing","ease","Segment","value","Icon","onSelect","testId","children","SegmentedControlWrapper","backgroundOutline","SegmentedControl","selected","map","segment","index","type","console","warn","props"],"sources":["/home/diep/freelance/interface/src/theme/components/SegmentedControl.tsx"],"sourcesContent":["import Row, { AutoRow } from 'components/Row'\nimport { PropsWithChildren } from 'react'\nimport { Icon } from 'react-feather'\nimport styled, { css } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nconst SegmentWrapper = styled(AutoRow)<{ active?: boolean }>`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  cursor: pointer;\n\n  border-radius: 12px;\n  padding: 6px;\n  color: ${({ theme }) => theme.textSecondary};\n  gap: 4px;\n\n  ${({ theme, active }) =>\n    active &&\n    css`\n      background-color: ${theme.accentActionSoft};\n      color: ${({ theme }) => theme.accentAction};\n    `};\n\n  :hover {\n    background-color: ${({ theme, active }) => (active ? theme.backgroundInteractive : theme.backgroundModule)};\n    color: ${({ theme }) => theme.textPrimary};\n  }\n\n  transition: ${({ theme }) => `${theme.transition.duration.medium} ${theme.transition.timing.ease}`};\n`\n\ntype SegmentProps<T> = PropsWithChildren<{\n  active?: boolean\n  value: T\n  Icon?: Icon\n  onSelect?: (v: T) => void\n  testId?: string\n}>\nexport function Segment<T>({ active, value, Icon, onSelect, testId, children }: SegmentProps<T>) {\n  return (\n    <SegmentWrapper active={active} onClick={() => onSelect?.(value)} data-testid={testId}>\n      {Icon && <Icon size={20} stroke=\"currentColor\" />}\n      <ThemedText.SubHeader color=\"currentColor\">{children}</ThemedText.SubHeader>\n    </SegmentWrapper>\n  )\n}\n\nconst SegmentedControlWrapper = styled(Row)`\n  border-radius: 16px;\n  gap: 4px;\n  padding: 4px;\n  outline: 1px solid ${({ theme }) => theme.backgroundOutline};\n  outline-offset: -1px;\n`\n\nexport function SegmentedControl<T>({\n  selected,\n  onSelect,\n  children,\n}: {\n  selected: T\n  onSelect: (v: T) => void\n  children: React.ReactElement<SegmentProps<T>>[]\n}) {\n  return (\n    <SegmentedControlWrapper>\n      {/* Defaults child segment onSelect & active props based on control parent input */}\n      {children.map((segment, index) => {\n        if (segment?.type != Segment) {\n          console.warn('<SegmentedControl> children must be of type <Segment>')\n          return null\n        }\n        return (\n          <Segment\n            {...segment.props}\n            onSelect={segment.props.onSelect ?? onSelect}\n            active={segment.props.active ?? segment.props.value === selected}\n            key={`segment ${index}`}\n          />\n        )\n      })}\n    </SegmentedControlWrapper>\n  )\n}\n"],"mappings":";;;AAAA,OAAOA,GAAG,IAAIC,OAAO,QAAQ,gBAAgB;AAI7C,SAASC,UAAU,QAAQ,OAAO;AAAA;AAAA;AAElC,MAAMC,cAAc,GAAGC,OAAM,CAACH,OAAO,CAAC;EAAA;EAAA;AAAA,yPAa3B;EAAA,IAAC;IAAEI;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACC,aAAa;AAAA,GAGzC;EAAA,IAAC;IAAED,KAAK;IAAEE;EAAO,CAAC;EAAA,OAClBA,MAAM,IACNC,IAAI;AACR,0BAA0BH,KAAK,CAACI,gBAAiB;AACjD,eAAe;IAAA,IAAC;MAAEJ;IAAM,CAAC;IAAA,OAAKA,KAAK,CAACK,YAAY;EAAA,CAAC;AACjD,KAAK;AAAA,GAGmB;EAAA,IAAC;IAAEL,KAAK;IAAEE;EAAO,CAAC;EAAA,OAAMA,MAAM,GAAGF,KAAK,CAACM,qBAAqB,GAAGN,KAAK,CAACO,gBAAgB;AAAA,CAAC,EACjG;EAAA,IAAC;IAAEP;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACQ,WAAW;AAAA,GAG7B;EAAA,IAAC;IAAER;EAAM,CAAC;EAAA,OAAM,GAAEA,KAAK,CAACS,UAAU,CAACC,QAAQ,CAACC,MAAO,IAAGX,KAAK,CAACS,UAAU,CAACG,MAAM,CAACC,IAAK,EAAC;AAAA,EACnG;AASD,OAAO,SAASC,OAAO,QAA0E;EAAA,IAAtE;IAAEZ,MAAM;IAAEa,KAAK;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAA0B,CAAC;EAC7F,oBACE,QAAC,cAAc;IAAC,MAAM,EAAEjB,MAAO;IAAC,OAAO,EAAE,MAAMe,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGF,KAAK,CAAE;IAAC,eAAaG,MAAO;IAAA,WACnFF,IAAI,iBAAI,QAAC,IAAI;MAAC,IAAI,EAAE,EAAG;MAAC,MAAM,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eACjD,QAAC,UAAU,CAAC,SAAS;MAAC,KAAK,EAAC,cAAc;MAAA,UAAEG;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAwB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7D;AAErB;AAAC,KAPeL,OAAO;AASvB,MAAMM,uBAAuB,GAAGrB,OAAM,CAACJ,GAAG,CAAC;EAAA;EAAA;AAAA,2FAIpB;EAAA,IAAC;IAAEK;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACqB,iBAAiB;AAAA,EAE5D;AAED,OAAO,SAASC,gBAAgB,QAQ7B;EAAA,IARiC;IAClCC,QAAQ;IACRN,QAAQ;IACRE;EAKF,CAAC;EACC,oBACE,QAAC,uBAAuB;IAAA,UAErBA,QAAQ,CAACK,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;MAAA;MAChC,IAAI,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,IAAI,KAAIb,OAAO,EAAE;QAC5Bc,OAAO,CAACC,IAAI,CAAC,uDAAuD,CAAC;QACrE,OAAO,IAAI;MACb;MACA,oBACE,eAAC,OAAO;QAAA,GACFJ,OAAO,CAACK,KAAK;QACjB,QAAQ,2BAAEL,OAAO,CAACK,KAAK,CAACb,QAAQ,yEAAIA,QAAS;QAC7C,MAAM,2BAAEQ,OAAO,CAACK,KAAK,CAAC5B,MAAM,yEAAIuB,OAAO,CAACK,KAAK,CAACf,KAAK,KAAKQ,QAAS;QACjE,GAAG,EAAG,WAAUG,KAAM,EAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACxB;IAEN,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACsB;AAE9B;AAAC,MA5BeJ,gBAAgB;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}