{"ast":null,"code":"import { getCurrentHub, addBreadcrumb, addGlobalEventProcessor, prepareEvent, setContext, captureException } from '@sentry/core';\nimport { GLOBAL_OBJ, logger, uuid4, htmlTreeAsString, addInstrumentationHandler, browserPerformanceTimeOrigin, createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader, isNodeEnv, dropUndefinedKeys } from '@sentry/utils';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nconst WINDOW = GLOBAL_OBJ;\nconst REPLAY_SESSION_KEY = 'sentryReplaySession';\nconst REPLAY_EVENT_NAME = 'replay_event';\nconst UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session\nconst SESSION_IDLE_DURATION = 300000; // 5 minutes in ms\n\n// The maximum length of a session\nconst MAX_SESSION_LIFE = 3600000; // 60 minutes\n\n/** Default flush delays */\nconst DEFAULT_FLUSH_MIN_DELAY = 5000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nconst DEFAULT_FLUSH_MAX_DELAY = 5500;\n\n/* How long to wait for error checkouts */\nconst ERROR_CHECKOUT_TIME = 60000;\nconst RETRY_BASE_INTERVAL = 5000;\nconst RETRY_MAX_COUNT = 3;\nvar NodeType$1;\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$1 || (NodeType$1 = {}));\nfunction isElement(n) {\n  return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n  const host = n === null || n === void 0 ? void 0 : n.host;\n  return Boolean(host && host.shadowRoot && host.shadowRoot === n);\n}\nfunction isInputTypeMasked(_ref) {\n  let {\n    maskInputOptions,\n    tagName,\n    type\n  } = _ref;\n  if (tagName.toLowerCase() === 'option') {\n    tagName = 'select';\n  }\n  const actualType = typeof type === 'string' ? type.toLowerCase() : undefined;\n  return maskInputOptions[tagName.toLowerCase()] || actualType && maskInputOptions[actualType] || actualType === 'password' || tagName === 'input' && !type && maskInputOptions['text'];\n}\nfunction hasInputMaskOptions(_ref2) {\n  let {\n    tagName,\n    type,\n    maskInputOptions,\n    maskInputSelector\n  } = _ref2;\n  return maskInputSelector || isInputTypeMasked({\n    maskInputOptions,\n    tagName,\n    type\n  });\n}\nfunction maskInputValue(_ref3) {\n  let {\n    input,\n    maskInputSelector,\n    unmaskInputSelector,\n    maskInputOptions,\n    tagName,\n    type,\n    value,\n    maskInputFn\n  } = _ref3;\n  let text = value || '';\n  if (unmaskInputSelector && input.matches(unmaskInputSelector)) {\n    return text;\n  }\n  if (input.hasAttribute('rr_is_password')) {\n    type = 'password';\n  }\n  if (isInputTypeMasked({\n    maskInputOptions,\n    tagName,\n    type\n  }) || maskInputSelector && input.matches(maskInputSelector)) {\n    if (maskInputFn) {\n      text = maskInputFn(text);\n    } else {\n      text = '*'.repeat(text.length);\n    }\n  }\n  return text;\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return true;\n  const chunkSize = 50;\n  for (let x = 0; x < canvas.width; x += chunkSize) {\n    for (let y = 0; y < canvas.height; y += chunkSize) {\n      const getImageData = ctx.getImageData;\n      const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData ? getImageData[ORIGINAL_ATTRIBUTE_NAME] : getImageData;\n      const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n      if (pixelBuffer.some(pixel => pixel !== 0)) return false;\n    }\n  }\n  return true;\n}\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction defaultMaskFn(str) {\n  return str ? str.replace(/[\\S]/g, '*') : '';\n}\nfunction genId() {\n  return _id++;\n}\nfunction getValidTagName(element) {\n  if (element instanceof HTMLFormElement) {\n    return 'form';\n  }\n  const processedTagName = element.tagName.toLowerCase().trim();\n  if (tagNameRegex.test(processedTagName)) {\n    return 'div';\n  }\n  return processedTagName;\n}\nfunction getCssRulesString(s) {\n  try {\n    const rules = s.rules || s.cssRules;\n    return rules ? Array.from(rules).map(getCssRuleString).join('') : null;\n  } catch (error) {\n    return null;\n  }\n}\nfunction getCssRuleString(rule) {\n  let cssStringified = rule.cssText;\n  if (isCSSImportRule(rule)) {\n    try {\n      cssStringified = getCssRulesString(rule.styleSheet) || cssStringified;\n    } catch (_a) {}\n  }\n  return cssStringified;\n}\nfunction isCSSImportRule(rule) {\n  return 'styleSheet' in rule;\n}\nfunction stringifyStyleSheet(sheet) {\n  return sheet.cssRules ? Array.from(sheet.cssRules).map(rule => rule.cssText || '').join('') : '';\n}\nfunction extractOrigin(url) {\n  let origin = '';\n  if (url.indexOf('//') > -1) {\n    origin = url.split('/').slice(0, 3).join('/');\n  } else {\n    origin = url.split('/')[0];\n  }\n  origin = origin.split('?')[0];\n  return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/|#).*/;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n  return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n    const filePath = path1 || path2 || path3;\n    const maybeQuote = quote1 || quote2 || '';\n    if (!filePath) {\n      return origin;\n    }\n    if (!RELATIVE_PATH.test(filePath)) {\n      return `url(${maybeQuote}${filePath}${maybeQuote})`;\n    }\n    if (DATA_URI.test(filePath)) {\n      return `url(${maybeQuote}${filePath}${maybeQuote})`;\n    }\n    if (filePath[0] === '/') {\n      return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n    }\n    const stack = href.split('/');\n    const parts = filePath.split('/');\n    stack.pop();\n    for (const part of parts) {\n      if (part === '.') {\n        continue;\n      } else if (part === '..') {\n        stack.pop();\n      } else {\n        stack.push(part);\n      }\n    }\n    return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n  });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n  if (attributeValue.trim() === '') {\n    return attributeValue;\n  }\n  let pos = 0;\n  function collectCharacters(regEx) {\n    let chars;\n    let match = regEx.exec(attributeValue.substring(pos));\n    if (match) {\n      chars = match[0];\n      pos += chars.length;\n      return chars;\n    }\n    return '';\n  }\n  let output = [];\n  while (true) {\n    collectCharacters(SRCSET_COMMAS_OR_SPACES);\n    if (pos >= attributeValue.length) {\n      break;\n    }\n    let url = collectCharacters(SRCSET_NOT_SPACES);\n    if (url.slice(-1) === ',') {\n      url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n      output.push(url);\n    } else {\n      let descriptorsStr = '';\n      url = absoluteToDoc(doc, url);\n      let inParens = false;\n      while (true) {\n        let c = attributeValue.charAt(pos);\n        if (c === '') {\n          output.push((url + descriptorsStr).trim());\n          break;\n        } else if (!inParens) {\n          if (c === ',') {\n            pos += 1;\n            output.push((url + descriptorsStr).trim());\n            break;\n          } else if (c === '(') {\n            inParens = true;\n          }\n        } else {\n          if (c === ')') {\n            inParens = false;\n          }\n        }\n        descriptorsStr += c;\n        pos += 1;\n      }\n    }\n  }\n  return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n  if (!attributeValue || attributeValue.trim() === '') {\n    return attributeValue;\n  }\n  const a = doc.createElement('a');\n  a.href = attributeValue;\n  return a.href;\n}\nfunction isSVGElement(el) {\n  return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n  const a = document.createElement('a');\n  a.href = '';\n  return a.href;\n}\nfunction transformAttribute(doc, element, _tagName, _name, value, maskAllText, unmaskTextSelector, maskTextFn) {\n  if (!value) {\n    return value;\n  }\n  const name = _name.toLowerCase();\n  const tagName = _tagName.toLowerCase();\n  if (name === 'src' || name === 'href') {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'xlink:href' && value[0] !== '#') {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'background' && (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n    return absoluteToDoc(doc, value);\n  } else if (name === 'srcset') {\n    return getAbsoluteSrcsetString(doc, value);\n  } else if (name === 'style') {\n    return absoluteToStylesheet(value, getHref());\n  } else if (tagName === 'object' && name === 'data') {\n    return absoluteToDoc(doc, value);\n  } else if (maskAllText && _shouldMaskAttribute(element, name, tagName, unmaskTextSelector)) {\n    return maskTextFn ? maskTextFn(value) : defaultMaskFn(value);\n  }\n  return value;\n}\nfunction _shouldMaskAttribute(element, attribute, tagName, unmaskTextSelector) {\n  if (unmaskTextSelector && element.matches(unmaskTextSelector)) {\n    return false;\n  }\n  return ['placeholder', 'title', 'aria-label'].indexOf(attribute) > -1 || tagName === 'input' && attribute === 'value' && element.hasAttribute('type') && ['submit', 'button'].indexOf(element.getAttribute('type').toLowerCase()) > -1;\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n  if (unblockSelector && element.matches(unblockSelector)) {\n    return false;\n  }\n  if (typeof blockClass === 'string') {\n    if (element.classList.contains(blockClass)) {\n      return true;\n    }\n  } else {\n    for (let eIndex = 0; eIndex < element.classList.length; eIndex++) {\n      const className = element.classList[eIndex];\n      if (blockClass.test(className)) {\n        return true;\n      }\n    }\n  }\n  if (blockSelector) {\n    return element.matches(blockSelector);\n  }\n  return false;\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) {\n  if (!node) {\n    return false;\n  }\n  if (node.nodeType !== node.ELEMENT_NODE) {\n    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n  }\n  if (unmaskTextSelector) {\n    if (node.matches(unmaskTextSelector) || node.closest(unmaskTextSelector)) {\n      return false;\n    }\n  }\n  if (maskAllText) {\n    return true;\n  }\n  if (typeof maskTextClass === 'string') {\n    if (node.classList.contains(maskTextClass)) {\n      return true;\n    }\n  } else {\n    for (let eIndex = 0; eIndex < node.classList.length; eIndex++) {\n      const className = node.classList[eIndex];\n      if (maskTextClass.test(className)) {\n        return true;\n      }\n    }\n  }\n  if (maskTextSelector) {\n    if (node.matches(maskTextSelector)) {\n      return true;\n    }\n  }\n  return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n  const win = iframeEl.contentWindow;\n  if (!win) {\n    return;\n  }\n  let fired = false;\n  let readyState;\n  try {\n    readyState = win.document.readyState;\n  } catch (error) {\n    return;\n  }\n  if (readyState !== 'complete') {\n    const timer = setTimeout(() => {\n      if (!fired) {\n        listener();\n        fired = true;\n      }\n    }, iframeLoadTimeout);\n    iframeEl.addEventListener('load', () => {\n      clearTimeout(timer);\n      fired = true;\n      listener();\n    });\n    return;\n  }\n  const blankUrl = 'about:blank';\n  if (win.location.href !== blankUrl || iframeEl.src === blankUrl || iframeEl.src === '') {\n    setTimeout(listener, 0);\n    return;\n  }\n  iframeEl.addEventListener('load', listener);\n}\nfunction serializeNode(n, options) {\n  var _a;\n  const {\n    doc,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    inlineStylesheet,\n    maskInputSelector,\n    unmaskInputSelector,\n    maskAllText,\n    maskInputOptions = {},\n    maskTextFn,\n    maskInputFn,\n    dataURLOptions = {},\n    inlineImages,\n    recordCanvas,\n    keepIframeSrcFn\n  } = options;\n  let rootId;\n  if (doc.__sn) {\n    const docId = doc.__sn.id;\n    rootId = docId === 1 ? undefined : docId;\n  }\n  switch (n.nodeType) {\n    case n.DOCUMENT_NODE:\n      if (n.compatMode !== 'CSS1Compat') {\n        return {\n          type: NodeType$1.Document,\n          childNodes: [],\n          compatMode: n.compatMode,\n          rootId\n        };\n      } else {\n        return {\n          type: NodeType$1.Document,\n          childNodes: [],\n          rootId\n        };\n      }\n    case n.DOCUMENT_TYPE_NODE:\n      return {\n        type: NodeType$1.DocumentType,\n        name: n.name,\n        publicId: n.publicId,\n        systemId: n.systemId,\n        rootId\n      };\n    case n.ELEMENT_NODE:\n      const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n      const tagName = getValidTagName(n);\n      let attributes = {};\n      for (const {\n        name,\n        value\n      } of Array.from(n.attributes)) {\n        if (!skipAttribute(tagName, name)) {\n          attributes[name] = transformAttribute(doc, n, tagName, name, value, maskAllText, unmaskTextSelector, maskTextFn);\n        }\n      }\n      if (tagName === 'link' && inlineStylesheet) {\n        const stylesheet = Array.from(doc.styleSheets).find(s => {\n          return s.href === n.href;\n        });\n        let cssText = null;\n        if (stylesheet) {\n          cssText = getCssRulesString(stylesheet);\n        }\n        if (cssText) {\n          delete attributes.rel;\n          delete attributes.href;\n          attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n        }\n      }\n      if (tagName === 'style' && n.sheet && !(n.innerText || n.textContent || '').trim().length) {\n        const cssText = getCssRulesString(n.sheet);\n        if (cssText) {\n          attributes._cssText = absoluteToStylesheet(cssText, getHref());\n        }\n      }\n      if (tagName === 'input' || tagName === 'textarea' || tagName === 'select' || tagName === 'option') {\n        const el = n;\n        const value = getInputValue(tagName, el, attributes);\n        const checked = n.checked;\n        if (attributes.type !== 'submit' && attributes.type !== 'button' && value) {\n          attributes.value = maskInputValue({\n            input: el,\n            type: attributes.type,\n            tagName,\n            value,\n            maskInputSelector,\n            unmaskInputSelector,\n            maskInputOptions,\n            maskInputFn\n          });\n        }\n        if (checked) {\n          attributes.checked = checked;\n        }\n      }\n      if (tagName === 'option') {\n        if (n.selected && !maskInputOptions['select']) {\n          attributes.selected = true;\n        } else {\n          delete attributes.selected;\n        }\n      }\n      if (tagName === 'canvas' && recordCanvas) {\n        if (n.__context === '2d') {\n          if (!is2DCanvasBlank(n)) {\n            attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          }\n        } else if (!('__context' in n)) {\n          const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          const blankCanvas = document.createElement('canvas');\n          blankCanvas.width = n.width;\n          blankCanvas.height = n.height;\n          const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          if (canvasDataURL !== blankCanvasDataURL) {\n            attributes.rr_dataURL = canvasDataURL;\n          }\n        }\n      }\n      if (tagName === 'img' && inlineImages) {\n        if (!canvasService) {\n          canvasService = doc.createElement('canvas');\n          canvasCtx = canvasService.getContext('2d');\n        }\n        const image = n;\n        const oldValue = image.crossOrigin;\n        image.crossOrigin = 'anonymous';\n        const recordInlineImage = () => {\n          try {\n            canvasService.width = image.naturalWidth;\n            canvasService.height = image.naturalHeight;\n            canvasCtx.drawImage(image, 0, 0);\n            attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n          } catch (err) {\n            console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\n          }\n          oldValue ? attributes.crossOrigin = oldValue : delete attributes.crossOrigin;\n        };\n        if (image.complete && image.naturalWidth !== 0) recordInlineImage();else image.onload = recordInlineImage;\n      }\n      if (tagName === 'audio' || tagName === 'video') {\n        attributes.rr_mediaState = n.paused ? 'paused' : 'played';\n        attributes.rr_mediaCurrentTime = n.currentTime;\n      }\n      if (n.scrollLeft) {\n        attributes.rr_scrollLeft = n.scrollLeft;\n      }\n      if (n.scrollTop) {\n        attributes.rr_scrollTop = n.scrollTop;\n      }\n      if (needBlock) {\n        const {\n          width,\n          height\n        } = n.getBoundingClientRect();\n        attributes = {\n          class: attributes.class,\n          rr_width: `${width}px`,\n          rr_height: `${height}px`\n        };\n      }\n      if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n        if (!n.contentDocument) {\n          attributes.rr_src = attributes.src;\n        }\n        delete attributes.src;\n      }\n      return {\n        type: NodeType$1.Element,\n        tagName,\n        attributes,\n        childNodes: [],\n        isSVG: isSVGElement(n) || undefined,\n        needBlock,\n        rootId\n      };\n    case n.TEXT_NODE:\n      const parentTagName = n.parentNode && n.parentNode.tagName;\n      let textContent = n.textContent;\n      const isStyle = parentTagName === 'STYLE' ? true : undefined;\n      const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n      if (isStyle && textContent) {\n        try {\n          if (n.nextSibling || n.previousSibling) {} else if ((_a = n.parentNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) {\n            textContent = stringifyStyleSheet(n.parentNode.sheet);\n          }\n        } catch (err) {\n          console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n        }\n        textContent = absoluteToStylesheet(textContent, getHref());\n      }\n      if (isScript) {\n        textContent = 'SCRIPT_PLACEHOLDER';\n      }\n      if (parentTagName === 'TEXTAREA' && textContent) {\n        textContent = '';\n      } else if (parentTagName === 'OPTION' && textContent) {\n        const option = n.parentNode;\n        textContent = maskInputValue({\n          input: option,\n          type: null,\n          tagName: parentTagName,\n          value: textContent,\n          maskInputSelector,\n          unmaskInputSelector,\n          maskInputOptions,\n          maskInputFn\n        });\n      } else if (!isStyle && !isScript && needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) && textContent) {\n        textContent = maskTextFn ? maskTextFn(textContent) : defaultMaskFn(textContent);\n      }\n      return {\n        type: NodeType$1.Text,\n        textContent: textContent || '',\n        isStyle,\n        rootId\n      };\n    case n.CDATA_SECTION_NODE:\n      return {\n        type: NodeType$1.CDATA,\n        textContent: '',\n        rootId\n      };\n    case n.COMMENT_NODE:\n      return {\n        type: NodeType$1.Comment,\n        textContent: n.textContent || '',\n        rootId\n      };\n    default:\n      return false;\n  }\n}\nfunction lowerIfExists(maybeAttr) {\n  if (maybeAttr === undefined || maybeAttr === null) {\n    return '';\n  } else {\n    return maybeAttr.toLowerCase();\n  }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n  if (slimDOMOptions.comment && sn.type === NodeType$1.Comment) {\n    return true;\n  } else if (sn.type === NodeType$1.Element) {\n    if (slimDOMOptions.script && (sn.tagName === 'script' || sn.tagName === 'link' && (sn.attributes.rel === 'preload' || sn.attributes.rel === 'modulepreload') && sn.attributes.as === 'script' || sn.tagName === 'link' && sn.attributes.rel === 'prefetch' && typeof sn.attributes.href === 'string' && sn.attributes.href.endsWith('.js'))) {\n      return true;\n    } else if (slimDOMOptions.headFavicon && (sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon' || sn.tagName === 'meta' && (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) || lowerIfExists(sn.attributes.name) === 'application-name' || lowerIfExists(sn.attributes.rel) === 'icon' || lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' || lowerIfExists(sn.attributes.rel) === 'shortcut icon'))) {\n      return true;\n    } else if (sn.tagName === 'meta') {\n      if (slimDOMOptions.headMetaDescKeywords && lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n        return true;\n      } else if (slimDOMOptions.headMetaSocial && (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) || lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) || lowerIfExists(sn.attributes.name) === 'pinterest')) {\n        return true;\n      } else if (slimDOMOptions.headMetaRobots && (lowerIfExists(sn.attributes.name) === 'robots' || lowerIfExists(sn.attributes.name) === 'googlebot' || lowerIfExists(sn.attributes.name) === 'bingbot')) {\n        return true;\n      } else if (slimDOMOptions.headMetaHttpEquiv && sn.attributes['http-equiv'] !== undefined) {\n        return true;\n      } else if (slimDOMOptions.headMetaAuthorship && (lowerIfExists(sn.attributes.name) === 'author' || lowerIfExists(sn.attributes.name) === 'generator' || lowerIfExists(sn.attributes.name) === 'framework' || lowerIfExists(sn.attributes.name) === 'publisher' || lowerIfExists(sn.attributes.name) === 'progid' || lowerIfExists(sn.attributes.property).match(/^article:/) || lowerIfExists(sn.attributes.property).match(/^product:/))) {\n        return true;\n      } else if (slimDOMOptions.headMetaVerification && (lowerIfExists(sn.attributes.name) === 'google-site-verification' || lowerIfExists(sn.attributes.name) === 'yandex-verification' || lowerIfExists(sn.attributes.name) === 'csrf-token' || lowerIfExists(sn.attributes.name) === 'p:domain_verify' || lowerIfExists(sn.attributes.name) === 'verify-v1' || lowerIfExists(sn.attributes.name) === 'verification' || lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction serializeNodeWithId(n, options) {\n  const {\n    doc,\n    map,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    skipChild = false,\n    inlineStylesheet = true,\n    maskInputSelector,\n    unmaskInputSelector,\n    maskAllText,\n    maskInputOptions = {},\n    maskTextFn,\n    maskInputFn,\n    slimDOMOptions,\n    dataURLOptions = {},\n    inlineImages = false,\n    recordCanvas = false,\n    onSerialize,\n    onIframeLoad,\n    iframeLoadTimeout = 5000,\n    keepIframeSrcFn = () => false\n  } = options;\n  let {\n    preserveWhiteSpace = true\n  } = options;\n  const _serializedNode = serializeNode(n, {\n    doc,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    inlineStylesheet,\n    maskInputSelector,\n    unmaskInputSelector,\n    maskAllText,\n    maskInputOptions,\n    maskTextFn,\n    maskInputFn,\n    dataURLOptions,\n    inlineImages,\n    recordCanvas,\n    keepIframeSrcFn\n  });\n  if (!_serializedNode) {\n    console.warn(n, 'not serialized');\n    return null;\n  }\n  let id;\n  if ('__sn' in n) {\n    id = n.__sn.id;\n  } else if (slimDOMExcluded(_serializedNode, slimDOMOptions) || !preserveWhiteSpace && _serializedNode.type === NodeType$1.Text && !_serializedNode.isStyle && !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length) {\n    id = IGNORED_NODE;\n  } else {\n    id = genId();\n  }\n  const serializedNode = Object.assign(_serializedNode, {\n    id\n  });\n  n.__sn = serializedNode;\n  if (id === IGNORED_NODE) {\n    return null;\n  }\n  map[id] = n;\n  if (onSerialize) {\n    onSerialize(n);\n  }\n  let recordChild = !skipChild;\n  if (serializedNode.type === NodeType$1.Element) {\n    recordChild = recordChild && !serializedNode.needBlock;\n    delete serializedNode.needBlock;\n    if (n.shadowRoot) serializedNode.isShadowHost = true;\n  }\n  if ((serializedNode.type === NodeType$1.Document || serializedNode.type === NodeType$1.Element) && recordChild) {\n    if (slimDOMOptions.headWhitespace && _serializedNode.type === NodeType$1.Element && _serializedNode.tagName === 'head') {\n      preserveWhiteSpace = false;\n    }\n    const bypassOptions = {\n      doc,\n      map,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      skipChild,\n      inlineStylesheet,\n      maskInputSelector,\n      unmaskInputSelector,\n      maskAllText,\n      maskInputOptions,\n      maskTextFn,\n      maskInputFn,\n      slimDOMOptions,\n      dataURLOptions,\n      inlineImages,\n      recordCanvas,\n      preserveWhiteSpace,\n      onSerialize,\n      onIframeLoad,\n      iframeLoadTimeout,\n      keepIframeSrcFn\n    };\n    for (const childN of Array.from(n.childNodes)) {\n      const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n      if (serializedChildNode) {\n        serializedNode.childNodes.push(serializedChildNode);\n      }\n    }\n    if (isElement(n) && n.shadowRoot) {\n      for (const childN of Array.from(n.shadowRoot.childNodes)) {\n        const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n        if (serializedChildNode) {\n          serializedChildNode.isShadow = true;\n          serializedNode.childNodes.push(serializedChildNode);\n        }\n      }\n    }\n  }\n  if (n.parentNode && isShadowRoot(n.parentNode)) {\n    serializedNode.isShadow = true;\n  }\n  if (serializedNode.type === NodeType$1.Element && serializedNode.tagName === 'iframe') {\n    onceIframeLoaded(n, () => {\n      const iframeDoc = n.contentDocument;\n      if (iframeDoc && onIframeLoad) {\n        const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n          doc: iframeDoc,\n          map,\n          blockClass,\n          blockSelector,\n          unblockSelector,\n          maskTextClass,\n          maskTextSelector,\n          unmaskTextSelector,\n          skipChild: false,\n          inlineStylesheet,\n          maskInputSelector,\n          unmaskInputSelector,\n          maskAllText,\n          maskInputOptions,\n          maskTextFn,\n          maskInputFn,\n          slimDOMOptions,\n          dataURLOptions,\n          inlineImages,\n          recordCanvas,\n          preserveWhiteSpace,\n          onSerialize,\n          onIframeLoad,\n          iframeLoadTimeout,\n          keepIframeSrcFn\n        });\n        if (serializedIframeNode) {\n          onIframeLoad(n, serializedIframeNode);\n        }\n      }\n    }, iframeLoadTimeout);\n  }\n  return serializedNode;\n}\nfunction snapshot(n, options) {\n  const {\n    blockClass = 'rr-block',\n    blockSelector = null,\n    unblockSelector = null,\n    maskTextClass = 'rr-mask',\n    maskTextSelector = null,\n    unmaskTextSelector = null,\n    inlineStylesheet = true,\n    inlineImages = false,\n    recordCanvas = false,\n    maskInputSelector = null,\n    unmaskInputSelector = null,\n    maskAllText = false,\n    maskAllInputs = false,\n    maskTextFn,\n    maskInputFn,\n    slimDOM = false,\n    dataURLOptions,\n    preserveWhiteSpace,\n    onSerialize,\n    onIframeLoad,\n    iframeLoadTimeout,\n    keepIframeSrcFn = () => false\n  } = options || {};\n  const idNodeMap = {};\n  const maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true\n  } : maskAllInputs === false ? {} : maskAllInputs;\n  const slimDOMOptions = slimDOM === true || slimDOM === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaDescKeywords: slimDOM === 'all',\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaAuthorship: true,\n    headMetaVerification: true\n  } : slimDOM === false ? {} : slimDOM;\n  return [serializeNodeWithId(n, {\n    doc: n,\n    map: idNodeMap,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    maskTextClass,\n    maskTextSelector,\n    unmaskTextSelector,\n    skipChild: false,\n    inlineStylesheet,\n    maskInputSelector,\n    unmaskInputSelector,\n    maskAllText,\n    maskInputOptions,\n    maskTextFn,\n    maskInputFn,\n    slimDOMOptions,\n    dataURLOptions,\n    inlineImages,\n    recordCanvas,\n    preserveWhiteSpace,\n    onSerialize,\n    onIframeLoad,\n    iframeLoadTimeout,\n    keepIframeSrcFn\n  }), idNodeMap];\n}\nfunction skipAttribute(tagName, attributeName, value) {\n  return (tagName === 'video' || tagName === 'audio') && attributeName === 'autoplay';\n}\nfunction getInputValue(tagName, el, attributes) {\n  if (tagName === 'input' && (attributes.type === 'radio' || attributes.type === 'checkbox')) {\n    return el.getAttribute('value') || '';\n  }\n  return el.value;\n}\nvar EventType;\n(function (EventType) {\n  EventType[EventType[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n  EventType[EventType[\"Load\"] = 1] = \"Load\";\n  EventType[EventType[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n  EventType[EventType[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n  EventType[EventType[\"Meta\"] = 4] = \"Meta\";\n  EventType[EventType[\"Custom\"] = 5] = \"Custom\";\n  EventType[EventType[\"Plugin\"] = 6] = \"Plugin\";\n})(EventType || (EventType = {}));\nvar IncrementalSource;\n(function (IncrementalSource) {\n  IncrementalSource[IncrementalSource[\"Mutation\"] = 0] = \"Mutation\";\n  IncrementalSource[IncrementalSource[\"MouseMove\"] = 1] = \"MouseMove\";\n  IncrementalSource[IncrementalSource[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n  IncrementalSource[IncrementalSource[\"Scroll\"] = 3] = \"Scroll\";\n  IncrementalSource[IncrementalSource[\"ViewportResize\"] = 4] = \"ViewportResize\";\n  IncrementalSource[IncrementalSource[\"Input\"] = 5] = \"Input\";\n  IncrementalSource[IncrementalSource[\"TouchMove\"] = 6] = \"TouchMove\";\n  IncrementalSource[IncrementalSource[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n  IncrementalSource[IncrementalSource[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n  IncrementalSource[IncrementalSource[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n  IncrementalSource[IncrementalSource[\"Font\"] = 10] = \"Font\";\n  IncrementalSource[IncrementalSource[\"Log\"] = 11] = \"Log\";\n  IncrementalSource[IncrementalSource[\"Drag\"] = 12] = \"Drag\";\n  IncrementalSource[IncrementalSource[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n})(IncrementalSource || (IncrementalSource = {}));\nvar MouseInteractions;\n(function (MouseInteractions) {\n  MouseInteractions[MouseInteractions[\"MouseUp\"] = 0] = \"MouseUp\";\n  MouseInteractions[MouseInteractions[\"MouseDown\"] = 1] = \"MouseDown\";\n  MouseInteractions[MouseInteractions[\"Click\"] = 2] = \"Click\";\n  MouseInteractions[MouseInteractions[\"ContextMenu\"] = 3] = \"ContextMenu\";\n  MouseInteractions[MouseInteractions[\"DblClick\"] = 4] = \"DblClick\";\n  MouseInteractions[MouseInteractions[\"Focus\"] = 5] = \"Focus\";\n  MouseInteractions[MouseInteractions[\"Blur\"] = 6] = \"Blur\";\n  MouseInteractions[MouseInteractions[\"TouchStart\"] = 7] = \"TouchStart\";\n  MouseInteractions[MouseInteractions[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n  MouseInteractions[MouseInteractions[\"TouchEnd\"] = 9] = \"TouchEnd\";\n  MouseInteractions[MouseInteractions[\"TouchCancel\"] = 10] = \"TouchCancel\";\n})(MouseInteractions || (MouseInteractions = {}));\nvar CanvasContext;\n(function (CanvasContext) {\n  CanvasContext[CanvasContext[\"2D\"] = 0] = \"2D\";\n  CanvasContext[CanvasContext[\"WebGL\"] = 1] = \"WebGL\";\n  CanvasContext[CanvasContext[\"WebGL2\"] = 2] = \"WebGL2\";\n})(CanvasContext || (CanvasContext = {}));\nvar MediaInteractions;\n(function (MediaInteractions) {\n  MediaInteractions[MediaInteractions[\"Play\"] = 0] = \"Play\";\n  MediaInteractions[MediaInteractions[\"Pause\"] = 1] = \"Pause\";\n  MediaInteractions[MediaInteractions[\"Seeked\"] = 2] = \"Seeked\";\n  MediaInteractions[MediaInteractions[\"VolumeChange\"] = 3] = \"VolumeChange\";\n})(MediaInteractions || (MediaInteractions = {}));\nvar ReplayerEvents;\n(function (ReplayerEvents) {\n  ReplayerEvents[\"Start\"] = \"start\";\n  ReplayerEvents[\"Pause\"] = \"pause\";\n  ReplayerEvents[\"Resume\"] = \"resume\";\n  ReplayerEvents[\"Resize\"] = \"resize\";\n  ReplayerEvents[\"Finish\"] = \"finish\";\n  ReplayerEvents[\"FullsnapshotRebuilded\"] = \"fullsnapshot-rebuilded\";\n  ReplayerEvents[\"LoadStylesheetStart\"] = \"load-stylesheet-start\";\n  ReplayerEvents[\"LoadStylesheetEnd\"] = \"load-stylesheet-end\";\n  ReplayerEvents[\"SkipStart\"] = \"skip-start\";\n  ReplayerEvents[\"SkipEnd\"] = \"skip-end\";\n  ReplayerEvents[\"MouseInteraction\"] = \"mouse-interaction\";\n  ReplayerEvents[\"EventCast\"] = \"event-cast\";\n  ReplayerEvents[\"CustomEvent\"] = \"custom-event\";\n  ReplayerEvents[\"Flush\"] = \"flush\";\n  ReplayerEvents[\"StateChange\"] = \"state-change\";\n  ReplayerEvents[\"PlayBack\"] = \"play-back\";\n})(ReplayerEvents || (ReplayerEvents = {}));\nfunction on(type, fn) {\n  let target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n  const options = {\n    capture: true,\n    passive: true\n  };\n  target.addEventListener(type, fn, options);\n  return () => target.removeEventListener(type, fn, options);\n}\nfunction createMirror() {\n  return {\n    map: {},\n    getId(n) {\n      if (!n || !n.__sn) {\n        return -1;\n      }\n      return n.__sn.id;\n    },\n    getNode(id) {\n      return this.map[id] || null;\n    },\n    removeNodeFromMap(n) {\n      const id = n.__sn && n.__sn.id;\n      delete this.map[id];\n      if (n.childNodes) {\n        n.childNodes.forEach(child => this.removeNodeFromMap(child));\n      }\n    },\n    has(id) {\n      return this.map.hasOwnProperty(id);\n    },\n    reset() {\n      this.map = {};\n    }\n  };\n}\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' + '\\r\\n' + 'now you can use replayer.getMirror() to access the mirror instance of a replayer,' + '\\r\\n' + 'or you can use record.mirror to access the mirror instance during recording.';\nlet _mirror = {\n  map: {},\n  getId() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return -1;\n  },\n  getNode() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return null;\n  },\n  removeNodeFromMap() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n  },\n  has() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    return false;\n  },\n  reset() {\n    console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n  }\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n  _mirror = new Proxy(_mirror, {\n    get(target, prop, receiver) {\n      if (prop === 'map') {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n      }\n      return Reflect.get(target, prop, receiver);\n    }\n  });\n}\nfunction throttle(func, wait) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let timeout = null;\n  let previous = 0;\n  return function (arg) {\n    let now = Date.now();\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n    let remaining = wait - (now - previous);\n    let context = this;\n    let args = arguments;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(() => {\n        previous = options.leading === false ? 0 : Date.now();\n        timeout = null;\n        func.apply(context, args);\n      }, remaining);\n    }\n  };\n}\nfunction hookSetter(target, key, d, isRevoked) {\n  let win = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window;\n  const original = win.Object.getOwnPropertyDescriptor(target, key);\n  win.Object.defineProperty(target, key, isRevoked ? d : {\n    set(value) {\n      setTimeout(() => {\n        d.set.call(this, value);\n      }, 0);\n      if (original && original.set) {\n        original.set.call(this, value);\n      }\n    }\n  });\n  return () => hookSetter(target, key, original || {}, true);\n}\nfunction patch(source, name, replacement) {\n  try {\n    if (!(name in source)) {\n      return () => {};\n    }\n    const original = source[name];\n    const wrapped = replacement(original);\n    if (typeof wrapped === 'function') {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __rrweb_original__: {\n          enumerable: false,\n          value: original\n        }\n      });\n    }\n    source[name] = wrapped;\n    return () => {\n      source[name] = original;\n    };\n  } catch (_a) {\n    return () => {};\n  }\n}\nfunction getWindowHeight() {\n  return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight;\n}\nfunction getWindowWidth() {\n  return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth;\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector) {\n  if (!node) {\n    return false;\n  }\n  if (node.nodeType === node.ELEMENT_NODE) {\n    let needBlock = false;\n    const needUnblock = unblockSelector && node.matches(unblockSelector);\n    if (typeof blockClass === 'string') {\n      if (node.closest !== undefined) {\n        needBlock = !needUnblock && node.closest('.' + blockClass) !== null;\n      } else {\n        needBlock = !needUnblock && node.classList.contains(blockClass);\n      }\n    } else {\n      !needUnblock && node.classList.forEach(className => {\n        if (blockClass.test(className)) {\n          needBlock = true;\n        }\n      });\n    }\n    if (!needBlock && blockSelector) {\n      needBlock = node.matches(blockSelector);\n    }\n    return !needUnblock && needBlock || isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n  }\n  if (node.nodeType === node.TEXT_NODE) {\n    return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n  }\n  return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n}\nfunction isIgnored(n) {\n  if ('__sn' in n) {\n    return n.__sn.id === IGNORED_NODE;\n  }\n  return false;\n}\nfunction isAncestorRemoved(target, mirror) {\n  if (isShadowRoot(target)) {\n    return false;\n  }\n  const id = mirror.getId(target);\n  if (!mirror.has(id)) {\n    return true;\n  }\n  if (target.parentNode && target.parentNode.nodeType === target.DOCUMENT_NODE) {\n    return false;\n  }\n  if (!target.parentNode) {\n    return true;\n  }\n  return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction isTouchEvent(event) {\n  return Boolean(event.changedTouches);\n}\nfunction polyfill() {\n  let win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n    win.NodeList.prototype.forEach = Array.prototype.forEach;\n  }\n  if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n    win.DOMTokenList.prototype.forEach = Array.prototype.forEach;\n  }\n  if (!Node.prototype.contains) {\n    Node.prototype.contains = function contains(node) {\n      if (!(0 in arguments)) {\n        throw new TypeError('1 argument is required');\n      }\n      do {\n        if (this === node) {\n          return true;\n        }\n      } while (node = node && node.parentNode);\n      return false;\n    };\n  }\n}\nfunction isIframeINode(node) {\n  if ('__sn' in node) {\n    return node.__sn.type === NodeType$1.Element && node.__sn.tagName === 'iframe';\n  }\n  return false;\n}\nfunction hasShadowRoot(n) {\n  return Boolean(n === null || n === void 0 ? void 0 : n.shadowRoot);\n}\nfunction isNodeInLinkedList(n) {\n  return '__ln' in n;\n}\nclass DoubleLinkedList {\n  constructor() {\n    this.length = 0;\n    this.head = null;\n  }\n  get(position) {\n    if (position >= this.length) {\n      throw new Error('Position outside of list range');\n    }\n    let current = this.head;\n    for (let index = 0; index < position; index++) {\n      current = (current === null || current === void 0 ? void 0 : current.next) || null;\n    }\n    return current;\n  }\n  addNode(n) {\n    const node = {\n      value: n,\n      previous: null,\n      next: null\n    };\n    n.__ln = node;\n    if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n      const current = n.previousSibling.__ln.next;\n      node.next = current;\n      node.previous = n.previousSibling.__ln;\n      n.previousSibling.__ln.next = node;\n      if (current) {\n        current.previous = node;\n      }\n    } else if (n.nextSibling && isNodeInLinkedList(n.nextSibling) && n.nextSibling.__ln.previous) {\n      const current = n.nextSibling.__ln.previous;\n      node.previous = current;\n      node.next = n.nextSibling.__ln;\n      n.nextSibling.__ln.previous = node;\n      if (current) {\n        current.next = node;\n      }\n    } else {\n      if (this.head) {\n        this.head.previous = node;\n      }\n      node.next = this.head;\n      this.head = node;\n    }\n    this.length++;\n  }\n  removeNode(n) {\n    const current = n.__ln;\n    if (!this.head) {\n      return;\n    }\n    if (!current.previous) {\n      this.head = current.next;\n      if (this.head) {\n        this.head.previous = null;\n      }\n    } else {\n      current.previous.next = current.next;\n      if (current.next) {\n        current.next.previous = current.previous;\n      }\n    }\n    if (n.__ln) {\n      delete n.__ln;\n    }\n    this.length--;\n  }\n}\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\nfunction isINode(n) {\n  return '__sn' in n;\n}\nclass MutationBuffer {\n  constructor() {\n    this.frozen = false;\n    this.locked = false;\n    this.texts = [];\n    this.attributes = [];\n    this.removes = [];\n    this.mapRemoves = [];\n    this.movedMap = {};\n    this.addedSet = new Set();\n    this.movedSet = new Set();\n    this.droppedSet = new Set();\n    this.processMutations = mutations => {\n      mutations.forEach(this.processMutation);\n      this.emit();\n    };\n    this.emit = () => {\n      if (this.frozen || this.locked) {\n        return;\n      }\n      const adds = [];\n      const addList = new DoubleLinkedList();\n      const getNextId = n => {\n        let ns = n;\n        let nextId = IGNORED_NODE;\n        while (nextId === IGNORED_NODE) {\n          ns = ns && ns.nextSibling;\n          nextId = ns && this.mirror.getId(ns);\n        }\n        return nextId;\n      };\n      const pushAdd = n => {\n        var _a, _b, _c, _d, _e;\n        const shadowHost = n.getRootNode ? (_a = n.getRootNode()) === null || _a === void 0 ? void 0 : _a.host : null;\n        let rootShadowHost = shadowHost;\n        while ((_c = (_b = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _b === void 0 ? void 0 : _b.call(rootShadowHost)) === null || _c === void 0 ? void 0 : _c.host) rootShadowHost = ((_e = (_d = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _d === void 0 ? void 0 : _d.call(rootShadowHost)) === null || _e === void 0 ? void 0 : _e.host) || null;\n        const notInDoc = !this.doc.contains(n) && (!rootShadowHost || !this.doc.contains(rootShadowHost));\n        if (!n.parentNode || notInDoc) {\n          return;\n        }\n        const parentId = isShadowRoot(n.parentNode) ? this.mirror.getId(shadowHost) : this.mirror.getId(n.parentNode);\n        const nextId = getNextId(n);\n        if (parentId === -1 || nextId === -1) {\n          return addList.addNode(n);\n        }\n        let sn = serializeNodeWithId(n, {\n          doc: this.doc,\n          map: this.mirror.map,\n          blockClass: this.blockClass,\n          blockSelector: this.blockSelector,\n          unblockSelector: this.unblockSelector,\n          maskTextClass: this.maskTextClass,\n          maskTextSelector: this.maskTextSelector,\n          unmaskTextSelector: this.unmaskTextSelector,\n          maskInputSelector: this.maskInputSelector,\n          unmaskInputSelector: this.unmaskInputSelector,\n          skipChild: true,\n          inlineStylesheet: this.inlineStylesheet,\n          maskAllText: this.maskAllText,\n          maskInputOptions: this.maskInputOptions,\n          maskTextFn: this.maskTextFn,\n          maskInputFn: this.maskInputFn,\n          slimDOMOptions: this.slimDOMOptions,\n          recordCanvas: this.recordCanvas,\n          inlineImages: this.inlineImages,\n          onSerialize: currentN => {\n            if (isIframeINode(currentN)) {\n              this.iframeManager.addIframe(currentN);\n            }\n            if (hasShadowRoot(n)) {\n              this.shadowDomManager.addShadowRoot(n.shadowRoot, document);\n            }\n          },\n          onIframeLoad: (iframe, childSn) => {\n            this.iframeManager.attachIframe(iframe, childSn);\n            this.shadowDomManager.observeAttachShadow(iframe);\n          }\n        });\n        if (sn) {\n          adds.push({\n            parentId,\n            nextId,\n            node: sn\n          });\n        }\n      };\n      while (this.mapRemoves.length) {\n        this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n      }\n      for (const n of this.movedSet) {\n        if (isParentRemoved(this.removes, n, this.mirror) && !this.movedSet.has(n.parentNode)) {\n          continue;\n        }\n        pushAdd(n);\n      }\n      for (const n of this.addedSet) {\n        if (!isAncestorInSet(this.droppedSet, n) && !isParentRemoved(this.removes, n, this.mirror)) {\n          pushAdd(n);\n        } else if (isAncestorInSet(this.movedSet, n)) {\n          pushAdd(n);\n        } else {\n          this.droppedSet.add(n);\n        }\n      }\n      let candidate = null;\n      while (addList.length) {\n        let node = null;\n        if (candidate) {\n          const parentId = this.mirror.getId(candidate.value.parentNode);\n          const nextId = getNextId(candidate.value);\n          if (parentId !== -1 && nextId !== -1) {\n            node = candidate;\n          }\n        }\n        if (!node) {\n          for (let index = addList.length - 1; index >= 0; index--) {\n            const _node = addList.get(index);\n            if (_node) {\n              const parentId = this.mirror.getId(_node.value.parentNode);\n              const nextId = getNextId(_node.value);\n              if (parentId !== -1 && nextId !== -1) {\n                node = _node;\n                break;\n              }\n            }\n          }\n        }\n        if (!node) {\n          while (addList.head) {\n            addList.removeNode(addList.head.value);\n          }\n          break;\n        }\n        candidate = node.previous;\n        addList.removeNode(node.value);\n        pushAdd(node.value);\n      }\n      const payload = {\n        texts: this.texts.map(text => ({\n          id: this.mirror.getId(text.node),\n          value: text.value\n        })).filter(text => this.mirror.has(text.id)),\n        attributes: this.attributes.map(attribute => ({\n          id: this.mirror.getId(attribute.node),\n          attributes: attribute.attributes\n        })).filter(attribute => this.mirror.has(attribute.id)),\n        removes: this.removes,\n        adds\n      };\n      if (!payload.texts.length && !payload.attributes.length && !payload.removes.length && !payload.adds.length) {\n        return;\n      }\n      this.texts = [];\n      this.attributes = [];\n      this.removes = [];\n      this.addedSet = new Set();\n      this.movedSet = new Set();\n      this.droppedSet = new Set();\n      this.movedMap = {};\n      this.mutationCb(payload);\n    };\n    this.processMutation = m => {\n      if (isIgnored(m.target)) {\n        return;\n      }\n      switch (m.type) {\n        case 'characterData':\n          {\n            const value = m.target.textContent;\n            if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) && value !== m.oldValue) {\n              this.texts.push({\n                value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextSelector, this.maskAllText) && value ? this.maskTextFn ? this.maskTextFn(value) : value.replace(/[\\S]/g, '*') : value,\n                node: m.target\n              });\n            }\n            break;\n          }\n        case 'attributes':\n          {\n            const target = m.target;\n            let value = target.getAttribute(m.attributeName);\n            if (m.attributeName === 'value') {\n              value = maskInputValue({\n                input: target,\n                maskInputSelector: this.maskInputSelector,\n                unmaskInputSelector: this.unmaskInputSelector,\n                maskInputOptions: this.maskInputOptions,\n                tagName: target.tagName,\n                type: target.getAttribute('type'),\n                value,\n                maskInputFn: this.maskInputFn\n              });\n            }\n            if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || value === m.oldValue) {\n              return;\n            }\n            let item = this.attributes.find(a => a.node === m.target);\n            if (!item) {\n              item = {\n                node: m.target,\n                attributes: {}\n              };\n              this.attributes.push(item);\n            }\n            if (m.attributeName === 'type' && m.target.tagName === 'INPUT' && (m.oldValue || '').toLowerCase() === 'password') {\n              m.target.setAttribute('rr_is_password', 'true');\n            }\n            if (m.attributeName === 'style') {\n              const old = this.doc.createElement('span');\n              if (m.oldValue) {\n                old.setAttribute('style', m.oldValue);\n              }\n              if (item.attributes.style === undefined || item.attributes.style === null) {\n                item.attributes.style = {};\n              }\n              try {\n                const styleObj = item.attributes.style;\n                for (const pname of Array.from(target.style)) {\n                  const newValue = target.style.getPropertyValue(pname);\n                  const newPriority = target.style.getPropertyPriority(pname);\n                  if (newValue !== old.style.getPropertyValue(pname) || newPriority !== old.style.getPropertyPriority(pname)) {\n                    if (newPriority === '') {\n                      styleObj[pname] = newValue;\n                    } else {\n                      styleObj[pname] = [newValue, newPriority];\n                    }\n                  }\n                }\n                for (const pname of Array.from(old.style)) {\n                  if (target.style.getPropertyValue(pname) === '') {\n                    styleObj[pname] = false;\n                  }\n                }\n              } catch (error) {\n                console.warn('[rrweb] Error when parsing update to style attribute:', error);\n              }\n            } else {\n              const element = m.target;\n              item.attributes[m.attributeName] = transformAttribute(this.doc, element, element.tagName, m.attributeName, value, this.maskAllText, this.unmaskTextSelector, this.maskTextFn);\n            }\n            break;\n          }\n        case 'childList':\n          {\n            m.addedNodes.forEach(n => this.genAdds(n, m.target));\n            m.removedNodes.forEach(n => {\n              const nodeId = this.mirror.getId(n);\n              const parentId = isShadowRoot(m.target) ? this.mirror.getId(m.target.host) : this.mirror.getId(m.target);\n              if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || isIgnored(n)) {\n                return;\n              }\n              if (this.addedSet.has(n)) {\n                deepDelete(this.addedSet, n);\n                this.droppedSet.add(n);\n              } else if (this.addedSet.has(m.target) && nodeId === -1) ;else if (isAncestorRemoved(m.target, this.mirror)) ;else if (this.movedSet.has(n) && this.movedMap[moveKey(nodeId, parentId)]) {\n                deepDelete(this.movedSet, n);\n              } else {\n                this.removes.push({\n                  parentId,\n                  id: nodeId,\n                  isShadow: isShadowRoot(m.target) ? true : undefined\n                });\n              }\n              this.mapRemoves.push(n);\n            });\n            break;\n          }\n      }\n    };\n    this.genAdds = (n, target) => {\n      if (target && isBlocked(target, this.blockClass, this.blockSelector, this.unblockSelector)) {\n        return;\n      }\n      if (isINode(n)) {\n        if (isIgnored(n)) {\n          return;\n        }\n        this.movedSet.add(n);\n        let targetId = null;\n        if (target && isINode(target)) {\n          targetId = target.__sn.id;\n        }\n        if (targetId) {\n          this.movedMap[moveKey(n.__sn.id, targetId)] = true;\n        }\n      } else {\n        this.addedSet.add(n);\n        this.droppedSet.delete(n);\n      }\n      if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector)) n.childNodes.forEach(childN => this.genAdds(childN));\n    };\n  }\n  init(options) {\n    ['mutationCb', 'blockClass', 'blockSelector', 'unblockSelector', 'maskTextClass', 'maskTextSelector', 'unmaskTextSelector', 'maskInputSelector', 'unmaskInputSelector', 'inlineStylesheet', 'maskAllText', 'maskInputOptions', 'maskTextFn', 'maskInputFn', 'recordCanvas', 'inlineImages', 'slimDOMOptions', 'doc', 'mirror', 'iframeManager', 'shadowDomManager', 'canvasManager'].forEach(key => {\n      this[key] = options[key];\n    });\n  }\n  freeze() {\n    this.frozen = true;\n    this.canvasManager.freeze();\n  }\n  unfreeze() {\n    this.frozen = false;\n    this.canvasManager.unfreeze();\n    this.emit();\n  }\n  isFrozen() {\n    return this.frozen;\n  }\n  lock() {\n    this.locked = true;\n    this.canvasManager.lock();\n  }\n  unlock() {\n    this.locked = false;\n    this.canvasManager.unlock();\n    this.emit();\n  }\n  reset() {\n    this.shadowDomManager.reset();\n    this.canvasManager.reset();\n  }\n}\nfunction deepDelete(addsSet, n) {\n  addsSet.delete(n);\n  n.childNodes.forEach(childN => deepDelete(addsSet, childN));\n}\nfunction isParentRemoved(removes, n, mirror) {\n  const {\n    parentNode\n  } = n;\n  if (!parentNode) {\n    return false;\n  }\n  const parentId = mirror.getId(parentNode);\n  if (removes.some(r => r.id === parentId)) {\n    return true;\n  }\n  return isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n  const {\n    parentNode\n  } = n;\n  if (!parentNode) {\n    return false;\n  }\n  if (set.has(parentNode)) {\n    return true;\n  }\n  return isAncestorInSet(set, parentNode);\n}\nconst callbackWrapper = cb => {\n  const rrwebWrapped = function () {\n    try {\n      return cb(...arguments);\n    } catch (error) {\n      try {\n        error.__rrweb__ = true;\n      } catch (_a) {}\n      throw error;\n    }\n  };\n  return rrwebWrapped;\n};\nconst mutationBuffers = [];\nfunction getEventTarget(event) {\n  try {\n    if ('composedPath' in event) {\n      const path = event.composedPath();\n      if (path.length) {\n        return path[0];\n      }\n    } else if ('path' in event && event.path.length) {\n      return event.path[0];\n    }\n  } catch (_a) {}\n  return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n  var _a, _b;\n  const mutationBuffer = new MutationBuffer();\n  mutationBuffers.push(mutationBuffer);\n  mutationBuffer.init(options);\n  let mutationObserverCtor = window.MutationObserver || window.__rrMutationObserver;\n  const angularZoneSymbol = (_b = (_a = window === null || window === void 0 ? void 0 : window.Zone) === null || _a === void 0 ? void 0 : _a.__symbol__) === null || _b === void 0 ? void 0 : _b.call(_a, 'MutationObserver');\n  if (angularZoneSymbol && window[angularZoneSymbol]) {\n    mutationObserverCtor = window[angularZoneSymbol];\n  }\n  const observer = new mutationObserverCtor(callbackWrapper(mutations => {\n    if (options.onMutation && options.onMutation(mutations) === false) {\n      return;\n    }\n    mutationBuffer.processMutations(mutations);\n  }));\n  observer.observe(rootEl, {\n    attributes: true,\n    attributeOldValue: true,\n    characterData: true,\n    characterDataOldValue: true,\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction initMoveObserver(_ref4) {\n  let {\n    mousemoveCb,\n    sampling,\n    doc,\n    mirror\n  } = _ref4;\n  if (sampling.mousemove === false) {\n    return () => {};\n  }\n  const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n  const callbackThreshold = typeof sampling.mousemoveCallback === 'number' ? sampling.mousemoveCallback : 500;\n  let positions = [];\n  let timeBaseline;\n  const wrappedCb = throttle(source => {\n    const totalOffset = Date.now() - timeBaseline;\n    callbackWrapper(mousemoveCb)(positions.map(p => {\n      p.timeOffset -= totalOffset;\n      return p;\n    }), source);\n    positions = [];\n    timeBaseline = null;\n  }, callbackThreshold);\n  const updatePosition = throttle(evt => {\n    const target = getEventTarget(evt);\n    const {\n      clientX,\n      clientY\n    } = isTouchEvent(evt) ? evt.changedTouches[0] : evt;\n    if (!timeBaseline) {\n      timeBaseline = Date.now();\n    }\n    positions.push({\n      x: clientX,\n      y: clientY,\n      id: mirror.getId(target),\n      timeOffset: Date.now() - timeBaseline\n    });\n    wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent ? IncrementalSource.Drag : evt instanceof MouseEvent ? IncrementalSource.MouseMove : IncrementalSource.TouchMove);\n  }, threshold, {\n    trailing: false\n  });\n  const handlers = [on('mousemove', callbackWrapper(updatePosition), doc), on('touchmove', callbackWrapper(updatePosition), doc), on('drag', callbackWrapper(updatePosition), doc)];\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction initMouseInteractionObserver(_ref5) {\n  let {\n    mouseInteractionCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    sampling\n  } = _ref5;\n  if (sampling.mouseInteraction === false) {\n    return () => {};\n  }\n  const disableMap = sampling.mouseInteraction === true || sampling.mouseInteraction === undefined ? {} : sampling.mouseInteraction;\n  const handlers = [];\n  const getHandler = eventKey => {\n    return event => {\n      const target = getEventTarget(event);\n      if (isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n        return;\n      }\n      const e = isTouchEvent(event) ? event.changedTouches[0] : event;\n      if (!e) {\n        return;\n      }\n      const id = mirror.getId(target);\n      const {\n        clientX,\n        clientY\n      } = e;\n      callbackWrapper(mouseInteractionCb)({\n        type: MouseInteractions[eventKey],\n        id,\n        x: clientX,\n        y: clientY\n      });\n    };\n  };\n  Object.keys(MouseInteractions).filter(key => Number.isNaN(Number(key)) && !key.endsWith('_Departed') && disableMap[key] !== false).forEach(eventKey => {\n    const eventName = eventKey.toLowerCase();\n    const handler = callbackWrapper(getHandler(eventKey));\n    handlers.push(on(eventName, handler, doc));\n  });\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction initScrollObserver(_ref6) {\n  let {\n    scrollCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    sampling\n  } = _ref6;\n  const updatePosition = throttle(evt => {\n    const target = getEventTarget(evt);\n    if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n      return;\n    }\n    const id = mirror.getId(target);\n    if (target === doc) {\n      const scrollEl = doc.scrollingElement || doc.documentElement;\n      callbackWrapper(scrollCb)({\n        id,\n        x: scrollEl.scrollLeft,\n        y: scrollEl.scrollTop\n      });\n    } else {\n      callbackWrapper(scrollCb)({\n        id,\n        x: target.scrollLeft,\n        y: target.scrollTop\n      });\n    }\n  }, sampling.scroll || 100);\n  return on('scroll', callbackWrapper(updatePosition), doc);\n}\nfunction initViewportResizeObserver(_ref7) {\n  let {\n    viewportResizeCb\n  } = _ref7;\n  let lastH = -1;\n  let lastW = -1;\n  const updateDimension = throttle(() => {\n    const height = getWindowHeight();\n    const width = getWindowWidth();\n    if (lastH !== height || lastW !== width) {\n      callbackWrapper(viewportResizeCb)({\n        width: Number(width),\n        height: Number(height)\n      });\n      lastH = height;\n      lastW = width;\n    }\n  }, 200);\n  return on('resize', callbackWrapper(updateDimension), window);\n}\nfunction wrapEventWithUserTriggeredFlag(v, enable) {\n  const value = Object.assign({}, v);\n  if (!enable) delete value.userTriggered;\n  return value;\n}\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nconst lastInputValueMap = new WeakMap();\nfunction initInputObserver(_ref8) {\n  let {\n    inputCb,\n    doc,\n    mirror,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    ignoreClass,\n    ignoreSelector,\n    maskInputSelector,\n    unmaskInputSelector,\n    maskInputOptions,\n    maskInputFn,\n    sampling,\n    userTriggeredOnInput\n  } = _ref8;\n  function eventHandler(event) {\n    let target = getEventTarget(event);\n    const tagName = target && target.tagName;\n    const userTriggered = event.isTrusted;\n    if (tagName === 'OPTION') target = target.parentElement;\n    if (!target || !tagName || INPUT_TAGS.indexOf(tagName) < 0 || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n      return;\n    }\n    let type = target.type;\n    if (target.classList.contains(ignoreClass) || ignoreSelector && target.matches(ignoreSelector)) {\n      return;\n    }\n    let text = target.value;\n    let isChecked = false;\n    if (target.hasAttribute('rr_is_password')) {\n      type = 'password';\n    }\n    if (type === 'radio' || type === 'checkbox') {\n      isChecked = target.checked;\n    } else if (hasInputMaskOptions({\n      maskInputOptions,\n      maskInputSelector,\n      tagName,\n      type\n    })) {\n      text = maskInputValue({\n        input: target,\n        maskInputOptions,\n        maskInputSelector,\n        unmaskInputSelector,\n        tagName,\n        type,\n        value: text,\n        maskInputFn\n      });\n    }\n    cbWithDedup(target, callbackWrapper(wrapEventWithUserTriggeredFlag)({\n      text,\n      isChecked,\n      userTriggered\n    }, userTriggeredOnInput));\n    const name = target.name;\n    if (type === 'radio' && name && isChecked) {\n      doc.querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`).forEach(el => {\n        if (el !== target) {\n          cbWithDedup(el, callbackWrapper(wrapEventWithUserTriggeredFlag)({\n            text: el.value,\n            isChecked: !isChecked,\n            userTriggered: false\n          }, userTriggeredOnInput));\n        }\n      });\n    }\n  }\n  function cbWithDedup(target, v) {\n    const lastInputValue = lastInputValueMap.get(target);\n    if (!lastInputValue || lastInputValue.text !== v.text || lastInputValue.isChecked !== v.isChecked) {\n      lastInputValueMap.set(target, v);\n      const id = mirror.getId(target);\n      inputCb(Object.assign(Object.assign({}, v), {\n        id\n      }));\n    }\n  }\n  const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n  const handlers = events.map(eventName => on(eventName, callbackWrapper(eventHandler), doc));\n  const propertyDescriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n  const hookProperties = [[HTMLInputElement.prototype, 'value'], [HTMLInputElement.prototype, 'checked'], [HTMLSelectElement.prototype, 'value'], [HTMLTextAreaElement.prototype, 'value'], [HTMLSelectElement.prototype, 'selectedIndex'], [HTMLOptionElement.prototype, 'selected']];\n  if (propertyDescriptor && propertyDescriptor.set) {\n    handlers.push(...hookProperties.map(p => hookSetter(p[0], p[1], {\n      set() {\n        callbackWrapper(eventHandler)({\n          target: this\n        });\n      }\n    })));\n  }\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction getNestedCSSRulePositions(rule) {\n  const positions = [];\n  function recurse(childRule, pos) {\n    if (hasNestedCSSRule('CSSGroupingRule') && childRule.parentRule instanceof CSSGroupingRule || hasNestedCSSRule('CSSMediaRule') && childRule.parentRule instanceof CSSMediaRule || hasNestedCSSRule('CSSSupportsRule') && childRule.parentRule instanceof CSSSupportsRule || hasNestedCSSRule('CSSConditionRule') && childRule.parentRule instanceof CSSConditionRule) {\n      const rules = Array.from(childRule.parentRule.cssRules);\n      const index = rules.indexOf(childRule);\n      pos.unshift(index);\n    } else {\n      const rules = Array.from(childRule.parentStyleSheet.cssRules);\n      const index = rules.indexOf(childRule);\n      pos.unshift(index);\n    }\n    return pos;\n  }\n  return recurse(rule, positions);\n}\nfunction initStyleSheetObserver(_ref9, _ref10) {\n  let {\n    styleSheetRuleCb,\n    mirror\n  } = _ref9;\n  let {\n    win\n  } = _ref10;\n  if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n    return () => {};\n  }\n  const insertRule = win.CSSStyleSheet.prototype.insertRule;\n  win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      const [rule, index] = argumentsList;\n      const id = mirror.getId(thisArg.ownerNode);\n      if (id !== -1) {\n        styleSheetRuleCb({\n          id,\n          adds: [{\n            rule,\n            index\n          }]\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n  win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      const [index] = argumentsList;\n      const id = mirror.getId(thisArg.ownerNode);\n      if (id !== -1) {\n        styleSheetRuleCb({\n          id,\n          removes: [{\n            index\n          }]\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  const supportedNestedCSSRuleTypes = {};\n  if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n    supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n  } else {\n    if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n      supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n    }\n    if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n      supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n    }\n    if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n      supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n    }\n  }\n  const unmodifiedFunctions = {};\n  Object.entries(supportedNestedCSSRuleTypes).forEach(_ref11 => {\n    let [typeKey, type] = _ref11;\n    unmodifiedFunctions[typeKey] = {\n      insertRule: type.prototype.insertRule,\n      deleteRule: type.prototype.deleteRule\n    };\n    type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [rule, index] = argumentsList;\n        const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n        if (id !== -1) {\n          styleSheetRuleCb({\n            id,\n            adds: [{\n              rule,\n              index: [...getNestedCSSRulePositions(thisArg), index || 0]\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n    type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n      apply: callbackWrapper((target, thisArg, argumentsList) => {\n        const [index] = argumentsList;\n        const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n        if (id !== -1) {\n          styleSheetRuleCb({\n            id,\n            removes: [{\n              index: [...getNestedCSSRulePositions(thisArg), index]\n            }]\n          });\n        }\n        return target.apply(thisArg, argumentsList);\n      })\n    });\n  });\n  return callbackWrapper(() => {\n    win.CSSStyleSheet.prototype.insertRule = insertRule;\n    win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n    Object.entries(supportedNestedCSSRuleTypes).forEach(_ref12 => {\n      let [typeKey, type] = _ref12;\n      type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n      type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n    });\n  });\n}\nfunction initStyleDeclarationObserver(_ref13, _ref14) {\n  let {\n    styleDeclarationCb,\n    mirror\n  } = _ref13;\n  let {\n    win\n  } = _ref14;\n  const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n  win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      var _a, _b;\n      const [property, value, priority] = argumentsList;\n      const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n      if (id !== -1) {\n        styleDeclarationCb({\n          id,\n          set: {\n            property,\n            value,\n            priority\n          },\n          index: getNestedCSSRulePositions(thisArg.parentRule)\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n  win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n    apply: callbackWrapper((target, thisArg, argumentsList) => {\n      var _a, _b;\n      const [property] = argumentsList;\n      const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n      if (id !== -1) {\n        styleDeclarationCb({\n          id,\n          remove: {\n            property\n          },\n          index: getNestedCSSRulePositions(thisArg.parentRule)\n        });\n      }\n      return target.apply(thisArg, argumentsList);\n    })\n  });\n  return callbackWrapper(() => {\n    win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n  });\n}\nfunction initMediaInteractionObserver(_ref15) {\n  let {\n    mediaInteractionCb,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    mirror,\n    sampling\n  } = _ref15;\n  const handler = type => throttle(callbackWrapper(event => {\n    const target = getEventTarget(event);\n    if (!target || isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n      return;\n    }\n    const {\n      currentTime,\n      volume,\n      muted\n    } = target;\n    mediaInteractionCb({\n      type,\n      id: mirror.getId(target),\n      currentTime,\n      volume,\n      muted\n    });\n  }), sampling.media || 500);\n  const handlers = [on('play', handler(0)), on('pause', handler(1)), on('seeked', handler(2)), on('volumechange', handler(3))];\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction initFontObserver(_ref16) {\n  let {\n    fontCb,\n    doc\n  } = _ref16;\n  const win = doc.defaultView;\n  if (!win) {\n    return () => {};\n  }\n  const handlers = [];\n  const fontMap = new WeakMap();\n  const originalFontFace = win.FontFace;\n  win.FontFace = function FontFace(family, source, descriptors) {\n    const fontFace = new originalFontFace(family, source, descriptors);\n    fontMap.set(fontFace, {\n      family,\n      buffer: typeof source !== 'string',\n      descriptors,\n      fontSource: typeof source === 'string' ? source : JSON.stringify(Array.from(new Uint8Array(source)))\n    });\n    return fontFace;\n  };\n  const restoreHandler = patch(doc.fonts, 'add', function (original) {\n    return function (fontFace) {\n      setTimeout(() => {\n        const p = fontMap.get(fontFace);\n        if (p) {\n          fontCb(p);\n          fontMap.delete(fontFace);\n        }\n      }, 0);\n      return original.apply(this, [fontFace]);\n    };\n  });\n  handlers.push(() => {\n    win.FontFace = originalFontFace;\n  });\n  handlers.push(restoreHandler);\n  return callbackWrapper(() => {\n    handlers.forEach(h => h());\n  });\n}\nfunction mergeHooks(o, hooks) {\n  const {\n    mutationCb,\n    mousemoveCb,\n    mouseInteractionCb,\n    scrollCb,\n    viewportResizeCb,\n    inputCb,\n    mediaInteractionCb,\n    styleSheetRuleCb,\n    styleDeclarationCb,\n    canvasMutationCb,\n    fontCb\n  } = o;\n  o.mutationCb = function () {\n    if (hooks.mutation) {\n      hooks.mutation(...arguments);\n    }\n    mutationCb(...arguments);\n  };\n  o.mousemoveCb = function () {\n    if (hooks.mousemove) {\n      hooks.mousemove(...arguments);\n    }\n    mousemoveCb(...arguments);\n  };\n  o.mouseInteractionCb = function () {\n    if (hooks.mouseInteraction) {\n      hooks.mouseInteraction(...arguments);\n    }\n    mouseInteractionCb(...arguments);\n  };\n  o.scrollCb = function () {\n    if (hooks.scroll) {\n      hooks.scroll(...arguments);\n    }\n    scrollCb(...arguments);\n  };\n  o.viewportResizeCb = function () {\n    if (hooks.viewportResize) {\n      hooks.viewportResize(...arguments);\n    }\n    viewportResizeCb(...arguments);\n  };\n  o.inputCb = function () {\n    if (hooks.input) {\n      hooks.input(...arguments);\n    }\n    inputCb(...arguments);\n  };\n  o.mediaInteractionCb = function () {\n    if (hooks.mediaInteaction) {\n      hooks.mediaInteaction(...arguments);\n    }\n    mediaInteractionCb(...arguments);\n  };\n  o.styleSheetRuleCb = function () {\n    if (hooks.styleSheetRule) {\n      hooks.styleSheetRule(...arguments);\n    }\n    styleSheetRuleCb(...arguments);\n  };\n  o.styleDeclarationCb = function () {\n    if (hooks.styleDeclaration) {\n      hooks.styleDeclaration(...arguments);\n    }\n    styleDeclarationCb(...arguments);\n  };\n  o.canvasMutationCb = function () {\n    if (hooks.canvasMutation) {\n      hooks.canvasMutation(...arguments);\n    }\n    canvasMutationCb(...arguments);\n  };\n  o.fontCb = function () {\n    if (hooks.font) {\n      hooks.font(...arguments);\n    }\n    fontCb(...arguments);\n  };\n}\nfunction initObservers(o) {\n  let hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const currentWindow = o.doc.defaultView;\n  if (!currentWindow) {\n    return () => {};\n  }\n  mergeHooks(o, hooks);\n  const mutationObserver = initMutationObserver(o, o.doc);\n  const mousemoveHandler = initMoveObserver(o);\n  const mouseInteractionHandler = initMouseInteractionObserver(o);\n  const scrollHandler = initScrollObserver(o);\n  const viewportResizeHandler = initViewportResizeObserver(o);\n  const inputHandler = initInputObserver(o);\n  const mediaInteractionHandler = initMediaInteractionObserver(o);\n  const styleSheetObserver = initStyleSheetObserver(o, {\n    win: currentWindow\n  });\n  const styleDeclarationObserver = initStyleDeclarationObserver(o, {\n    win: currentWindow\n  });\n  const fontObserver = o.collectFonts ? initFontObserver(o) : () => {};\n  const pluginHandlers = [];\n  for (const plugin of o.plugins) {\n    pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n  }\n  return callbackWrapper(() => {\n    mutationBuffers.forEach(b => b.reset());\n    mutationObserver.disconnect();\n    mousemoveHandler();\n    mouseInteractionHandler();\n    scrollHandler();\n    viewportResizeHandler();\n    inputHandler();\n    mediaInteractionHandler();\n    try {\n      styleSheetObserver();\n      styleDeclarationObserver();\n    } catch (e) {}\n    fontObserver();\n    pluginHandlers.forEach(h => h());\n  });\n}\nfunction hasNestedCSSRule(prop) {\n  return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n  return Boolean(typeof window[prop] !== 'undefined' && window[prop].prototype && 'insertRule' in window[prop].prototype && 'deleteRule' in window[prop].prototype);\n}\nclass IframeManager {\n  constructor(options) {\n    this.iframes = new WeakMap();\n    this.mutationCb = options.mutationCb;\n  }\n  addIframe(iframeEl) {\n    this.iframes.set(iframeEl, true);\n  }\n  addLoadListener(cb) {\n    this.loadListener = cb;\n  }\n  attachIframe(iframeEl, childSn) {\n    var _a;\n    this.mutationCb({\n      adds: [{\n        parentId: iframeEl.__sn.id,\n        nextId: null,\n        node: childSn\n      }],\n      removes: [],\n      texts: [],\n      attributes: [],\n      isAttachIframe: true\n    });\n    (_a = this.loadListener) === null || _a === void 0 ? void 0 : _a.call(this, iframeEl);\n  }\n}\nclass ShadowDomManager {\n  constructor(options) {\n    this.restorePatches = [];\n    this.mutationCb = options.mutationCb;\n    this.scrollCb = options.scrollCb;\n    this.bypassOptions = options.bypassOptions;\n    this.mirror = options.mirror;\n    const manager = this;\n    this.restorePatches.push(patch(HTMLElement.prototype, 'attachShadow', function (original) {\n      return function () {\n        const shadowRoot = original.apply(this, arguments);\n        if (this.shadowRoot) manager.addShadowRoot(this.shadowRoot, this.ownerDocument);\n        return shadowRoot;\n      };\n    }));\n  }\n  addShadowRoot(shadowRoot, doc) {\n    initMutationObserver(Object.assign(Object.assign({}, this.bypassOptions), {\n      doc,\n      mutationCb: this.mutationCb,\n      mirror: this.mirror,\n      shadowDomManager: this\n    }), shadowRoot);\n    initScrollObserver(Object.assign(Object.assign({}, this.bypassOptions), {\n      scrollCb: this.scrollCb,\n      doc: shadowRoot,\n      mirror: this.mirror\n    }));\n  }\n  observeAttachShadow(iframeElement) {\n    if (iframeElement.contentWindow) {\n      const manager = this;\n      this.restorePatches.push(patch(iframeElement.contentWindow.HTMLElement.prototype, 'attachShadow', function (original) {\n        return function () {\n          const shadowRoot = original.apply(this, arguments);\n          if (this.shadowRoot) manager.addShadowRoot(this.shadowRoot, iframeElement.contentDocument);\n          return shadowRoot;\n        };\n      }));\n    }\n  }\n  reset() {\n    this.restorePatches.forEach(restorePatch => restorePatch());\n  }\n}\n\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\nfunction initCanvas2DMutationObserver(cb, win, blockClass, unblockSelector, blockSelector, mirror) {\n  const handlers = [];\n  const props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);\n  for (const prop of props2D) {\n    try {\n      if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {\n        continue;\n      }\n      const restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {\n        return function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n            setTimeout(() => {\n              const recordArgs = [...args];\n              if (prop === 'drawImage') {\n                if (recordArgs[0] && recordArgs[0] instanceof HTMLCanvasElement) {\n                  const canvas = recordArgs[0];\n                  const ctx = canvas.getContext('2d');\n                  let imgd = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, canvas.width, canvas.height);\n                  let pix = imgd === null || imgd === void 0 ? void 0 : imgd.data;\n                  recordArgs[0] = JSON.stringify(pix);\n                }\n              }\n              cb(this.canvas, {\n                type: CanvasContext['2D'],\n                property: prop,\n                args: recordArgs\n              });\n            }, 0);\n          }\n          return original.apply(this, args);\n        };\n      });\n      handlers.push(restoreHandler);\n    } catch (_a) {\n      const hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {\n        set(v) {\n          cb(this.canvas, {\n            type: CanvasContext['2D'],\n            property: prop,\n            args: [v],\n            setter: true\n          });\n        }\n      });\n      handlers.push(hookHandler);\n    }\n  }\n  return () => {\n    handlers.forEach(h => h());\n  };\n}\nfunction initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector) {\n  const handlers = [];\n  try {\n    const restoreHandler = patch(win.HTMLCanvasElement.prototype, 'getContext', function (original) {\n      return function (contextType) {\n        if (!isBlocked(this, blockClass, blockSelector, unblockSelector)) {\n          if (!('__context' in this)) this.__context = contextType;\n        }\n        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        return original.apply(this, [contextType, ...args]);\n      };\n    });\n    handlers.push(restoreHandler);\n  } catch (_a) {\n    console.error('failed to patch HTMLCanvasElement.prototype.getContext');\n  }\n  return () => {\n    handlers.forEach(h => h());\n  };\n}\n\n/*\n * base64-arraybuffer 1.0.2 <https://github.com/niklasvh/base64-arraybuffer>\n * Copyright (c) 2022 Niklas von Hertzen <https://hertzen.com>\n * Released under MIT License\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nvar lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\nvar encode = function (arraybuffer) {\n  var bytes = new Uint8Array(arraybuffer),\n    i,\n    len = bytes.length,\n    base64 = '';\n  for (i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n  return base64;\n};\nconst webGLVarMap = new Map();\nfunction variableListFor(ctx, ctor) {\n  let contextMap = webGLVarMap.get(ctx);\n  if (!contextMap) {\n    contextMap = new Map();\n    webGLVarMap.set(ctx, contextMap);\n  }\n  if (!contextMap.has(ctor)) {\n    contextMap.set(ctor, []);\n  }\n  return contextMap.get(ctor);\n}\nconst saveWebGLVar = (value, win, ctx) => {\n  if (!value || !(isInstanceOfWebGLObject(value, win) || typeof value === 'object')) return;\n  const name = value.constructor.name;\n  const list = variableListFor(ctx, name);\n  let index = list.indexOf(value);\n  if (index === -1) {\n    index = list.length;\n    list.push(value);\n  }\n  return index;\n};\nfunction serializeArg(value, win, ctx) {\n  if (value instanceof Array) {\n    return value.map(arg => serializeArg(arg, win, ctx));\n  } else if (value === null) {\n    return value;\n  } else if (value instanceof Float32Array || value instanceof Float64Array || value instanceof Int32Array || value instanceof Uint32Array || value instanceof Uint8Array || value instanceof Uint16Array || value instanceof Int16Array || value instanceof Int8Array || value instanceof Uint8ClampedArray) {\n    const name = value.constructor.name;\n    return {\n      rr_type: name,\n      args: [Object.values(value)]\n    };\n  } else if (value instanceof ArrayBuffer) {\n    const name = value.constructor.name;\n    const base64 = encode(value);\n    return {\n      rr_type: name,\n      base64\n    };\n  } else if (value instanceof DataView) {\n    const name = value.constructor.name;\n    return {\n      rr_type: name,\n      args: [serializeArg(value.buffer, win, ctx), value.byteOffset, value.byteLength]\n    };\n  } else if (value instanceof HTMLImageElement) {\n    const name = value.constructor.name;\n    const {\n      src\n    } = value;\n    return {\n      rr_type: name,\n      src\n    };\n  } else if (value instanceof ImageData) {\n    const name = value.constructor.name;\n    return {\n      rr_type: name,\n      args: [serializeArg(value.data, win, ctx), value.width, value.height]\n    };\n  } else if (isInstanceOfWebGLObject(value, win) || typeof value === 'object') {\n    const name = value.constructor.name;\n    const index = saveWebGLVar(value, win, ctx);\n    return {\n      rr_type: name,\n      index: index\n    };\n  }\n  return value;\n}\nconst serializeArgs = (args, win, ctx) => {\n  return [...args].map(arg => serializeArg(arg, win, ctx));\n};\nconst isInstanceOfWebGLObject = (value, win) => {\n  const webGLConstructorNames = ['WebGLActiveInfo', 'WebGLBuffer', 'WebGLFramebuffer', 'WebGLProgram', 'WebGLRenderbuffer', 'WebGLShader', 'WebGLShaderPrecisionFormat', 'WebGLTexture', 'WebGLUniformLocation', 'WebGLVertexArrayObject', 'WebGLVertexArrayObjectOES'];\n  const supportedWebGLConstructorNames = webGLConstructorNames.filter(name => typeof win[name] === 'function');\n  return Boolean(supportedWebGLConstructorNames.find(name => value instanceof win[name]));\n};\nfunction patchGLPrototype(prototype, type, cb, blockClass, unblockSelector, blockSelector, mirror, win) {\n  const handlers = [];\n  const props = Object.getOwnPropertyNames(prototype);\n  for (const prop of props) {\n    try {\n      if (typeof prototype[prop] !== 'function') {\n        continue;\n      }\n      const restoreHandler = patch(prototype, prop, function (original) {\n        return function () {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n          const result = original.apply(this, args);\n          saveWebGLVar(result, win, prototype);\n          if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n            const id = mirror.getId(this.canvas);\n            const recordArgs = serializeArgs([...args], win, prototype);\n            const mutation = {\n              type,\n              property: prop,\n              args: recordArgs\n            };\n            cb(this.canvas, mutation);\n          }\n          return result;\n        };\n      });\n      handlers.push(restoreHandler);\n    } catch (_a) {\n      const hookHandler = hookSetter(prototype, prop, {\n        set(v) {\n          cb(this.canvas, {\n            type,\n            property: prop,\n            args: [v],\n            setter: true\n          });\n        }\n      });\n      handlers.push(hookHandler);\n    }\n  }\n  return handlers;\n}\nfunction initCanvasWebGLMutationObserver(cb, win, blockClass, blockSelector, unblockSelector, mirror) {\n  const handlers = [];\n  handlers.push(...patchGLPrototype(win.WebGLRenderingContext.prototype, CanvasContext.WebGL, cb, blockClass, blockSelector, unblockSelector, mirror, win));\n  if (typeof win.WebGL2RenderingContext !== 'undefined') {\n    handlers.push(...patchGLPrototype(win.WebGL2RenderingContext.prototype, CanvasContext.WebGL2, cb, blockClass, blockSelector, unblockSelector, mirror, win));\n  }\n  return () => {\n    handlers.forEach(h => h());\n  };\n}\nclass CanvasManager {\n  reset() {\n    this.pendingCanvasMutations.clear();\n    this.resetObservers && this.resetObservers();\n  }\n  freeze() {\n    this.frozen = true;\n  }\n  unfreeze() {\n    this.frozen = false;\n  }\n  lock() {\n    this.locked = true;\n  }\n  unlock() {\n    this.locked = false;\n  }\n  constructor(options) {\n    this.pendingCanvasMutations = new Map();\n    this.rafStamps = {\n      latestId: 0,\n      invokeId: null\n    };\n    this.frozen = false;\n    this.locked = false;\n    this.processMutation = function (target, mutation) {\n      const newFrame = this.rafStamps.invokeId && this.rafStamps.latestId !== this.rafStamps.invokeId;\n      if (newFrame || !this.rafStamps.invokeId) this.rafStamps.invokeId = this.rafStamps.latestId;\n      if (!this.pendingCanvasMutations.has(target)) {\n        this.pendingCanvasMutations.set(target, []);\n      }\n      this.pendingCanvasMutations.get(target).push(mutation);\n    };\n    this.mutationCb = options.mutationCb;\n    this.mirror = options.mirror;\n    if (options.recordCanvas === true) this.initCanvasMutationObserver(options.win, options.blockClass, options.blockSelector, options.unblockSelector);\n  }\n  initCanvasMutationObserver(win, blockClass, unblockSelector, blockSelector) {\n    this.startRAFTimestamping();\n    this.startPendingCanvasMutationFlusher();\n    const canvasContextReset = initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector);\n    const canvas2DReset = initCanvas2DMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n    const canvasWebGL1and2Reset = initCanvasWebGLMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n    this.resetObservers = () => {\n      canvasContextReset();\n      canvas2DReset();\n      canvasWebGL1and2Reset();\n    };\n  }\n  startPendingCanvasMutationFlusher() {\n    requestAnimationFrame(() => this.flushPendingCanvasMutations());\n  }\n  startRAFTimestamping() {\n    const setLatestRAFTimestamp = timestamp => {\n      this.rafStamps.latestId = timestamp;\n      requestAnimationFrame(setLatestRAFTimestamp);\n    };\n    requestAnimationFrame(setLatestRAFTimestamp);\n  }\n  flushPendingCanvasMutations() {\n    this.pendingCanvasMutations.forEach((values, canvas) => {\n      const id = this.mirror.getId(canvas);\n      this.flushPendingCanvasMutationFor(canvas, id);\n    });\n    requestAnimationFrame(() => this.flushPendingCanvasMutations());\n  }\n  flushPendingCanvasMutationFor(canvas, id) {\n    if (this.frozen || this.locked) {\n      return;\n    }\n    const valuesWithType = this.pendingCanvasMutations.get(canvas);\n    if (!valuesWithType || id === -1) return;\n    const values = valuesWithType.map(value => {\n      const rest = __rest(value, [\"type\"]);\n      return rest;\n    });\n    const {\n      type\n    } = valuesWithType[0];\n    this.mutationCb({\n      id,\n      type,\n      commands: values\n    });\n    this.pendingCanvasMutations.delete(canvas);\n  }\n}\nfunction wrapEvent(e) {\n  return Object.assign(Object.assign({}, e), {\n    timestamp: Date.now()\n  });\n}\nlet wrappedEmit;\nlet takeFullSnapshot;\nconst mirror = createMirror();\nfunction record() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    emit,\n    checkoutEveryNms,\n    checkoutEveryNth,\n    blockClass = 'rr-block',\n    blockSelector = null,\n    unblockSelector = null,\n    ignoreClass = 'rr-ignore',\n    ignoreSelector = null,\n    maskTextClass = 'rr-mask',\n    maskTextSelector = null,\n    maskInputSelector = null,\n    unmaskTextSelector = null,\n    unmaskInputSelector = null,\n    inlineStylesheet = true,\n    maskAllText = false,\n    maskAllInputs,\n    maskInputOptions: _maskInputOptions,\n    slimDOMOptions: _slimDOMOptions,\n    maskInputFn,\n    maskTextFn,\n    hooks,\n    packFn,\n    sampling = {},\n    mousemoveWait,\n    recordCanvas = false,\n    userTriggeredOnInput = false,\n    collectFonts = false,\n    inlineImages = false,\n    plugins,\n    keepIframeSrcFn = () => false,\n    onMutation\n  } = options;\n  if (!emit) {\n    throw new Error('emit function is required');\n  }\n  if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n    sampling.mousemove = mousemoveWait;\n  }\n  const maskInputOptions = maskAllInputs === true ? {\n    color: true,\n    date: true,\n    'datetime-local': true,\n    email: true,\n    month: true,\n    number: true,\n    range: true,\n    search: true,\n    tel: true,\n    text: true,\n    time: true,\n    url: true,\n    week: true,\n    textarea: true,\n    select: true,\n    radio: true,\n    checkbox: true\n  } : _maskInputOptions !== undefined ? _maskInputOptions : {};\n  const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all' ? {\n    script: true,\n    comment: true,\n    headFavicon: true,\n    headWhitespace: true,\n    headMetaSocial: true,\n    headMetaRobots: true,\n    headMetaHttpEquiv: true,\n    headMetaVerification: true,\n    headMetaAuthorship: _slimDOMOptions === 'all',\n    headMetaDescKeywords: _slimDOMOptions === 'all'\n  } : _slimDOMOptions ? _slimDOMOptions : {};\n  polyfill();\n  let lastFullSnapshotEvent;\n  let incrementalSnapshotCount = 0;\n  const eventProcessor = e => {\n    for (const plugin of plugins || []) {\n      if (plugin.eventProcessor) {\n        e = plugin.eventProcessor(e);\n      }\n    }\n    if (packFn) {\n      e = packFn(e);\n    }\n    return e;\n  };\n  wrappedEmit = (e, isCheckout) => {\n    var _a;\n    if (((_a = mutationBuffers[0]) === null || _a === void 0 ? void 0 : _a.isFrozen()) && e.type !== EventType.FullSnapshot && !(e.type === EventType.IncrementalSnapshot && e.data.source === IncrementalSource.Mutation)) {\n      mutationBuffers.forEach(buf => buf.unfreeze());\n    }\n    emit(eventProcessor(e), isCheckout);\n    if (e.type === EventType.FullSnapshot) {\n      lastFullSnapshotEvent = e;\n      incrementalSnapshotCount = 0;\n    } else if (e.type === EventType.IncrementalSnapshot) {\n      if (e.data.source === IncrementalSource.Mutation && e.data.isAttachIframe) {\n        return;\n      }\n      incrementalSnapshotCount++;\n      const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n      const exceedTime = checkoutEveryNms && e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n      if (exceedCount || exceedTime) {\n        takeFullSnapshot(true);\n      }\n    }\n  };\n  const wrappedMutationEmit = m => {\n    wrappedEmit(wrapEvent({\n      type: EventType.IncrementalSnapshot,\n      data: Object.assign({\n        source: IncrementalSource.Mutation\n      }, m)\n    }));\n  };\n  const wrappedScrollEmit = p => wrappedEmit(wrapEvent({\n    type: EventType.IncrementalSnapshot,\n    data: Object.assign({\n      source: IncrementalSource.Scroll\n    }, p)\n  }));\n  const wrappedCanvasMutationEmit = p => wrappedEmit(wrapEvent({\n    type: EventType.IncrementalSnapshot,\n    data: Object.assign({\n      source: IncrementalSource.CanvasMutation\n    }, p)\n  }));\n  const iframeManager = new IframeManager({\n    mutationCb: wrappedMutationEmit\n  });\n  const canvasManager = new CanvasManager({\n    recordCanvas,\n    mutationCb: wrappedCanvasMutationEmit,\n    win: window,\n    blockClass,\n    blockSelector,\n    unblockSelector,\n    mirror\n  });\n  const shadowDomManager = new ShadowDomManager({\n    mutationCb: wrappedMutationEmit,\n    scrollCb: wrappedScrollEmit,\n    bypassOptions: {\n      onMutation,\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      maskInputSelector,\n      unmaskInputSelector,\n      inlineStylesheet,\n      maskAllText,\n      maskInputOptions,\n      maskTextFn,\n      maskInputFn,\n      recordCanvas,\n      inlineImages,\n      sampling,\n      slimDOMOptions,\n      iframeManager,\n      canvasManager\n    },\n    mirror\n  });\n  takeFullSnapshot = function () {\n    let isCheckout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var _a, _b, _c, _d;\n    wrappedEmit(wrapEvent({\n      type: EventType.Meta,\n      data: {\n        href: window.location.href,\n        width: getWindowWidth(),\n        height: getWindowHeight()\n      }\n    }), isCheckout);\n    mutationBuffers.forEach(buf => buf.lock());\n    const [node, idNodeMap] = snapshot(document, {\n      blockClass,\n      blockSelector,\n      unblockSelector,\n      maskTextClass,\n      maskTextSelector,\n      unmaskTextSelector,\n      maskInputSelector,\n      unmaskInputSelector,\n      inlineStylesheet,\n      maskAllText,\n      maskAllInputs: maskInputOptions,\n      maskTextFn,\n      slimDOM: slimDOMOptions,\n      recordCanvas,\n      inlineImages,\n      onSerialize: n => {\n        if (isIframeINode(n)) {\n          iframeManager.addIframe(n);\n        }\n        if (hasShadowRoot(n)) {\n          shadowDomManager.addShadowRoot(n.shadowRoot, document);\n        }\n      },\n      onIframeLoad: (iframe, childSn) => {\n        iframeManager.attachIframe(iframe, childSn);\n        shadowDomManager.observeAttachShadow(iframe);\n      },\n      keepIframeSrcFn\n    });\n    if (!node) {\n      return console.warn('Failed to snapshot the document');\n    }\n    mirror.map = idNodeMap;\n    wrappedEmit(wrapEvent({\n      type: EventType.FullSnapshot,\n      data: {\n        node,\n        initialOffset: {\n          left: window.pageXOffset !== undefined ? window.pageXOffset : (document === null || document === void 0 ? void 0 : document.documentElement.scrollLeft) || ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollLeft) || (document === null || document === void 0 ? void 0 : document.body.scrollLeft) || 0,\n          top: window.pageYOffset !== undefined ? window.pageYOffset : (document === null || document === void 0 ? void 0 : document.documentElement.scrollTop) || ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.scrollTop) || (document === null || document === void 0 ? void 0 : document.body.scrollTop) || 0\n        }\n      }\n    }));\n    mutationBuffers.forEach(buf => buf.unlock());\n  };\n  try {\n    const handlers = [];\n    handlers.push(on('DOMContentLoaded', () => {\n      wrappedEmit(wrapEvent({\n        type: EventType.DomContentLoaded,\n        data: {}\n      }));\n    }));\n    const observe = doc => {\n      var _a;\n      return callbackWrapper(initObservers)({\n        onMutation,\n        mutationCb: wrappedMutationEmit,\n        mousemoveCb: (positions, source) => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: {\n            source,\n            positions\n          }\n        })),\n        mouseInteractionCb: d => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: Object.assign({\n            source: IncrementalSource.MouseInteraction\n          }, d)\n        })),\n        scrollCb: wrappedScrollEmit,\n        viewportResizeCb: d => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: Object.assign({\n            source: IncrementalSource.ViewportResize\n          }, d)\n        })),\n        inputCb: v => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: Object.assign({\n            source: IncrementalSource.Input\n          }, v)\n        })),\n        mediaInteractionCb: p => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: Object.assign({\n            source: IncrementalSource.MediaInteraction\n          }, p)\n        })),\n        styleSheetRuleCb: r => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: Object.assign({\n            source: IncrementalSource.StyleSheetRule\n          }, r)\n        })),\n        styleDeclarationCb: r => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: Object.assign({\n            source: IncrementalSource.StyleDeclaration\n          }, r)\n        })),\n        canvasMutationCb: wrappedCanvasMutationEmit,\n        fontCb: p => wrappedEmit(wrapEvent({\n          type: EventType.IncrementalSnapshot,\n          data: Object.assign({\n            source: IncrementalSource.Font\n          }, p)\n        })),\n        blockClass,\n        ignoreClass,\n        ignoreSelector,\n        maskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        maskInputSelector,\n        unmaskInputSelector,\n        maskInputOptions,\n        inlineStylesheet,\n        sampling,\n        recordCanvas,\n        inlineImages,\n        userTriggeredOnInput,\n        collectFonts,\n        doc,\n        maskAllText,\n        maskInputFn,\n        maskTextFn,\n        blockSelector,\n        unblockSelector,\n        slimDOMOptions,\n        mirror,\n        iframeManager,\n        shadowDomManager,\n        canvasManager,\n        plugins: ((_a = plugins === null || plugins === void 0 ? void 0 : plugins.filter(p => p.observer)) === null || _a === void 0 ? void 0 : _a.map(p => ({\n          observer: p.observer,\n          options: p.options,\n          callback: payload => wrappedEmit(wrapEvent({\n            type: EventType.Plugin,\n            data: {\n              plugin: p.name,\n              payload\n            }\n          }))\n        }))) || []\n      }, hooks);\n    };\n    iframeManager.addLoadListener(iframeEl => {\n      try {\n        handlers.push(observe(iframeEl.contentDocument));\n      } catch (error) {\n        console.warn(error);\n      }\n    });\n    const init = () => {\n      takeFullSnapshot();\n      handlers.push(observe(document));\n    };\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      init();\n    } else {\n      handlers.push(on('load', () => {\n        wrappedEmit(wrapEvent({\n          type: EventType.Load,\n          data: {}\n        }));\n        init();\n      }, window));\n    }\n    return () => {\n      handlers.forEach(h => h());\n    };\n  } catch (error) {\n    console.warn(error);\n  }\n}\nrecord.addCustomEvent = (tag, payload) => {\n  if (!wrappedEmit) {\n    throw new Error('please add custom event after start recording');\n  }\n  wrappedEmit(wrapEvent({\n    type: EventType.Custom,\n    data: {\n      tag,\n      payload\n    }\n  }));\n};\nrecord.freezePage = () => {\n  mutationBuffers.forEach(buf => buf.freeze());\n};\nrecord.takeFullSnapshot = isCheckout => {\n  if (!takeFullSnapshot) {\n    throw new Error('please take full snapshot after start recording');\n  }\n  takeFullSnapshot(isCheckout);\n};\nrecord.mirror = mirror;\nconst NAVIGATION_ENTRY_KEYS = ['name', 'type', 'startTime', 'transferSize', 'duration'];\nfunction isNavigationEntryEqual(a) {\n  return function (b) {\n    return NAVIGATION_ENTRY_KEYS.every(key => a[key] === b[key]);\n  };\n}\n\n/**\n * There are some difficulties diagnosing why there are duplicate navigation\n * entries. We've witnessed several intermittent results:\n * - duplicate entries have duration = 0\n * - duplicate entries are the same object reference\n * - none of the above\n *\n * Compare the values of several keys to determine if the entries are duplicates or not.\n */\n// TODO (high-prio): Figure out wth is returned here\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction dedupePerformanceEntries(currentList, newList) {\n  // Partition `currentList` into 3 different lists based on entryType\n  const [existingNavigationEntries, existingLcpEntries, existingEntries] = currentList.reduce((acc, entry) => {\n    if (entry.entryType === 'navigation') {\n      acc[0].push(entry);\n    } else if (entry.entryType === 'largest-contentful-paint') {\n      acc[1].push(entry);\n    } else {\n      acc[2].push(entry);\n    }\n    return acc;\n  }, [[], [], []]);\n  const newEntries = [];\n  const newNavigationEntries = [];\n  let newLcpEntry = existingLcpEntries.length ? existingLcpEntries[existingLcpEntries.length - 1] // Take the last element as list is sorted\n  : undefined;\n  newList.forEach(entry => {\n    if (entry.entryType === 'largest-contentful-paint') {\n      // We want the latest LCP event only\n      if (!newLcpEntry || newLcpEntry.startTime < entry.startTime) {\n        newLcpEntry = entry;\n      }\n      return;\n    }\n    if (entry.entryType === 'navigation') {\n      const navigationEntry = entry;\n\n      // Check if the navigation entry is contained in currentList or newList\n      if (\n      // Ignore any navigation entries with duration 0, as they are likely duplicates\n      entry.duration > 0 &&\n      // Ensure new entry does not already exist in existing entries\n      !existingNavigationEntries.find(isNavigationEntryEqual(navigationEntry)) &&\n      // Ensure new entry does not already exist in new list of navigation entries\n      !newNavigationEntries.find(isNavigationEntryEqual(navigationEntry))) {\n        newNavigationEntries.push(navigationEntry);\n      }\n\n      // Otherwise this navigation entry is considered a duplicate and is thrown away\n      return;\n    }\n    newEntries.push(entry);\n  });\n\n  // Re-combine and sort by startTime\n  return [...(newLcpEntry ? [newLcpEntry] : []), ...existingNavigationEntries, ...existingEntries, ...newEntries, ...newNavigationEntries].sort((a, b) => a.startTime - b.startTime);\n}\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n */\nfunction setupPerformanceObserver(replay) {\n  const performanceObserverHandler = list => {\n    // For whatever reason the observer was returning duplicate navigation\n    // entries (the other entry types were not duplicated).\n    const newPerformanceEntries = dedupePerformanceEntries(replay.performanceEvents, list.getEntries());\n    replay.performanceEvents = newPerformanceEntries;\n  };\n  const performanceObserver = new PerformanceObserver(performanceObserverHandler);\n  ['element', 'event', 'first-input', 'largest-contentful-paint', 'layout-shift', 'longtask', 'navigation', 'paint', 'resource'].forEach(type => {\n    try {\n      performanceObserver.observe({\n        type,\n        buffered: true\n      });\n    } catch (e) {\n      // This can throw if an entry type is not supported in the browser.\n      // Ignore these errors.\n    }\n  });\n  return performanceObserver;\n}\nconst r = `/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\nfunction t(t){let e=t.length;for(;--e>=0;)t[e]=0}const e=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),a=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),n=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=new Array(576);t(s);const r=new Array(60);t(r);const o=new Array(512);t(o);const l=new Array(256);t(l);const h=new Array(29);t(h);const d=new Array(30);function _(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let f,c,u;function w(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}t(d);const m=t=>t<256?o[t]:o[256+(t>>>7)],b=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},g=(t,e,a)=>{t.bi_valid>16-a?(t.bi_buf|=e<<t.bi_valid&65535,b(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=a-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)},p=(t,e,a)=>{g(t,a[2*e],a[2*e+1])},k=(t,e)=>{let a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1},v=(t,e,a)=>{const i=new Array(16);let n,s,r=0;for(n=1;n<=15;n++)r=r+a[n-1]<<1,i[n]=r;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=k(i[e]++,e))}},y=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},x=t=>{t.bi_valid>8?b(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},z=(t,e,a,i)=>{const n=2*e,s=2*a;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[a]},A=(t,e,a)=>{const i=t.heap[a];let n=a<<1;for(;n<=t.heap_len&&(n<t.heap_len&&z(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!z(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i},E=(t,i,n)=>{let s,r,o,_,f=0;if(0!==t.sym_next)do{s=255&t.pending_buf[t.sym_buf+f++],s+=(255&t.pending_buf[t.sym_buf+f++])<<8,r=t.pending_buf[t.sym_buf+f++],0===s?p(t,r,i):(o=l[r],p(t,o+256+1,i),_=e[o],0!==_&&(r-=h[o],g(t,r,_)),s--,o=m(s),p(t,o,n),_=a[o],0!==_&&(s-=d[o],g(t,s,_)))}while(f<t.sym_next);p(t,256,i)},R=(t,e)=>{const a=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let r,o,l,h=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<s;r++)0!==a[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):a[2*r+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,a[2*l]=1,t.depth[l]=0,t.opt_len--,n&&(t.static_len-=i[2*l+1]);for(e.max_code=h,r=t.heap_len>>1;r>=1;r--)A(t,a,r);l=s;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],A(t,a,1),o=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=o,a[2*l]=a[2*r]+a[2*o],t.depth[l]=(t.depth[r]>=t.depth[o]?t.depth[r]:t.depth[o])+1,a[2*r+1]=a[2*o+1]=l,t.heap[1]=l++,A(t,a,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const a=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,d,_,f,c,u,w=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(a[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)d=t.heap[h],f=a[2*a[2*d+1]+1]+1,f>l&&(f=l,w++),a[2*d+1]=f,d>i||(t.bl_count[f]++,c=0,d>=o&&(c=r[d-o]),u=a[2*d],t.opt_len+=u*(f+c),s&&(t.static_len+=u*(n[2*d+1]+c)));if(0!==w){do{for(f=l-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[l]--,w-=2}while(w>0);for(f=l;0!==f;f--)for(d=t.bl_count[f];0!==d;)_=t.heap[--h],_>i||(a[2*_+1]!==f&&(t.opt_len+=(f-a[2*_+1])*a[2*_],a[2*_+1]=f),d--)}})(t,e),v(a,h,t.bl_count)},Z=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=r,r=e[2*(i+1)+1],++o<l&&n===r||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4))},U=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),i=0;i<=a;i++)if(n=r,r=e[2*(i+1)+1],!(++o<l&&n===r)){if(o<h)do{p(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==s&&(p(t,n,t.bl_tree),o--),p(t,16,t.bl_tree),g(t,o-3,2)):o<=10?(p(t,17,t.bl_tree),g(t,o-3,3)):(p(t,18,t.bl_tree),g(t,o-11,7));o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4)}};let S=!1;const D=(t,e,a,i)=>{g(t,0+(i?1:0),3),x(t),b(t,a),b(t,~a),a&&t.pending_buf.set(t.window.subarray(e,e+a),t.pending),t.pending+=a};var T=(t,e,a,i)=>{let o,l,h=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),R(t,t.l_desc),R(t,t.d_desc),h=(t=>{let e;for(Z(t,t.dyn_ltree,t.l_desc.max_code),Z(t,t.dyn_dtree,t.d_desc.max_code),R(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*n[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),o=t.opt_len+3+7>>>3,l=t.static_len+3+7>>>3,l<=o&&(o=l)):o=l=a+5,a+4<=o&&-1!==e?D(t,e,a,i):4===t.strategy||l===o?(g(t,2+(i?1:0),3),E(t,s,r)):(g(t,4+(i?1:0),3),((t,e,a,i)=>{let s;for(g(t,e-257,5),g(t,a-1,5),g(t,i-4,4),s=0;s<i;s++)g(t,t.bl_tree[2*n[s]+1],3);U(t,t.dyn_ltree,e-1),U(t,t.dyn_dtree,a-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,h+1),E(t,t.dyn_ltree,t.dyn_dtree)),y(t),i&&x(t)},O={_tr_init:t=>{S||((()=>{let t,n,w,m,b;const g=new Array(16);for(w=0,m=0;m<28;m++)for(h[m]=w,t=0;t<1<<e[m];t++)l[w++]=m;for(l[w-1]=m,b=0,m=0;m<16;m++)for(d[m]=b,t=0;t<1<<a[m];t++)o[b++]=m;for(b>>=7;m<30;m++)for(d[m]=b<<7,t=0;t<1<<a[m]-7;t++)o[256+b++]=m;for(n=0;n<=15;n++)g[n]=0;for(t=0;t<=143;)s[2*t+1]=8,t++,g[8]++;for(;t<=255;)s[2*t+1]=9,t++,g[9]++;for(;t<=279;)s[2*t+1]=7,t++,g[7]++;for(;t<=287;)s[2*t+1]=8,t++,g[8]++;for(v(s,287,g),t=0;t<30;t++)r[2*t+1]=5,r[2*t]=k(t,5);f=new _(s,e,257,286,15),c=new _(r,a,0,30,15),u=new _(new Array(0),i,0,19,7)})(),S=!0),t.l_desc=new w(t.dyn_ltree,f),t.d_desc=new w(t.dyn_dtree,c),t.bl_desc=new w(t.bl_tree,u),t.bi_buf=0,t.bi_valid=0,y(t)},_tr_stored_block:D,_tr_flush_block:T,_tr_tally:(t,e,a)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=a,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(l[a]+256+1)]++,t.dyn_dtree[2*m(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{g(t,2,3),p(t,256,s),(t=>{16===t.bi_valid?(b(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var F=(t,e,a,i)=>{let n=65535&t|0,s=t>>>16&65535|0,r=0;for(;0!==a;){r=a>2e3?2e3:a,a-=r;do{n=n+e[i++]|0,s=s+n|0}while(--r);n%=65521,s%=65521}return n|s<<16|0};const L=new Uint32Array((()=>{let t,e=[];for(var a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e})());var N=(t,e,a,i)=>{const n=L,s=i+a;t^=-1;for(let a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t},I={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"},B={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:C,_tr_stored_block:H,_tr_flush_block:M,_tr_tally:j,_tr_align:K}=O,{Z_NO_FLUSH:P,Z_PARTIAL_FLUSH:Y,Z_FULL_FLUSH:G,Z_FINISH:X,Z_BLOCK:W,Z_OK:q,Z_STREAM_END:J,Z_STREAM_ERROR:Q,Z_DATA_ERROR:V,Z_BUF_ERROR:$,Z_DEFAULT_COMPRESSION:tt,Z_FILTERED:et,Z_HUFFMAN_ONLY:at,Z_RLE:it,Z_FIXED:nt,Z_DEFAULT_STRATEGY:st,Z_UNKNOWN:rt,Z_DEFLATED:ot}=B,lt=(t,e)=>(t.msg=I[e],e),ht=t=>2*t-(t>4?9:0),dt=t=>{let e=t.length;for(;--e>=0;)t[e]=0},_t=t=>{let e,a,i,n=t.w_size;e=t.hash_size,i=e;do{a=t.head[--i],t.head[i]=a>=n?a-n:0}while(--e);e=n,i=e;do{a=t.prev[--i],t.prev[i]=a>=n?a-n:0}while(--e)};let ft=(t,e,a)=>(e<<t.hash_shift^a)&t.hash_mask;const ct=t=>{const e=t.state;let a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+a),t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))},ut=(t,e)=>{M(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,ct(t.strm)},wt=(t,e)=>{t.pending_buf[t.pending++]=e},mt=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},bt=(t,e,a,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),a),1===t.state.wrap?t.adler=F(t.adler,e,n,a):2===t.state.wrap&&(t.adler=N(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)},gt=(t,e)=>{let a,i,n=t.max_chain_length,s=t.strstart,r=t.prev_length,o=t.nice_match;const l=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,h=t.window,d=t.w_mask,_=t.prev,f=t.strstart+258;let c=h[s+r-1],u=h[s+r];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+r]===u&&h[a+r-1]===c&&h[a]===h[s]&&h[++a]===h[s+1]){s+=2,a++;do{}while(h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&s<f);if(i=258-(f-s),s=f-258,i>r){if(t.match_start=e,r=i,i>=o)break;c=h[s+r-1],u=h[s+r]}}}while((e=_[e&d])>l&&0!=--n);return r<=t.lookahead?r:t.lookahead},pt=t=>{const e=t.w_size;let a,i,n;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-262)&&(t.window.set(t.window.subarray(e,e+e-i),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),_t(t),i+=e),0===t.strm.avail_in)break;if(a=bt(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=a,t.lookahead+t.insert>=3)for(n=t.strstart-t.insert,t.ins_h=t.window[n],t.ins_h=ft(t,t.ins_h,t.window[n+1]);t.insert&&(t.ins_h=ft(t,t.ins_h,t.window[n+3-1]),t.prev[n&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=n,n++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)},kt=(t,e)=>{let a,i,n,s=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,r=0,o=t.strm.avail_in;do{if(a=65535,n=t.bi_valid+42>>3,t.strm.avail_out<n)break;if(n=t.strm.avail_out-n,i=t.strstart-t.block_start,a>i+t.strm.avail_in&&(a=i+t.strm.avail_in),a>n&&(a=n),a<s&&(0===a&&e!==X||e===P||a!==i+t.strm.avail_in))break;r=e===X&&a===i+t.strm.avail_in?1:0,H(t,0,0,r),t.pending_buf[t.pending-4]=a,t.pending_buf[t.pending-3]=a>>8,t.pending_buf[t.pending-2]=~a,t.pending_buf[t.pending-1]=~a>>8,ct(t.strm),i&&(i>a&&(i=a),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+i),t.strm.next_out),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i,t.block_start+=i,a-=i),a&&(bt(t.strm,t.strm.output,t.strm.next_out,a),t.strm.next_out+=a,t.strm.avail_out-=a,t.strm.total_out+=a)}while(0===r);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),r?4:e!==P&&e!==X&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(n=t.window_size-t.strstart,t.strm.avail_in>n&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,n+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),n>t.strm.avail_in&&(n=t.strm.avail_in),n&&(bt(t.strm,t.window,t.strstart,n),t.strstart+=n,t.insert+=n>t.w_size-t.insert?t.w_size-t.insert:n),t.high_water<t.strstart&&(t.high_water=t.strstart),n=t.bi_valid+42>>3,n=t.pending_buf_size-n>65535?65535:t.pending_buf_size-n,s=n>t.w_size?t.w_size:n,i=t.strstart-t.block_start,(i>=s||(i||e===X)&&e!==P&&0===t.strm.avail_in&&i<=n)&&(a=i>n?n:i,r=e===X&&0===t.strm.avail_in&&a===i?1:0,H(t,t.block_start,a,r),t.block_start+=a,ct(t.strm)),r?3:1)},vt=(t,e)=>{let a,i;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a)),t.match_length>=3)if(i=j(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=ft(t,t.ins_h,t.window[t.strstart+1]);else i=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2},yt=(t,e)=>{let a,i,n;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a),t.match_length<=5&&(t.strategy===et||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=j(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(ut(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=j(t,0,t.window[t.strstart-1]),i&&ut(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=j(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2};function xt(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}const zt=[new xt(0,0,0,0,kt),new xt(4,4,8,4,vt),new xt(4,5,16,8,vt),new xt(4,6,32,32,vt),new xt(4,4,16,16,yt),new xt(8,16,32,32,yt),new xt(8,16,128,128,yt),new xt(8,32,128,256,yt),new xt(32,128,258,1024,yt),new xt(32,258,258,4096,yt)];function At(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),dt(this.dyn_ltree),dt(this.dyn_dtree),dt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),dt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),dt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Et=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||42!==e.status&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&113!==e.status&&666!==e.status?1:0},Rt=t=>{if(Et(t))return lt(t,Q);t.total_in=t.total_out=0,t.data_type=rt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=-2,C(e),q},Zt=t=>{const e=Rt(t);var a;return e===q&&((a=t.state).window_size=2*a.w_size,dt(a.head),a.max_lazy_match=zt[a.level].max_lazy,a.good_match=zt[a.level].good_length,a.nice_match=zt[a.level].nice_length,a.max_chain_length=zt[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),e},Ut=(t,e,a,i,n,s)=>{if(!t)return Q;let r=1;if(e===tt&&(e=6),i<0?(r=0,i=-i):i>15&&(r=2,i-=16),n<1||n>9||a!==ot||i<8||i>15||e<0||e>9||s<0||s>nt||8===i&&1!==r)return lt(t,Q);8===i&&(i=9);const o=new At;return t.state=o,o.strm=t,o.status=42,o.wrap=r,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=e,o.strategy=s,o.method=a,Zt(t)};var St={deflateInit:(t,e)=>Ut(t,e,ot,15,8,st),deflateInit2:Ut,deflateReset:Zt,deflateResetKeep:Rt,deflateSetHeader:(t,e)=>Et(t)||2!==t.state.wrap?Q:(t.state.gzhead=e,q),deflate:(t,e)=>{if(Et(t)||e>W||e<0)return t?lt(t,Q):Q;const a=t.state;if(!t.output||0!==t.avail_in&&!t.input||666===a.status&&e!==X)return lt(t,0===t.avail_out?$:Q);const i=a.last_flush;if(a.last_flush=e,0!==a.pending){if(ct(t),0===t.avail_out)return a.last_flush=-1,q}else if(0===t.avail_in&&ht(e)<=ht(i)&&e!==X)return lt(t,$);if(666===a.status&&0!==t.avail_in)return lt(t,$);if(42===a.status&&0===a.wrap&&(a.status=113),42===a.status){let e=ot+(a.w_bits-8<<4)<<8,i=-1;if(i=a.strategy>=at||a.level<2?0:a.level<6?1:6===a.level?2:3,e|=i<<6,0!==a.strstart&&(e|=32),e+=31-e%31,mt(a,e),0!==a.strstart&&(mt(a,t.adler>>>16),mt(a,65535&t.adler)),t.adler=1,a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(57===a.status)if(t.adler=0,wt(a,31),wt(a,139),wt(a,8),a.gzhead)wt(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),wt(a,255&a.gzhead.time),wt(a,a.gzhead.time>>8&255),wt(a,a.gzhead.time>>16&255),wt(a,a.gzhead.time>>24&255),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(wt(a,255&a.gzhead.extra.length),wt(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(t.adler=N(t.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69;else if(wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,3),a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q;if(69===a.status){if(a.gzhead.extra){let e=a.pending,i=(65535&a.gzhead.extra.length)-a.gzindex;for(;a.pending+i>a.pending_buf_size;){let n=a.pending_buf_size-a.pending;if(a.pending_buf.set(a.gzhead.extra.subarray(a.gzindex,a.gzindex+n),a.pending),a.pending=a.pending_buf_size,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex+=n,ct(t),0!==a.pending)return a.last_flush=-1,q;e=0,i-=n}let n=new Uint8Array(a.gzhead.extra);a.pending_buf.set(n.subarray(a.gzindex,a.gzindex+i),a.pending),a.pending+=i,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex=0}a.status=73}if(73===a.status){if(a.gzhead.name){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),a.gzindex=0}a.status=91}if(91===a.status){if(a.gzhead.comment){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i))}a.status=103}if(103===a.status){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size&&(ct(t),0!==a.pending))return a.last_flush=-1,q;wt(a,255&t.adler),wt(a,t.adler>>8&255),t.adler=0}if(a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(0!==t.avail_in||0!==a.lookahead||e!==P&&666!==a.status){let i=0===a.level?kt(a,e):a.strategy===at?((t,e)=>{let a;for(;;){if(0===t.lookahead&&(pt(t),0===t.lookahead)){if(e===P)return 1;break}if(t.match_length=0,a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):a.strategy===it?((t,e)=>{let a,i,n,s;const r=t.window;for(;;){if(t.lookahead<=258){if(pt(t),t.lookahead<=258&&e===P)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=r[n],i===r[++n]&&i===r[++n]&&i===r[++n])){s=t.strstart+258;do{}while(i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&n<s);t.match_length=258-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(a=j(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):zt[a.level].func(a,e);if(3!==i&&4!==i||(a.status=666),1===i||3===i)return 0===t.avail_out&&(a.last_flush=-1),q;if(2===i&&(e===Y?K(a):e!==W&&(H(a,0,0,!1),e===G&&(dt(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),ct(t),0===t.avail_out))return a.last_flush=-1,q}return e!==X?q:a.wrap<=0?J:(2===a.wrap?(wt(a,255&t.adler),wt(a,t.adler>>8&255),wt(a,t.adler>>16&255),wt(a,t.adler>>24&255),wt(a,255&t.total_in),wt(a,t.total_in>>8&255),wt(a,t.total_in>>16&255),wt(a,t.total_in>>24&255)):(mt(a,t.adler>>>16),mt(a,65535&t.adler)),ct(t),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?q:J)},deflateEnd:t=>{if(Et(t))return Q;const e=t.state.status;return t.state=null,113===e?lt(t,V):q},deflateSetDictionary:(t,e)=>{let a=e.length;if(Et(t))return Q;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return Q;if(1===n&&(t.adler=F(t.adler,e,a,0)),i.wrap=0,a>=i.w_size){0===n&&(dt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(a-i.w_size,a),0),e=t,a=i.w_size}const s=t.avail_in,r=t.next_in,o=t.input;for(t.avail_in=a,t.next_in=0,t.input=e,pt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=ft(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,pt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=r,t.input=o,t.avail_in=s,i.wrap=n,q},deflateInfo:\"pako deflate (from Nodeca project)\"};const Dt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Tt=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const a=e.shift();if(a){if(\"object\"!=typeof a)throw new TypeError(a+\"must be non-object\");for(const e in a)Dt(a,e)&&(t[e]=a[e])}}return t},Ot=t=>{let e=0;for(let a=0,i=t.length;a<i;a++)e+=t[a].length;const a=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];a.set(n,i),i+=n.length}return a};let Ft=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ft=!1}const Lt=new Uint8Array(256);for(let t=0;t<256;t++)Lt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Lt[254]=Lt[254]=1;var Nt=t=>{if(\"function\"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,a,i,n,s,r=t.length,o=0;for(n=0;n<r;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),o+=a<128?1:a<2048?2:a<65536?3:4;for(e=new Uint8Array(o),s=0,n=0;s<o;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},It=(t,e)=>{const a=e||t.length;if(\"function\"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*a);for(n=0,i=0;i<a;){let e=t[i++];if(e<128){s[n++]=e;continue}let r=Lt[e];if(r>4)s[n++]=65533,i+=r-1;else{for(e&=2===r?31:3===r?15:7;r>1&&i<a;)e=e<<6|63&t[i++],r--;r>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ft)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let a=\"\";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a})(s,n)},Bt=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let a=e-1;for(;a>=0&&128==(192&t[a]);)a--;return a<0||0===a?e:a+Lt[t[a]]>e?a:e};var Ct=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0};const Ht=Object.prototype.toString,{Z_NO_FLUSH:Mt,Z_SYNC_FLUSH:jt,Z_FULL_FLUSH:Kt,Z_FINISH:Pt,Z_OK:Yt,Z_STREAM_END:Gt,Z_DEFAULT_COMPRESSION:Xt,Z_DEFAULT_STRATEGY:Wt,Z_DEFLATED:qt}=B;function Jt(t){this.options=Tt({level:Xt,method:qt,chunkSize:16384,windowBits:15,memLevel:8,strategy:Wt},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=St.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==Yt)throw new Error(I[a]);if(e.header&&St.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t=\"string\"==typeof e.dictionary?Nt(e.dictionary):\"[object ArrayBuffer]\"===Ht.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=St.deflateSetDictionary(this.strm,t),a!==Yt)throw new Error(I[a]);this._dict_set=!0}}function Qt(t,e){const a=new Jt(e);if(a.push(t,!0),a.err)throw a.msg||I[a.err];return a.result}Jt.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?Pt:Mt,\"string\"==typeof t?a.input=Nt(t):\"[object ArrayBuffer]\"===Ht.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),(s===jt||s===Kt)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=St.deflate(a,s),n===Gt)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=St.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===Yt;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},Jt.prototype.onData=function(t){this.chunks.push(t)},Jt.prototype.onEnd=function(t){t===Yt&&(this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var Vt={Deflate:Jt,deflate:Qt,deflateRaw:function(t,e){return(e=e||{}).raw=!0,Qt(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,Qt(t,e)},constants:B};var $t=function(t,e){let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z,A;const E=t.state;a=t.next_in,z=t.input,i=a+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),r=n+(t.avail_out-257),o=E.dmax,l=E.wsize,h=E.whave,d=E.wnext,_=E.window,f=E.hold,c=E.bits,u=E.lencode,w=E.distcode,m=(1<<E.lenbits)-1,b=(1<<E.distbits)-1;t:do{c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=u[f&m];e:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,0===p)A[n++]=65535&g;else{if(!(16&p)){if(0==(64&p)){g=u[(65535&g)+(f&(1<<p)-1)];continue e}if(32&p){E.mode=16191;break t}t.msg=\"invalid literal/length code\",E.mode=16209;break t}k=65535&g,p&=15,p&&(c<p&&(f+=z[a++]<<c,c+=8),k+=f&(1<<p)-1,f>>>=p,c-=p),c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=w[f&b];a:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,!(16&p)){if(0==(64&p)){g=w[(65535&g)+(f&(1<<p)-1)];continue a}t.msg=\"invalid distance code\",E.mode=16209;break t}if(v=65535&g,p&=15,c<p&&(f+=z[a++]<<c,c+=8,c<p&&(f+=z[a++]<<c,c+=8)),v+=f&(1<<p)-1,v>o){t.msg=\"invalid distance too far back\",E.mode=16209;break t}if(f>>>=p,c-=p,p=n-s,v>p){if(p=v-p,p>h&&E.sane){t.msg=\"invalid distance too far back\",E.mode=16209;break t}if(y=0,x=_,0===d){if(y+=l-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}else if(d<p){if(y+=l+d-p,p-=d,p<k){k-=p;do{A[n++]=_[y++]}while(--p);if(y=0,d<k){p=d,k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}}else if(y+=d-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}for(;k>2;)A[n++]=x[y++],A[n++]=x[y++],A[n++]=x[y++],k-=3;k&&(A[n++]=x[y++],k>1&&(A[n++]=x[y++]))}else{y=n-v;do{A[n++]=A[y++],A[n++]=A[y++],A[n++]=A[y++],k-=3}while(k>2);k&&(A[n++]=A[y++],k>1&&(A[n++]=A[y++]))}break}}break}}while(a<i&&n<r);k=c>>3,a-=k,c-=k<<3,f&=(1<<c)-1,t.next_in=a,t.next_out=n,t.avail_in=a<i?i-a+5:5-(a-i),t.avail_out=n<r?r-n+257:257-(n-r),E.hold=f,E.bits=c};const te=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ee=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ae=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ie=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var ne=(t,e,a,i,n,s,r,o)=>{const l=o.bits;let h,d,_,f,c,u,w=0,m=0,b=0,g=0,p=0,k=0,v=0,y=0,x=0,z=0,A=null;const E=new Uint16Array(16),R=new Uint16Array(16);let Z,U,S,D=null;for(w=0;w<=15;w++)E[w]=0;for(m=0;m<i;m++)E[e[a+m]]++;for(p=l,g=15;g>=1&&0===E[g];g--);if(p>g&&(p=g),0===g)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(b=1;b<g&&0===E[b];b++);for(p<b&&(p=b),y=1,w=1;w<=15;w++)if(y<<=1,y-=E[w],y<0)return-1;if(y>0&&(0===t||1!==g))return-1;for(R[1]=0,w=1;w<15;w++)R[w+1]=R[w]+E[w];for(m=0;m<i;m++)0!==e[a+m]&&(r[R[e[a+m]]++]=m);if(0===t?(A=D=r,u=20):1===t?(A=te,D=ee,u=257):(A=ae,D=ie,u=0),z=0,m=0,w=b,c=s,k=p,v=0,_=-1,x=1<<p,f=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){Z=w-v,r[m]+1<u?(U=0,S=r[m]):r[m]>=u?(U=D[r[m]-u],S=A[r[m]-u]):(U=96,S=0),h=1<<w-v,d=1<<k,b=d;do{d-=h,n[c+(z>>v)+d]=Z<<24|U<<16|S|0}while(0!==d);for(h=1<<w-1;z&h;)h>>=1;if(0!==h?(z&=h-1,z+=h):z=0,m++,0==--E[w]){if(w===g)break;w=e[a+r[m]]}if(w>p&&(z&f)!==_){for(0===v&&(v=p),c+=b,k=w-v,y=1<<k;k+v<g&&(y-=E[k+v],!(y<=0));)k++,y<<=1;if(x+=1<<k,1===t&&x>852||2===t&&x>592)return 1;_=z&f,n[_]=p<<24|k<<16|c-s|0}}return 0!==z&&(n[c+z]=w-v<<24|64<<16|0),o.bits=p,0};const{Z_FINISH:se,Z_BLOCK:re,Z_TREES:oe,Z_OK:le,Z_STREAM_END:he,Z_NEED_DICT:de,Z_STREAM_ERROR:_e,Z_DATA_ERROR:fe,Z_MEM_ERROR:ce,Z_BUF_ERROR:ue,Z_DEFLATED:we}=B,me=16209,be=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function ge(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const pe=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<16180||e.mode>16211?1:0},ke=t=>{if(pe(t))return _e;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg=\"\",e.wrap&&(t.adler=1&e.wrap),e.mode=16180,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,le},ve=t=>{if(pe(t))return _e;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,ke(t)},ye=(t,e)=>{let a;if(pe(t))return _e;const i=t.state;return e<0?(a=0,e=-e):(a=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?_e:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,ve(t))},xe=(t,e)=>{if(!t)return _e;const a=new ge;t.state=a,a.strm=t,a.window=null,a.mode=16180;const i=ye(t,e);return i!==le&&(t.state=null),i};let ze,Ae,Ee=!0;const Re=t=>{if(Ee){ze=new Int32Array(512),Ae=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(ne(1,t.lens,0,288,ze,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;ne(2,t.lens,0,32,Ae,0,t.work,{bits:5}),Ee=!1}t.lencode=ze,t.lenbits=9,t.distcode=Ae,t.distbits=5},Ze=(t,e,a,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(a-s.wsize,a),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(a-i,a-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(a-i,a),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Ue={inflateReset:ve,inflateReset2:ye,inflateResetKeep:ke,inflateInit:t=>xe(t,15),inflateInit2:xe,inflate:(t,e)=>{let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z=0;const A=new Uint8Array(4);let E,R;const Z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(pe(t)||!t.output||!t.input&&0!==t.avail_in)return _e;a=t.state,16191===a.mode&&(a.mode=16192),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,_=o,f=l,x=le;t:for(;;)switch(a.mode){case 16180:if(0===a.wrap){a.mode=16192;break}for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(2&a.wrap&&35615===h){0===a.wbits&&(a.wbits=15),a.check=0,A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0),h=0,d=0,a.mode=16181;break}if(a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg=\"incorrect header check\",a.mode=me;break}if((15&h)!==we){t.msg=\"unknown compression method\",a.mode=me;break}if(h>>>=4,d-=4,y=8+(15&h),0===a.wbits&&(a.wbits=y),y>15||y>a.wbits){t.msg=\"invalid window size\",a.mode=me;break}a.dmax=1<<a.wbits,a.flags=0,t.adler=a.check=1,a.mode=512&h?16189:16191,h=0,d=0;break;case 16181:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.flags=h,(255&a.flags)!==we){t.msg=\"unknown compression method\",a.mode=me;break}if(57344&a.flags){t.msg=\"unknown header flags set\",a.mode=me;break}a.head&&(a.head.text=h>>8&1),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16182;case 16182:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.time=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,A[2]=h>>>16&255,A[3]=h>>>24&255,a.check=N(a.check,A,4,0)),h=0,d=0,a.mode=16183;case 16183:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.xflags=255&h,a.head.os=h>>8),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16184;case 16184:if(1024&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length=h,a.head&&(a.head.extra_len=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0}else a.head&&(a.head.extra=null);a.mode=16185;case 16185:if(1024&a.flags&&(c=a.length,c>o&&(c=o),c&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(i.subarray(s,s+c),y)),512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,a.length-=c),a.length))break t;a.length=0,a.mode=16186;case 16186:if(2048&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=16187;case 16187:if(4096&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.comment=null);a.mode=16188;case 16188:if(512&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(65535&a.check)){t.msg=\"header crc mismatch\",a.mode=me;break}h=0,d=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=16191;break;case 16189:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}t.adler=a.check=be(h),h=0,d=0,a.mode=16190;case 16190:if(0===a.havedict)return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,de;t.adler=a.check=1,a.mode=16191;case 16191:if(e===re||e===oe)break t;case 16192:if(a.last){h>>>=7&d,d-=7&d,a.mode=16206;break}for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}switch(a.last=1&h,h>>>=1,d-=1,3&h){case 0:a.mode=16193;break;case 1:if(Re(a),a.mode=16199,e===oe){h>>>=2,d-=2;break t}break;case 2:a.mode=16196;break;case 3:t.msg=\"invalid block type\",a.mode=me}h>>>=2,d-=2;break;case 16193:for(h>>>=7&d,d-=7&d;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if((65535&h)!=(h>>>16^65535)){t.msg=\"invalid stored block lengths\",a.mode=me;break}if(a.length=65535&h,h=0,d=0,a.mode=16194,e===oe)break t;case 16194:a.mode=16195;case 16195:if(c=a.length,c){if(c>o&&(c=o),c>l&&(c=l),0===c)break t;n.set(i.subarray(s,s+c),r),o-=c,s+=c,l-=c,r+=c,a.length-=c;break}a.mode=16191;break;case 16196:for(;d<14;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.nlen=257+(31&h),h>>>=5,d-=5,a.ndist=1+(31&h),h>>>=5,d-=5,a.ncode=4+(15&h),h>>>=4,d-=4,a.nlen>286||a.ndist>30){t.msg=\"too many length or distance symbols\",a.mode=me;break}a.have=0,a.mode=16197;case 16197:for(;a.have<a.ncode;){for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.lens[Z[a.have++]]=7&h,h>>>=3,d-=3}for(;a.have<19;)a.lens[Z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},x=ne(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid code lengths set\",a.mode=me;break}a.have=0,a.mode=16198;case 16198:for(;a.have<a.nlen+a.ndist;){for(;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(g<16)h>>>=m,d-=m,a.lens[a.have++]=g;else{if(16===g){for(R=m+2;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(h>>>=m,d-=m,0===a.have){t.msg=\"invalid bit length repeat\",a.mode=me;break}y=a.lens[a.have-1],c=3+(3&h),h>>>=2,d-=2}else if(17===g){for(R=m+3;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=3+(7&h),h>>>=3,d-=3}else{for(R=m+7;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=11+(127&h),h>>>=7,d-=7}if(a.have+c>a.nlen+a.ndist){t.msg=\"invalid bit length repeat\",a.mode=me;break}for(;c--;)a.lens[a.have++]=y}}if(a.mode===me)break;if(0===a.lens[256]){t.msg=\"invalid code -- missing end-of-block\",a.mode=me;break}if(a.lenbits=9,E={bits:a.lenbits},x=ne(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid literal/lengths set\",a.mode=me;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},x=ne(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,x){t.msg=\"invalid distances set\",a.mode=me;break}if(a.mode=16199,e===oe)break t;case 16199:a.mode=16200;case 16200:if(o>=6&&l>=258){t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,$t(t,f),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,16191===a.mode&&(a.back=-1);break}for(a.back=0;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(b&&0==(240&b)){for(p=m,k=b,v=g;z=a.lencode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,a.length=g,0===b){a.mode=16205;break}if(32&b){a.back=-1,a.mode=16191;break}if(64&b){t.msg=\"invalid literal/length code\",a.mode=me;break}a.extra=15&b,a.mode=16201;case 16201:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=16202;case 16202:for(;z=a.distcode[h&(1<<a.distbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(0==(240&b)){for(p=m,k=b,v=g;z=a.distcode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,64&b){t.msg=\"invalid distance code\",a.mode=me;break}a.offset=g,a.extra=15&b,a.mode=16203;case 16203:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.offset+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg=\"invalid distance too far back\",a.mode=me;break}a.mode=16204;case 16204:if(0===l)break t;if(c=f-l,a.offset>c){if(c=a.offset-c,c>a.whave&&a.sane){t.msg=\"invalid distance too far back\",a.mode=me;break}c>a.wnext?(c-=a.wnext,u=a.wsize-c):u=a.wnext-c,c>a.length&&(c=a.length),w=a.window}else w=n,u=r-a.offset,c=a.length;c>l&&(c=l),l-=c,a.length-=c;do{n[r++]=w[u++]}while(--c);0===a.length&&(a.mode=16200);break;case 16205:if(0===l)break t;n[r++]=a.length,l--,a.mode=16200;break;case 16206:if(a.wrap){for(;d<32;){if(0===o)break t;o--,h|=i[s++]<<d,d+=8}if(f-=l,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,r-f):F(a.check,n,f,r-f)),f=l,4&a.wrap&&(a.flags?h:be(h))!==a.check){t.msg=\"incorrect data check\",a.mode=me;break}h=0,d=0}a.mode=16207;case 16207:if(a.wrap&&a.flags){for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(4294967295&a.total)){t.msg=\"incorrect length check\",a.mode=me;break}h=0,d=0}a.mode=16208;case 16208:x=he;break t;case me:x=fe;break t;case 16210:return ce;default:return _e}return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,(a.wsize||f!==t.avail_out&&a.mode<me&&(a.mode<16206||e!==se))&&Ze(t,t.output,t.next_out,f-t.avail_out),_-=t.avail_in,f-=t.avail_out,t.total_in+=_,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,t.next_out-f):F(a.check,n,f,t.next_out-f)),t.data_type=a.bits+(a.last?64:0)+(16191===a.mode?128:0)+(16199===a.mode||16194===a.mode?256:0),(0===_&&0===f||e===se)&&x===le&&(x=ue),x},inflateEnd:t=>{if(pe(t))return _e;let e=t.state;return e.window&&(e.window=null),t.state=null,le},inflateGetHeader:(t,e)=>{if(pe(t))return _e;const a=t.state;return 0==(2&a.wrap)?_e:(a.head=e,e.done=!1,le)},inflateSetDictionary:(t,e)=>{const a=e.length;let i,n,s;return pe(t)?_e:(i=t.state,0!==i.wrap&&16190!==i.mode?_e:16190===i.mode&&(n=1,n=F(n,e,a,0),n!==i.check)?fe:(s=Ze(t,e,a,a),s?(i.mode=16210,ce):(i.havedict=1,le)))},inflateInfo:\"pako inflate (from Nodeca project)\"};var Se=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1};const De=Object.prototype.toString,{Z_NO_FLUSH:Te,Z_FINISH:Oe,Z_OK:Fe,Z_STREAM_END:Le,Z_NEED_DICT:Ne,Z_STREAM_ERROR:Ie,Z_DATA_ERROR:Be,Z_MEM_ERROR:Ce}=B;function He(t){this.options=Tt({chunkSize:65536,windowBits:15,to:\"\"},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=Ue.inflateInit2(this.strm,e.windowBits);if(a!==Fe)throw new Error(I[a]);if(this.header=new Se,Ue.inflateGetHeader(this.strm,this.header),e.dictionary&&(\"string\"==typeof e.dictionary?e.dictionary=Nt(e.dictionary):\"[object ArrayBuffer]\"===De.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(a=Ue.inflateSetDictionary(this.strm,e.dictionary),a!==Fe)))throw new Error(I[a])}He.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,r,o;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Oe:Te,\"[object ArrayBuffer]\"===De.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),s=Ue.inflate(a,r),s===Ne&&n&&(s=Ue.inflateSetDictionary(a,n),s===Fe?s=Ue.inflate(a,r):s===Be&&(s=Ne));a.avail_in>0&&s===Le&&a.state.wrap>0&&0!==t[a.next_in];)Ue.inflateReset(a),s=Ue.inflate(a,r);switch(s){case Ie:case Be:case Ne:case Ce:return this.onEnd(s),this.ended=!0,!1}if(o=a.avail_out,a.next_out&&(0===a.avail_out||s===Le))if(\"string\"===this.options.to){let t=Bt(a.output,a.next_out),e=a.next_out-t,n=It(a.output,t);a.next_out=e,a.avail_out=i-e,e&&a.output.set(a.output.subarray(t,t+e),0),this.onData(n)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==Fe||0!==o){if(s===Le)return s=Ue.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},He.prototype.onData=function(t){this.chunks.push(t)},He.prototype.onEnd=function(t){t===Fe&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};const{Deflate:Me,deflate:je,deflateRaw:Ke,gzip:Pe}=Vt;var Ye=Me,Ge=je,Xe=B;const We=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const e=this._hasEvents?\",\":\"\";this.deflate.push(e+t,Xe.Z_SYNC_FLUSH),this._hasEvents=!0}finish(){if(this.deflate.push(\"]\",Xe.Z_FINISH),this.deflate.err)throw this.deflate.err;const t=this.deflate.result;return this._init(),t}_init(){this._hasEvents=!1,this.deflate=new Ye,this.deflate.push(\"[\",Xe.Z_NO_FLUSH)}},qe={clear:()=>{We.clear()},addEvent:t=>We.addEvent(t),finish:()=>We.finish(),compress:t=>function(t){return Ge(t)}(t)};addEventListener(\"message\",(function(t){const e=t.data.method,a=t.data.id,i=t.data.arg;if(e in qe&&\"function\"==typeof qe[e])try{const t=qe[e](i);postMessage({id:a,method:e,success:!0,response:t})}catch(t){postMessage({id:a,method:e,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\nfunction e() {\n  const e = new Blob([r]);\n  return URL.createObjectURL(e);\n}\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nclass EventBufferArray {\n  /** All the events that are buffered to be sent. */\n\n  constructor() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  get hasEvents() {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n  destroy() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  async addEvent(event, isCheckout) {\n    if (isCheckout) {\n      this.events = [event];\n      return;\n    }\n    this.events.push(event);\n    return;\n  }\n\n  /** @inheritdoc */\n  finish() {\n    return new Promise(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.events = [];\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass WorkerHandler {\n  constructor(worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  ensureReady() {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener('message', _ref17 => {\n        let {\n          data\n        } = _ref17;\n        if (data.success) {\n          resolve();\n        } else {\n          reject();\n        }\n      }, {\n        once: true\n      });\n      this._worker.addEventListener('error', error => {\n        reject(error);\n      }, {\n        once: true\n      });\n    });\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n  destroy() {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n  postMessage(method, arg) {\n    const id = this._getAndIncrementId();\n    return new Promise((resolve, reject) => {\n      const listener = _ref18 => {\n        let {\n          data\n        } = _ref18;\n        const response = data;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('[Replay]', response.response);\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n        resolve(response.response);\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({\n        id,\n        method,\n        arg\n      });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n  _getAndIncrementId() {\n    return this._id++;\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass EventBufferCompressionWorker {\n  /** @inheritdoc */\n\n  constructor(worker) {\n    this._worker = new WorkerHandler(worker);\n    this.hasEvents = false;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  ensureReady() {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n  destroy() {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n  async addEvent(event, isCheckout) {\n    this.hasEvents = true;\n    if (isCheckout) {\n      // This event is a checkout, make sure worker buffer is cleared before\n      // proceeding.\n      await this._clear();\n    }\n    return this._sendEventToWorker(event);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n  finish() {\n    return this._finishRequest();\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n  _sendEventToWorker(event) {\n    return this._worker.postMessage('addEvent', JSON.stringify(event));\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n  async _finishRequest() {\n    const response = await this._worker.postMessage('finish');\n    this.hasEvents = false;\n    return response;\n  }\n\n  /** Clear any pending events from the worker. */\n  _clear() {\n    return this._worker.postMessage('clear');\n  }\n}\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nclass EventBufferProxy {\n  constructor(worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritDoc */\n  get hasEvents() {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritDoc */\n  destroy() {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n  addEvent(event, isCheckout) {\n    return this._used.addEvent(event, isCheckout);\n  }\n\n  /** @inheritDoc */\n  async finish() {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n  ensureWorkerIsLoaded() {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n  async _ensureWorkerIsLoaded() {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n  async _switchToCompressionWorker() {\n    const {\n      events\n    } = this._fallback;\n    const addEventPromises = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n    } catch (error) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('[Replay] Failed to add events when switching buffers.', error);\n    }\n  }\n}\n\n/**\n * Create an event buffer for replays.\n */\nfunction createEventBuffer(_ref19) {\n  let {\n    useCompression\n  } = _ref19;\n  // eslint-disable-next-line no-restricted-globals\n  if (useCompression && window.Worker) {\n    try {\n      const workerUrl = e();\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Using compression worker');\n      const worker = new Worker(workerUrl);\n      return new EventBufferProxy(worker);\n    } catch (error) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Failed to create compression worker');\n      // Fall back to use simple event buffer array\n    }\n  }\n\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n\n/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nfunction isExpired(initialTime, expiry) {\n  let targetTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +new Date();\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n  return initialTime + expiry <= targetTime;\n}\n\n/**\n * Checks to see if session is expired\n */\nfunction isSessionExpired(session, timeouts) {\n  let targetTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : +new Date();\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, timeouts.maxSessionLife, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `idleTimeout` ms)\n    isExpired(session.lastActivity, timeouts.sessionIdle, targetTime)\n  );\n}\n\n/**\n * Save a session to session storage.\n */\nfunction saveSession(session) {\n  const hasSessionStorage = ('sessionStorage' in WINDOW);\n  if (!hasSessionStorage) {\n    return;\n  }\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nfunction isSampled(sampleRate) {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n\n/**\n * Get a session with defaults & applied sampling.\n */\nfunction makeSession(session) {\n  const now = Date.now();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled\n  };\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nfunction getSessionSampleType(sessionSampleRate, errorSampleRate) {\n  return isSampled(sessionSampleRate) ? 'session' : isSampled(errorSampleRate) ? 'error' : false;\n}\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nfunction createSession(_ref20) {\n  let {\n    sessionSampleRate,\n    errorSampleRate,\n    stickySession = false\n  } = _ref20;\n  const sampled = getSessionSampleType(sessionSampleRate, errorSampleRate);\n  const session = makeSession({\n    sampled\n  });\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Replay] Creating new session: ${session.id}`);\n  if (stickySession) {\n    saveSession(session);\n  }\n  return session;\n}\n\n/**\n * Fetches a session from storage\n */\nfunction fetchSession() {\n  const hasSessionStorage = ('sessionStorage' in WINDOW);\n  if (!hasSessionStorage) {\n    return null;\n  }\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n    const sessionObj = JSON.parse(sessionStringFromStorage);\n    return makeSession(sessionObj);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Get or create a session\n */\nfunction getSession(_ref21) {\n  let {\n    timeouts,\n    currentSession,\n    stickySession,\n    sessionSampleRate,\n    errorSampleRate\n  } = _ref21;\n  // If session exists and is passed, use it instead of always hitting session storage\n  const session = currentSession || stickySession && fetchSession();\n  if (session) {\n    // If there is a session, check if it is valid (e.g. \"last activity\" time\n    // should be within the \"session idle time\", and \"session started\" time is\n    // within \"max session time\").\n    const isExpired = isSessionExpired(session, timeouts);\n    if (!isExpired) {\n      return {\n        type: 'saved',\n        session\n      };\n    } else if (session.sampled === 'error') {\n      // Error samples should not be re-created when expired, but instead we stop when the replay is done\n      const discardedSession = makeSession({\n        sampled: false\n      });\n      return {\n        type: 'new',\n        session: discardedSession\n      };\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Session has expired');\n    }\n    // Otherwise continue to create a new session\n  }\n\n  const newSession = createSession({\n    stickySession,\n    sessionSampleRate,\n    errorSampleRate\n  });\n  return {\n    type: 'new',\n    session: newSession\n  };\n}\n\n/**\n * Add an event to the event buffer.\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nasync function addEvent(replay, event, isCheckout) {\n  if (!replay.eventBuffer) {\n    // This implies that `_isEnabled` is false\n    return null;\n  }\n  if (replay.isPaused()) {\n    // Do not add to event buffer when recording is paused\n    return null;\n  }\n\n  // TODO: sadness -- we will want to normalize timestamps to be in ms -\n  // requires coordination with frontend\n  const isMs = event.timestamp > 9999999999;\n  const timestampInMs = isMs ? event.timestamp : event.timestamp * 1000;\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + replay.timeouts.sessionIdle < Date.now()) {\n    return null;\n  }\n\n  // Only record earliest event if a new session was created, otherwise it\n  // shouldn't be relevant\n  const earliestEvent = replay.getContext().earliestEvent;\n  if (replay.session && replay.session.segmentId === 0 && (!earliestEvent || timestampInMs < earliestEvent)) {\n    replay.getContext().earliestEvent = timestampInMs;\n  }\n  try {\n    return await replay.eventBuffer.addEvent(event, isCheckout);\n  } catch (error) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(error);\n    replay.stop('addEvent');\n    const client = getCurrentHub().getClient();\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n\n/** If the event is an error event */\nfunction isErrorEvent(event) {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nfunction isReplayEvent(event) {\n  return event.type === 'replay_event';\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleAfterSendEvent(replay) {\n  // Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there\n  // TODO (v8): remove this check as it will no longer be necessary\n  const enforceStatusCode = isBaseTransportSend();\n  return (event, sendResponse) => {\n    if (!isErrorEvent(event) && !isTransactionEvent(event)) {\n      return;\n    }\n    const statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (enforceStatusCode && (!statusCode || statusCode < 200 || statusCode >= 300)) {\n      return;\n    }\n\n    // Collect traceIds in _context regardless of `recordingMode`\n    // In error mode, _context gets cleared on every checkout\n    if (isTransactionEvent(event) && event.contexts && event.contexts.trace && event.contexts.trace.trace_id) {\n      replay.getContext().traceIds.add(event.contexts.trace.trace_id);\n      return;\n    }\n\n    // Everything below is just for error events\n    if (!isErrorEvent(event)) {\n      return;\n    }\n\n    // Add error to list of errorIds of replay\n    if (event.event_id) {\n      replay.getContext().errorIds.add(event.event_id);\n    }\n\n    // Trigger error recording\n    // Need to be very careful that this does not cause an infinite loop\n    if (replay.recordingMode === 'error' && event.exception && event.message !== UNABLE_TO_SEND_REPLAY // ignore this error because otherwise we could loop indefinitely with trying to capture replay and failing\n    ) {\n      setTimeout(async () => {\n        // Allow flush to complete before resuming as a session recording, otherwise\n        // the checkout from `startRecording` may be included in the payload.\n        // Prefer to keep the error replay as a separate (and smaller) segment\n        // than the session replay.\n        await replay.flushImmediate();\n        if (replay.stopRecording()) {\n          // Reset all \"capture on error\" configuration before\n          // starting a new recording\n          replay.recordingMode = 'session';\n          replay.startRecording();\n        }\n      });\n    }\n  };\n}\nfunction isBaseTransportSend() {\n  const client = getCurrentHub().getClient();\n  if (!client) {\n    return false;\n  }\n  const transport = client.getTransport();\n  if (!transport) {\n    return false;\n  }\n  return transport.send.__sentry__baseTransport__ || false;\n}\nvar NodeType;\n(function (NodeType) {\n  NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n  NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n  NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n  NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n  NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n  NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\n/**\n * Create a breadcrumb for a replay.\n */\nfunction createBreadcrumb(breadcrumb) {\n  return {\n    timestamp: Date.now() / 1000,\n    type: 'default',\n    ...breadcrumb\n  };\n}\n\n/**\n * Add a breadcrumb event to replay.\n */\nfunction addBreadcrumbEvent(replay, breadcrumb) {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category)) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n  replay.addUpdate(() => {\n    void addEvent(replay, {\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: breadcrumb\n      }\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n\n// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nconst ATTRIBUTES_TO_RECORD = new Set(['id', 'class', 'aria-label', 'role', 'name', 'alt', 'title', 'data-test-id', 'data-testid']);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nfunction getAttributesToRecord(attributes) {\n  const obj = {};\n  for (const key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      let normalizedKey = key;\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n  return obj;\n}\nconst handleDomListener = replay => handlerData => {\n  if (!replay.isEnabled()) {\n    return;\n  }\n  const result = handleDom(handlerData);\n  if (!result) {\n    return;\n  }\n  addBreadcrumbEvent(replay, result);\n};\n\n/**\n * An event handler to react to DOM events.\n */\nfunction handleDom(handlerData) {\n  let target;\n  let targetNode;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    targetNode = getTargetNode(handlerData);\n    target = htmlTreeAsString(targetNode);\n  } catch (e) {\n    target = '<unknown>';\n  }\n\n  // `__sn` property is the serialized node created by rrweb\n  const serializedNode = targetNode && '__sn' in targetNode && targetNode.__sn.type === NodeType.Element ? targetNode.__sn : null;\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    message: target,\n    data: serializedNode ? {\n      nodeId: serializedNode.id,\n      node: {\n        id: serializedNode.id,\n        tagName: serializedNode.tagName,\n        textContent: targetNode ? Array.from(targetNode.childNodes).map(node => '__sn' in node && node.__sn.type === NodeType.Text && node.__sn.textContent).filter(Boolean) // filter out empty values\n        .map(text => text.trim()).join('') : '',\n        attributes: getAttributesToRecord(serializedNode.attributes)\n      }\n    } : {}\n  });\n}\nfunction getTargetNode(handlerData) {\n  if (isEventWithTarget(handlerData.event)) {\n    return handlerData.event.target;\n  }\n  return handlerData.event;\n}\nfunction isEventWithTarget(event) {\n  return !!event.target;\n}\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nfunction isRrwebError(event, hint) {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-ignore this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  // Check if any exception originates from rrweb\n  return event.exception.values.some(exception => {\n    if (!exception.stacktrace || !exception.stacktrace.frames || !exception.stacktrace.frames.length) {\n      return false;\n    }\n    return exception.stacktrace.frames.some(frame => frame.filename && frame.filename.includes('/rrweb/src/'));\n  });\n}\n\n/**\n * Returns a listener to be added to `addGlobalEventProcessor(listener)`.\n */\nfunction handleGlobalEventListener(replay) {\n  let includeAfterSendEventHandling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const afterSendHandler = includeAfterSendEventHandling ? handleAfterSendEvent(replay) : undefined;\n  return (event, hint) => {\n    if (isReplayEvent(event)) {\n      // Replays have separate set of breadcrumbs, do not include breadcrumbs\n      // from core SDK\n      delete event.breadcrumbs;\n      return event;\n    }\n\n    // We only want to handle errors & transactions, nothing else\n    if (!isErrorEvent(event) && !isTransactionEvent(event)) {\n      return event;\n    }\n\n    // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n    // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n    if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Ignoring error from rrweb internals', event);\n      return null;\n    }\n\n    // Only tag transactions with replayId if not waiting for an error\n    if (isErrorEvent(event) || isTransactionEvent(event) && replay.recordingMode === 'session') {\n      event.tags = {\n        ...event.tags,\n        replayId: replay.getSessionId()\n      };\n    }\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && replay.getOptions()._experiments.traceInternals && isErrorEvent(event)) {\n      const exc = getEventExceptionValues(event);\n      addInternalBreadcrumb({\n        message: `Tagging event (${event.event_id}) - ${event.message} - ${exc.type}: ${exc.value}`\n      });\n    }\n\n    // In cases where a custom client is used that does not support the new hooks (yet),\n    // we manually call this hook method here\n    if (afterSendHandler) {\n      // Pretend the error had a 200 response so we always capture it\n      afterSendHandler(event, {\n        statusCode: 200\n      });\n    }\n    return event;\n  };\n}\nfunction addInternalBreadcrumb(arg) {\n  const {\n    category,\n    level,\n    message,\n    ...rest\n  } = arg;\n  addBreadcrumb({\n    category: category || 'console',\n    level: level || 'debug',\n    message: `[debug]: ${message}`,\n    ...rest\n  });\n}\nfunction getEventExceptionValues(event) {\n  return {\n    type: 'Unknown',\n    value: 'n/a',\n    ...(event.exception && event.exception.values && event.exception.values[0])\n  };\n}\n\n/**\n * Create a \"span\" for each performance entry. The parent transaction is `this.replayEvent`.\n */\nfunction createPerformanceSpans(replay, entries) {\n  return entries.map(_ref22 => {\n    let {\n      type,\n      start,\n      end,\n      name,\n      data\n    } = _ref22;\n    return addEvent(replay, {\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data\n        }\n      }\n    });\n  });\n}\nfunction handleHistory(handlerData) {\n  const {\n    from,\n    to\n  } = handlerData;\n  const now = Date.now() / 1000;\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('history', listener)`.\n */\nfunction handleHistorySpanListener(replay) {\n  return handlerData => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    const result = handleHistory(handlerData);\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nfunction shouldFilterRequest(replay, url) {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n  return _isSentryRequest(url);\n}\n\n/**\n * Checks wether a given URL belongs to the configured Sentry DSN.\n */\nfunction _isSentryRequest(url) {\n  const client = getCurrentHub().getClient();\n  const dsn = client && client.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n\n/** Add a performance entry breadcrumb */\nfunction addNetworkBreadcrumb(replay, result) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n  if (result === null) {\n    return;\n  }\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n  replay.addUpdate(() => {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n\n/** only exported for tests */\nfunction handleFetch(handlerData) {\n  const {\n    startTimestamp,\n    endTimestamp,\n    fetchData,\n    response\n  } = handlerData;\n  if (!endTimestamp) {\n    return null;\n  }\n  const {\n    method,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize\n  } = fetchData;\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: fetchData.url,\n    data: {\n      method,\n      statusCode: response && response.status,\n      requestBodySize,\n      responseBodySize\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('fetch', listener)`.\n */\nfunction handleFetchSpanListener(replay) {\n  return handlerData => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    const result = handleFetch(handlerData);\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n\n/** only exported for tests */\nfunction handleXhr(handlerData) {\n  const {\n    startTimestamp,\n    endTimestamp,\n    xhr\n  } = handlerData;\n  if (!startTimestamp || !endTimestamp || !xhr.__sentry_xhr__) {\n    return null;\n  }\n  const {\n    method,\n    url,\n    status_code: statusCode,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize\n  } = xhr.__sentry_xhr__;\n  if (url === undefined) {\n    return null;\n  }\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    data: {\n      method,\n      statusCode,\n      requestBodySize,\n      responseBodySize\n    }\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('xhr', listener)`.\n */\nfunction handleXhrSpanListener(replay) {\n  return handlerData => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n    const result = handleXhr(handlerData);\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n\n/**\n * This will enrich the xhr/fetch breadcrumbs with additional information.\n *\n * This adds:\n * * request_body_size\n * * response_body_size\n *\n * to the breadcrumb data.\n */\nfunction handleNetworkBreadcrumbs(replay) {\n  const client = getCurrentHub().getClient();\n  try {\n    const textEncoder = new TextEncoder();\n    const options = {\n      replay,\n      textEncoder\n    };\n    if (client && client.on) {\n      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n    } else {\n      // Fallback behavior\n      addInstrumentationHandler('fetch', handleFetchSpanListener(replay));\n      addInstrumentationHandler('xhr', handleXhrSpanListener(replay));\n    }\n  } catch (e2) {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nfunction beforeAddNetworkBreadcrumb(options, breadcrumb, hint) {\n  if (!breadcrumb.data) {\n    return;\n  }\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      _handleXhrBreadcrumb(breadcrumb, hint, options);\n    }\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      _enrichFetchBreadcrumb(breadcrumb, hint, options);\n      void _handleFetchBreadcrumb(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Error when enriching network breadcrumb');\n  }\n}\nfunction _handleXhrBreadcrumb(breadcrumb, hint, options) {\n  // Enriches the breadcrumb overall\n  _enrichXhrBreadcrumb(breadcrumb, hint, options);\n\n  // Create a replay performance entry from this breadcrumb\n  const result = _makeNetworkReplayBreadcrumb('resource.xhr', breadcrumb, hint);\n  addNetworkBreadcrumb(options.replay, result);\n}\nasync function _handleFetchBreadcrumb(breadcrumb, hint, options) {\n  const fullBreadcrumb = await _parseFetchResponse(breadcrumb, hint, options);\n\n  // Create a replay performance entry from this breadcrumb\n  const result = _makeNetworkReplayBreadcrumb('resource.fetch', fullBreadcrumb, hint);\n  addNetworkBreadcrumb(options.replay, result);\n}\n\n// This does async operations on the breadcrumb for replay\nasync function _parseFetchResponse(breadcrumb, hint, options) {\n  if (breadcrumb.data.response_body_size || !hint.response) {\n    return breadcrumb;\n  }\n\n  // If no Content-Length header exists, we try to get the size from the response body\n  try {\n    // We have to clone this, as the body can only be read once\n    const response = hint.response.clone();\n    const body = await response.text();\n    if (body.length) {\n      return {\n        ...breadcrumb,\n        data: {\n          ...breadcrumb.data,\n          response_body_size: getBodySize(body, options.textEncoder)\n        }\n      };\n    }\n  } catch (e3) {\n    // just ignore if something fails here\n  }\n  return breadcrumb;\n}\nfunction _makeNetworkReplayBreadcrumb(type, breadcrumb, hint) {\n  const {\n    startTimestamp,\n    endTimestamp\n  } = hint;\n  if (!endTimestamp) {\n    return null;\n  }\n  const {\n    url,\n    method,\n    status_code: statusCode,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize\n  } = breadcrumb.data;\n  if (url === undefined) {\n    return null;\n  }\n  const result = {\n    type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: {\n      method,\n      statusCode\n    }\n  };\n  if (requestBodySize) {\n    result.data.requestBodySize = requestBodySize;\n  }\n  if (responseBodySize) {\n    result.data.responseBodySize = responseBodySize;\n  }\n  return result;\n}\nfunction _enrichXhrBreadcrumb(breadcrumb, hint, options) {\n  const {\n    xhr,\n    input\n  } = hint;\n  const reqSize = getBodySize(input, options.textEncoder);\n  const resSize = xhr.getResponseHeader('content-length') ? parseContentSizeHeader(xhr.getResponseHeader('content-length')) : getBodySize(xhr.response, options.textEncoder);\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\nfunction _enrichFetchBreadcrumb(breadcrumb, hint, options) {\n  const {\n    input,\n    response\n  } = hint;\n  const body = getFetchBody(input);\n  const reqSize = getBodySize(body, options.textEncoder);\n  const resSize = response ? parseContentSizeHeader(response.headers.get('content-length')) : undefined;\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\n/** only exported for tests */\nfunction getBodySize(body, textEncoder) {\n  if (!body) {\n    return undefined;\n  }\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n    if (body instanceof FormData) {\n      // This is a bit simplified, but gives us a decent estimate\n      // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n      // @ts-ignore passing FormData to URLSearchParams actually works\n      const formDataStr = new URLSearchParams(body).toString();\n      return textEncoder.encode(formDataStr).length;\n    }\n    if (body instanceof Blob) {\n      return body.size;\n    }\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch (e4) {\n    // just return undefined\n  }\n  return undefined;\n}\n\n/** only exported for tests */\nfunction parseContentSizeHeader(header) {\n  if (!header) {\n    return undefined;\n  }\n  const size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\nfunction getFetchBody() {\n  let fetchArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n  return fetchArgs[1].body;\n}\nfunction _isXhrBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'xhr';\n}\nfunction _isFetchBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'fetch';\n}\nfunction _isXhrHint(hint) {\n  return hint && hint.xhr;\n}\nfunction _isFetchHint(hint) {\n  return hint && hint.response;\n}\nlet _LAST_BREADCRUMB = null;\nconst handleScopeListener = replay => scope => {\n  if (!replay.isEnabled()) {\n    return;\n  }\n  const result = handleScope(scope);\n  if (!result) {\n    return;\n  }\n  addBreadcrumbEvent(replay, result);\n};\n\n/**\n * An event handler to handle scope changes.\n */\nfunction handleScope(scope) {\n  // TODO (v8): Remove this guard. This was put in place because we introduced\n  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.\n  // For now, we'll just return null if the method doesn't exist but we should eventually\n  // get rid of this guard.\n  const newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();\n\n  // Listener can be called when breadcrumbs have not changed, so we store the\n  // reference to the last crumb and only return a crumb if it has changed\n  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {\n    return null;\n  }\n  _LAST_BREADCRUMB = newBreadcrumb;\n  if (newBreadcrumb.category && (['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) || newBreadcrumb.category.startsWith('ui.'))) {\n    return null;\n  }\n  return createBreadcrumb(newBreadcrumb);\n}\n\n/**\n * Add global listeners that cannot be removed.\n */\nfunction addGlobalListeners(replay) {\n  // Listeners from core SDK //\n  const scope = getCurrentHub().getScope();\n  const client = getCurrentHub().getClient();\n  if (scope) {\n    scope.addScopeListener(handleScopeListener(replay));\n  }\n  addInstrumentationHandler('dom', handleDomListener(replay));\n  addInstrumentationHandler('history', handleHistorySpanListener(replay));\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  addGlobalEventProcessor(handleGlobalEventListener(replay, !hasHooks(client)));\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (hasHooks(client)) {\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', dsc => {\n      const replayId = replay.getSessionId();\n      if (replayId) {\n        dsc.replay_id = replayId;\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasHooks(client) {\n  return !!(client && client.on);\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nasync function addMemoryEntry(replay) {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(createPerformanceSpans(replay, [\n    // @ts-ignore memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n    createMemoryEntry(WINDOW.performance.memory)]));\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\nfunction createMemoryEntry(memoryEntry) {\n  const {\n    jsHeapSizeLimit,\n    totalJSHeapSize,\n    usedJSHeapSize\n  } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize\n      }\n    }\n  };\n}\n\n// Map entryType -> function to normalize data for event\n// @ts-ignore TODO: entry type does not fit the create* functions entry type\nconst ENTRY_TYPES = {\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  ['largest-contentful-paint']: createLargestContentfulPaint\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nfunction createPerformanceEntries(entries) {\n  return entries.map(createPerformanceEntry).filter(Boolean);\n}\nfunction createPerformanceEntry(entry) {\n  if (ENTRY_TYPES[entry.entryType] === undefined) {\n    return null;\n  }\n  return ENTRY_TYPES[entry.entryType](entry);\n}\nfunction getAbsoluteTime(time) {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createPaintEntry(entry) {\n  const {\n    duration,\n    entryType,\n    name,\n    startTime\n  } = entry;\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createNavigationEntry(entry) {\n  // TODO: There looks to be some more interesting bits in here (domComplete, domContentLoaded)\n  const {\n    entryType,\n    name,\n    duration,\n    domComplete,\n    startTime,\n    transferSize,\n    type\n  } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      duration\n    }\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createResourceEntry(entry) {\n  const {\n    entryType,\n    initiatorType,\n    name,\n    responseEnd,\n    startTime,\n    encodedBodySize,\n    transferSize\n  } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      encodedBodySize\n    }\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createLargestContentfulPaint(entry) {\n  const {\n    entryType,\n    startTime,\n    size\n  } = entry;\n  let startTimeOrNavigationActivation = 0;\n  if (WINDOW.performance) {\n    const navEntry = WINDOW.performance.getEntriesByType('navigation')[0];\n\n    // See https://github.com/GoogleChrome/web-vitals/blob/9f11c4c6578fb4c5ee6fa4e32b9d1d756475f135/src/lib/getActivationStart.ts#L21\n    startTimeOrNavigationActivation = navEntry && navEntry.activationStart || 0;\n  }\n\n  // value is in ms\n  const value = Math.max(startTime - startTimeOrNavigationActivation, 0);\n  // LCP doesn't have a \"duration\", it just happens at a single point in time.\n  // But the UI expects both, so use end (in seconds) for both timestamps.\n  const end = getAbsoluteTime(startTimeOrNavigationActivation) + value / 1000;\n  return {\n    type: entryType,\n    name: entryType,\n    start: end,\n    end,\n    data: {\n      value,\n      // LCP \"duration\" in ms\n      size,\n      // Not sure why this errors, Node should be correct (Argument of type 'Node' is not assignable to parameter of type 'INode')\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      nodeId: record.mirror.getId(entry.element)\n    }\n  };\n}\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  let callbackReturnValue;\n  let timerId;\n  let maxTimerId;\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n    return callbackReturnValue;\n  }\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nfunction getHandleRecordingEmit(replay) {\n  let hadFirstEvent = false;\n  return (event, _isCheckout) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('[Replay] Received replay event after session expired.');\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    const isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'error' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // We need to clear existing events on a checkout, otherwise they are\n      // incremental event updates and should be appended\n      void addEvent(replay, event, isCheckout);\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (replay.session && replay.session.previousSessionId) {\n        return true;\n      }\n\n      // See note above re: session start needs to reflect the most recent\n      // checkout.\n      if (replay.recordingMode === 'error' && replay.session) {\n        const {\n          earliestEvent\n        } = replay.getContext();\n        if (earliestEvent) {\n          replay.session.started = earliestEvent;\n          if (replay.getOptions().stickySession) {\n            saveSession(replay.session);\n          }\n        }\n      }\n\n      // Flush immediately so that we do not miss the first segment, otherwise\n      // it can prevent loading on the UI. This will cause an increase in short\n      // replays (e.g. opening and closing a tab quickly), but these can be\n      // filtered on the UI.\n      if (replay.recordingMode === 'session') {\n        // We want to ensure the worker is ready, as otherwise we'd always send the first event uncompressed\n        void replay.flushImmediate();\n      }\n      return true;\n    });\n  };\n}\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nfunction createReplayEnvelope(replayEvent, recordingData, dsn, tunnel) {\n  return createEnvelope(createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn), [[{\n    type: 'replay_event'\n  }, replayEvent], [{\n    type: 'replay_recording',\n    // If string then we need to encode to UTF8, otherwise will have\n    // wrong size. TextEncoder has similar browser support to\n    // MutationObserver, although it does not accept IE11.\n    length: typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length\n  }, recordingData]]);\n}\n\n/**\n * Prepare the recording data ready to be sent.\n */\nfunction prepareRecordingData(_ref23) {\n  let {\n    recordingData,\n    headers\n  } = _ref23;\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n  return payloadWithSequence;\n}\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nasync function prepareReplayEvent(_ref24) {\n  let {\n    client,\n    scope,\n    replayId: event_id,\n    event\n  } = _ref24;\n  const integrations = typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations) ? Object.keys(client._integrations) : undefined;\n  const preparedEvent = await prepareEvent(client.getOptions(), event, {\n    event_id,\n    integrations\n  }, scope);\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata && client.getSdkMetadata();\n  const {\n    name,\n    version\n  } = metadata && metadata.sdk || {};\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0'\n  };\n  return preparedEvent;\n}\n\n/**\n * Send replay attachment using `fetch()`\n */\nasync function sendReplayRequest(_ref25) {\n  let {\n    recordingData,\n    replayId,\n    segmentId: segment_id,\n    includeReplayStartTimestamp,\n    eventContext,\n    timestamp,\n    session,\n    options\n  } = _ref25;\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id\n    }\n  });\n  const {\n    urls,\n    errorIds,\n    traceIds,\n    initialTimestamp\n  } = eventContext;\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const scope = hub.getScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n  if (!client || !scope || !transport || !dsn || !session.sampled) {\n    return;\n  }\n  const baseEvent = {\n    // @ts-ignore private api\n    type: REPLAY_EVENT_NAME,\n    ...(includeReplayStartTimestamp ? {\n      replay_start_timestamp: initialTimestamp / 1000\n    } : {}),\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled\n  };\n  const replayEvent = await prepareReplayEvent({\n    scope,\n    client,\n    replayId,\n    event: baseEvent\n  });\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('An event processor returned `null`, will not send event.');\n    return;\n  }\n  replayEvent.contexts = {\n    ...replayEvent.contexts,\n    replay: {\n      ...(replayEvent.contexts && replayEvent.contexts.replay),\n      session_sample_rate: options.sessionSampleRate,\n      error_sample_rate: options.errorSampleRate\n    }\n  };\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n        \"replay\": {\n          \"session_sample_rate\": 1,\n          \"error_sample_rate\": 0,\n        },\n      },\n  }\n  */\n\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n  let response;\n  try {\n    response = await transport.send(envelope);\n  } catch (err) {\n    const error = new Error(UNABLE_TO_SEND_REPLAY);\n    try {\n      // In case browsers don't allow this property to be writable\n      // @ts-ignore This needs lib es2022 and newer\n      error.cause = err;\n    } catch (e) {\n      // nothing to do\n    }\n    throw error;\n  }\n\n  // TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore\n  if (!response) {\n    return response;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nclass TransportStatusCodeError extends Error {\n  constructor(statusCode) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nasync function sendReplay(replayData) {\n  let retryConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL\n  };\n  const {\n    recordingData,\n    options\n  } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count\n    });\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && options._experiments && options._experiments.captureExceptions) {\n      captureException(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-ignore This needs lib es2022 and newer\n        error.cause = err;\n      } catch (e) {\n        // nothing to do\n      }\n      throw error;\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n    return await new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\n\n/* eslint-disable max-lines */ // TODO: We might want to split this file up\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nclass ReplayContainer {\n  __init() {\n    this.eventBuffer = null;\n  }\n\n  /**\n   * List of PerformanceEntry from PerformanceObserver\n   */\n  __init2() {\n    this.performanceEvents = [];\n  }\n\n  /**\n   * Recording can happen in one of two modes:\n   * * session: Record the whole session, sending it continuously\n   * * error: Always keep the last 60s of recording, and when an error occurs, send it immediately\n   */\n  __init3() {\n    this.recordingMode = 'session';\n  }\n\n  /**\n   * These are here so we can overwrite them in tests etc.\n   * @hidden\n   */\n  __init4() {\n    this.timeouts = {\n      sessionIdle: SESSION_IDLE_DURATION,\n      maxSessionLife: MAX_SESSION_LIFE\n    };\n  }\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  __init5() {\n    this._performanceObserver = null;\n  }\n  __init6() {\n    this._flushLock = null;\n  }\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n  __init7() {\n    this._lastActivity = Date.now();\n  }\n\n  /**\n   * Is the integration currently active?\n   */\n  __init8() {\n    this._isEnabled = false;\n  }\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n  __init9() {\n    this._isPaused = false;\n  }\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n  __init10() {\n    this._hasInitializedCoreListeners = false;\n  }\n\n  /**\n   * Function to stop recording\n   */\n  __init11() {\n    this._stopRecording = null;\n  }\n  __init12() {\n    this._context = {\n      errorIds: new Set(),\n      traceIds: new Set(),\n      urls: [],\n      earliestEvent: null,\n      initialTimestamp: Date.now(),\n      initialUrl: ''\n    };\n  }\n  constructor(_ref26) {\n    let {\n      options,\n      recordingOptions\n    } = _ref26;\n    ReplayContainer.prototype.__init.call(this);\n    ReplayContainer.prototype.__init2.call(this);\n    ReplayContainer.prototype.__init3.call(this);\n    ReplayContainer.prototype.__init4.call(this);\n    ReplayContainer.prototype.__init5.call(this);\n    ReplayContainer.prototype.__init6.call(this);\n    ReplayContainer.prototype.__init7.call(this);\n    ReplayContainer.prototype.__init8.call(this);\n    ReplayContainer.prototype.__init9.call(this);\n    ReplayContainer.prototype.__init10.call(this);\n    ReplayContainer.prototype.__init11.call(this);\n    ReplayContainer.prototype.__init12.call(this);\n    ReplayContainer.prototype.__init13.call(this);\n    ReplayContainer.prototype.__init14.call(this);\n    ReplayContainer.prototype.__init15.call(this);\n    ReplayContainer.prototype.__init16.call(this);\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay\n    });\n  }\n\n  /** Get the event context. */\n  getContext() {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n  isEnabled() {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n  isPaused() {\n    return this._isPaused;\n  }\n\n  /** Get the replay integration options. */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Initializes the plugin.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n  start() {\n    this.setInitialState();\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n\n    // If there is no session, then something bad has happened - can't continue\n    if (!this.session) {\n      this._handleException(new Error('No session found'));\n      return;\n    }\n    if (!this.session.sampled) {\n      // If session was not sampled, then we do not initialize the integration at all.\n      return;\n    }\n\n    // If session is sampled for errors, then we need to set the recordingMode\n    // to 'error', which will configure recording with different options.\n    if (this.session.sampled === 'error') {\n      this.recordingMode = 'error';\n    }\n\n    // setup() is generally called on page load or manually - in both cases we\n    // should treat it as an activity\n    this._updateSessionActivity();\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression\n    });\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n    this.startRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n  startRecording() {\n    try {\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'error' && {\n          checkoutEveryNms: ERROR_CHECKOUT_TIME\n        }),\n        emit: getHandleRecordingEmit(this),\n        onMutation: mutations => {\n          if (this._options._experiments.captureMutationSize) {\n            const count = mutations.length;\n            if (count > 500) {\n              const breadcrumb = createBreadcrumb({\n                category: 'replay.mutations',\n                data: {\n                  count\n                }\n              });\n              this._createCustomBreadcrumb(breadcrumb);\n            }\n          }\n          // `true` means we use the regular mutation handling by rrweb\n          return true;\n        }\n      });\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   * Returns true if it was stopped, else false.\n   */\n  stopRecording() {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n        return true;\n      }\n      return false;\n    } catch (err) {\n      this._handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  stop(reason) {\n    if (!this._isEnabled) {\n      return;\n    }\n    try {\n      if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n        const msg = `[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`;\n\n        // When `traceInternals` is enabled, we want to log this to the console\n        // Else, use the regular debug output\n        // eslint-disable-next-line\n        const log = this.getOptions()._experiments.traceInternals ? console.warn : logger.log;\n        log(msg);\n      }\n      this._isEnabled = false;\n      this._removeListeners();\n      this.stopRecording();\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n      this._debouncedFlush.cancel();\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n  pause() {\n    this._isPaused = true;\n    this.stopRecording();\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n  resume() {\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n    this._isPaused = false;\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n  addUpdate(cb) {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'error'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'error') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n  triggerUserActivity() {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._loadAndCheckSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n    this._updateSessionActivity();\n  }\n\n  /**\n   *\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of mulitple flushes happening closely together.\n   */\n  flushImmediate() {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush();\n  }\n\n  /** Get the current sesion (=replay) ID */\n  getSessionId() {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n  checkAndHandleExpiredSession() {\n    const oldSessionId = this.getSessionId();\n\n    // Prevent starting a new session if the last user activity is older than\n    // SESSION_IDLE_DURATION. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (this._lastActivity && isExpired(this._lastActivity, this.timeouts.sessionIdle) && this.session && this.session.sampled === 'session') {\n      // Pause recording only for session-based replays. Otherwise, resuming\n      // will create a new replay and will conflict with users who only choose\n      // to record error-based replays only. (e.g. the resumed replay will not\n      // contain a reference to an error)\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n\n    // Session was expired if session ids do not match\n    const expired = oldSessionId !== this.getSessionId();\n    if (!expired) {\n      return true;\n    }\n\n    // Session is expired, trigger a full snapshot (which will create a new session)\n    this._triggerFullSnapshot();\n    return false;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n  setInitialState() {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n    this.performanceEvents = [];\n\n    // Reset _context as well\n    this._clearContext();\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = Date.now();\n    this._context.urls.push(url);\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n  _handleException(error) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('[Replay]', error);\n    if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && this._options._experiments && this._options._experiments.captureExceptions) {\n      captureException(error);\n    }\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   * Returns false if session is not recorded.\n   */\n  _loadAndCheckSession() {\n    const {\n      type,\n      session\n    } = getSession({\n      timeouts: this.timeouts,\n      stickySession: Boolean(this._options.stickySession),\n      currentSession: this.session,\n      sessionSampleRate: this._options.sessionSampleRate,\n      errorSampleRate: this._options.errorSampleRate\n    });\n\n    // If session was newly created (i.e. was not loaded from storage), then\n    // enable flag to create the root replay\n    if (type === 'new') {\n      this.setInitialState();\n    }\n    const currentSessionId = this.getSessionId();\n    if (session.id !== currentSessionId) {\n      session.previousSessionId = currentSessionId;\n    }\n    this.session = session;\n    if (!this.session.sampled) {\n      this.stop('session unsampled');\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n  _addListeners() {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n\n    // PerformanceObserver //\n    if (!('PerformanceObserver' in WINDOW)) {\n      return;\n    }\n    this._performanceObserver = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n  _removeListeners() {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n      if (this._performanceObserver) {\n        this._performanceObserver.disconnect();\n        this._performanceObserver = null;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n  __init13() {\n    this._handleVisibilityChange = () => {\n      if (WINDOW.document.visibilityState === 'visible') {\n        this._doChangeToForegroundTasks();\n      } else {\n        this._doChangeToBackgroundTasks();\n      }\n    };\n  }\n\n  /**\n   * Handle when page is blurred\n   */\n  __init14() {\n    this._handleWindowBlur = () => {\n      const breadcrumb = createBreadcrumb({\n        category: 'ui.blur'\n      });\n\n      // Do not count blur as a user action -- it's part of the process of them\n      // leaving the page\n      this._doChangeToBackgroundTasks(breadcrumb);\n    };\n  }\n\n  /**\n   * Handle when page is focused\n   */\n  __init15() {\n    this._handleWindowFocus = () => {\n      const breadcrumb = createBreadcrumb({\n        category: 'ui.focus'\n      });\n\n      // Do not count focus as a user action -- instead wait until they focus and\n      // interactive with page\n      this._doChangeToForegroundTasks(breadcrumb);\n    };\n  }\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n  _doChangeToBackgroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n    const expired = isSessionExpired(this.session, this.timeouts);\n    if (breadcrumb && !expired) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    this._conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n  _doChangeToForegroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n    const isSessionActive = this.checkAndHandleExpiredSession();\n    if (!isSessionActive) {\n      // If the user has come back to the page within SESSION_IDLE_DURATION\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Document has become active, but session has expired');\n      return;\n    }\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Trigger rrweb to take a full snapshot which will cause this plugin to\n   * create a new Replay event.\n   */\n  _triggerFullSnapshot() {\n    try {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Replay] Taking full rrweb snapshot');\n      record.takeFullSnapshot(true);\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n  _updateUserActivity() {\n    let _lastActivity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n  _updateSessionActivity() {\n    let _lastActivity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n  _createCustomBreadcrumb(breadcrumb) {\n    this.addUpdate(() => {\n      void addEvent(this, {\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb\n        }\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEvents`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n  _addPerformanceEntries() {\n    // Copy and reset entries before processing\n    const entries = [...this.performanceEvents];\n    this.performanceEvents = [];\n    return Promise.all(createPerformanceSpans(this, createPerformanceEntries(entries)));\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n  _conditionalFlush() {\n    if (this.recordingMode === 'error') {\n      return;\n    }\n    void this.flushImmediate();\n  }\n\n  /**\n   * Clear _context\n   */\n  _clearContext() {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n    this._context.earliestEvent = null;\n  }\n\n  /**\n   * Return and clear _context\n   */\n  _popEventContext() {\n    if (this._context.earliestEvent && this._context.earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = this._context.earliestEvent;\n    }\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds).filter(Boolean),\n      traceIds: Array.from(this._context.traceIds).filter(Boolean),\n      urls: this._context.urls\n    };\n    this._clearContext();\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n  async _runFlush() {\n    if (!this.session || !this.eventBuffer) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('[Replay] No session or eventBuffer found to flush.');\n      return;\n    }\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n    try {\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n\n      // NOTE: Copy values from instance members, as it's possible they could\n      // change before the flush finishes.\n      const replayId = this.session.id;\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        includeReplayStartTimestamp: segmentId === 0,\n        eventContext,\n        session: this.session,\n        options: this.getOptions(),\n        timestamp: Date.now()\n      });\n    } catch (err) {\n      this._handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      this.stop('sendReplay');\n      const client = getCurrentHub().getClient();\n      if (client) {\n        client.recordDroppedEvent('send_error', 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n  __init16() {\n    this._flush = async () => {\n      if (!this._isEnabled) {\n        // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n        return;\n      }\n      if (!this.checkAndHandleExpiredSession()) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('[Replay] Attempting to finish replay event after session expired.');\n        return;\n      }\n      if (!this.session) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('[Replay] No session found to flush.');\n        return;\n      }\n\n      // A flush is about to happen, cancel any queued flushes\n      this._debouncedFlush.cancel();\n\n      // this._flushLock acts as a lock so that future calls to `_flush()`\n      // will be blocked until this promise resolves\n      if (!this._flushLock) {\n        this._flushLock = this._runFlush();\n        await this._flushLock;\n        this._flushLock = null;\n        return;\n      }\n\n      // Wait for previous flush to finish, then call the debounced `_flush()`.\n      // It's possible there are other flush requests queued and waiting for it\n      // to resolve. We want to reduce all outstanding requests (as well as any\n      // new flush requests that occur within a second of the locked flush\n      // completing) into a single flush.\n\n      try {\n        await this._flushLock;\n      } catch (err) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(err);\n      } finally {\n        this._debouncedFlush();\n      }\n    };\n  }\n\n  /** Save the session, if it is sticky */\n  _maybeSaveSession() {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n}\nfunction getOption(selectors, defaultSelectors, deprecatedClassOption, deprecatedSelectorOption) {\n  const deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];\n  const allSelectors = [...selectors,\n  // @deprecated\n  ...deprecatedSelectors,\n  // sentry defaults\n  ...defaultSelectors];\n\n  // @deprecated\n  if (typeof deprecatedClassOption !== 'undefined') {\n    // NOTE: No support for RegExp\n    if (typeof deprecatedClassOption === 'string') {\n      allSelectors.push(`.${deprecatedClassOption}`);\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.');\n  }\n  return allSelectors.join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nfunction getPrivacyOptions(_ref27) {\n  let {\n    mask,\n    unmask,\n    block,\n    unblock,\n    ignore,\n    // eslint-disable-next-line deprecation/deprecation\n    blockClass,\n    // eslint-disable-next-line deprecation/deprecation\n    blockSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextClass,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    ignoreClass\n  } = _ref27;\n  const defaultBlockedElements = ['base[href=\"/\"]'];\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);\n  const unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);\n  const options = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n    maskInputSelector: maskSelector,\n    unmaskInputSelector: unmaskSelector,\n    blockSelector: getOption(block, ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements], blockClass, blockSelector),\n    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]'], ignoreClass)\n  };\n  if (blockClass instanceof RegExp) {\n    options.blockClass = blockClass;\n  }\n  if (maskTextClass instanceof RegExp) {\n    options.maskTextClass = maskTextClass;\n  }\n  return options;\n}\n\n/**\n * Returns true if we are in the browser.\n */\nfunction isBrowser() {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' && (!isNodeEnv() || isElectronNodeRenderer());\n}\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer() {\n  return typeof process !== 'undefined' && process.type === 'renderer';\n}\nconst MEDIA_SELECTORS = 'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\nlet _initialized = false;\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n */\nclass Replay {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Replay';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Replay.id;\n  }\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n\n  constructor() {\n    let {\n      flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n      flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n      stickySession = true,\n      useCompression = true,\n      _experiments = {},\n      sessionSampleRate,\n      errorSampleRate,\n      maskAllText = true,\n      maskAllInputs = true,\n      blockAllMedia = true,\n      mask = [],\n      unmask = [],\n      block = [],\n      unblock = [],\n      ignore = [],\n      maskFn,\n      // eslint-disable-next-line deprecation/deprecation\n      blockClass,\n      // eslint-disable-next-line deprecation/deprecation\n      blockSelector,\n      // eslint-disable-next-line deprecation/deprecation\n      maskInputOptions,\n      // eslint-disable-next-line deprecation/deprecation\n      maskTextClass,\n      // eslint-disable-next-line deprecation/deprecation\n      maskTextSelector,\n      // eslint-disable-next-line deprecation/deprecation\n      ignoreClass\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    Replay.prototype.__init.call(this);\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: {\n        ...(maskInputOptions || {}),\n        password: true\n      },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n      ...getPrivacyOptions({\n        mask,\n        unmask,\n        block,\n        unblock,\n        ignore,\n        blockClass,\n        blockSelector,\n        maskTextClass,\n        maskTextSelector,\n        ignoreClass\n      }),\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true\n    };\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      stickySession,\n      sessionSampleRate,\n      errorSampleRate,\n      useCompression,\n      blockAllMedia,\n      _experiments\n    };\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(`[Replay] You are passing \\`sessionSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysSessionSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`);\n      this._initialOptions.sessionSampleRate = sessionSampleRate;\n    }\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(`[Replay] You are passing \\`errorSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysOnErrorSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`);\n      this._initialOptions.errorSampleRate = errorSampleRate;\n    }\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector ? MEDIA_SELECTORS : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n  get _isInitialized() {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n  set _isInitialized(value) {\n    _initialized = value;\n  }\n\n  /**\n   * We previously used to create a transaction in `setupOnce` and it would\n   * potentially create a transaction before some native SDK integrations have run\n   * and applied their own global event processor. An example is:\n   * https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n   *\n   * So we call `replay.setup` in next event loop as a workaround to wait for other\n   * global event processors to finish. This is no longer needed, but keeping it\n   * here to avoid any future issues.\n   */\n  setupOnce() {\n    if (!isBrowser()) {\n      return;\n    }\n    this._setup();\n\n    // XXX: See method comments above\n    setTimeout(() => this.start());\n  }\n\n  /**\n   * Initializes the plugin.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n  start() {\n    if (!this._replay) {\n      return;\n    }\n    this._replay.start();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  stop() {\n    if (!this._replay) {\n      return;\n    }\n    this._replay.stop();\n  }\n\n  /**\n   * Immediately send all pending events.\n   */\n  flush() {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n    return this._replay.flushImmediate();\n  }\n\n  /** Setup the integration. */\n  _setup() {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions\n    });\n  }\n}\nReplay.__initStatic();\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions) {\n  const client = getCurrentHub().getClient();\n  const opt = client && client.getOptions();\n  const finalOptions = {\n    sessionSampleRate: 0,\n    errorSampleRate: 0,\n    ...dropUndefinedKeys(initialOptions)\n  };\n  if (!opt) {\n    // eslint-disable-next-line no-console\n    console.warn('SDK client is not available.');\n    return finalOptions;\n  }\n  if (initialOptions.sessionSampleRate == null &&\n  // TODO remove once deprecated rates are removed\n  initialOptions.errorSampleRate == null &&\n  // TODO remove once deprecated rates are removed\n  opt.replaysSessionSampleRate == null && opt.replaysOnErrorSampleRate == null) {\n    // eslint-disable-next-line no-console\n    console.warn('Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.');\n  }\n  if (typeof opt.replaysSessionSampleRate === 'number') {\n    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;\n  }\n  if (typeof opt.replaysOnErrorSampleRate === 'number') {\n    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;\n  }\n  return finalOptions;\n}\nexport { Replay };","map":{"version":3,"sources":["../../../src/constants.ts","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb-snapshot/es/rrweb-snapshot.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/types.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/utils.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/mutation.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/sentry/callbackWrapper.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observer.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/iframe-manager.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/shadow-dom-manager.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/ext/tslib/tslib.es6.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/2d.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/serialize-args.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/webgl.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/observers/canvas/canvas-manager.js","../../../../../node_modules/@sentry-internal/rrweb/es/rrweb/packages/rrweb/src/record/index.js","../../../src/util/dedupePerformanceEntries.ts","../../../src/coreHandlers/performanceObserver.ts","../../../../replay-worker/build/npm/esm/worker.ts","../../../../replay-worker/build/npm/esm/index.js","../../../src/eventBuffer/EventBufferArray.ts","../../../src/eventBuffer/WorkerHandler.ts","../../../src/eventBuffer/EventBufferCompressionWorker.ts","../../../src/eventBuffer/EventBufferProxy.ts","../../../src/eventBuffer/index.ts","../../../src/util/isExpired.ts","../../../src/util/isSessionExpired.ts","../../../src/session/saveSession.ts","../../../src/util/isSampled.ts","../../../src/session/Session.ts","../../../src/session/createSession.ts","../../../src/session/fetchSession.ts","../../../src/session/getSession.ts","../../../src/util/addEvent.ts","../../../src/util/eventUtils.ts","../../../src/coreHandlers/handleAfterSendEvent.ts","../../../../../node_modules/@sentry-internal/rrweb-snapshot/es/rrweb-snapshot.js","../../../src/util/createBreadcrumb.ts","../../../src/coreHandlers/addBreadcrumbEvent.ts","../../../src/coreHandlers/util/getAttributesToRecord.ts","../../../src/coreHandlers/handleDom.ts","../../../src/util/isRrwebError.ts","../../../src/coreHandlers/handleGlobalEvent.ts","../../../src/util/createPerformanceSpans.ts","../../../src/coreHandlers/handleHistory.ts","../../../src/util/shouldFilterRequest.ts","../../../src/coreHandlers/addNetworkBreadcrumb.ts","../../../src/coreHandlers/handleFetch.ts","../../../src/coreHandlers/handleXhr.ts","../../../src/coreHandlers/handleNetworkBreadcrumbs.ts","../../../src/coreHandlers/handleScope.ts","../../../src/util/addGlobalListeners.ts","../../../src/util/addMemoryEntry.ts","../../../src/util/createPerformanceEntries.ts","../../../src/util/debounce.ts","../../../src/util/handleRecordingEmit.ts","../../../src/util/createReplayEnvelope.ts","../../../src/util/prepareRecordingData.ts","../../../src/util/prepareReplayEvent.ts","../../../src/util/sendReplayRequest.ts","../../../src/util/sendReplay.ts","../../../src/replay.ts","../../../src/util/getPrivacyOptions.ts","../../../src/util/isBrowser.ts","../../../src/integration.ts"],"names":[],"mappings":";;;AAEA;AACA;AACA;AACA;AACA,MAAA,MAAA,GAAA,UAAA;AAEA,MAAA,kBAAA,GAAA,qBAAA;AACA,MAAA,iBAAA,GAAA,cAAA;AAEA,MAAA,qBAAA,GAAA,uBAAA;;AAEA;AACA,MAAA,qBAAA,GAAA,MAAA,CAAA,CAAA;;AAEA;AACA,MAAA,gBAAA,GAAA,OAAA,CAAA,CAAA;;AAEA;AACA,MAAA,uBAAA,GAAA,IAAA;AACA;AACA;AACA,MAAA,uBAAA,GAAA,IAAA;;AAEA;AACA,MAAA,mBAAA,GAAA,KAAA;AAEA,MAAA,mBAAA,GAAA,IAAA;AACA,MAAA,eAAA,GAAA,CAAA;AC7BA,IAAA,UAAA;AACA,CAAA,UAAA,QAAA,EAAA;EACA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;EACA,QAAA,CAAA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;EACA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;EACA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;EACA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,CAAA,EAAA,UAAA,KAAA,UAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAEA,SAAA,SAAA,CAAA,CAAA,EAAA;EACA,OAAA,CAAA,CAAA,QAAA,KAAA,CAAA,CAAA,YAAA;AACA;AACA,SAAA,YAAA,CAAA,CAAA,EAAA;EACA,MAAA,IAAA,GAAA,CAAA,KAAA,IAAA,IAAA,CAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAAA,IAAA;EACA,OAAA,OAAA,CAAA,IAAA,IAAA,IAAA,CAAA,UAAA,IAAA,IAAA,CAAA,UAAA,KAAA,CAAA,CAAA;AACA;AACA,SAAA,iBAAA,OAAA;EAAA,IAAA;IAAA,gBAAA;IAAA,OAAA;IAAA;EAAA,CAAA;EACA,IAAA,OAAA,CAAA,WAAA,EAAA,KAAA,QAAA,EAAA;IACA,OAAA,GAAA,QAAA;EACA;EACA,MAAA,UAAA,GAAA,OAAA,IAAA,KAAA,QAAA,GAAA,IAAA,CAAA,WAAA,EAAA,GAAA,SAAA;EACA,OAAA,gBAAA,CAAA,OAAA,CAAA,WAAA,EAAA,CAAA,IACA,UAAA,IAAA,gBAAA,CAAA,UAAA,CAAA,IACA,UAAA,KAAA,UAAA,IACA,OAAA,KAAA,OAAA,IAAA,CAAA,IAAA,IAAA,gBAAA,CAAA,MAAA,CAAA;AACA;AACA,SAAA,mBAAA,QAAA;EAAA,IAAA;IAAA,OAAA;IAAA,IAAA;IAAA,gBAAA;IAAA;EAAA,CAAA;EACA,OAAA,iBAAA,IAAA,iBAAA,CAAA;IAAA,gBAAA;IAAA,OAAA;IAAA;EAAA,CAAA,CAAA;AACA;AACA,SAAA,cAAA,QAAA;EAAA,IAAA;IAAA,KAAA;IAAA,iBAAA;IAAA,mBAAA;IAAA,gBAAA;IAAA,OAAA;IAAA,IAAA;IAAA,KAAA;IAAA;EAAA,CAAA;EACA,IAAA,IAAA,GAAA,KAAA,IAAA,EAAA;EACA,IAAA,mBAAA,IAAA,KAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;EACA,IAAA,KAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,EAAA;IACA,IAAA,GAAA,UAAA;EACA;EACA,IAAA,iBAAA,CAAA;IAAA,gBAAA;IAAA,OAAA;IAAA;EAAA,CAAA,CAAA,IACA,iBAAA,IAAA,KAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,EAAA;IACA,IAAA,WAAA,EAAA;MACA,IAAA,GAAA,WAAA,CAAA,IAAA,CAAA;IACA,CAAA,MACA;MACA,IAAA,GAAA,GAAA,CAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA;IACA;EACA;EACA,OAAA,IAAA;AACA;AACA,MAAA,uBAAA,GAAA,oBAAA;AACA,SAAA,eAAA,CAAA,MAAA,EAAA;EACA,MAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;EACA,IAAA,CAAA,GAAA,EACA,OAAA,IAAA;EACA,MAAA,SAAA,GAAA,EAAA;EACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,IAAA,SAAA,EAAA;IACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,IAAA,SAAA,EAAA;MACA,MAAA,YAAA,GAAA,GAAA,CAAA,YAAA;MACA,MAAA,oBAAA,GAAA,uBAAA,IAAA,YAAA,GACA,YAAA,CAAA,uBAAA,CAAA,GACA,YAAA;MACA,MAAA,WAAA,GAAA,IAAA,WAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAAA,SAAA,EAAA,MAAA,CAAA,KAAA,GAAA,CAAA,CAAA,EAAA,IAAA,CAAA,GAAA,CAAA,SAAA,EAAA,MAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,MAAA,CAAA;MACA,IAAA,WAAA,CAAA,IAAA,CAAA,KAAA,IAAA,KAAA,KAAA,CAAA,CAAA,EACA,OAAA,KAAA;IACA;EACA;EACA,OAAA,IAAA;AACA;AAEA,IAAA,GAAA,GAAA,CAAA;AACA,MAAA,YAAA,GAAA,IAAA,MAAA,CAAA,cAAA,CAAA;AACA,MAAA,YAAA,GAAA,CAAA,CAAA;AACA,SAAA,aAAA,CAAA,GAAA,EAAA;EACA,OAAA,GAAA,GAAA,GAAA,CAAA,OAAA,CAAA,OAAA,EAAA,GAAA,CAAA,GAAA,EAAA;AACA;AACA,SAAA,KAAA,GAAA;EACA,OAAA,GAAA,EAAA;AACA;AACA,SAAA,eAAA,CAAA,OAAA,EAAA;EACA,IAAA,OAAA,YAAA,eAAA,EAAA;IACA,OAAA,MAAA;EACA;EACA,MAAA,gBAAA,GAAA,OAAA,CAAA,OAAA,CAAA,WAAA,EAAA,CAAA,IAAA,EAAA;EACA,IAAA,YAAA,CAAA,IAAA,CAAA,gBAAA,CAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,OAAA,gBAAA;AACA;AACA,SAAA,iBAAA,CAAA,CAAA,EAAA;EACA,IAAA;IACA,MAAA,KAAA,GAAA,CAAA,CAAA,KAAA,IAAA,CAAA,CAAA,QAAA;IACA,OAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA,GAAA,IAAA;EACA,CAAA,CACA,OAAA,KAAA,EAAA;IACA,OAAA,IAAA;EACA;AACA;AACA,SAAA,gBAAA,CAAA,IAAA,EAAA;EACA,IAAA,cAAA,GAAA,IAAA,CAAA,OAAA;EACA,IAAA,eAAA,CAAA,IAAA,CAAA,EAAA;IACA,IAAA;MACA,cAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,UAAA,CAAA,IAAA,cAAA;IACA,CAAA,CACA,OAAA,EAAA,EAAA,CACA;EACA;EACA,OAAA,cAAA;AACA;AACA,SAAA,eAAA,CAAA,IAAA,EAAA;EACA,OAAA,YAAA,IAAA,IAAA;AACA;AACA,SAAA,mBAAA,CAAA,KAAA,EAAA;EACA,OAAA,KAAA,CAAA,QAAA,GACA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,QAAA,CAAA,CACA,GAAA,CAAA,IAAA,IAAA,IAAA,CAAA,OAAA,IAAA,EAAA,CAAA,CACA,IAAA,CAAA,EAAA,CAAA,GACA,EAAA;AACA;AACA,SAAA,aAAA,CAAA,GAAA,EAAA;EACA,IAAA,MAAA,GAAA,EAAA;EACA,IAAA,GAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA;IACA,MAAA,GAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA;EACA,CAAA,MACA;IACA,MAAA,GAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;EACA;EACA,MAAA,GAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;EACA,OAAA,MAAA;AACA;AACA,IAAA,aAAA;AACA,IAAA,SAAA;AACA,MAAA,cAAA,GAAA,4CAAA;AACA,MAAA,aAAA,GAAA,qDAAA;AACA,MAAA,QAAA,GAAA,uBAAA;AACA,SAAA,oBAAA,CAAA,OAAA,EAAA,IAAA,EAAA;EACA,OAAA,CAAA,OAAA,IAAA,EAAA,EAAA,OAAA,CAAA,cAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,KAAA;IACA,MAAA,QAAA,GAAA,KAAA,IAAA,KAAA,IAAA,KAAA;IACA,MAAA,UAAA,GAAA,MAAA,IAAA,MAAA,IAAA,EAAA;IACA,IAAA,CAAA,QAAA,EAAA;MACA,OAAA,MAAA;IACA;IACA,IAAA,CAAA,aAAA,CAAA,IAAA,CAAA,QAAA,CAAA,EAAA;MACA,OAAA,OAAA,UAAA,GAAA,QAAA,GAAA,UAAA,GAAA;IACA;IACA,IAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,EAAA;MACA,OAAA,OAAA,UAAA,GAAA,QAAA,GAAA,UAAA,GAAA;IACA;IACA,IAAA,QAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;MACA,OAAA,OAAA,UAAA,GAAA,aAAA,CAAA,IAAA,CAAA,GAAA,QAAA,GAAA,UAAA,GAAA;IACA;IACA,MAAA,KAAA,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA;IACA,MAAA,KAAA,GAAA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA;IACA,KAAA,CAAA,GAAA,EAAA;IACA,KAAA,MAAA,IAAA,IAAA,KAAA,EAAA;MACA,IAAA,IAAA,KAAA,GAAA,EAAA;QACA;MACA,CAAA,MACA,IAAA,IAAA,KAAA,IAAA,EAAA;QACA,KAAA,CAAA,GAAA,EAAA;MACA,CAAA,MACA;QACA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA;MACA;IACA;IACA,OAAA,OAAA,UAAA,GAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,UAAA,GAAA;EACA,CAAA,CAAA;AACA;AACA,MAAA,iBAAA,GAAA,oBAAA;AACA,MAAA,uBAAA,GAAA,oBAAA;AACA,SAAA,uBAAA,CAAA,GAAA,EAAA,cAAA,EAAA;EACA,IAAA,cAAA,CAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IACA,OAAA,cAAA;EACA;EACA,IAAA,GAAA,GAAA,CAAA;EACA,SAAA,iBAAA,CAAA,KAAA,EAAA;IACA,IAAA,KAAA;IACA,IAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA;IACA,IAAA,KAAA,EAAA;MACA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA;MACA,GAAA,IAAA,KAAA,CAAA,MAAA;MACA,OAAA,KAAA;IACA;IACA,OAAA,EAAA;EACA;EACA,IAAA,MAAA,GAAA,EAAA;EACA,OAAA,IAAA,EAAA;IACA,iBAAA,CAAA,uBAAA,CAAA;IACA,IAAA,GAAA,IAAA,cAAA,CAAA,MAAA,EAAA;MACA;IACA;IACA,IAAA,GAAA,GAAA,iBAAA,CAAA,iBAAA,CAAA;IACA,IAAA,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;MACA,GAAA,GAAA,aAAA,CAAA,GAAA,EAAA,GAAA,CAAA,SAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;MACA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA;IACA,CAAA,MACA;MACA,IAAA,cAAA,GAAA,EAAA;MACA,GAAA,GAAA,aAAA,CAAA,GAAA,EAAA,GAAA,CAAA;MACA,IAAA,QAAA,GAAA,KAAA;MACA,OAAA,IAAA,EAAA;QACA,IAAA,CAAA,GAAA,cAAA,CAAA,MAAA,CAAA,GAAA,CAAA;QACA,IAAA,CAAA,KAAA,EAAA,EAAA;UACA,MAAA,CAAA,IAAA,CAAA,CAAA,GAAA,GAAA,cAAA,EAAA,IAAA,EAAA,CAAA;UACA;QACA,CAAA,MACA,IAAA,CAAA,QAAA,EAAA;UACA,IAAA,CAAA,KAAA,GAAA,EAAA;YACA,GAAA,IAAA,CAAA;YACA,MAAA,CAAA,IAAA,CAAA,CAAA,GAAA,GAAA,cAAA,EAAA,IAAA,EAAA,CAAA;YACA;UACA,CAAA,MACA,IAAA,CAAA,KAAA,GAAA,EAAA;YACA,QAAA,GAAA,IAAA;UACA;QACA,CAAA,MACA;UACA,IAAA,CAAA,KAAA,GAAA,EAAA;YACA,QAAA,GAAA,KAAA;UACA;QACA;QACA,cAAA,IAAA,CAAA;QACA,GAAA,IAAA,CAAA;MACA;IACA;EACA;EACA,OAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA;AACA,SAAA,aAAA,CAAA,GAAA,EAAA,cAAA,EAAA;EACA,IAAA,CAAA,cAAA,IAAA,cAAA,CAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IACA,OAAA,cAAA;EACA;EACA,MAAA,CAAA,GAAA,GAAA,CAAA,aAAA,CAAA,GAAA,CAAA;EACA,CAAA,CAAA,IAAA,GAAA,cAAA;EACA,OAAA,CAAA,CAAA,IAAA;AACA;AACA,SAAA,YAAA,CAAA,EAAA,EAAA;EACA,OAAA,OAAA,CAAA,EAAA,CAAA,OAAA,KAAA,KAAA,IAAA,EAAA,CAAA,eAAA,CAAA;AACA;AACA,SAAA,OAAA,GAAA;EACA,MAAA,CAAA,GAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA;EACA,CAAA,CAAA,IAAA,GAAA,EAAA;EACA,OAAA,CAAA,CAAA,IAAA;AACA;AACA,SAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,UAAA,EAAA;EACA,IAAA,CAAA,KAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,EAAA;EACA,MAAA,OAAA,GAAA,QAAA,CAAA,WAAA,EAAA;EACA,IAAA,IAAA,KAAA,KAAA,IAAA,IAAA,KAAA,MAAA,EAAA;IACA,OAAA,aAAA,CAAA,GAAA,EAAA,KAAA,CAAA;EACA,CAAA,MACA,IAAA,IAAA,KAAA,YAAA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;IACA,OAAA,aAAA,CAAA,GAAA,EAAA,KAAA,CAAA;EACA,CAAA,MACA,IAAA,IAAA,KAAA,YAAA,KACA,OAAA,KAAA,OAAA,IAAA,OAAA,KAAA,IAAA,IAAA,OAAA,KAAA,IAAA,CAAA,EAAA;IACA,OAAA,aAAA,CAAA,GAAA,EAAA,KAAA,CAAA;EACA,CAAA,MACA,IAAA,IAAA,KAAA,QAAA,EAAA;IACA,OAAA,uBAAA,CAAA,GAAA,EAAA,KAAA,CAAA;EACA,CAAA,MACA,IAAA,IAAA,KAAA,OAAA,EAAA;IACA,OAAA,oBAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA;EACA,CAAA,MACA,IAAA,OAAA,KAAA,QAAA,IAAA,IAAA,KAAA,MAAA,EAAA;IACA,OAAA,aAAA,CAAA,GAAA,EAAA,KAAA,CAAA;EACA,CAAA,MACA,IAAA,WAAA,IACA,oBAAA,CAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,kBAAA,CAAA,EAAA;IACA,OAAA,UAAA,GAAA,UAAA,CAAA,KAAA,CAAA,GAAA,aAAA,CAAA,KAAA,CAAA;EACA;EACA,OAAA,KAAA;AACA;AACA,SAAA,oBAAA,CAAA,OAAA,EAAA,SAAA,EAAA,OAAA,EAAA,kBAAA,EAAA;EACA,IAAA,kBAAA,IAAA,OAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,OAAA,CAAA,aAAA,EAAA,OAAA,EAAA,YAAA,CAAA,CAAA,OAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,IACA,OAAA,KAAA,OAAA,IACA,SAAA,KAAA,OAAA,IACA,OAAA,CAAA,YAAA,CAAA,MAAA,CAAA,IACA,CAAA,QAAA,EAAA,QAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA,YAAA,CAAA,MAAA,CAAA,CAAA,WAAA,EAAA,CAAA,GAAA,CAAA,CAAA;AACA;AACA,SAAA,iBAAA,CAAA,OAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA;EACA,IAAA,eAAA,IAAA,OAAA,CAAA,OAAA,CAAA,eAAA,CAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,IAAA,OAAA,UAAA,KAAA,QAAA,EAAA;IACA,IAAA,OAAA,CAAA,SAAA,CAAA,QAAA,CAAA,UAAA,CAAA,EAAA;MACA,OAAA,IAAA;IACA;EACA,CAAA,MACA;IACA,KAAA,IAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA,MAAA,EAAA,MAAA,EAAA,EAAA;MACA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,CAAA,MAAA,CAAA;MACA,IAAA,UAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA;QACA,OAAA,IAAA;MACA;IACA;EACA;EACA,IAAA,aAAA,EAAA;IACA,OAAA,OAAA,CAAA,OAAA,CAAA,aAAA,CAAA;EACA;EACA,OAAA,KAAA;AACA;AACA,SAAA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA;EACA,IAAA,CAAA,IAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,IAAA,IAAA,CAAA,QAAA,KAAA,IAAA,CAAA,YAAA,EAAA;IACA,OAAA,eAAA,CAAA,IAAA,CAAA,UAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,WAAA,CAAA;EACA;EACA,IAAA,kBAAA,EAAA;IACA,IAAA,IAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,IACA,IAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,EAAA;MACA,OAAA,KAAA;IACA;EACA;EACA,IAAA,WAAA,EAAA;IACA,OAAA,IAAA;EACA;EACA,IAAA,OAAA,aAAA,KAAA,QAAA,EAAA;IACA,IAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,aAAA,CAAA,EAAA;MACA,OAAA,IAAA;IACA;EACA,CAAA,MACA;IACA,KAAA,IAAA,MAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAA,CAAA,SAAA,CAAA,MAAA,EAAA,MAAA,EAAA,EAAA;MACA,MAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA,MAAA,CAAA;MACA,IAAA,aAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA;QACA,OAAA,IAAA;MACA;IACA;EACA;EACA,IAAA,gBAAA,EAAA;IACA,IAAA,IAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,EAAA;MACA,OAAA,IAAA;IACA;EACA;EACA,OAAA,eAAA,CAAA,IAAA,CAAA,UAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,WAAA,CAAA;AACA;AACA,SAAA,gBAAA,CAAA,QAAA,EAAA,QAAA,EAAA,iBAAA,EAAA;EACA,MAAA,GAAA,GAAA,QAAA,CAAA,aAAA;EACA,IAAA,CAAA,GAAA,EAAA;IACA;EACA;EACA,IAAA,KAAA,GAAA,KAAA;EACA,IAAA,UAAA;EACA,IAAA;IACA,UAAA,GAAA,GAAA,CAAA,QAAA,CAAA,UAAA;EACA,CAAA,CACA,OAAA,KAAA,EAAA;IACA;EACA;EACA,IAAA,UAAA,KAAA,UAAA,EAAA;IACA,MAAA,KAAA,GAAA,UAAA,CAAA,MAAA;MACA,IAAA,CAAA,KAAA,EAAA;QACA,QAAA,EAAA;QACA,KAAA,GAAA,IAAA;MACA;IACA,CAAA,EAAA,iBAAA,CAAA;IACA,QAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,MAAA;MACA,YAAA,CAAA,KAAA,CAAA;MACA,KAAA,GAAA,IAAA;MACA,QAAA,EAAA;IACA,CAAA,CAAA;IACA;EACA;EACA,MAAA,QAAA,GAAA,aAAA;EACA,IAAA,GAAA,CAAA,QAAA,CAAA,IAAA,KAAA,QAAA,IACA,QAAA,CAAA,GAAA,KAAA,QAAA,IACA,QAAA,CAAA,GAAA,KAAA,EAAA,EAAA;IACA,UAAA,CAAA,QAAA,EAAA,CAAA,CAAA;IACA;EACA;EACA,QAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACA;AACA,SAAA,aAAA,CAAA,CAAA,EAAA,OAAA,EAAA;EACA,IAAA,EAAA;EACA,MAAA;IAAA,GAAA;IAAA,UAAA;IAAA,aAAA;IAAA,eAAA;IAAA,aAAA;IAAA,gBAAA;IAAA,kBAAA;IAAA,gBAAA;IAAA,iBAAA;IAAA,mBAAA;IAAA,WAAA;IAAA,gBAAA,GAAA,CAAA,CAAA;IAAA,UAAA;IAAA,WAAA;IAAA,cAAA,GAAA,CAAA,CAAA;IAAA,YAAA;IAAA,YAAA;IAAA;EAAA,CAAA,GAAA,OAAA;EACA,IAAA,MAAA;EACA,IAAA,GAAA,CAAA,IAAA,EAAA;IACA,MAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CAAA,EAAA;IACA,MAAA,GAAA,KAAA,KAAA,CAAA,GAAA,SAAA,GAAA,KAAA;EACA;EACA,QAAA,CAAA,CAAA,QAAA;IACA,KAAA,CAAA,CAAA,aAAA;MACA,IAAA,CAAA,CAAA,UAAA,KAAA,YAAA,EAAA;QACA,OAAA;UACA,IAAA,EAAA,UAAA,CAAA,QAAA;UACA,UAAA,EAAA,EAAA;UACA,UAAA,EAAA,CAAA,CAAA,UAAA;UACA;QACA,CAAA;MACA,CAAA,MACA;QACA,OAAA;UACA,IAAA,EAAA,UAAA,CAAA,QAAA;UACA,UAAA,EAAA,EAAA;UACA;QACA,CAAA;MACA;IACA,KAAA,CAAA,CAAA,kBAAA;MACA,OAAA;QACA,IAAA,EAAA,UAAA,CAAA,YAAA;QACA,IAAA,EAAA,CAAA,CAAA,IAAA;QACA,QAAA,EAAA,CAAA,CAAA,QAAA;QACA,QAAA,EAAA,CAAA,CAAA,QAAA;QACA;MACA,CAAA;IACA,KAAA,CAAA,CAAA,YAAA;MACA,MAAA,SAAA,GAAA,iBAAA,CAAA,CAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA;MACA,MAAA,OAAA,GAAA,eAAA,CAAA,CAAA,CAAA;MACA,IAAA,UAAA,GAAA,CAAA,CAAA;MACA,KAAA,MAAA;QAAA,IAAA;QAAA;MAAA,CAAA,IAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,EAAA;QACA,IAAA,CAAA,aAAA,CAAA,OAAA,EAAA,IAAA,CAAA,EAAA;UACA,UAAA,CAAA,IAAA,CAAA,GAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,UAAA,CAAA;QACA;MACA;MACA,IAAA,OAAA,KAAA,MAAA,IAAA,gBAAA,EAAA;QACA,MAAA,UAAA,GAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,WAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA;UACA,OAAA,CAAA,CAAA,IAAA,KAAA,CAAA,CAAA,IAAA;QACA,CAAA,CAAA;QACA,IAAA,OAAA,GAAA,IAAA;QACA,IAAA,UAAA,EAAA;UACA,OAAA,GAAA,iBAAA,CAAA,UAAA,CAAA;QACA;QACA,IAAA,OAAA,EAAA;UACA,OAAA,UAAA,CAAA,GAAA;UACA,OAAA,UAAA,CAAA,IAAA;UACA,UAAA,CAAA,QAAA,GAAA,oBAAA,CAAA,OAAA,EAAA,UAAA,CAAA,IAAA,CAAA;QACA;MACA;MACA,IAAA,OAAA,KAAA,OAAA,IACA,CAAA,CAAA,KAAA,IACA,CAAA,CAAA,CAAA,CAAA,SAAA,IACA,CAAA,CAAA,WAAA,IACA,EAAA,EAAA,IAAA,EAAA,CAAA,MAAA,EAAA;QACA,MAAA,OAAA,GAAA,iBAAA,CAAA,CAAA,CAAA,KAAA,CAAA;QACA,IAAA,OAAA,EAAA;UACA,UAAA,CAAA,QAAA,GAAA,oBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,CAAA;QACA;MACA;MACA,IAAA,OAAA,KAAA,OAAA,IACA,OAAA,KAAA,UAAA,IACA,OAAA,KAAA,QAAA,IACA,OAAA,KAAA,QAAA,EAAA;QACA,MAAA,EAAA,GAAA,CAAA;QACA,MAAA,KAAA,GAAA,aAAA,CAAA,OAAA,EAAA,EAAA,EAAA,UAAA,CAAA;QACA,MAAA,OAAA,GAAA,CAAA,CAAA,OAAA;QACA,IAAA,UAAA,CAAA,IAAA,KAAA,QAAA,IACA,UAAA,CAAA,IAAA,KAAA,QAAA,IACA,KAAA,EAAA;UACA,UAAA,CAAA,KAAA,GAAA,cAAA,CAAA;YACA,KAAA,EAAA,EAAA;YACA,IAAA,EAAA,UAAA,CAAA,IAAA;YACA,OAAA;YACA,KAAA;YACA,iBAAA;YACA,mBAAA;YACA,gBAAA;YACA;UACA,CAAA,CAAA;QACA;QACA,IAAA,OAAA,EAAA;UACA,UAAA,CAAA,OAAA,GAAA,OAAA;QACA;MACA;MACA,IAAA,OAAA,KAAA,QAAA,EAAA;QACA,IAAA,CAAA,CAAA,QAAA,IAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,EAAA;UACA,UAAA,CAAA,QAAA,GAAA,IAAA;QACA,CAAA,MACA;UACA,OAAA,UAAA,CAAA,QAAA;QACA;MACA;MACA,IAAA,OAAA,KAAA,QAAA,IAAA,YAAA,EAAA;QACA,IAAA,CAAA,CAAA,SAAA,KAAA,IAAA,EAAA;UACA,IAAA,CAAA,eAAA,CAAA,CAAA,CAAA,EAAA;YACA,UAAA,CAAA,UAAA,GAAA,CAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,CAAA,OAAA,CAAA;UACA;QACA,CAAA,MACA,IAAA,EAAA,WAAA,IAAA,CAAA,CAAA,EAAA;UACA,MAAA,aAAA,GAAA,CAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,CAAA,OAAA,CAAA;UACA,MAAA,WAAA,GAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA;UACA,WAAA,CAAA,KAAA,GAAA,CAAA,CAAA,KAAA;UACA,WAAA,CAAA,MAAA,GAAA,CAAA,CAAA,MAAA;UACA,MAAA,kBAAA,GAAA,WAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,CAAA,OAAA,CAAA;UACA,IAAA,aAAA,KAAA,kBAAA,EAAA;YACA,UAAA,CAAA,UAAA,GAAA,aAAA;UACA;QACA;MACA;MACA,IAAA,OAAA,KAAA,KAAA,IAAA,YAAA,EAAA;QACA,IAAA,CAAA,aAAA,EAAA;UACA,aAAA,GAAA,GAAA,CAAA,aAAA,CAAA,QAAA,CAAA;UACA,SAAA,GAAA,aAAA,CAAA,UAAA,CAAA,IAAA,CAAA;QACA;QACA,MAAA,KAAA,GAAA,CAAA;QACA,MAAA,QAAA,GAAA,KAAA,CAAA,WAAA;QACA,KAAA,CAAA,WAAA,GAAA,WAAA;QACA,MAAA,iBAAA,GAAA,MAAA;UACA,IAAA;YACA,aAAA,CAAA,KAAA,GAAA,KAAA,CAAA,YAAA;YACA,aAAA,CAAA,MAAA,GAAA,KAAA,CAAA,aAAA;YACA,SAAA,CAAA,SAAA,CAAA,KAAA,EAAA,CAAA,EAAA,CAAA,CAAA;YACA,UAAA,CAAA,UAAA,GAAA,aAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,EAAA,cAAA,CAAA,OAAA,CAAA;UACA,CAAA,CACA,OAAA,GAAA,EAAA;YACA,OAAA,CAAA,IAAA,CAAA,yBAAA,KAAA,CAAA,UAAA,YAAA,GAAA,EAAA,CAAA;UACA;UACA,QAAA,GACA,UAAA,CAAA,WAAA,GAAA,QAAA,GACA,OAAA,UAAA,CAAA,WAAA;QACA,CAAA;QACA,IAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,YAAA,KAAA,CAAA,EACA,iBAAA,EAAA,CAAA,KAEA,KAAA,CAAA,MAAA,GAAA,iBAAA;MACA;MACA,IAAA,OAAA,KAAA,OAAA,IAAA,OAAA,KAAA,OAAA,EAAA;QACA,UAAA,CAAA,aAAA,GAAA,CAAA,CAAA,MAAA,GACA,QAAA,GACA,QAAA;QACA,UAAA,CAAA,mBAAA,GAAA,CAAA,CAAA,WAAA;MACA;MACA,IAAA,CAAA,CAAA,UAAA,EAAA;QACA,UAAA,CAAA,aAAA,GAAA,CAAA,CAAA,UAAA;MACA;MACA,IAAA,CAAA,CAAA,SAAA,EAAA;QACA,UAAA,CAAA,YAAA,GAAA,CAAA,CAAA,SAAA;MACA;MACA,IAAA,SAAA,EAAA;QACA,MAAA;UAAA,KAAA;UAAA;QAAA,CAAA,GAAA,CAAA,CAAA,qBAAA,EAAA;QACA,UAAA,GAAA;UACA,KAAA,EAAA,UAAA,CAAA,KAAA;UACA,QAAA,EAAA,GAAA,KAAA,IAAA;UACA,SAAA,EAAA,GAAA,MAAA;QACA,CAAA;MACA;MACA,IAAA,OAAA,KAAA,QAAA,IAAA,CAAA,eAAA,CAAA,UAAA,CAAA,GAAA,CAAA,EAAA;QACA,IAAA,CAAA,CAAA,CAAA,eAAA,EAAA;UACA,UAAA,CAAA,MAAA,GAAA,UAAA,CAAA,GAAA;QACA;QACA,OAAA,UAAA,CAAA,GAAA;MACA;MACA,OAAA;QACA,IAAA,EAAA,UAAA,CAAA,OAAA;QACA,OAAA;QACA,UAAA;QACA,UAAA,EAAA,EAAA;QACA,KAAA,EAAA,YAAA,CAAA,CAAA,CAAA,IAAA,SAAA;QACA,SAAA;QACA;MACA,CAAA;IACA,KAAA,CAAA,CAAA,SAAA;MACA,MAAA,aAAA,GAAA,CAAA,CAAA,UAAA,IAAA,CAAA,CAAA,UAAA,CAAA,OAAA;MACA,IAAA,WAAA,GAAA,CAAA,CAAA,WAAA;MACA,MAAA,OAAA,GAAA,aAAA,KAAA,OAAA,GAAA,IAAA,GAAA,SAAA;MACA,MAAA,QAAA,GAAA,aAAA,KAAA,QAAA,GAAA,IAAA,GAAA,SAAA;MACA,IAAA,OAAA,IAAA,WAAA,EAAA;QACA,IAAA;UACA,IAAA,CAAA,CAAA,WAAA,IAAA,CAAA,CAAA,eAAA,EAAA,CACA,CAAA,MACA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,UAAA,CAAA,KAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,EAAA;YACA,WAAA,GAAA,mBAAA,CAAA,CAAA,CAAA,UAAA,CAAA,KAAA,CAAA;UACA;QACA,CAAA,CACA,OAAA,GAAA,EAAA;UACA,OAAA,CAAA,IAAA,CAAA,wDAAA,GAAA,EAAA,EAAA,CAAA,CAAA;QACA;QACA,WAAA,GAAA,oBAAA,CAAA,WAAA,EAAA,OAAA,EAAA,CAAA;MACA;MACA,IAAA,QAAA,EAAA;QACA,WAAA,GAAA,oBAAA;MACA;MACA,IAAA,aAAA,KAAA,UAAA,IAAA,WAAA,EAAA;QACA,WAAA,GAAA,EAAA;MACA,CAAA,MACA,IAAA,aAAA,KAAA,QAAA,IAAA,WAAA,EAAA;QACA,MAAA,MAAA,GAAA,CAAA,CAAA,UAAA;QACA,WAAA,GAAA,cAAA,CAAA;UACA,KAAA,EAAA,MAAA;UACA,IAAA,EAAA,IAAA;UACA,OAAA,EAAA,aAAA;UACA,KAAA,EAAA,WAAA;UACA,iBAAA;UACA,mBAAA;UACA,gBAAA;UACA;QACA,CAAA,CAAA;MACA,CAAA,MACA,IAAA,CAAA,OAAA,IACA,CAAA,QAAA,IACA,eAAA,CAAA,CAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,WAAA,CAAA,IACA,WAAA,EAAA;QACA,WAAA,GAAA,UAAA,GACA,UAAA,CAAA,WAAA,CAAA,GACA,aAAA,CAAA,WAAA,CAAA;MACA;MACA,OAAA;QACA,IAAA,EAAA,UAAA,CAAA,IAAA;QACA,WAAA,EAAA,WAAA,IAAA,EAAA;QACA,OAAA;QACA;MACA,CAAA;IACA,KAAA,CAAA,CAAA,kBAAA;MACA,OAAA;QACA,IAAA,EAAA,UAAA,CAAA,KAAA;QACA,WAAA,EAAA,EAAA;QACA;MACA,CAAA;IACA,KAAA,CAAA,CAAA,YAAA;MACA,OAAA;QACA,IAAA,EAAA,UAAA,CAAA,OAAA;QACA,WAAA,EAAA,CAAA,CAAA,WAAA,IAAA,EAAA;QACA;MACA,CAAA;IACA;MACA,OAAA,KAAA;EAAA;AAEA;AACA,SAAA,aAAA,CAAA,SAAA,EAAA;EACA,IAAA,SAAA,KAAA,SAAA,IAAA,SAAA,KAAA,IAAA,EAAA;IACA,OAAA,EAAA;EACA,CAAA,MACA;IACA,OAAA,SAAA,CAAA,WAAA,EAAA;EACA;AACA;AACA,SAAA,eAAA,CAAA,EAAA,EAAA,cAAA,EAAA;EACA,IAAA,cAAA,CAAA,OAAA,IAAA,EAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,EAAA;IACA,OAAA,IAAA;EACA,CAAA,MACA,IAAA,EAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,EAAA;IACA,IAAA,cAAA,CAAA,MAAA,KACA,EAAA,CAAA,OAAA,KAAA,QAAA,IACA,EAAA,CAAA,OAAA,KAAA,MAAA,KACA,EAAA,CAAA,UAAA,CAAA,GAAA,KAAA,SAAA,IACA,EAAA,CAAA,UAAA,CAAA,GAAA,KAAA,eAAA,CAAA,IACA,EAAA,CAAA,UAAA,CAAA,EAAA,KAAA,QAAA,IACA,EAAA,CAAA,OAAA,KAAA,MAAA,IACA,EAAA,CAAA,UAAA,CAAA,GAAA,KAAA,UAAA,IACA,OAAA,EAAA,CAAA,UAAA,CAAA,IAAA,KAAA,QAAA,IACA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA;MACA,OAAA,IAAA;IACA,CAAA,MACA,IAAA,cAAA,CAAA,WAAA,KACA,EAAA,CAAA,OAAA,KAAA,MAAA,IAAA,EAAA,CAAA,UAAA,CAAA,GAAA,KAAA,eAAA,IACA,EAAA,CAAA,OAAA,KAAA,MAAA,KACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,mCAAA,CAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,kBAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,MAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,kBAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,eAAA,CAAA,CAAA,EAAA;MACA,OAAA,IAAA;IACA,CAAA,MACA,IAAA,EAAA,CAAA,OAAA,KAAA,MAAA,EAAA;MACA,IAAA,cAAA,CAAA,oBAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,wBAAA,CAAA,EAAA;QACA,OAAA,IAAA;MACA,CAAA,MACA,IAAA,cAAA,CAAA,cAAA,KACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CAAA,KAAA,CAAA,mBAAA,CAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,WAAA,CAAA,EAAA;QACA,OAAA,IAAA;MACA,CAAA,MACA,IAAA,cAAA,CAAA,cAAA,KACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,QAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,WAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,SAAA,CAAA,EAAA;QACA,OAAA,IAAA;MACA,CAAA,MACA,IAAA,cAAA,CAAA,iBAAA,IACA,EAAA,CAAA,UAAA,CAAA,YAAA,CAAA,KAAA,SAAA,EAAA;QACA,OAAA,IAAA;MACA,CAAA,MACA,IAAA,cAAA,CAAA,kBAAA,KACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,QAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,WAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,WAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,WAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,QAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CAAA,KAAA,CAAA,WAAA,CAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CAAA,KAAA,CAAA,WAAA,CAAA,CAAA,EAAA;QACA,OAAA,IAAA;MACA,CAAA,MACA,IAAA,cAAA,CAAA,oBAAA,KACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,0BAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,qBAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,YAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,iBAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,WAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,cAAA,IACA,aAAA,CAAA,EAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,4BAAA,CAAA,EAAA;QACA,OAAA,IAAA;MACA;IACA;EACA;EACA,OAAA,KAAA;AACA;AACA,SAAA,mBAAA,CAAA,CAAA,EAAA,OAAA,EAAA;EACA,MAAA;IAAA,GAAA;IAAA,GAAA;IAAA,UAAA;IAAA,aAAA;IAAA,eAAA;IAAA,aAAA;IAAA,gBAAA;IAAA,kBAAA;IAAA,SAAA,GAAA,KAAA;IAAA,gBAAA,GAAA,IAAA;IAAA,iBAAA;IAAA,mBAAA;IAAA,WAAA;IAAA,gBAAA,GAAA,CAAA,CAAA;IAAA,UAAA;IAAA,WAAA;IAAA,cAAA;IAAA,cAAA,GAAA,CAAA,CAAA;IAAA,YAAA,GAAA,KAAA;IAAA,YAAA,GAAA,KAAA;IAAA,WAAA;IAAA,YAAA;IAAA,iBAAA,GAAA,IAAA;IAAA,eAAA,GAAA,MAAA;EAAA,CAAA,GAAA,OAAA;EACA,IAAA;IAAA,kBAAA,GAAA;EAAA,CAAA,GAAA,OAAA;EACA,MAAA,eAAA,GAAA,aAAA,CAAA,CAAA,EAAA;IACA,GAAA;IACA,UAAA;IACA,aAAA;IACA,eAAA;IACA,aAAA;IACA,gBAAA;IACA,kBAAA;IACA,gBAAA;IACA,iBAAA;IACA,mBAAA;IACA,WAAA;IACA,gBAAA;IACA,UAAA;IACA,WAAA;IACA,cAAA;IACA,YAAA;IACA,YAAA;IACA;EACA,CAAA,CAAA;EACA,IAAA,CAAA,eAAA,EAAA;IACA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,gBAAA,CAAA;IACA,OAAA,IAAA;EACA;EACA,IAAA,EAAA;EACA,IAAA,MAAA,IAAA,CAAA,EAAA;IACA,EAAA,GAAA,CAAA,CAAA,IAAA,CAAA,EAAA;EACA,CAAA,MACA,IAAA,eAAA,CAAA,eAAA,EAAA,cAAA,CAAA,IACA,CAAA,kBAAA,IACA,eAAA,CAAA,IAAA,KAAA,UAAA,CAAA,IAAA,IACA,CAAA,eAAA,CAAA,OAAA,IACA,CAAA,eAAA,CAAA,WAAA,CAAA,OAAA,CAAA,aAAA,EAAA,EAAA,CAAA,CAAA,MAAA,EAAA;IACA,EAAA,GAAA,YAAA;EACA,CAAA,MACA;IACA,EAAA,GAAA,KAAA,EAAA;EACA;EACA,MAAA,cAAA,GAAA,MAAA,CAAA,MAAA,CAAA,eAAA,EAAA;IAAA;EAAA,CAAA,CAAA;EACA,CAAA,CAAA,IAAA,GAAA,cAAA;EACA,IAAA,EAAA,KAAA,YAAA,EAAA;IACA,OAAA,IAAA;EACA;EACA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA;EACA,IAAA,WAAA,EAAA;IACA,WAAA,CAAA,CAAA,CAAA;EACA;EACA,IAAA,WAAA,GAAA,CAAA,SAAA;EACA,IAAA,cAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,EAAA;IACA,WAAA,GAAA,WAAA,IAAA,CAAA,cAAA,CAAA,SAAA;IACA,OAAA,cAAA,CAAA,SAAA;IACA,IAAA,CAAA,CAAA,UAAA,EACA,cAAA,CAAA,YAAA,GAAA,IAAA;EACA;EACA,IAAA,CAAA,cAAA,CAAA,IAAA,KAAA,UAAA,CAAA,QAAA,IACA,cAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,KACA,WAAA,EAAA;IACA,IAAA,cAAA,CAAA,cAAA,IACA,eAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,IACA,eAAA,CAAA,OAAA,KAAA,MAAA,EAAA;MACA,kBAAA,GAAA,KAAA;IACA;IACA,MAAA,aAAA,GAAA;MACA,GAAA;MACA,GAAA;MACA,UAAA;MACA,aAAA;MACA,eAAA;MACA,aAAA;MACA,gBAAA;MACA,kBAAA;MACA,SAAA;MACA,gBAAA;MACA,iBAAA;MACA,mBAAA;MACA,WAAA;MACA,gBAAA;MACA,UAAA;MACA,WAAA;MACA,cAAA;MACA,cAAA;MACA,YAAA;MACA,YAAA;MACA,kBAAA;MACA,WAAA;MACA,YAAA;MACA,iBAAA;MACA;IACA,CAAA;IACA,KAAA,MAAA,MAAA,IAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,EAAA;MACA,MAAA,mBAAA,GAAA,mBAAA,CAAA,MAAA,EAAA,aAAA,CAAA;MACA,IAAA,mBAAA,EAAA;QACA,cAAA,CAAA,UAAA,CAAA,IAAA,CAAA,mBAAA,CAAA;MACA;IACA;IACA,IAAA,SAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,UAAA,EAAA;MACA,KAAA,MAAA,MAAA,IAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,UAAA,CAAA,UAAA,CAAA,EAAA;QACA,MAAA,mBAAA,GAAA,mBAAA,CAAA,MAAA,EAAA,aAAA,CAAA;QACA,IAAA,mBAAA,EAAA;UACA,mBAAA,CAAA,QAAA,GAAA,IAAA;UACA,cAAA,CAAA,UAAA,CAAA,IAAA,CAAA,mBAAA,CAAA;QACA;MACA;IACA;EACA;EACA,IAAA,CAAA,CAAA,UAAA,IAAA,YAAA,CAAA,CAAA,CAAA,UAAA,CAAA,EAAA;IACA,cAAA,CAAA,QAAA,GAAA,IAAA;EACA;EACA,IAAA,cAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,IACA,cAAA,CAAA,OAAA,KAAA,QAAA,EAAA;IACA,gBAAA,CAAA,CAAA,EAAA,MAAA;MACA,MAAA,SAAA,GAAA,CAAA,CAAA,eAAA;MACA,IAAA,SAAA,IAAA,YAAA,EAAA;QACA,MAAA,oBAAA,GAAA,mBAAA,CAAA,SAAA,EAAA;UACA,GAAA,EAAA,SAAA;UACA,GAAA;UACA,UAAA;UACA,aAAA;UACA,eAAA;UACA,aAAA;UACA,gBAAA;UACA,kBAAA;UACA,SAAA,EAAA,KAAA;UACA,gBAAA;UACA,iBAAA;UACA,mBAAA;UACA,WAAA;UACA,gBAAA;UACA,UAAA;UACA,WAAA;UACA,cAAA;UACA,cAAA;UACA,YAAA;UACA,YAAA;UACA,kBAAA;UACA,WAAA;UACA,YAAA;UACA,iBAAA;UACA;QACA,CAAA,CAAA;QACA,IAAA,oBAAA,EAAA;UACA,YAAA,CAAA,CAAA,EAAA,oBAAA,CAAA;QACA;MACA;IACA,CAAA,EAAA,iBAAA,CAAA;EACA;EACA,OAAA,cAAA;AACA;AACA,SAAA,QAAA,CAAA,CAAA,EAAA,OAAA,EAAA;EACA,MAAA;IAAA,UAAA,GAAA,UAAA;IAAA,aAAA,GAAA,IAAA;IAAA,eAAA,GAAA,IAAA;IAAA,aAAA,GAAA,SAAA;IAAA,gBAAA,GAAA,IAAA;IAAA,kBAAA,GAAA,IAAA;IAAA,gBAAA,GAAA,IAAA;IAAA,YAAA,GAAA,KAAA;IAAA,YAAA,GAAA,KAAA;IAAA,iBAAA,GAAA,IAAA;IAAA,mBAAA,GAAA,IAAA;IAAA,WAAA,GAAA,KAAA;IAAA,aAAA,GAAA,KAAA;IAAA,UAAA;IAAA,WAAA;IAAA,OAAA,GAAA,KAAA;IAAA,cAAA;IAAA,kBAAA;IAAA,WAAA;IAAA,YAAA;IAAA,iBAAA;IAAA,eAAA,GAAA,MAAA;EAAA,CAAA,GAAA,OAAA,IAAA,CAAA,CAAA;EACA,MAAA,SAAA,GAAA,CAAA,CAAA;EACA,MAAA,gBAAA,GAAA,aAAA,KAAA,IAAA,GACA;IACA,KAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,gBAAA,EAAA,IAAA;IACA,KAAA,EAAA,IAAA;IACA,KAAA,EAAA,IAAA;IACA,MAAA,EAAA,IAAA;IACA,KAAA,EAAA,IAAA;IACA,MAAA,EAAA,IAAA;IACA,GAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,GAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,QAAA,EAAA,IAAA;IACA,MAAA,EAAA;EACA,CAAA,GACA,aAAA,KAAA,KAAA,GACA,CAAA,CAAA,GACA,aAAA;EACA,MAAA,cAAA,GAAA,OAAA,KAAA,IAAA,IAAA,OAAA,KAAA,KAAA,GAEA;IACA,MAAA,EAAA,IAAA;IACA,OAAA,EAAA,IAAA;IACA,WAAA,EAAA,IAAA;IACA,cAAA,EAAA,IAAA;IACA,oBAAA,EAAA,OAAA,KAAA,KAAA;IACA,cAAA,EAAA,IAAA;IACA,cAAA,EAAA,IAAA;IACA,iBAAA,EAAA,IAAA;IACA,kBAAA,EAAA,IAAA;IACA,oBAAA,EAAA;EACA,CAAA,GACA,OAAA,KAAA,KAAA,GACA,CAAA,CAAA,GACA,OAAA;EACA,OAAA,CACA,mBAAA,CAAA,CAAA,EAAA;IACA,GAAA,EAAA,CAAA;IACA,GAAA,EAAA,SAAA;IACA,UAAA;IACA,aAAA;IACA,eAAA;IACA,aAAA;IACA,gBAAA;IACA,kBAAA;IACA,SAAA,EAAA,KAAA;IACA,gBAAA;IACA,iBAAA;IACA,mBAAA;IACA,WAAA;IACA,gBAAA;IACA,UAAA;IACA,WAAA;IACA,cAAA;IACA,cAAA;IACA,YAAA;IACA,YAAA;IACA,kBAAA;IACA,WAAA;IACA,YAAA;IACA,iBAAA;IACA;EACA,CAAA,CAAA,EACA,SAAA,CACA;AACA;AACA,SAAA,aAAA,CAAA,OAAA,EAAA,aAAA,EAAA,KAAA,EAAA;EACA,OAAA,CAAA,OAAA,KAAA,OAAA,IAAA,OAAA,KAAA,OAAA,KAAA,aAAA,KAAA,UAAA;AACA;AACA,SAAA,aAAA,CAAA,OAAA,EAAA,EAAA,EAAA,UAAA,EAAA;EACA,IAAA,OAAA,KAAA,OAAA,KACA,UAAA,CAAA,IAAA,KAAA,OAAA,IAAA,UAAA,CAAA,IAAA,KAAA,UAAA,CAAA,EAAA;IACA,OAAA,EAAA,CAAA,YAAA,CAAA,OAAA,CAAA,IAAA,EAAA;EACA;EACA,OAAA,EAAA,CAAA,KAAA;AACA;ACv6BA,IAAA,SAAA;AACA,CAAA,UAAA,SAAA,EAAA;EACA,SAAA,CAAA,SAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;EACA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;EACA,SAAA,CAAA,SAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;EACA,SAAA,CAAA,SAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,qBAAA;EACA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;EACA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;EACA,SAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,CAAA,EAAA,SAAA,KAAA,SAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA,iBAAA;AACA,CAAA,UAAA,iBAAA,EAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,CAAA,GAAA,kBAAA;AACA,CAAA,EAAA,iBAAA,KAAA,iBAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA,iBAAA;AACA,CAAA,UAAA,iBAAA,EAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,YAAA,CAAA,GAAA,CAAA,CAAA,GAAA,YAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,aAAA,CAAA,GAAA,EAAA,CAAA,GAAA,aAAA;AACA,CAAA,EAAA,iBAAA,KAAA,iBAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA,aAAA;AACA,CAAA,UAAA,aAAA,EAAA;EACA,aAAA,CAAA,aAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA;EACA,aAAA,CAAA,aAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,aAAA,CAAA,aAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACA,CAAA,EAAA,aAAA,KAAA,aAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA,iBAAA;AACA,CAAA,UAAA,iBAAA,EAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;EACA,iBAAA,CAAA,iBAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AACA,CAAA,EAAA,iBAAA,KAAA,iBAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA,cAAA;AACA,CAAA,UAAA,cAAA,EAAA;EACA,cAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EACA,cAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EACA,cAAA,CAAA,QAAA,CAAA,GAAA,QAAA;EACA,cAAA,CAAA,QAAA,CAAA,GAAA,QAAA;EACA,cAAA,CAAA,QAAA,CAAA,GAAA,QAAA;EACA,cAAA,CAAA,uBAAA,CAAA,GAAA,wBAAA;EACA,cAAA,CAAA,qBAAA,CAAA,GAAA,uBAAA;EACA,cAAA,CAAA,mBAAA,CAAA,GAAA,qBAAA;EACA,cAAA,CAAA,WAAA,CAAA,GAAA,YAAA;EACA,cAAA,CAAA,SAAA,CAAA,GAAA,UAAA;EACA,cAAA,CAAA,kBAAA,CAAA,GAAA,mBAAA;EACA,cAAA,CAAA,WAAA,CAAA,GAAA,YAAA;EACA,cAAA,CAAA,aAAA,CAAA,GAAA,cAAA;EACA,cAAA,CAAA,OAAA,CAAA,GAAA,OAAA;EACA,cAAA,CAAA,aAAA,CAAA,GAAA,cAAA;EACA,cAAA,CAAA,UAAA,CAAA,GAAA,WAAA;AACA,CAAA,EAAA,cAAA,KAAA,cAAA,GAAA,CAAA,CAAA,CAAA,CAAA;ACrEA,SAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA;EAAA,IAAA,MAAA,uEAAA,QAAA;EACA,MAAA,OAAA,GAAA;IAAA,OAAA,EAAA,IAAA;IAAA,OAAA,EAAA;EAAA,CAAA;EACA,MAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,EAAA,EAAA,OAAA,CAAA;EACA,OAAA,MAAA,MAAA,CAAA,mBAAA,CAAA,IAAA,EAAA,EAAA,EAAA,OAAA,CAAA;AACA;AACA,SAAA,YAAA,GAAA;EACA,OAAA;IACA,GAAA,EAAA,CAAA,CAAA;IACA,KAAA,CAAA,CAAA,EAAA;MACA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,EAAA;QACA,OAAA,CAAA,CAAA;MACA;MACA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA;IACA,CAAA;IACA,OAAA,CAAA,EAAA,EAAA;MACA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,IAAA,IAAA;IACA,CAAA;IACA,iBAAA,CAAA,CAAA,EAAA;MACA,MAAA,EAAA,GAAA,CAAA,CAAA,IAAA,IAAA,CAAA,CAAA,IAAA,CAAA,EAAA;MACA,OAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA;MACA,IAAA,CAAA,CAAA,UAAA,EAAA;QACA,CAAA,CAAA,UAAA,CAAA,OAAA,CAAA,KAAA,IAAA,IAAA,CAAA,iBAAA,CAAA,KAAA,CAAA,CAAA;MACA;IACA,CAAA;IACA,GAAA,CAAA,EAAA,EAAA;MACA,OAAA,IAAA,CAAA,GAAA,CAAA,cAAA,CAAA,EAAA,CAAA;IACA,CAAA;IACA,KAAA,GAAA;MACA,IAAA,CAAA,GAAA,GAAA,CAAA,CAAA;IACA;EACA,CAAA;AACA;AACA,MAAA,8BAAA,GAAA,sDAAA,GACA,MAAA,GACA,mFAAA,GACA,MAAA,GACA,8EAAA;AACA,IAAA,OAAA,GAAA;EACA,GAAA,EAAA,CAAA,CAAA;EACA,KAAA,GAAA;IACA,OAAA,CAAA,KAAA,CAAA,8BAAA,CAAA;IACA,OAAA,CAAA,CAAA;EACA,CAAA;EACA,OAAA,GAAA;IACA,OAAA,CAAA,KAAA,CAAA,8BAAA,CAAA;IACA,OAAA,IAAA;EACA,CAAA;EACA,iBAAA,GAAA;IACA,OAAA,CAAA,KAAA,CAAA,8BAAA,CAAA;EACA,CAAA;EACA,GAAA,GAAA;IACA,OAAA,CAAA,KAAA,CAAA,8BAAA,CAAA;IACA,OAAA,KAAA;EACA,CAAA;EACA,KAAA,GAAA;IACA,OAAA,CAAA,KAAA,CAAA,8BAAA,CAAA;EACA;AACA,CAAA;AACA,IAAA,OAAA,MAAA,KAAA,WAAA,IAAA,MAAA,CAAA,KAAA,IAAA,MAAA,CAAA,OAAA,EAAA;EACA,OAAA,GAAA,IAAA,KAAA,CAAA,OAAA,EAAA;IACA,GAAA,CAAA,MAAA,EAAA,IAAA,EAAA,QAAA,EAAA;MACA,IAAA,IAAA,KAAA,KAAA,EAAA;QACA,OAAA,CAAA,KAAA,CAAA,8BAAA,CAAA;MACA;MACA,OAAA,OAAA,CAAA,GAAA,CAAA,MAAA,EAAA,IAAA,EAAA,QAAA,CAAA;IACA;EACA,CAAA,CAAA;AACA;AACA,SAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA;EAAA,IAAA,OAAA,uEAAA,CAAA,CAAA;EACA,IAAA,OAAA,GAAA,IAAA;EACA,IAAA,QAAA,GAAA,CAAA;EACA,OAAA,UAAA,GAAA,EAAA;IACA,IAAA,GAAA,GAAA,IAAA,CAAA,GAAA,EAAA;IACA,IAAA,CAAA,QAAA,IAAA,OAAA,CAAA,OAAA,KAAA,KAAA,EAAA;MACA,QAAA,GAAA,GAAA;IACA;IACA,IAAA,SAAA,GAAA,IAAA,IAAA,GAAA,GAAA,QAAA,CAAA;IACA,IAAA,OAAA,GAAA,IAAA;IACA,IAAA,IAAA,GAAA,SAAA;IACA,IAAA,SAAA,IAAA,CAAA,IAAA,SAAA,GAAA,IAAA,EAAA;MACA,IAAA,OAAA,EAAA;QACA,YAAA,CAAA,OAAA,CAAA;QACA,OAAA,GAAA,IAAA;MACA;MACA,QAAA,GAAA,GAAA;MACA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;IACA,CAAA,MACA,IAAA,CAAA,OAAA,IAAA,OAAA,CAAA,QAAA,KAAA,KAAA,EAAA;MACA,OAAA,GAAA,UAAA,CAAA,MAAA;QACA,QAAA,GAAA,OAAA,CAAA,OAAA,KAAA,KAAA,GAAA,CAAA,GAAA,IAAA,CAAA,GAAA,EAAA;QACA,OAAA,GAAA,IAAA;QACA,IAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;MACA,CAAA,EAAA,SAAA,CAAA;IACA;EACA,CAAA;AACA;AACA,SAAA,UAAA,CAAA,MAAA,EAAA,GAAA,EAAA,CAAA,EAAA,SAAA,EAAA;EAAA,IAAA,GAAA,uEAAA,MAAA;EACA,MAAA,QAAA,GAAA,GAAA,CAAA,MAAA,CAAA,wBAAA,CAAA,MAAA,EAAA,GAAA,CAAA;EACA,GAAA,CAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,GAAA,EAAA,SAAA,GACA,CAAA,GACA;IACA,GAAA,CAAA,KAAA,EAAA;MACA,UAAA,CAAA,MAAA;QACA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;MACA,CAAA,EAAA,CAAA,CAAA;MACA,IAAA,QAAA,IAAA,QAAA,CAAA,GAAA,EAAA;QACA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,EAAA,KAAA,CAAA;MACA;IACA;EACA,CAAA,CAAA;EACA,OAAA,MAAA,UAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,IAAA,CAAA,CAAA,EAAA,IAAA,CAAA;AACA;AACA,SAAA,KAAA,CAAA,MAAA,EAAA,IAAA,EAAA,WAAA,EAAA;EACA,IAAA;IACA,IAAA,EAAA,IAAA,IAAA,MAAA,CAAA,EAAA;MACA,OAAA,MAAA,CAAA,CAAA;IACA;IACA,MAAA,QAAA,GAAA,MAAA,CAAA,IAAA,CAAA;IACA,MAAA,OAAA,GAAA,WAAA,CAAA,QAAA,CAAA;IACA,IAAA,OAAA,OAAA,KAAA,UAAA,EAAA;MACA,OAAA,CAAA,SAAA,GAAA,OAAA,CAAA,SAAA,IAAA,CAAA,CAAA;MACA,MAAA,CAAA,gBAAA,CAAA,OAAA,EAAA;QACA,kBAAA,EAAA;UACA,UAAA,EAAA,KAAA;UACA,KAAA,EAAA;QACA;MACA,CAAA,CAAA;IACA;IACA,MAAA,CAAA,IAAA,CAAA,GAAA,OAAA;IACA,OAAA,MAAA;MACA,MAAA,CAAA,IAAA,CAAA,GAAA,QAAA;IACA,CAAA;EACA,CAAA,CACA,OAAA,EAAA,EAAA;IACA,OAAA,MAAA,CAAA,CAAA;EACA;AACA;AACA,SAAA,eAAA,GAAA;EACA,OAAA,MAAA,CAAA,WAAA,IACA,QAAA,CAAA,eAAA,IAAA,QAAA,CAAA,eAAA,CAAA,YAAA,IACA,QAAA,CAAA,IAAA,IAAA,QAAA,CAAA,IAAA,CAAA,YAAA;AACA;AACA,SAAA,cAAA,GAAA;EACA,OAAA,MAAA,CAAA,UAAA,IACA,QAAA,CAAA,eAAA,IAAA,QAAA,CAAA,eAAA,CAAA,WAAA,IACA,QAAA,CAAA,IAAA,IAAA,QAAA,CAAA,IAAA,CAAA,WAAA;AACA;AACA,SAAA,SAAA,CAAA,IAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA;EACA,IAAA,CAAA,IAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,IAAA,IAAA,CAAA,QAAA,KAAA,IAAA,CAAA,YAAA,EAAA;IACA,IAAA,SAAA,GAAA,KAAA;IACA,MAAA,WAAA,GAAA,eAAA,IAAA,IAAA,CAAA,OAAA,CAAA,eAAA,CAAA;IACA,IAAA,OAAA,UAAA,KAAA,QAAA,EAAA;MACA,IAAA,IAAA,CAAA,OAAA,KAAA,SAAA,EAAA;QACA,SAAA,GACA,CAAA,WAAA,IACA,IAAA,CAAA,OAAA,CAAA,GAAA,GAAA,UAAA,CAAA,KAAA,IAAA;MACA,CAAA,MACA;QACA,SAAA,GACA,CAAA,WAAA,IAAA,IAAA,CAAA,SAAA,CAAA,QAAA,CAAA,UAAA,CAAA;MACA;IACA,CAAA,MACA;MACA,CAAA,WAAA,IACA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,SAAA,IAAA;QACA,IAAA,UAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA;UACA,SAAA,GAAA,IAAA;QACA;MACA,CAAA,CAAA;IACA;IACA,IAAA,CAAA,SAAA,IAAA,aAAA,EAAA;MACA,SAAA,GAAA,IAAA,CAAA,OAAA,CAAA,aAAA,CAAA;IACA;IACA,OAAA,CAAA,WAAA,IAAA,SAAA,IACA,SAAA,CAAA,IAAA,CAAA,UAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA;EACA;EACA,IAAA,IAAA,CAAA,QAAA,KAAA,IAAA,CAAA,SAAA,EAAA;IACA,OAAA,SAAA,CAAA,IAAA,CAAA,UAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA;EACA;EACA,OAAA,SAAA,CAAA,IAAA,CAAA,UAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA;AACA;AACA,SAAA,SAAA,CAAA,CAAA,EAAA;EACA,IAAA,MAAA,IAAA,CAAA,EAAA;IACA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,KAAA,YAAA;EACA;EACA,OAAA,KAAA;AACA;AACA,SAAA,iBAAA,CAAA,MAAA,EAAA,MAAA,EAAA;EACA,IAAA,YAAA,CAAA,MAAA,CAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA;EACA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;EACA,IAAA,MAAA,CAAA,UAAA,IACA,MAAA,CAAA,UAAA,CAAA,QAAA,KAAA,MAAA,CAAA,aAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,IAAA,CAAA,MAAA,CAAA,UAAA,EAAA;IACA,OAAA,IAAA;EACA;EACA,OAAA,iBAAA,CAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA;AACA;AACA,SAAA,YAAA,CAAA,KAAA,EAAA;EACA,OAAA,OAAA,CAAA,KAAA,CAAA,cAAA,CAAA;AACA;AACA,SAAA,QAAA,GAAA;EAAA,IAAA,GAAA,uEAAA,MAAA;EACA,IAAA,UAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,EAAA;IACA,GAAA,CAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,KAAA,CAAA,SAAA,CACA,OAAA;EACA;EACA,IAAA,cAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,YAAA,CAAA,SAAA,CAAA,OAAA,EAAA;IACA,GAAA,CAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAA,KAAA,CAAA,SAAA,CACA,OAAA;EACA;EACA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,EAAA;IACA,IAAA,CAAA,SAAA,CAAA,QAAA,GAAA,SAAA,QAAA,CAAA,IAAA,EAAA;MACA,IAAA,EAAA,CAAA,IAAA,SAAA,CAAA,EAAA;QACA,MAAA,IAAA,SAAA,CAAA,wBAAA,CAAA;MACA;MACA,GAAA;QACA,IAAA,IAAA,KAAA,IAAA,EAAA;UACA,OAAA,IAAA;QACA;MACA,CAAA,QAAA,IAAA,GAAA,IAAA,IAAA,IAAA,CAAA,UAAA;MACA,OAAA,KAAA;IACA,CAAA;EACA;AACA;AAkMA,SAAA,aAAA,CAAA,IAAA,EAAA;EACA,IAAA,MAAA,IAAA,IAAA,EAAA;IACA,OAAA,IAAA,CAAA,IAAA,CAAA,IAAA,KAAA,UAAA,CAAA,OAAA,IAAA,IAAA,CAAA,IAAA,CAAA,OAAA,KAAA,QAAA;EACA;EACA,OAAA,KAAA;AACA;AAwBA,SAAA,aAAA,CAAA,CAAA,EAAA;EACA,OAAA,OAAA,CAAA,CAAA,KAAA,IAAA,IAAA,CAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAAA,UAAA,CAAA;AACA;ACzcA,SAAA,kBAAA,CAAA,CAAA,EAAA;EACA,OAAA,MAAA,IAAA,CAAA;AACA;AACA,MAAA,gBAAA,CAAA;EACA,WAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,CAAA;IACA,IAAA,CAAA,IAAA,GAAA,IAAA;EACA;EACA,GAAA,CAAA,QAAA,EAAA;IACA,IAAA,QAAA,IAAA,IAAA,CAAA,MAAA,EAAA;MACA,MAAA,IAAA,KAAA,CAAA,gCAAA,CAAA;IACA;IACA,IAAA,OAAA,GAAA,IAAA,CAAA,IAAA;IACA,KAAA,IAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,QAAA,EAAA,KAAA,EAAA,EAAA;MACA,OAAA,GAAA,CAAA,OAAA,KAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,IAAA,KAAA,IAAA;IACA;IACA,OAAA,OAAA;EACA;EACA,OAAA,CAAA,CAAA,EAAA;IACA,MAAA,IAAA,GAAA;MACA,KAAA,EAAA,CAAA;MACA,QAAA,EAAA,IAAA;MACA,IAAA,EAAA;IACA,CAAA;IACA,CAAA,CAAA,IAAA,GAAA,IAAA;IACA,IAAA,CAAA,CAAA,eAAA,IAAA,kBAAA,CAAA,CAAA,CAAA,eAAA,CAAA,EAAA;MACA,MAAA,OAAA,GAAA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA;MACA,IAAA,CAAA,IAAA,GAAA,OAAA;MACA,IAAA,CAAA,QAAA,GAAA,CAAA,CAAA,eAAA,CAAA,IAAA;MACA,CAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,GAAA,IAAA;MACA,IAAA,OAAA,EAAA;QACA,OAAA,CAAA,QAAA,GAAA,IAAA;MACA;IACA,CAAA,MACA,IAAA,CAAA,CAAA,WAAA,IACA,kBAAA,CAAA,CAAA,CAAA,WAAA,CAAA,IACA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAA,QAAA,EAAA;MACA,MAAA,OAAA,GAAA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAA,QAAA;MACA,IAAA,CAAA,QAAA,GAAA,OAAA;MACA,IAAA,CAAA,IAAA,GAAA,CAAA,CAAA,WAAA,CAAA,IAAA;MACA,CAAA,CAAA,WAAA,CAAA,IAAA,CAAA,QAAA,GAAA,IAAA;MACA,IAAA,OAAA,EAAA;QACA,OAAA,CAAA,IAAA,GAAA,IAAA;MACA;IACA,CAAA,MACA;MACA,IAAA,IAAA,CAAA,IAAA,EAAA;QACA,IAAA,CAAA,IAAA,CAAA,QAAA,GAAA,IAAA;MACA;MACA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA,IAAA;MACA,IAAA,CAAA,IAAA,GAAA,IAAA;IACA;IACA,IAAA,CAAA,MAAA,EAAA;EACA;EACA,UAAA,CAAA,CAAA,EAAA;IACA,MAAA,OAAA,GAAA,CAAA,CAAA,IAAA;IACA,IAAA,CAAA,IAAA,CAAA,IAAA,EAAA;MACA;IACA;IACA,IAAA,CAAA,OAAA,CAAA,QAAA,EAAA;MACA,IAAA,CAAA,IAAA,GAAA,OAAA,CAAA,IAAA;MACA,IAAA,IAAA,CAAA,IAAA,EAAA;QACA,IAAA,CAAA,IAAA,CAAA,QAAA,GAAA,IAAA;MACA;IACA,CAAA,MACA;MACA,OAAA,CAAA,QAAA,CAAA,IAAA,GAAA,OAAA,CAAA,IAAA;MACA,IAAA,OAAA,CAAA,IAAA,EAAA;QACA,OAAA,CAAA,IAAA,CAAA,QAAA,GAAA,OAAA,CAAA,QAAA;MACA;IACA;IACA,IAAA,CAAA,CAAA,IAAA,EAAA;MACA,OAAA,CAAA,CAAA,IAAA;IACA;IACA,IAAA,CAAA,MAAA,EAAA;EACA;AACA;AACA,MAAA,OAAA,GAAA,CAAA,EAAA,EAAA,QAAA,KAAA,GAAA,EAAA,IAAA,QAAA,EAAA;AACA,SAAA,OAAA,CAAA,CAAA,EAAA;EACA,OAAA,MAAA,IAAA,CAAA;AACA;AACA,MAAA,cAAA,CAAA;EACA,WAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;IACA,IAAA,CAAA,KAAA,GAAA,EAAA;IACA,IAAA,CAAA,UAAA,GAAA,EAAA;IACA,IAAA,CAAA,OAAA,GAAA,EAAA;IACA,IAAA,CAAA,UAAA,GAAA,EAAA;IACA,IAAA,CAAA,QAAA,GAAA,CAAA,CAAA;IACA,IAAA,CAAA,QAAA,GAAA,IAAA,GAAA,EAAA;IACA,IAAA,CAAA,QAAA,GAAA,IAAA,GAAA,EAAA;IACA,IAAA,CAAA,UAAA,GAAA,IAAA,GAAA,EAAA;IACA,IAAA,CAAA,gBAAA,GAAA,SAAA,IAAA;MACA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,eAAA,CAAA;MACA,IAAA,CAAA,IAAA,EAAA;IACA,CAAA;IACA,IAAA,CAAA,IAAA,GAAA,MAAA;MACA,IAAA,IAAA,CAAA,MAAA,IAAA,IAAA,CAAA,MAAA,EAAA;QACA;MACA;MACA,MAAA,IAAA,GAAA,EAAA;MACA,MAAA,OAAA,GAAA,IAAA,gBAAA,EAAA;MACA,MAAA,SAAA,GAAA,CAAA,IAAA;QACA,IAAA,EAAA,GAAA,CAAA;QACA,IAAA,MAAA,GAAA,YAAA;QACA,OAAA,MAAA,KAAA,YAAA,EAAA;UACA,EAAA,GAAA,EAAA,IAAA,EAAA,CAAA,WAAA;UACA,MAAA,GAAA,EAAA,IAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA,CAAA;QACA;QACA,OAAA,MAAA;MACA,CAAA;MACA,MAAA,OAAA,GAAA,CAAA,IAAA;QACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;QACA,MAAA,UAAA,GAAA,CAAA,CAAA,WAAA,GACA,CAAA,EAAA,GAAA,CAAA,CAAA,WAAA,EAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,GACA,IAAA;QACA,IAAA,cAAA,GAAA,UAAA;QACA,OAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,cAAA,KAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA,WAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,cAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,EACA,cAAA,GACA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,cAAA,KAAA,IAAA,IAAA,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA,WAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,cAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,KACA,IAAA;QACA,MAAA,QAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,CAAA,CAAA,KACA,CAAA,cAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,QAAA,CAAA,cAAA,CAAA,CAAA;QACA,IAAA,CAAA,CAAA,CAAA,UAAA,IAAA,QAAA,EAAA;UACA;QACA;QACA,MAAA,QAAA,GAAA,YAAA,CAAA,CAAA,CAAA,UAAA,CAAA,GACA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,GACA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA,UAAA,CAAA;QACA,MAAA,MAAA,GAAA,SAAA,CAAA,CAAA,CAAA;QACA,IAAA,QAAA,KAAA,CAAA,CAAA,IAAA,MAAA,KAAA,CAAA,CAAA,EAAA;UACA,OAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA;QACA;QACA,IAAA,EAAA,GAAA,mBAAA,CAAA,CAAA,EAAA;UACA,GAAA,EAAA,IAAA,CAAA,GAAA;UACA,GAAA,EAAA,IAAA,CAAA,MAAA,CAAA,GAAA;UACA,UAAA,EAAA,IAAA,CAAA,UAAA;UACA,aAAA,EAAA,IAAA,CAAA,aAAA;UACA,eAAA,EAAA,IAAA,CAAA,eAAA;UACA,aAAA,EAAA,IAAA,CAAA,aAAA;UACA,gBAAA,EAAA,IAAA,CAAA,gBAAA;UACA,kBAAA,EAAA,IAAA,CAAA,kBAAA;UACA,iBAAA,EAAA,IAAA,CAAA,iBAAA;UACA,mBAAA,EAAA,IAAA,CAAA,mBAAA;UACA,SAAA,EAAA,IAAA;UACA,gBAAA,EAAA,IAAA,CAAA,gBAAA;UACA,WAAA,EAAA,IAAA,CAAA,WAAA;UACA,gBAAA,EAAA,IAAA,CAAA,gBAAA;UACA,UAAA,EAAA,IAAA,CAAA,UAAA;UACA,WAAA,EAAA,IAAA,CAAA,WAAA;UACA,cAAA,EAAA,IAAA,CAAA,cAAA;UACA,YAAA,EAAA,IAAA,CAAA,YAAA;UACA,YAAA,EAAA,IAAA,CAAA,YAAA;UACA,WAAA,EAAA,QAAA,IAAA;YACA,IAAA,aAAA,CAAA,QAAA,CAAA,EAAA;cACA,IAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA;YACA;YACA,IAAA,aAAA,CAAA,CAAA,CAAA,EAAA;cACA,IAAA,CAAA,gBAAA,CAAA,aAAA,CAAA,CAAA,CAAA,UAAA,EAAA,QAAA,CAAA;YACA;UACA,CAAA;UACA,YAAA,EAAA,CAAA,MAAA,EAAA,OAAA,KAAA;YACA,IAAA,CAAA,aAAA,CAAA,YAAA,CAAA,MAAA,EAAA,OAAA,CAAA;YACA,IAAA,CAAA,gBAAA,CAAA,mBAAA,CAAA,MAAA,CAAA;UACA;QACA,CAAA,CAAA;QACA,IAAA,EAAA,EAAA;UACA,IAAA,CAAA,IAAA,CAAA;YACA,QAAA;YACA,MAAA;YACA,IAAA,EAAA;UACA,CAAA,CAAA;QACA;MACA,CAAA;MACA,OAAA,IAAA,CAAA,UAAA,CAAA,MAAA,EAAA;QACA,IAAA,CAAA,MAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,UAAA,CAAA,KAAA,EAAA,CAAA;MACA;MACA,KAAA,MAAA,CAAA,IAAA,IAAA,CAAA,QAAA,EAAA;QACA,IAAA,eAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,IACA,CAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,UAAA,CAAA,EAAA;UACA;QACA;QACA,OAAA,CAAA,CAAA,CAAA;MACA;MACA,KAAA,MAAA,CAAA,IAAA,IAAA,CAAA,QAAA,EAAA;QACA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,UAAA,EAAA,CAAA,CAAA,IACA,CAAA,eAAA,CAAA,IAAA,CAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,EAAA;UACA,OAAA,CAAA,CAAA,CAAA;QACA,CAAA,MACA,IAAA,eAAA,CAAA,IAAA,CAAA,QAAA,EAAA,CAAA,CAAA,EAAA;UACA,OAAA,CAAA,CAAA,CAAA;QACA,CAAA,MACA;UACA,IAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA;QACA;MACA;MACA,IAAA,SAAA,GAAA,IAAA;MACA,OAAA,OAAA,CAAA,MAAA,EAAA;QACA,IAAA,IAAA,GAAA,IAAA;QACA,IAAA,SAAA,EAAA;UACA,MAAA,QAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,UAAA,CAAA;UACA,MAAA,MAAA,GAAA,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA;UACA,IAAA,QAAA,KAAA,CAAA,CAAA,IAAA,MAAA,KAAA,CAAA,CAAA,EAAA;YACA,IAAA,GAAA,SAAA;UACA;QACA;QACA,IAAA,CAAA,IAAA,EAAA;UACA,KAAA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA,KAAA,IAAA,CAAA,EAAA,KAAA,EAAA,EAAA;YACA,MAAA,KAAA,GAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA;YACA,IAAA,KAAA,EAAA;cACA,MAAA,QAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,KAAA,CAAA,UAAA,CAAA;cACA,MAAA,MAAA,GAAA,SAAA,CAAA,KAAA,CAAA,KAAA,CAAA;cACA,IAAA,QAAA,KAAA,CAAA,CAAA,IAAA,MAAA,KAAA,CAAA,CAAA,EAAA;gBACA,IAAA,GAAA,KAAA;gBACA;cACA;YACA;UACA;QACA;QACA,IAAA,CAAA,IAAA,EAAA;UACA,OAAA,OAAA,CAAA,IAAA,EAAA;YACA,OAAA,CAAA,UAAA,CAAA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA;UACA;UACA;QACA;QACA,SAAA,GAAA,IAAA,CAAA,QAAA;QACA,OAAA,CAAA,UAAA,CAAA,IAAA,CAAA,KAAA,CAAA;QACA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA;MACA;MACA,MAAA,OAAA,GAAA;QACA,KAAA,EAAA,IAAA,CAAA,KAAA,CACA,GAAA,CAAA,IAAA,KAAA;UACA,EAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA;UACA,KAAA,EAAA,IAAA,CAAA;QACA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,IAAA,IAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;QACA,UAAA,EAAA,IAAA,CAAA,UAAA,CACA,GAAA,CAAA,SAAA,KAAA;UACA,EAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA;UACA,UAAA,EAAA,SAAA,CAAA;QACA,CAAA,CAAA,CAAA,CACA,MAAA,CAAA,SAAA,IAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,SAAA,CAAA,EAAA,CAAA,CAAA;QACA,OAAA,EAAA,IAAA,CAAA,OAAA;QACA;MACA,CAAA;MACA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,MAAA,IACA,CAAA,OAAA,CAAA,UAAA,CAAA,MAAA,IACA,CAAA,OAAA,CAAA,OAAA,CAAA,MAAA,IACA,CAAA,OAAA,CAAA,IAAA,CAAA,MAAA,EAAA;QACA;MACA;MACA,IAAA,CAAA,KAAA,GAAA,EAAA;MACA,IAAA,CAAA,UAAA,GAAA,EAAA;MACA,IAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,QAAA,GAAA,IAAA,GAAA,EAAA;MACA,IAAA,CAAA,QAAA,GAAA,IAAA,GAAA,EAAA;MACA,IAAA,CAAA,UAAA,GAAA,IAAA,GAAA,EAAA;MACA,IAAA,CAAA,QAAA,GAAA,CAAA,CAAA;MACA,IAAA,CAAA,UAAA,CAAA,OAAA,CAAA;IACA,CAAA;IACA,IAAA,CAAA,eAAA,GAAA,CAAA,IAAA;MACA,IAAA,SAAA,CAAA,CAAA,CAAA,MAAA,CAAA,EAAA;QACA;MACA;MACA,QAAA,CAAA,CAAA,IAAA;QACA,KAAA,eAAA;UAAA;YACA,MAAA,KAAA,GAAA,CAAA,CAAA,MAAA,CAAA,WAAA;YACA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA,eAAA,CAAA,IAAA,KAAA,KAAA,CAAA,CAAA,QAAA,EAAA;cACA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;gBACA,KAAA,EAAA,eAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA,gBAAA,EAAA,IAAA,CAAA,kBAAA,EAAA,IAAA,CAAA,WAAA,CAAA,IAAA,KAAA,GACA,IAAA,CAAA,UAAA,GACA,IAAA,CAAA,UAAA,CAAA,KAAA,CAAA,GACA,KAAA,CAAA,OAAA,CAAA,OAAA,EAAA,GAAA,CAAA,GACA,KAAA;gBACA,IAAA,EAAA,CAAA,CAAA;cACA,CAAA,CAAA;YACA;YACA;UACA;QACA,KAAA,YAAA;UAAA;YACA,MAAA,MAAA,GAAA,CAAA,CAAA,MAAA;YACA,IAAA,KAAA,GAAA,MAAA,CAAA,YAAA,CAAA,CAAA,CAAA,aAAA,CAAA;YACA,IAAA,CAAA,CAAA,aAAA,KAAA,OAAA,EAAA;cACA,KAAA,GAAA,cAAA,CAAA;gBACA,KAAA,EAAA,MAAA;gBACA,iBAAA,EAAA,IAAA,CAAA,iBAAA;gBACA,mBAAA,EAAA,IAAA,CAAA,mBAAA;gBACA,gBAAA,EAAA,IAAA,CAAA,gBAAA;gBACA,OAAA,EAAA,MAAA,CAAA,OAAA;gBACA,IAAA,EAAA,MAAA,CAAA,YAAA,CAAA,MAAA,CAAA;gBACA,KAAA;gBACA,WAAA,EAAA,IAAA,CAAA;cACA,CAAA,CAAA;YACA;YACA,IAAA,SAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA,eAAA,CAAA,IAAA,KAAA,KAAA,CAAA,CAAA,QAAA,EAAA;cACA;YACA;YACA,IAAA,IAAA,GAAA,IAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,IAAA,KAAA,CAAA,CAAA,MAAA,CAAA;YACA,IAAA,CAAA,IAAA,EAAA;cACA,IAAA,GAAA;gBACA,IAAA,EAAA,CAAA,CAAA,MAAA;gBACA,UAAA,EAAA,CAAA;cACA,CAAA;cACA,IAAA,CAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA;YACA;YACA,IAAA,CAAA,CAAA,aAAA,KAAA,MAAA,IACA,CAAA,CAAA,MAAA,CAAA,OAAA,KAAA,OAAA,IACA,CAAA,CAAA,CAAA,QAAA,IAAA,EAAA,EAAA,WAAA,EAAA,KAAA,UAAA,EAAA;cACA,CAAA,CAAA,MAAA,CAAA,YAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;YACA;YACA,IAAA,CAAA,CAAA,aAAA,KAAA,OAAA,EAAA;cACA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,aAAA,CAAA,MAAA,CAAA;cACA,IAAA,CAAA,CAAA,QAAA,EAAA;gBACA,GAAA,CAAA,YAAA,CAAA,OAAA,EAAA,CAAA,CAAA,QAAA,CAAA;cACA;cACA,IAAA,IAAA,CAAA,UAAA,CAAA,KAAA,KAAA,SAAA,IACA,IAAA,CAAA,UAAA,CAAA,KAAA,KAAA,IAAA,EAAA;gBACA,IAAA,CAAA,UAAA,CAAA,KAAA,GAAA,CAAA,CAAA;cACA;cACA,IAAA;gBACA,MAAA,QAAA,GAAA,IAAA,CAAA,UAAA,CAAA,KAAA;gBACA,KAAA,MAAA,KAAA,IAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,EAAA;kBACA,MAAA,QAAA,GAAA,MAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,KAAA,CAAA;kBACA,MAAA,WAAA,GAAA,MAAA,CAAA,KAAA,CAAA,mBAAA,CAAA,KAAA,CAAA;kBACA,IAAA,QAAA,KAAA,GAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,IACA,WAAA,KAAA,GAAA,CAAA,KAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,EAAA;oBACA,IAAA,WAAA,KAAA,EAAA,EAAA;sBACA,QAAA,CAAA,KAAA,CAAA,GAAA,QAAA;oBACA,CAAA,MACA;sBACA,QAAA,CAAA,KAAA,CAAA,GAAA,CAAA,QAAA,EAAA,WAAA,CAAA;oBACA;kBACA;gBACA;gBACA,KAAA,MAAA,KAAA,IAAA,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,EAAA;kBACA,IAAA,MAAA,CAAA,KAAA,CAAA,gBAAA,CAAA,KAAA,CAAA,KAAA,EAAA,EAAA;oBACA,QAAA,CAAA,KAAA,CAAA,GAAA,KAAA;kBACA;gBACA;cACA,CAAA,CACA,OAAA,KAAA,EAAA;gBACA,OAAA,CAAA,IAAA,CAAA,uDAAA,EAAA,KAAA,CAAA;cACA;YACA,CAAA,MACA;cACA,MAAA,OAAA,GAAA,CAAA,CAAA,MAAA;cACA,IAAA,CAAA,UAAA,CAAA,CAAA,CAAA,aAAA,CAAA,GAAA,kBAAA,CAAA,IAAA,CAAA,GAAA,EAAA,OAAA,EAAA,OAAA,CAAA,OAAA,EAAA,CAAA,CAAA,aAAA,EAAA,KAAA,EAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,kBAAA,EAAA,IAAA,CAAA,UAAA,CAAA;YACA;YACA;UACA;QACA,KAAA,WAAA;UAAA;YACA,CAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA,IAAA,IAAA,CAAA,OAAA,CAAA,CAAA,EAAA,CAAA,CAAA,MAAA,CAAA,CAAA;YACA,CAAA,CAAA,YAAA,CAAA,OAAA,CAAA,CAAA,IAAA;cACA,MAAA,MAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA;cACA,MAAA,QAAA,GAAA,YAAA,CAAA,CAAA,CAAA,MAAA,CAAA,GACA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GACA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,CAAA,CAAA,MAAA,CAAA;cACA,IAAA,SAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA,eAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,EAAA;gBACA;cACA;cACA,IAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,EAAA;gBACA,UAAA,CAAA,IAAA,CAAA,QAAA,EAAA,CAAA,CAAA;gBACA,IAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA;cACA,CAAA,MACA,IAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,MAAA,KAAA,CAAA,CAAA,EAAA,CAAA,KACA,IAAA,iBAAA,CAAA,CAAA,CAAA,MAAA,EAAA,IAAA,CAAA,MAAA,CAAA,EAAA,CAAA,KACA,IAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA,IACA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA,EAAA;gBACA,UAAA,CAAA,IAAA,CAAA,QAAA,EAAA,CAAA,CAAA;cACA,CAAA,MACA;gBACA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA;kBACA,QAAA;kBACA,EAAA,EAAA,MAAA;kBACA,QAAA,EAAA,YAAA,CAAA,CAAA,CAAA,MAAA,CAAA,GAAA,IAAA,GAAA;gBACA,CAAA,CAAA;cACA;cACA,IAAA,CAAA,UAAA,CAAA,IAAA,CAAA,CAAA,CAAA;YACA,CAAA,CAAA;YACA;UACA;MAAA;IAEA,CAAA;IACA,IAAA,CAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,KAAA;MACA,IAAA,MAAA,IAAA,SAAA,CAAA,MAAA,EAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA,eAAA,CAAA,EAAA;QACA;MACA;MACA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA;QACA,IAAA,SAAA,CAAA,CAAA,CAAA,EAAA;UACA;QACA;QACA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;QACA,IAAA,QAAA,GAAA,IAAA;QACA,IAAA,MAAA,IAAA,OAAA,CAAA,MAAA,CAAA,EAAA;UACA,QAAA,GAAA,MAAA,CAAA,IAAA,CAAA,EAAA;QACA;QACA,IAAA,QAAA,EAAA;UACA,IAAA,CAAA,QAAA,CAAA,OAAA,CAAA,CAAA,CAAA,IAAA,CAAA,EAAA,EAAA,QAAA,CAAA,CAAA,GAAA,IAAA;QACA;MACA,CAAA,MACA;QACA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;QACA,IAAA,CAAA,UAAA,CAAA,MAAA,CAAA,CAAA,CAAA;MACA;MACA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA,eAAA,CAAA,EACA,CAAA,CAAA,UAAA,CAAA,OAAA,CAAA,MAAA,IAAA,IAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;IACA,CAAA;EACA;EACA,IAAA,CAAA,OAAA,EAAA;IACA,CACA,YAAA,EACA,YAAA,EACA,eAAA,EACA,iBAAA,EACA,eAAA,EACA,kBAAA,EACA,oBAAA,EACA,mBAAA,EACA,qBAAA,EACA,kBAAA,EACA,aAAA,EACA,kBAAA,EACA,YAAA,EACA,aAAA,EACA,cAAA,EACA,cAAA,EACA,gBAAA,EACA,KAAA,EACA,QAAA,EACA,eAAA,EACA,kBAAA,EACA,eAAA,CACA,CAAA,OAAA,CAAA,GAAA,IAAA;MACA,IAAA,CAAA,GAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA;IACA,CAAA,CAAA;EACA;EACA,MAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,IAAA;IACA,IAAA,CAAA,aAAA,CAAA,MAAA,EAAA;EACA;EACA,QAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;IACA,IAAA,CAAA,aAAA,CAAA,QAAA,EAAA;IACA,IAAA,CAAA,IAAA,EAAA;EACA;EACA,QAAA,GAAA;IACA,OAAA,IAAA,CAAA,MAAA;EACA;EACA,IAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,IAAA;IACA,IAAA,CAAA,aAAA,CAAA,IAAA,EAAA;EACA;EACA,MAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;IACA,IAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IACA,IAAA,CAAA,IAAA,EAAA;EACA;EACA,KAAA,GAAA;IACA,IAAA,CAAA,gBAAA,CAAA,KAAA,EAAA;IACA,IAAA,CAAA,aAAA,CAAA,KAAA,EAAA;EACA;AACA;AACA,SAAA,UAAA,CAAA,OAAA,EAAA,CAAA,EAAA;EACA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;EACA,CAAA,CAAA,UAAA,CAAA,OAAA,CAAA,MAAA,IAAA,UAAA,CAAA,OAAA,EAAA,MAAA,CAAA,CAAA;AACA;AACA,SAAA,eAAA,CAAA,OAAA,EAAA,CAAA,EAAA,MAAA,EAAA;EACA,MAAA;IAAA;EAAA,CAAA,GAAA,CAAA;EACA,IAAA,CAAA,UAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,MAAA,QAAA,GAAA,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA;EACA,IAAA,OAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,KAAA,QAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;EACA,OAAA,eAAA,CAAA,OAAA,EAAA,UAAA,EAAA,MAAA,CAAA;AACA;AACA,SAAA,eAAA,CAAA,GAAA,EAAA,CAAA,EAAA;EACA,MAAA;IAAA;EAAA,CAAA,GAAA,CAAA;EACA,IAAA,CAAA,UAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,IAAA,GAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;EACA,OAAA,eAAA,CAAA,GAAA,EAAA,UAAA,CAAA;AACA;AC1eA,MAAA,eAAA,GAAA,EAAA,IAAA;EACA,MAAA,YAAA,GAAA,YAAA;IACA,IAAA;MACA,OAAA,EAAA,CAAA,YAAA,CAAA;IACA,CAAA,CACA,OAAA,KAAA,EAAA;MACA,IAAA;QACA,KAAA,CAAA,SAAA,GAAA,IAAA;MACA,CAAA,CACA,OAAA,EAAA,EAAA,CACA;MACA,MAAA,KAAA;IACA;EACA,CAAA;EACA,OAAA,YAAA;AACA,CAAA;ACTA,MAAA,eAAA,GAAA,EAAA;AACA,SAAA,cAAA,CAAA,KAAA,EAAA;EACA,IAAA;IACA,IAAA,cAAA,IAAA,KAAA,EAAA;MACA,MAAA,IAAA,GAAA,KAAA,CAAA,YAAA,EAAA;MACA,IAAA,IAAA,CAAA,MAAA,EAAA;QACA,OAAA,IAAA,CAAA,CAAA,CAAA;MACA;IACA,CAAA,MACA,IAAA,MAAA,IAAA,KAAA,IAAA,KAAA,CAAA,IAAA,CAAA,MAAA,EAAA;MACA,OAAA,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA;IACA;EACA,CAAA,CACA,OAAA,EAAA,EAAA,CAAA;EACA,OAAA,KAAA,IAAA,KAAA,CAAA,MAAA;AACA;AACA,SAAA,oBAAA,CAAA,OAAA,EAAA,MAAA,EAAA;EACA,IAAA,EAAA,EAAA,EAAA;EACA,MAAA,cAAA,GAAA,IAAA,cAAA,EAAA;EACA,eAAA,CAAA,IAAA,CAAA,cAAA,CAAA;EACA,cAAA,CAAA,IAAA,CAAA,OAAA,CAAA;EACA,IAAA,oBAAA,GAAA,MAAA,CAAA,gBAAA,IACA,MAAA,CAAA,oBAAA;EACA,MAAA,iBAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,IAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,EAAA,EAAA,kBAAA,CAAA;EACA,IAAA,iBAAA,IACA,MAAA,CAAA,iBAAA,CAAA,EAAA;IACA,oBAAA,GAAA,MAAA,CAAA,iBAAA,CAAA;EACA;EACA,MAAA,QAAA,GAAA,IAAA,oBAAA,CAAA,eAAA,CAAA,SAAA,IAAA;IACA,IAAA,OAAA,CAAA,UAAA,IAAA,OAAA,CAAA,UAAA,CAAA,SAAA,CAAA,KAAA,KAAA,EAAA;MACA;IACA;IACA,cAAA,CAAA,gBAAA,CAAA,SAAA,CAAA;EACA,CAAA,CAAA,CAAA;EACA,QAAA,CAAA,OAAA,CAAA,MAAA,EAAA;IACA,UAAA,EAAA,IAAA;IACA,iBAAA,EAAA,IAAA;IACA,aAAA,EAAA,IAAA;IACA,qBAAA,EAAA,IAAA;IACA,SAAA,EAAA,IAAA;IACA,OAAA,EAAA;EACA,CAAA,CAAA;EACA,OAAA,QAAA;AACA;AACA,SAAA,gBAAA,QAAA;EAAA,IAAA;IAAA,WAAA;IAAA,QAAA;IAAA,GAAA;IAAA;EAAA,CAAA;EACA,IAAA,QAAA,CAAA,SAAA,KAAA,KAAA,EAAA;IACA,OAAA,MAAA,CAAA,CAAA;EACA;EACA,MAAA,SAAA,GAAA,OAAA,QAAA,CAAA,SAAA,KAAA,QAAA,GAAA,QAAA,CAAA,SAAA,GAAA,EAAA;EACA,MAAA,iBAAA,GAAA,OAAA,QAAA,CAAA,iBAAA,KAAA,QAAA,GACA,QAAA,CAAA,iBAAA,GACA,GAAA;EACA,IAAA,SAAA,GAAA,EAAA;EACA,IAAA,YAAA;EACA,MAAA,SAAA,GAAA,QAAA,CAAA,MAAA,IAAA;IACA,MAAA,WAAA,GAAA,IAAA,CAAA,GAAA,EAAA,GAAA,YAAA;IACA,eAAA,CAAA,WAAA,CAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,IAAA;MACA,CAAA,CAAA,UAAA,IAAA,WAAA;MACA,OAAA,CAAA;IACA,CAAA,CAAA,EAAA,MAAA,CAAA;IACA,SAAA,GAAA,EAAA;IACA,YAAA,GAAA,IAAA;EACA,CAAA,EAAA,iBAAA,CAAA;EACA,MAAA,cAAA,GAAA,QAAA,CAAA,GAAA,IAAA;IACA,MAAA,MAAA,GAAA,cAAA,CAAA,GAAA,CAAA;IACA,MAAA;MAAA,OAAA;MAAA;IAAA,CAAA,GAAA,YAAA,CAAA,GAAA,CAAA,GACA,GAAA,CAAA,cAAA,CAAA,CAAA,CAAA,GACA,GAAA;IACA,IAAA,CAAA,YAAA,EAAA;MACA,YAAA,GAAA,IAAA,CAAA,GAAA,EAAA;IACA;IACA,SAAA,CAAA,IAAA,CAAA;MACA,CAAA,EAAA,OAAA;MACA,CAAA,EAAA,OAAA;MACA,EAAA,EAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA;MACA,UAAA,EAAA,IAAA,CAAA,GAAA,EAAA,GAAA;IACA,CAAA,CAAA;IACA,SAAA,CAAA,OAAA,SAAA,KAAA,WAAA,IAAA,GAAA,YAAA,SAAA,GACA,iBAAA,CAAA,IAAA,GACA,GAAA,YAAA,UAAA,GACA,iBAAA,CAAA,SAAA,GACA,iBAAA,CAAA,SAAA,CAAA;EACA,CAAA,EAAA,SAAA,EAAA;IACA,QAAA,EAAA;EACA,CAAA,CAAA;EACA,MAAA,QAAA,GAAA,CACA,EAAA,CAAA,WAAA,EAAA,eAAA,CAAA,cAAA,CAAA,EAAA,GAAA,CAAA,EACA,EAAA,CAAA,WAAA,EAAA,eAAA,CAAA,cAAA,CAAA,EAAA,GAAA,CAAA,EACA,EAAA,CAAA,MAAA,EAAA,eAAA,CAAA,cAAA,CAAA,EAAA,GAAA,CAAA,CACA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,4BAAA,QAAA;EAAA,IAAA;IAAA,kBAAA;IAAA,GAAA;IAAA,MAAA;IAAA,UAAA;IAAA,aAAA;IAAA,eAAA;IAAA;EAAA,CAAA;EACA,IAAA,QAAA,CAAA,gBAAA,KAAA,KAAA,EAAA;IACA,OAAA,MAAA,CAAA,CAAA;EACA;EACA,MAAA,UAAA,GAAA,QAAA,CAAA,gBAAA,KAAA,IAAA,IACA,QAAA,CAAA,gBAAA,KAAA,SAAA,GACA,CAAA,CAAA,GACA,QAAA,CAAA,gBAAA;EACA,MAAA,QAAA,GAAA,EAAA;EACA,MAAA,UAAA,GAAA,QAAA,IAAA;IACA,OAAA,KAAA,IAAA;MACA,MAAA,MAAA,GAAA,cAAA,CAAA,KAAA,CAAA;MACA,IAAA,SAAA,CAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA,EAAA;QACA;MACA;MACA,MAAA,CAAA,GAAA,YAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,cAAA,CAAA,CAAA,CAAA,GAAA,KAAA;MACA,IAAA,CAAA,CAAA,EAAA;QACA;MACA;MACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA;MACA,MAAA;QAAA,OAAA;QAAA;MAAA,CAAA,GAAA,CAAA;MACA,eAAA,CAAA,kBAAA,CAAA,CAAA;QACA,IAAA,EAAA,iBAAA,CAAA,QAAA,CAAA;QACA,EAAA;QACA,CAAA,EAAA,OAAA;QACA,CAAA,EAAA;MACA,CAAA,CAAA;IACA,CAAA;EACA,CAAA;EACA,MAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,CACA,MAAA,CAAA,GAAA,IAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,IACA,CAAA,GAAA,CAAA,QAAA,CAAA,WAAA,CAAA,IACA,UAAA,CAAA,GAAA,CAAA,KAAA,KAAA,CAAA,CACA,OAAA,CAAA,QAAA,IAAA;IACA,MAAA,SAAA,GAAA,QAAA,CAAA,WAAA,EAAA;IACA,MAAA,OAAA,GAAA,eAAA,CAAA,UAAA,CAAA,QAAA,CAAA,CAAA;IACA,QAAA,CAAA,IAAA,CAAA,EAAA,CAAA,SAAA,EAAA,OAAA,EAAA,GAAA,CAAA,CAAA;EACA,CAAA,CAAA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,kBAAA,QAAA;EAAA,IAAA;IAAA,QAAA;IAAA,GAAA;IAAA,MAAA;IAAA,UAAA;IAAA,aAAA;IAAA,eAAA;IAAA;EAAA,CAAA;EACA,MAAA,cAAA,GAAA,QAAA,CAAA,GAAA,IAAA;IACA,MAAA,MAAA,GAAA,cAAA,CAAA,GAAA,CAAA;IACA,IAAA,CAAA,MAAA,IACA,SAAA,CAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA,EAAA;MACA;IACA;IACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA;IACA,IAAA,MAAA,KAAA,GAAA,EAAA;MACA,MAAA,QAAA,GAAA,GAAA,CAAA,gBAAA,IAAA,GAAA,CAAA,eAAA;MACA,eAAA,CAAA,QAAA,CAAA,CAAA;QACA,EAAA;QACA,CAAA,EAAA,QAAA,CAAA,UAAA;QACA,CAAA,EAAA,QAAA,CAAA;MACA,CAAA,CAAA;IACA,CAAA,MACA;MACA,eAAA,CAAA,QAAA,CAAA,CAAA;QACA,EAAA;QACA,CAAA,EAAA,MAAA,CAAA,UAAA;QACA,CAAA,EAAA,MAAA,CAAA;MACA,CAAA,CAAA;IACA;EACA,CAAA,EAAA,QAAA,CAAA,MAAA,IAAA,GAAA,CAAA;EACA,OAAA,EAAA,CAAA,QAAA,EAAA,eAAA,CAAA,cAAA,CAAA,EAAA,GAAA,CAAA;AACA;AACA,SAAA,0BAAA,QAAA;EAAA,IAAA;IAAA;EAAA,CAAA;EACA,IAAA,KAAA,GAAA,CAAA,CAAA;EACA,IAAA,KAAA,GAAA,CAAA,CAAA;EACA,MAAA,eAAA,GAAA,QAAA,CAAA,MAAA;IACA,MAAA,MAAA,GAAA,eAAA,EAAA;IACA,MAAA,KAAA,GAAA,cAAA,EAAA;IACA,IAAA,KAAA,KAAA,MAAA,IAAA,KAAA,KAAA,KAAA,EAAA;MACA,eAAA,CAAA,gBAAA,CAAA,CAAA;QACA,KAAA,EAAA,MAAA,CAAA,KAAA,CAAA;QACA,MAAA,EAAA,MAAA,CAAA,MAAA;MACA,CAAA,CAAA;MACA,KAAA,GAAA,MAAA;MACA,KAAA,GAAA,KAAA;IACA;EACA,CAAA,EAAA,GAAA,CAAA;EACA,OAAA,EAAA,CAAA,QAAA,EAAA,eAAA,CAAA,eAAA,CAAA,EAAA,MAAA,CAAA;AACA;AACA,SAAA,8BAAA,CAAA,CAAA,EAAA,MAAA,EAAA;EACA,MAAA,KAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;EACA,IAAA,CAAA,MAAA,EACA,OAAA,KAAA,CAAA,aAAA;EACA,OAAA,KAAA;AACA;AACA,MAAA,UAAA,GAAA,CAAA,OAAA,EAAA,UAAA,EAAA,QAAA,CAAA;AACA,MAAA,iBAAA,GAAA,IAAA,OAAA,EAAA;AACA,SAAA,iBAAA,QAAA;EAAA,IAAA;IAAA,OAAA;IAAA,GAAA;IAAA,MAAA;IAAA,UAAA;IAAA,aAAA;IAAA,eAAA;IAAA,WAAA;IAAA,cAAA;IAAA,iBAAA;IAAA,mBAAA;IAAA,gBAAA;IAAA,WAAA;IAAA,QAAA;IAAA;EAAA,CAAA;EACA,SAAA,YAAA,CAAA,KAAA,EAAA;IACA,IAAA,MAAA,GAAA,cAAA,CAAA,KAAA,CAAA;IACA,MAAA,OAAA,GAAA,MAAA,IAAA,MAAA,CAAA,OAAA;IACA,MAAA,aAAA,GAAA,KAAA,CAAA,SAAA;IACA,IAAA,OAAA,KAAA,QAAA,EACA,MAAA,GAAA,MAAA,CAAA,aAAA;IACA,IAAA,CAAA,MAAA,IACA,CAAA,OAAA,IACA,UAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,IACA,SAAA,CAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA,EAAA;MACA;IACA;IACA,IAAA,IAAA,GAAA,MAAA,CAAA,IAAA;IACA,IAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,WAAA,CAAA,IACA,cAAA,IAAA,MAAA,CAAA,OAAA,CAAA,cAAA,CAAA,EAAA;MACA;IACA;IACA,IAAA,IAAA,GAAA,MAAA,CAAA,KAAA;IACA,IAAA,SAAA,GAAA,KAAA;IACA,IAAA,MAAA,CAAA,YAAA,CAAA,gBAAA,CAAA,EAAA;MACA,IAAA,GAAA,UAAA;IACA;IACA,IAAA,IAAA,KAAA,OAAA,IAAA,IAAA,KAAA,UAAA,EAAA;MACA,SAAA,GAAA,MAAA,CAAA,OAAA;IACA,CAAA,MACA,IAAA,mBAAA,CAAA;MACA,gBAAA;MACA,iBAAA;MACA,OAAA;MACA;IACA,CAAA,CAAA,EAAA;MACA,IAAA,GAAA,cAAA,CAAA;QACA,KAAA,EAAA,MAAA;QACA,gBAAA;QACA,iBAAA;QACA,mBAAA;QACA,OAAA;QACA,IAAA;QACA,KAAA,EAAA,IAAA;QACA;MACA,CAAA,CAAA;IACA;IACA,WAAA,CAAA,MAAA,EAAA,eAAA,CAAA,8BAAA,CAAA,CAAA;MAAA,IAAA;MAAA,SAAA;MAAA;IAAA,CAAA,EAAA,oBAAA,CAAA,CAAA;IACA,MAAA,IAAA,GAAA,MAAA,CAAA,IAAA;IACA,IAAA,IAAA,KAAA,OAAA,IAAA,IAAA,IAAA,SAAA,EAAA;MACA,GAAA,CACA,gBAAA,CAAA,6BAAA,IAAA,IAAA,CAAA,CACA,OAAA,CAAA,EAAA,IAAA;QACA,IAAA,EAAA,KAAA,MAAA,EAAA;UACA,WAAA,CAAA,EAAA,EAAA,eAAA,CAAA,8BAAA,CAAA,CAAA;YACA,IAAA,EAAA,EAAA,CAAA,KAAA;YACA,SAAA,EAAA,CAAA,SAAA;YACA,aAAA,EAAA;UACA,CAAA,EAAA,oBAAA,CAAA,CAAA;QACA;MACA,CAAA,CAAA;IACA;EACA;EACA,SAAA,WAAA,CAAA,MAAA,EAAA,CAAA,EAAA;IACA,MAAA,cAAA,GAAA,iBAAA,CAAA,GAAA,CAAA,MAAA,CAAA;IACA,IAAA,CAAA,cAAA,IACA,cAAA,CAAA,IAAA,KAAA,CAAA,CAAA,IAAA,IACA,cAAA,CAAA,SAAA,KAAA,CAAA,CAAA,SAAA,EAAA;MACA,iBAAA,CAAA,GAAA,CAAA,MAAA,EAAA,CAAA,CAAA;MACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA;MACA,OAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA;QAAA;MAAA,CAAA,CAAA,CAAA;IACA;EACA;EACA,MAAA,MAAA,GAAA,QAAA,CAAA,KAAA,KAAA,MAAA,GAAA,CAAA,QAAA,CAAA,GAAA,CAAA,OAAA,EAAA,QAAA,CAAA;EACA,MAAA,QAAA,GAAA,MAAA,CAAA,GAAA,CAAA,SAAA,IAAA,EAAA,CAAA,SAAA,EAAA,eAAA,CAAA,YAAA,CAAA,EAAA,GAAA,CAAA,CAAA;EACA,MAAA,kBAAA,GAAA,MAAA,CAAA,wBAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,OAAA,CAAA;EACA,MAAA,cAAA,GAAA,CACA,CAAA,gBAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EACA,CAAA,gBAAA,CAAA,SAAA,EAAA,SAAA,CAAA,EACA,CAAA,iBAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EACA,CAAA,mBAAA,CAAA,SAAA,EAAA,OAAA,CAAA,EACA,CAAA,iBAAA,CAAA,SAAA,EAAA,eAAA,CAAA,EACA,CAAA,iBAAA,CAAA,SAAA,EAAA,UAAA,CAAA,CACA;EACA,IAAA,kBAAA,IAAA,kBAAA,CAAA,GAAA,EAAA;IACA,QAAA,CAAA,IAAA,CAAA,GAAA,cAAA,CAAA,GAAA,CAAA,CAAA,IAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA;MACA,GAAA,GAAA;QACA,eAAA,CAAA,YAAA,CAAA,CAAA;UAAA,MAAA,EAAA;QAAA,CAAA,CAAA;MACA;IACA,CAAA,CAAA,CAAA,CAAA;EACA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,yBAAA,CAAA,IAAA,EAAA;EACA,MAAA,SAAA,GAAA,EAAA;EACA,SAAA,OAAA,CAAA,SAAA,EAAA,GAAA,EAAA;IACA,IAAA,gBAAA,CAAA,iBAAA,CAAA,IACA,SAAA,CAAA,UAAA,YAAA,eAAA,IACA,gBAAA,CAAA,cAAA,CAAA,IACA,SAAA,CAAA,UAAA,YAAA,YAAA,IACA,gBAAA,CAAA,iBAAA,CAAA,IACA,SAAA,CAAA,UAAA,YAAA,eAAA,IACA,gBAAA,CAAA,kBAAA,CAAA,IACA,SAAA,CAAA,UAAA,YAAA,gBAAA,EAAA;MACA,MAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,QAAA,CAAA;MACA,MAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA;MACA,GAAA,CAAA,OAAA,CAAA,KAAA,CAAA;IACA,CAAA,MACA;MACA,MAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,gBAAA,CAAA,QAAA,CAAA;MACA,MAAA,KAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA;MACA,GAAA,CAAA,OAAA,CAAA,KAAA,CAAA;IACA;IACA,OAAA,GAAA;EACA;EACA,OAAA,OAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AACA;AACA,SAAA,sBAAA,gBAAA;EAAA,IAAA;IAAA,gBAAA;IAAA;EAAA,CAAA;EAAA,IAAA;IAAA;EAAA,CAAA;EACA,IAAA,CAAA,GAAA,CAAA,aAAA,IAAA,CAAA,GAAA,CAAA,aAAA,CAAA,SAAA,EAAA;IACA,OAAA,MAAA,CAAA,CAAA;EACA;EACA,MAAA,UAAA,GAAA,GAAA,CAAA,aAAA,CAAA,SAAA,CAAA,UAAA;EACA,GAAA,CAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAA,IAAA,KAAA,CAAA,UAAA,EAAA;IACA,KAAA,EAAA,eAAA,CAAA,CAAA,MAAA,EAAA,OAAA,EAAA,aAAA,KAAA;MACA,MAAA,CAAA,IAAA,EAAA,KAAA,CAAA,GAAA,aAAA;MACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA;MACA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA;QACA,gBAAA,CAAA;UACA,EAAA;UACA,IAAA,EAAA,CAAA;YAAA,IAAA;YAAA;UAAA,CAAA;QACA,CAAA,CAAA;MACA;MACA,OAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAA,aAAA,CAAA;IACA,CAAA;EACA,CAAA,CAAA;EACA,MAAA,UAAA,GAAA,GAAA,CAAA,aAAA,CAAA,SAAA,CAAA,UAAA;EACA,GAAA,CAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAA,IAAA,KAAA,CAAA,UAAA,EAAA;IACA,KAAA,EAAA,eAAA,CAAA,CAAA,MAAA,EAAA,OAAA,EAAA,aAAA,KAAA;MACA,MAAA,CAAA,KAAA,CAAA,GAAA,aAAA;MACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA;MACA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA;QACA,gBAAA,CAAA;UACA,EAAA;UACA,OAAA,EAAA,CAAA;YAAA;UAAA,CAAA;QACA,CAAA,CAAA;MACA;MACA,OAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAA,aAAA,CAAA;IACA,CAAA;EACA,CAAA,CAAA;EACA,MAAA,2BAAA,GAAA,CAAA,CAAA;EACA,IAAA,2BAAA,CAAA,iBAAA,CAAA,EAAA;IACA,2BAAA,CAAA,eAAA,GAAA,GAAA,CAAA,eAAA;EACA,CAAA,MACA;IACA,IAAA,2BAAA,CAAA,cAAA,CAAA,EAAA;MACA,2BAAA,CAAA,YAAA,GAAA,GAAA,CAAA,YAAA;IACA;IACA,IAAA,2BAAA,CAAA,kBAAA,CAAA,EAAA;MACA,2BAAA,CAAA,gBAAA,GAAA,GAAA,CAAA,gBAAA;IACA;IACA,IAAA,2BAAA,CAAA,iBAAA,CAAA,EAAA;MACA,2BAAA,CAAA,eAAA,GAAA,GAAA,CAAA,eAAA;IACA;EACA;EACA,MAAA,mBAAA,GAAA,CAAA,CAAA;EACA,MAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA,OAAA,CAAA,UAAA;IAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA;IACA,mBAAA,CAAA,OAAA,CAAA,GAAA;MACA,UAAA,EAAA,IAAA,CAAA,SAAA,CAAA,UAAA;MACA,UAAA,EAAA,IAAA,CAAA,SAAA,CAAA;IACA,CAAA;IACA,IAAA,CAAA,SAAA,CAAA,UAAA,GAAA,IAAA,KAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,CAAA,UAAA,EAAA;MACA,KAAA,EAAA,eAAA,CAAA,CAAA,MAAA,EAAA,OAAA,EAAA,aAAA,KAAA;QACA,MAAA,CAAA,IAAA,EAAA,KAAA,CAAA,GAAA,aAAA;QACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,SAAA,CAAA;QACA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA;UACA,gBAAA,CAAA;YACA,EAAA;YACA,IAAA,EAAA,CACA;cACA,IAAA;cACA,KAAA,EAAA,CACA,GAAA,yBAAA,CAAA,OAAA,CAAA,EACA,KAAA,IAAA,CAAA;YAEA,CAAA;UAEA,CAAA,CAAA;QACA;QACA,OAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAA,aAAA,CAAA;MACA,CAAA;IACA,CAAA,CAAA;IACA,IAAA,CAAA,SAAA,CAAA,UAAA,GAAA,IAAA,KAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,CAAA,UAAA,EAAA;MACA,KAAA,EAAA,eAAA,CAAA,CAAA,MAAA,EAAA,OAAA,EAAA,aAAA,KAAA;QACA,MAAA,CAAA,KAAA,CAAA,GAAA,aAAA;QACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,SAAA,CAAA;QACA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA;UACA,gBAAA,CAAA;YACA,EAAA;YACA,OAAA,EAAA,CACA;cAAA,KAAA,EAAA,CAAA,GAAA,yBAAA,CAAA,OAAA,CAAA,EAAA,KAAA;YAAA,CAAA;UAEA,CAAA,CAAA;QACA;QACA,OAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAA,aAAA,CAAA;MACA,CAAA;IACA,CAAA,CAAA;EACA,CAAA,CAAA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,GAAA,CAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA;IACA,GAAA,CAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA;IACA,MAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA,OAAA,CAAA,UAAA;MAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA;MACA,IAAA,CAAA,SAAA,CAAA,UAAA,GAAA,mBAAA,CAAA,OAAA,CAAA,CAAA,UAAA;MACA,IAAA,CAAA,SAAA,CAAA,UAAA,GAAA,mBAAA,CAAA,OAAA,CAAA,CAAA,UAAA;IACA,CAAA,CAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,4BAAA,iBAAA;EAAA,IAAA;IAAA,kBAAA;IAAA;EAAA,CAAA;EAAA,IAAA;IAAA;EAAA,CAAA;EACA,MAAA,WAAA,GAAA,GAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,WAAA;EACA,GAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,IAAA,KAAA,CAAA,WAAA,EAAA;IACA,KAAA,EAAA,eAAA,CAAA,CAAA,MAAA,EAAA,OAAA,EAAA,aAAA,KAAA;MACA,IAAA,EAAA,EAAA,EAAA;MACA,MAAA,CAAA,QAAA,EAAA,KAAA,EAAA,QAAA,CAAA,GAAA,aAAA;MACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAA,CAAA,UAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,gBAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAA,CAAA;MACA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA;QACA,kBAAA,CAAA;UACA,EAAA;UACA,GAAA,EAAA;YACA,QAAA;YACA,KAAA;YACA;UACA,CAAA;UACA,KAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,UAAA;QACA,CAAA,CAAA;MACA;MACA,OAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAA,aAAA,CAAA;IACA,CAAA;EACA,CAAA,CAAA;EACA,MAAA,cAAA,GAAA,GAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,cAAA;EACA,GAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,IAAA,KAAA,CAAA,cAAA,EAAA;IACA,KAAA,EAAA,eAAA,CAAA,CAAA,MAAA,EAAA,OAAA,EAAA,aAAA,KAAA;MACA,IAAA,EAAA,EAAA,EAAA;MACA,MAAA,CAAA,QAAA,CAAA,GAAA,aAAA;MACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,OAAA,CAAA,UAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,gBAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAA,CAAA;MACA,IAAA,EAAA,KAAA,CAAA,CAAA,EAAA;QACA,kBAAA,CAAA;UACA,EAAA;UACA,MAAA,EAAA;YACA;UACA,CAAA;UACA,KAAA,EAAA,yBAAA,CAAA,OAAA,CAAA,UAAA;QACA,CAAA,CAAA;MACA;MACA,OAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAA,aAAA,CAAA;IACA,CAAA;EACA,CAAA,CAAA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,GAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,WAAA;IACA,GAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,cAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,4BAAA,SAAA;EAAA,IAAA;IAAA,kBAAA;IAAA,UAAA;IAAA,aAAA;IAAA,eAAA;IAAA,MAAA;IAAA;EAAA,CAAA;EACA,MAAA,OAAA,GAAA,IAAA,IAAA,QAAA,CAAA,eAAA,CAAA,KAAA,IAAA;IACA,MAAA,MAAA,GAAA,cAAA,CAAA,KAAA,CAAA;IACA,IAAA,CAAA,MAAA,IACA,SAAA,CAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA,EAAA;MACA;IACA;IACA,MAAA;MAAA,WAAA;MAAA,MAAA;MAAA;IAAA,CAAA,GAAA,MAAA;IACA,kBAAA,CAAA;MACA,IAAA;MACA,EAAA,EAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA;MACA,WAAA;MACA,MAAA;MACA;IACA,CAAA,CAAA;EACA,CAAA,CAAA,EAAA,QAAA,CAAA,KAAA,IAAA,GAAA,CAAA;EACA,MAAA,QAAA,GAAA,CACA,EAAA,CAAA,MAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EACA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EACA,EAAA,CAAA,QAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA,EACA,EAAA,CAAA,cAAA,EAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CACA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,gBAAA,SAAA;EAAA,IAAA;IAAA,MAAA;IAAA;EAAA,CAAA;EACA,MAAA,GAAA,GAAA,GAAA,CAAA,WAAA;EACA,IAAA,CAAA,GAAA,EAAA;IACA,OAAA,MAAA,CAAA,CAAA;EACA;EACA,MAAA,QAAA,GAAA,EAAA;EACA,MAAA,OAAA,GAAA,IAAA,OAAA,EAAA;EACA,MAAA,gBAAA,GAAA,GAAA,CAAA,QAAA;EACA,GAAA,CAAA,QAAA,GAAA,SAAA,QAAA,CAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAA;IACA,MAAA,QAAA,GAAA,IAAA,gBAAA,CAAA,MAAA,EAAA,MAAA,EAAA,WAAA,CAAA;IACA,OAAA,CAAA,GAAA,CAAA,QAAA,EAAA;MACA,MAAA;MACA,MAAA,EAAA,OAAA,MAAA,KAAA,QAAA;MACA,WAAA;MACA,UAAA,EAAA,OAAA,MAAA,KAAA,QAAA,GACA,MAAA,GAEA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA,IAAA,UAAA,CAAA,MAAA,CAAA,CAAA;IACA,CAAA,CAAA;IACA,OAAA,QAAA;EACA,CAAA;EACA,MAAA,cAAA,GAAA,KAAA,CAAA,GAAA,CAAA,KAAA,EAAA,KAAA,EAAA,UAAA,QAAA,EAAA;IACA,OAAA,UAAA,QAAA,EAAA;MACA,UAAA,CAAA,MAAA;QACA,MAAA,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,CAAA;QACA,IAAA,CAAA,EAAA;UACA,MAAA,CAAA,CAAA,CAAA;UACA,OAAA,CAAA,MAAA,CAAA,QAAA,CAAA;QACA;MACA,CAAA,EAAA,CAAA,CAAA;MACA,OAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,CAAA,QAAA,CAAA,CAAA;IACA,CAAA;EACA,CAAA,CAAA;EACA,QAAA,CAAA,IAAA,CAAA,MAAA;IACA,GAAA,CAAA,QAAA,GAAA,gBAAA;EACA,CAAA,CAAA;EACA,QAAA,CAAA,IAAA,CAAA,cAAA,CAAA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,UAAA,CAAA,CAAA,EAAA,KAAA,EAAA;EACA,MAAA;IAAA,UAAA;IAAA,WAAA;IAAA,kBAAA;IAAA,QAAA;IAAA,gBAAA;IAAA,OAAA;IAAA,kBAAA;IAAA,gBAAA;IAAA,kBAAA;IAAA,gBAAA;IAAA;EAAA,CAAA,GAAA,CAAA;EACA,CAAA,CAAA,UAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,QAAA,EAAA;MACA,KAAA,CAAA,QAAA,CAAA,YAAA,CAAA;IACA;IACA,UAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,WAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,SAAA,EAAA;MACA,KAAA,CAAA,SAAA,CAAA,YAAA,CAAA;IACA;IACA,WAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,kBAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,gBAAA,EAAA;MACA,KAAA,CAAA,gBAAA,CAAA,YAAA,CAAA;IACA;IACA,kBAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,QAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,MAAA,EAAA;MACA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA;IACA;IACA,QAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,gBAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,cAAA,EAAA;MACA,KAAA,CAAA,cAAA,CAAA,YAAA,CAAA;IACA;IACA,gBAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,OAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,KAAA,EAAA;MACA,KAAA,CAAA,KAAA,CAAA,YAAA,CAAA;IACA;IACA,OAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,kBAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,eAAA,EAAA;MACA,KAAA,CAAA,eAAA,CAAA,YAAA,CAAA;IACA;IACA,kBAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,gBAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,cAAA,EAAA;MACA,KAAA,CAAA,cAAA,CAAA,YAAA,CAAA;IACA;IACA,gBAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,kBAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,gBAAA,EAAA;MACA,KAAA,CAAA,gBAAA,CAAA,YAAA,CAAA;IACA;IACA,kBAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,gBAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,cAAA,EAAA;MACA,KAAA,CAAA,cAAA,CAAA,YAAA,CAAA;IACA;IACA,gBAAA,CAAA,YAAA,CAAA;EACA,CAAA;EACA,CAAA,CAAA,MAAA,GAAA,YAAA;IACA,IAAA,KAAA,CAAA,IAAA,EAAA;MACA,KAAA,CAAA,IAAA,CAAA,YAAA,CAAA;IACA;IACA,MAAA,CAAA,YAAA,CAAA;EACA,CAAA;AACA;AACA,SAAA,aAAA,CAAA,CAAA,EAAA;EAAA,IAAA,KAAA,uEAAA,CAAA,CAAA;EACA,MAAA,aAAA,GAAA,CAAA,CAAA,GAAA,CAAA,WAAA;EACA,IAAA,CAAA,aAAA,EAAA;IACA,OAAA,MAAA,CAAA,CAAA;EACA;EACA,UAAA,CAAA,CAAA,EAAA,KAAA,CAAA;EACA,MAAA,gBAAA,GAAA,oBAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA;EACA,MAAA,gBAAA,GAAA,gBAAA,CAAA,CAAA,CAAA;EACA,MAAA,uBAAA,GAAA,4BAAA,CAAA,CAAA,CAAA;EACA,MAAA,aAAA,GAAA,kBAAA,CAAA,CAAA,CAAA;EACA,MAAA,qBAAA,GAAA,0BAAA,CAAA,CAAA,CAAA;EACA,MAAA,YAAA,GAAA,iBAAA,CAAA,CAAA,CAAA;EACA,MAAA,uBAAA,GAAA,4BAAA,CAAA,CAAA,CAAA;EACA,MAAA,kBAAA,GAAA,sBAAA,CAAA,CAAA,EAAA;IAAA,GAAA,EAAA;EAAA,CAAA,CAAA;EACA,MAAA,wBAAA,GAAA,4BAAA,CAAA,CAAA,EAAA;IACA,GAAA,EAAA;EACA,CAAA,CAAA;EACA,MAAA,YAAA,GAAA,CAAA,CAAA,YAAA,GAAA,gBAAA,CAAA,CAAA,CAAA,GAAA,MAAA,CAAA,CAAA;EACA,MAAA,cAAA,GAAA,EAAA;EACA,KAAA,MAAA,MAAA,IAAA,CAAA,CAAA,OAAA,EAAA;IACA,cAAA,CAAA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,EAAA,aAAA,EAAA,MAAA,CAAA,OAAA,CAAA,CAAA;EACA;EACA,OAAA,eAAA,CAAA,MAAA;IACA,eAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,EAAA,CAAA;IACA,gBAAA,CAAA,UAAA,EAAA;IACA,gBAAA,EAAA;IACA,uBAAA,EAAA;IACA,aAAA,EAAA;IACA,qBAAA,EAAA;IACA,YAAA,EAAA;IACA,uBAAA,EAAA;IACA,IAAA;MACA,kBAAA,EAAA;MACA,wBAAA,EAAA;IACA,CAAA,CACA,OAAA,CAAA,EAAA,CACA;IACA,YAAA,EAAA;IACA,cAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA;AACA;AACA,SAAA,gBAAA,CAAA,IAAA,EAAA;EACA,OAAA,OAAA,MAAA,CAAA,IAAA,CAAA,KAAA,WAAA;AACA;AACA,SAAA,2BAAA,CAAA,IAAA,EAAA;EACA,OAAA,OAAA,CAAA,OAAA,MAAA,CAAA,IAAA,CAAA,KAAA,WAAA,IACA,MAAA,CAAA,IAAA,CAAA,CAAA,SAAA,IACA,YAAA,IAAA,MAAA,CAAA,IAAA,CAAA,CAAA,SAAA,IACA,YAAA,IAAA,MAAA,CAAA,IAAA,CAAA,CAAA,SAAA,CAAA;AACA;AC5nBA,MAAA,aAAA,CAAA;EACA,WAAA,CAAA,OAAA,EAAA;IACA,IAAA,CAAA,OAAA,GAAA,IAAA,OAAA,EAAA;IACA,IAAA,CAAA,UAAA,GAAA,OAAA,CAAA,UAAA;EACA;EACA,SAAA,CAAA,QAAA,EAAA;IACA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA,QAAA,EAAA,IAAA,CAAA;EACA;EACA,eAAA,CAAA,EAAA,EAAA;IACA,IAAA,CAAA,YAAA,GAAA,EAAA;EACA;EACA,YAAA,CAAA,QAAA,EAAA,OAAA,EAAA;IACA,IAAA,EAAA;IACA,IAAA,CAAA,UAAA,CAAA;MACA,IAAA,EAAA,CACA;QACA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA,EAAA;QACA,MAAA,EAAA,IAAA;QACA,IAAA,EAAA;MACA,CAAA,CACA;MACA,OAAA,EAAA,EAAA;MACA,KAAA,EAAA,EAAA;MACA,UAAA,EAAA,EAAA;MACA,cAAA,EAAA;IACA,CAAA,CAAA;IACA,CAAA,EAAA,GAAA,IAAA,CAAA,YAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,IAAA,EAAA,QAAA,CAAA;EACA;AACA;ACzBA,MAAA,gBAAA,CAAA;EACA,WAAA,CAAA,OAAA,EAAA;IACA,IAAA,CAAA,cAAA,GAAA,EAAA;IACA,IAAA,CAAA,UAAA,GAAA,OAAA,CAAA,UAAA;IACA,IAAA,CAAA,QAAA,GAAA,OAAA,CAAA,QAAA;IACA,IAAA,CAAA,aAAA,GAAA,OAAA,CAAA,aAAA;IACA,IAAA,CAAA,MAAA,GAAA,OAAA,CAAA,MAAA;IACA,MAAA,OAAA,GAAA,IAAA;IACA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA,SAAA,EAAA,cAAA,EAAA,UAAA,QAAA,EAAA;MACA,OAAA,YAAA;QACA,MAAA,UAAA,GAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;QACA,IAAA,IAAA,CAAA,UAAA,EACA,OAAA,CAAA,aAAA,CAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,aAAA,CAAA;QACA,OAAA,UAAA;MACA,CAAA;IACA,CAAA,CAAA,CAAA;EACA;EACA,aAAA,CAAA,UAAA,EAAA,GAAA,EAAA;IACA,oBAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,aAAA,CAAA,EAAA;MAAA,GAAA;MAAA,UAAA,EAAA,IAAA,CAAA,UAAA;MAAA,MAAA,EAAA,IAAA,CAAA,MAAA;MAAA,gBAAA,EAAA;IAAA,CAAA,CAAA,EAAA,UAAA,CAAA;IACA,kBAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,aAAA,CAAA,EAAA;MAAA,QAAA,EAAA,IAAA,CAAA,QAAA;MAAA,GAAA,EAAA,UAAA;MAAA,MAAA,EAAA,IAAA,CAAA;IAAA,CAAA,CAAA,CAAA;EACA;EACA,mBAAA,CAAA,aAAA,EAAA;IACA,IAAA,aAAA,CAAA,aAAA,EAAA;MACA,MAAA,OAAA,GAAA,IAAA;MACA,IAAA,CAAA,cAAA,CAAA,IAAA,CAAA,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,WAAA,CAAA,SAAA,EAAA,cAAA,EAAA,UAAA,QAAA,EAAA;QACA,OAAA,YAAA;UACA,MAAA,UAAA,GAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;UACA,IAAA,IAAA,CAAA,UAAA,EACA,OAAA,CAAA,aAAA,CAAA,IAAA,CAAA,UAAA,EAAA,aAAA,CAAA,eAAA,CAAA;UACA,OAAA,UAAA;QACA,CAAA;MACA,CAAA,CAAA,CAAA;IACA;EACA;EACA,KAAA,GAAA;IACA,IAAA,CAAA,cAAA,CAAA,OAAA,CAAA,YAAA,IAAA,YAAA,EAAA,CAAA;EACA;AACA;;ACxCA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;EACA,IAAA,CAAA,GAAA,CAAA,CAAA;EACA,KAAA,IAAA,CAAA,IAAA,CAAA,EAAA,IAAA,MAAA,CAAA,SAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EACA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;EACA,IAAA,CAAA,IAAA,IAAA,IAAA,OAAA,MAAA,CAAA,qBAAA,KAAA,UAAA,EACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,qBAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;IACA,IAAA,CAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,MAAA,CAAA,SAAA,CAAA,oBAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EACA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;EACA;EACA,OAAA,CAAA;AACA;ACtBA,SAAA,4BAAA,CAAA,EAAA,EAAA,GAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,MAAA,EAAA;EACA,MAAA,QAAA,GAAA,EAAA;EACA,MAAA,OAAA,GAAA,MAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,wBAAA,CAAA,SAAA,CAAA;EACA,KAAA,MAAA,IAAA,IAAA,OAAA,EAAA;IACA,IAAA;MACA,IAAA,OAAA,GAAA,CAAA,wBAAA,CAAA,SAAA,CAAA,IAAA,CAAA,KAAA,UAAA,EAAA;QACA;MACA;MACA,MAAA,cAAA,GAAA,KAAA,CAAA,GAAA,CAAA,wBAAA,CAAA,SAAA,EAAA,IAAA,EAAA,UAAA,QAAA,EAAA;QACA,OAAA,YAAA;UAAA,kCAAA,IAAA;YAAA,IAAA;UAAA;UACA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA,EAAA;YACA,UAAA,CAAA,MAAA;cACA,MAAA,UAAA,GAAA,CAAA,GAAA,IAAA,CAAA;cACA,IAAA,IAAA,KAAA,WAAA,EAAA;gBACA,IAAA,UAAA,CAAA,CAAA,CAAA,IACA,UAAA,CAAA,CAAA,CAAA,YAAA,iBAAA,EAAA;kBACA,MAAA,MAAA,GAAA,UAAA,CAAA,CAAA,CAAA;kBACA,MAAA,GAAA,GAAA,MAAA,CAAA,UAAA,CAAA,IAAA,CAAA;kBACA,IAAA,IAAA,GAAA,GAAA,KAAA,IAAA,IAAA,GAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;kBACA,IAAA,GAAA,GAAA,IAAA,KAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,IAAA,CAAA,IAAA;kBACA,UAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,SAAA,CAAA,GAAA,CAAA;gBACA;cACA;cACA,EAAA,CAAA,IAAA,CAAA,MAAA,EAAA;gBACA,IAAA,EAAA,aAAA,CAAA,IAAA,CAAA;gBACA,QAAA,EAAA,IAAA;gBACA,IAAA,EAAA;cACA,CAAA,CAAA;YACA,CAAA,EAAA,CAAA,CAAA;UACA;UACA,OAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA,CAAA;QACA,CAAA;MACA,CAAA,CAAA;MACA,QAAA,CAAA,IAAA,CAAA,cAAA,CAAA;IACA,CAAA,CACA,OAAA,EAAA,EAAA;MACA,MAAA,WAAA,GAAA,UAAA,CAAA,GAAA,CAAA,wBAAA,CAAA,SAAA,EAAA,IAAA,EAAA;QACA,GAAA,CAAA,CAAA,EAAA;UACA,EAAA,CAAA,IAAA,CAAA,MAAA,EAAA;YACA,IAAA,EAAA,aAAA,CAAA,IAAA,CAAA;YACA,QAAA,EAAA,IAAA;YACA,IAAA,EAAA,CAAA,CAAA,CAAA;YACA,MAAA,EAAA;UACA,CAAA,CAAA;QACA;MACA,CAAA,CAAA;MACA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA;IACA;EACA;EACA,OAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA;AACA;ACrDA,SAAA,yBAAA,CAAA,GAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA;EACA,MAAA,QAAA,GAAA,EAAA;EACA,IAAA;IACA,MAAA,cAAA,GAAA,KAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,SAAA,EAAA,YAAA,EAAA,UAAA,QAAA,EAAA;MACA,OAAA,UAAA,WAAA,EAAA;QACA,IAAA,CAAA,SAAA,CAAA,IAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA,EAAA;UACA,IAAA,EAAA,WAAA,IAAA,IAAA,CAAA,EACA,IAAA,CAAA,SAAA,GAAA,WAAA;QACA;QAAA,mCAJA,IAAA;UAAA,IAAA;QAAA;QAKA,OAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,CAAA,WAAA,EAAA,GAAA,IAAA,CAAA,CAAA;MACA,CAAA;IACA,CAAA,CAAA;IACA,QAAA,CAAA,IAAA,CAAA,cAAA,CAAA;EACA,CAAA,CACA,OAAA,EAAA,EAAA;IACA,OAAA,CAAA,KAAA,CAAA,wDAAA,CAAA;EACA;EACA,OAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA,IAAA,KAAA,GAAA,kEAAA;AACA;AACA,IAAA,MAAA,GAAA,OAAA,UAAA,KAAA,WAAA,GAAA,EAAA,GAAA,IAAA,UAAA,CAAA,GAAA,CAAA;AACA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;EACA,MAAA,CAAA,KAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA;AACA,IAAA,MAAA,GAAA,UAAA,WAAA,EAAA;EACA,IAAA,KAAA,GAAA,IAAA,UAAA,CAAA,WAAA,CAAA;IAAA,CAAA;IAAA,GAAA,GAAA,KAAA,CAAA,MAAA;IAAA,MAAA,GAAA,EAAA;EACA,KAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,IAAA,CAAA,EAAA;IACA,MAAA,IAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA;IACA,MAAA,IAAA,KAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA;IACA,MAAA,IAAA,KAAA,CAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,KAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA;IACA,MAAA,IAAA,KAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA;EACA;EACA,IAAA,GAAA,GAAA,CAAA,KAAA,CAAA,EAAA;IACA,MAAA,GAAA,MAAA,CAAA,SAAA,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,GAAA,CAAA,CAAA,GAAA,GAAA;EACA,CAAA,MACA,IAAA,GAAA,GAAA,CAAA,KAAA,CAAA,EAAA;IACA,MAAA,GAAA,MAAA,CAAA,SAAA,CAAA,CAAA,EAAA,MAAA,CAAA,MAAA,GAAA,CAAA,CAAA,GAAA,IAAA;EACA;EACA,OAAA,MAAA;AACA,CAAA;ACxBA,MAAA,WAAA,GAAA,IAAA,GAAA,EAAA;AACA,SAAA,eAAA,CAAA,GAAA,EAAA,IAAA,EAAA;EACA,IAAA,UAAA,GAAA,WAAA,CAAA,GAAA,CAAA,GAAA,CAAA;EACA,IAAA,CAAA,UAAA,EAAA;IACA,UAAA,GAAA,IAAA,GAAA,EAAA;IACA,WAAA,CAAA,GAAA,CAAA,GAAA,EAAA,UAAA,CAAA;EACA;EACA,IAAA,CAAA,UAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA;IACA,UAAA,CAAA,GAAA,CAAA,IAAA,EAAA,EAAA,CAAA;EACA;EACA,OAAA,UAAA,CAAA,GAAA,CAAA,IAAA,CAAA;AACA;AACA,MAAA,YAAA,GAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,KAAA;EACA,IAAA,CAAA,KAAA,IACA,EAAA,uBAAA,CAAA,KAAA,EAAA,GAAA,CAAA,IAAA,OAAA,KAAA,KAAA,QAAA,CAAA,EACA;EACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,CAAA,IAAA;EACA,MAAA,IAAA,GAAA,eAAA,CAAA,GAAA,EAAA,IAAA,CAAA;EACA,IAAA,KAAA,GAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA;EACA,IAAA,KAAA,KAAA,CAAA,CAAA,EAAA;IACA,KAAA,GAAA,IAAA,CAAA,MAAA;IACA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA;EACA;EACA,OAAA,KAAA;AACA,CAAA;AACA,SAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA;EACA,IAAA,KAAA,YAAA,KAAA,EAAA;IACA,OAAA,KAAA,CAAA,GAAA,CAAA,GAAA,IAAA,YAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;EACA,CAAA,MACA,IAAA,KAAA,KAAA,IAAA,EAAA;IACA,OAAA,KAAA;EACA,CAAA,MACA,IAAA,KAAA,YAAA,YAAA,IACA,KAAA,YAAA,YAAA,IACA,KAAA,YAAA,UAAA,IACA,KAAA,YAAA,WAAA,IACA,KAAA,YAAA,UAAA,IACA,KAAA,YAAA,WAAA,IACA,KAAA,YAAA,UAAA,IACA,KAAA,YAAA,SAAA,IACA,KAAA,YAAA,iBAAA,EAAA;IACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,CAAA,IAAA;IACA,OAAA;MACA,OAAA,EAAA,IAAA;MACA,IAAA,EAAA,CAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA;IACA,CAAA;EACA,CAAA,MACA,IAAA,KAAA,YAAA,WAAA,EAAA;IACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,CAAA,IAAA;IACA,MAAA,MAAA,GAAA,MAAA,CAAA,KAAA,CAAA;IACA,OAAA;MACA,OAAA,EAAA,IAAA;MACA;IACA,CAAA;EACA,CAAA,MACA,IAAA,KAAA,YAAA,QAAA,EAAA;IACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,CAAA,IAAA;IACA,OAAA;MACA,OAAA,EAAA,IAAA;MACA,IAAA,EAAA,CACA,YAAA,CAAA,KAAA,CAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EACA,KAAA,CAAA,UAAA,EACA,KAAA,CAAA,UAAA;IAEA,CAAA;EACA,CAAA,MACA,IAAA,KAAA,YAAA,gBAAA,EAAA;IACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,CAAA,IAAA;IACA,MAAA;MAAA;IAAA,CAAA,GAAA,KAAA;IACA,OAAA;MACA,OAAA,EAAA,IAAA;MACA;IACA,CAAA;EACA,CAAA,MACA,IAAA,KAAA,YAAA,SAAA,EAAA;IACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,CAAA,IAAA;IACA,OAAA;MACA,OAAA,EAAA,IAAA;MACA,IAAA,EAAA,CAAA,YAAA,CAAA,KAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,KAAA,CAAA,KAAA,EAAA,KAAA,CAAA,MAAA;IACA,CAAA;EACA,CAAA,MACA,IAAA,uBAAA,CAAA,KAAA,EAAA,GAAA,CAAA,IAAA,OAAA,KAAA,KAAA,QAAA,EAAA;IACA,MAAA,IAAA,GAAA,KAAA,CAAA,WAAA,CAAA,IAAA;IACA,MAAA,KAAA,GAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,CAAA;IACA,OAAA;MACA,OAAA,EAAA,IAAA;MACA,KAAA,EAAA;IACA,CAAA;EACA;EACA,OAAA,KAAA;AACA;AACA,MAAA,aAAA,GAAA,CAAA,IAAA,EAAA,GAAA,EAAA,GAAA,KAAA;EACA,OAAA,CAAA,GAAA,IAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,YAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AACA,CAAA;AACA,MAAA,uBAAA,GAAA,CAAA,KAAA,EAAA,GAAA,KAAA;EACA,MAAA,qBAAA,GAAA,CACA,iBAAA,EACA,aAAA,EACA,kBAAA,EACA,cAAA,EACA,mBAAA,EACA,aAAA,EACA,4BAAA,EACA,cAAA,EACA,sBAAA,EACA,wBAAA,EACA,2BAAA,CACA;EACA,MAAA,8BAAA,GAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,IAAA,OAAA,GAAA,CAAA,IAAA,CAAA,KAAA,UAAA,CAAA;EACA,OAAA,OAAA,CAAA,8BAAA,CAAA,IAAA,CAAA,IAAA,IAAA,KAAA,YAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,CAAA;AC5GA,SAAA,gBAAA,CAAA,SAAA,EAAA,IAAA,EAAA,EAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA,MAAA,EAAA,GAAA,EAAA;EACA,MAAA,QAAA,GAAA,EAAA;EACA,MAAA,KAAA,GAAA,MAAA,CAAA,mBAAA,CAAA,SAAA,CAAA;EACA,KAAA,MAAA,IAAA,IAAA,KAAA,EAAA;IACA,IAAA;MACA,IAAA,OAAA,SAAA,CAAA,IAAA,CAAA,KAAA,UAAA,EAAA;QACA;MACA;MACA,MAAA,cAAA,GAAA,KAAA,CAAA,SAAA,EAAA,IAAA,EAAA,UAAA,QAAA,EAAA;QACA,OAAA,YAAA;UAAA,mCAAA,IAAA;YAAA,IAAA;UAAA;UACA,MAAA,MAAA,GAAA,QAAA,CAAA,KAAA,CAAA,IAAA,EAAA,IAAA,CAAA;UACA,YAAA,CAAA,MAAA,EAAA,GAAA,EAAA,SAAA,CAAA;UACA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,MAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA,EAAA;YACA,MAAA,EAAA,GAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA;YACA,MAAA,UAAA,GAAA,aAAA,CAAA,CAAA,GAAA,IAAA,CAAA,EAAA,GAAA,EAAA,SAAA,CAAA;YACA,MAAA,QAAA,GAAA;cACA,IAAA;cACA,QAAA,EAAA,IAAA;cACA,IAAA,EAAA;YACA,CAAA;YACA,EAAA,CAAA,IAAA,CAAA,MAAA,EAAA,QAAA,CAAA;UACA;UACA,OAAA,MAAA;QACA,CAAA;MACA,CAAA,CAAA;MACA,QAAA,CAAA,IAAA,CAAA,cAAA,CAAA;IACA,CAAA,CACA,OAAA,EAAA,EAAA;MACA,MAAA,WAAA,GAAA,UAAA,CAAA,SAAA,EAAA,IAAA,EAAA;QACA,GAAA,CAAA,CAAA,EAAA;UACA,EAAA,CAAA,IAAA,CAAA,MAAA,EAAA;YACA,IAAA;YACA,QAAA,EAAA,IAAA;YACA,IAAA,EAAA,CAAA,CAAA,CAAA;YACA,MAAA,EAAA;UACA,CAAA,CAAA;QACA;MACA,CAAA,CAAA;MACA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA;IACA;EACA;EACA,OAAA,QAAA;AACA;AACA,SAAA,+BAAA,CAAA,EAAA,EAAA,GAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA,MAAA,EAAA;EACA,MAAA,QAAA,GAAA,EAAA;EACA,QAAA,CAAA,IAAA,CAAA,GAAA,gBAAA,CAAA,GAAA,CAAA,qBAAA,CAAA,SAAA,EAAA,aAAA,CAAA,KAAA,EAAA,EAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA,MAAA,EAAA,GAAA,CAAA,CAAA;EACA,IAAA,OAAA,GAAA,CAAA,sBAAA,KAAA,WAAA,EAAA;IACA,QAAA,CAAA,IAAA,CAAA,GAAA,gBAAA,CAAA,GAAA,CAAA,sBAAA,CAAA,SAAA,EAAA,aAAA,CAAA,MAAA,EAAA,EAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA,MAAA,EAAA,GAAA,CAAA,CAAA;EACA;EACA,OAAA,MAAA;IACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;EACA,CAAA;AACA;ACnDA,MAAA,aAAA,CAAA;EACA,KAAA,GAAA;IACA,IAAA,CAAA,sBAAA,CAAA,KAAA,EAAA;IACA,IAAA,CAAA,cAAA,IAAA,IAAA,CAAA,cAAA,EAAA;EACA;EACA,MAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,IAAA;EACA;EACA,QAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;EACA;EACA,IAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,IAAA;EACA;EACA,MAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;EACA;EACA,WAAA,CAAA,OAAA,EAAA;IACA,IAAA,CAAA,sBAAA,GAAA,IAAA,GAAA,EAAA;IACA,IAAA,CAAA,SAAA,GAAA;MAAA,QAAA,EAAA,CAAA;MAAA,QAAA,EAAA;IAAA,CAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;IACA,IAAA,CAAA,MAAA,GAAA,KAAA;IACA,IAAA,CAAA,eAAA,GAAA,UAAA,MAAA,EAAA,QAAA,EAAA;MACA,MAAA,QAAA,GAAA,IAAA,CAAA,SAAA,CAAA,QAAA,IACA,IAAA,CAAA,SAAA,CAAA,QAAA,KAAA,IAAA,CAAA,SAAA,CAAA,QAAA;MACA,IAAA,QAAA,IAAA,CAAA,IAAA,CAAA,SAAA,CAAA,QAAA,EACA,IAAA,CAAA,SAAA,CAAA,QAAA,GAAA,IAAA,CAAA,SAAA,CAAA,QAAA;MACA,IAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,MAAA,CAAA,EAAA;QACA,IAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,MAAA,EAAA,EAAA,CAAA;MACA;MACA,IAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,QAAA,CAAA;IACA,CAAA;IACA,IAAA,CAAA,UAAA,GAAA,OAAA,CAAA,UAAA;IACA,IAAA,CAAA,MAAA,GAAA,OAAA,CAAA,MAAA;IACA,IAAA,OAAA,CAAA,YAAA,KAAA,IAAA,EACA,IAAA,CAAA,0BAAA,CAAA,OAAA,CAAA,GAAA,EAAA,OAAA,CAAA,UAAA,EAAA,OAAA,CAAA,aAAA,EAAA,OAAA,CAAA,eAAA,CAAA;EACA;EACA,0BAAA,CAAA,GAAA,EAAA,UAAA,EAAA,eAAA,EAAA,aAAA,EAAA;IACA,IAAA,CAAA,oBAAA,EAAA;IACA,IAAA,CAAA,iCAAA,EAAA;IACA,MAAA,kBAAA,GAAA,yBAAA,CAAA,GAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,CAAA;IACA,MAAA,aAAA,GAAA,4BAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA,GAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA,IAAA,CAAA,MAAA,CAAA;IACA,MAAA,qBAAA,GAAA,+BAAA,CAAA,IAAA,CAAA,eAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA,GAAA,EAAA,UAAA,EAAA,aAAA,EAAA,eAAA,EAAA,IAAA,CAAA,MAAA,CAAA;IACA,IAAA,CAAA,cAAA,GAAA,MAAA;MACA,kBAAA,EAAA;MACA,aAAA,EAAA;MACA,qBAAA,EAAA;IACA,CAAA;EACA;EACA,iCAAA,GAAA;IACA,qBAAA,CAAA,MAAA,IAAA,CAAA,2BAAA,EAAA,CAAA;EACA;EACA,oBAAA,GAAA;IACA,MAAA,qBAAA,GAAA,SAAA,IAAA;MACA,IAAA,CAAA,SAAA,CAAA,QAAA,GAAA,SAAA;MACA,qBAAA,CAAA,qBAAA,CAAA;IACA,CAAA;IACA,qBAAA,CAAA,qBAAA,CAAA;EACA;EACA,2BAAA,GAAA;IACA,IAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,CAAA,MAAA,EAAA,MAAA,KAAA;MACA,MAAA,EAAA,GAAA,IAAA,CAAA,MAAA,CAAA,KAAA,CAAA,MAAA,CAAA;MACA,IAAA,CAAA,6BAAA,CAAA,MAAA,EAAA,EAAA,CAAA;IACA,CAAA,CAAA;IACA,qBAAA,CAAA,MAAA,IAAA,CAAA,2BAAA,EAAA,CAAA;EACA;EACA,6BAAA,CAAA,MAAA,EAAA,EAAA,EAAA;IACA,IAAA,IAAA,CAAA,MAAA,IAAA,IAAA,CAAA,MAAA,EAAA;MACA;IACA;IACA,MAAA,cAAA,GAAA,IAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,MAAA,CAAA;IACA,IAAA,CAAA,cAAA,IAAA,EAAA,KAAA,CAAA,CAAA,EACA;IACA,MAAA,MAAA,GAAA,cAAA,CAAA,GAAA,CAAA,KAAA,IAAA;MACA,MAAA,IAAA,GAAA,MAAA,CAAA,KAAA,EAAA,CAAA,MAAA,CAAA,CAAA;MACA,OAAA,IAAA;IACA,CAAA,CAAA;IACA,MAAA;MAAA;IAAA,CAAA,GAAA,cAAA,CAAA,CAAA,CAAA;IACA,IAAA,CAAA,UAAA,CAAA;MAAA,EAAA;MAAA,IAAA;MAAA,QAAA,EAAA;IAAA,CAAA,CAAA;IACA,IAAA,CAAA,sBAAA,CAAA,MAAA,CAAA,MAAA,CAAA;EACA;AACA;AC7EA,SAAA,SAAA,CAAA,CAAA,EAAA;EACA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA;IAAA,SAAA,EAAA,IAAA,CAAA,GAAA;EAAA,CAAA,CAAA;AACA;AACA,IAAA,WAAA;AACA,IAAA,gBAAA;AACA,MAAA,MAAA,GAAA,YAAA,EAAA;AACA,SAAA,MAAA,GAAA;EAAA,IAAA,OAAA,uEAAA,CAAA,CAAA;EACA,MAAA;IAAA,IAAA;IAAA,gBAAA;IAAA,gBAAA;IAAA,UAAA,GAAA,UAAA;IAAA,aAAA,GAAA,IAAA;IAAA,eAAA,GAAA,IAAA;IAAA,WAAA,GAAA,WAAA;IAAA,cAAA,GAAA,IAAA;IAAA,aAAA,GAAA,SAAA;IAAA,gBAAA,GAAA,IAAA;IAAA,iBAAA,GAAA,IAAA;IAAA,kBAAA,GAAA,IAAA;IAAA,mBAAA,GAAA,IAAA;IAAA,gBAAA,GAAA,IAAA;IAAA,WAAA,GAAA,KAAA;IAAA,aAAA;IAAA,gBAAA,EAAA,iBAAA;IAAA,cAAA,EAAA,eAAA;IAAA,WAAA;IAAA,UAAA;IAAA,KAAA;IAAA,MAAA;IAAA,QAAA,GAAA,CAAA,CAAA;IAAA,aAAA;IAAA,YAAA,GAAA,KAAA;IAAA,oBAAA,GAAA,KAAA;IAAA,YAAA,GAAA,KAAA;IAAA,YAAA,GAAA,KAAA;IAAA,OAAA;IAAA,eAAA,GAAA,MAAA,KAAA;IAAA;EAAA,CAAA,GAAA,OAAA;EACA,IAAA,CAAA,IAAA,EAAA;IACA,MAAA,IAAA,KAAA,CAAA,2BAAA,CAAA;EACA;EACA,IAAA,aAAA,KAAA,SAAA,IAAA,QAAA,CAAA,SAAA,KAAA,SAAA,EAAA;IACA,QAAA,CAAA,SAAA,GAAA,aAAA;EACA;EACA,MAAA,gBAAA,GAAA,aAAA,KAAA,IAAA,GACA;IACA,KAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,gBAAA,EAAA,IAAA;IACA,KAAA,EAAA,IAAA;IACA,KAAA,EAAA,IAAA;IACA,MAAA,EAAA,IAAA;IACA,KAAA,EAAA,IAAA;IACA,MAAA,EAAA,IAAA;IACA,GAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,GAAA,EAAA,IAAA;IACA,IAAA,EAAA,IAAA;IACA,QAAA,EAAA,IAAA;IACA,MAAA,EAAA,IAAA;IACA,KAAA,EAAA,IAAA;IACA,QAAA,EAAA;EACA,CAAA,GACA,iBAAA,KAAA,SAAA,GACA,iBAAA,GACA,CAAA,CAAA;EACA,MAAA,cAAA,GAAA,eAAA,KAAA,IAAA,IAAA,eAAA,KAAA,KAAA,GACA;IACA,MAAA,EAAA,IAAA;IACA,OAAA,EAAA,IAAA;IACA,WAAA,EAAA,IAAA;IACA,cAAA,EAAA,IAAA;IACA,cAAA,EAAA,IAAA;IACA,cAAA,EAAA,IAAA;IACA,iBAAA,EAAA,IAAA;IACA,oBAAA,EAAA,IAAA;IACA,kBAAA,EAAA,eAAA,KAAA,KAAA;IACA,oBAAA,EAAA,eAAA,KAAA;EACA,CAAA,GACA,eAAA,GACA,eAAA,GACA,CAAA,CAAA;EACA,QAAA,EAAA;EACA,IAAA,qBAAA;EACA,IAAA,wBAAA,GAAA,CAAA;EACA,MAAA,cAAA,GAAA,CAAA,IAAA;IACA,KAAA,MAAA,MAAA,IAAA,OAAA,IAAA,EAAA,EAAA;MACA,IAAA,MAAA,CAAA,cAAA,EAAA;QACA,CAAA,GAAA,MAAA,CAAA,cAAA,CAAA,CAAA,CAAA;MACA;IACA;IACA,IAAA,MAAA,EAAA;MACA,CAAA,GAAA,MAAA,CAAA,CAAA,CAAA;IACA;IACA,OAAA,CAAA;EACA,CAAA;EACA,WAAA,GAAA,CAAA,CAAA,EAAA,UAAA,KAAA;IACA,IAAA,EAAA;IACA,IAAA,CAAA,CAAA,EAAA,GAAA,eAAA,CAAA,CAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,QAAA,EAAA,KACA,CAAA,CAAA,IAAA,KAAA,SAAA,CAAA,YAAA,IACA,EAAA,CAAA,CAAA,IAAA,KAAA,SAAA,CAAA,mBAAA,IACA,CAAA,CAAA,IAAA,CAAA,MAAA,KAAA,iBAAA,CAAA,QAAA,CAAA,EAAA;MACA,eAAA,CAAA,OAAA,CAAA,GAAA,IAAA,GAAA,CAAA,QAAA,EAAA,CAAA;IACA;IACA,IAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAA,UAAA,CAAA;IACA,IAAA,CAAA,CAAA,IAAA,KAAA,SAAA,CAAA,YAAA,EAAA;MACA,qBAAA,GAAA,CAAA;MACA,wBAAA,GAAA,CAAA;IACA,CAAA,MACA,IAAA,CAAA,CAAA,IAAA,KAAA,SAAA,CAAA,mBAAA,EAAA;MACA,IAAA,CAAA,CAAA,IAAA,CAAA,MAAA,KAAA,iBAAA,CAAA,QAAA,IACA,CAAA,CAAA,IAAA,CAAA,cAAA,EAAA;QACA;MACA;MACA,wBAAA,EAAA;MACA,MAAA,WAAA,GAAA,gBAAA,IAAA,wBAAA,IAAA,gBAAA;MACA,MAAA,UAAA,GAAA,gBAAA,IACA,CAAA,CAAA,SAAA,GAAA,qBAAA,CAAA,SAAA,GAAA,gBAAA;MACA,IAAA,WAAA,IAAA,UAAA,EAAA;QACA,gBAAA,CAAA,IAAA,CAAA;MACA;IACA;EACA,CAAA;EACA,MAAA,mBAAA,GAAA,CAAA,IAAA;IACA,WAAA,CAAA,SAAA,CAAA;MACA,IAAA,EAAA,SAAA,CAAA,mBAAA;MACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;QAAA,MAAA,EAAA,iBAAA,CAAA;MAAA,CAAA,EAAA,CAAA;IACA,CAAA,CAAA,CAAA;EACA,CAAA;EACA,MAAA,iBAAA,GAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;IACA,IAAA,EAAA,SAAA,CAAA,mBAAA;IACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MAAA,MAAA,EAAA,iBAAA,CAAA;IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA,CAAA;EACA,MAAA,yBAAA,GAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;IACA,IAAA,EAAA,SAAA,CAAA,mBAAA;IACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;MAAA,MAAA,EAAA,iBAAA,CAAA;IAAA,CAAA,EAAA,CAAA;EACA,CAAA,CAAA,CAAA;EACA,MAAA,aAAA,GAAA,IAAA,aAAA,CAAA;IACA,UAAA,EAAA;EACA,CAAA,CAAA;EACA,MAAA,aAAA,GAAA,IAAA,aAAA,CAAA;IACA,YAAA;IACA,UAAA,EAAA,yBAAA;IACA,GAAA,EAAA,MAAA;IACA,UAAA;IACA,aAAA;IACA,eAAA;IACA;EACA,CAAA,CAAA;EACA,MAAA,gBAAA,GAAA,IAAA,gBAAA,CAAA;IACA,UAAA,EAAA,mBAAA;IACA,QAAA,EAAA,iBAAA;IACA,aAAA,EAAA;MACA,UAAA;MACA,UAAA;MACA,aAAA;MACA,eAAA;MACA,aAAA;MACA,gBAAA;MACA,kBAAA;MACA,iBAAA;MACA,mBAAA;MACA,gBAAA;MACA,WAAA;MACA,gBAAA;MACA,UAAA;MACA,WAAA;MACA,YAAA;MACA,YAAA;MACA,QAAA;MACA,cAAA;MACA,aAAA;MACA;IACA,CAAA;IACA;EACA,CAAA,CAAA;EACA,gBAAA,GAAA,YAAA;IAAA,IAAA,UAAA,uEAAA,KAAA;IACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;IACA,WAAA,CAAA,SAAA,CAAA;MACA,IAAA,EAAA,SAAA,CAAA,IAAA;MACA,IAAA,EAAA;QACA,IAAA,EAAA,MAAA,CAAA,QAAA,CAAA,IAAA;QACA,KAAA,EAAA,cAAA,EAAA;QACA,MAAA,EAAA,eAAA;MACA;IACA,CAAA,CAAA,EAAA,UAAA,CAAA;IACA,eAAA,CAAA,OAAA,CAAA,GAAA,IAAA,GAAA,CAAA,IAAA,EAAA,CAAA;IACA,MAAA,CAAA,IAAA,EAAA,SAAA,CAAA,GAAA,QAAA,CAAA,QAAA,EAAA;MACA,UAAA;MACA,aAAA;MACA,eAAA;MACA,aAAA;MACA,gBAAA;MACA,kBAAA;MACA,iBAAA;MACA,mBAAA;MACA,gBAAA;MACA,WAAA;MACA,aAAA,EAAA,gBAAA;MACA,UAAA;MACA,OAAA,EAAA,cAAA;MACA,YAAA;MACA,YAAA;MACA,WAAA,EAAA,CAAA,IAAA;QACA,IAAA,aAAA,CAAA,CAAA,CAAA,EAAA;UACA,aAAA,CAAA,SAAA,CAAA,CAAA,CAAA;QACA;QACA,IAAA,aAAA,CAAA,CAAA,CAAA,EAAA;UACA,gBAAA,CAAA,aAAA,CAAA,CAAA,CAAA,UAAA,EAAA,QAAA,CAAA;QACA;MACA,CAAA;MACA,YAAA,EAAA,CAAA,MAAA,EAAA,OAAA,KAAA;QACA,aAAA,CAAA,YAAA,CAAA,MAAA,EAAA,OAAA,CAAA;QACA,gBAAA,CAAA,mBAAA,CAAA,MAAA,CAAA;MACA,CAAA;MACA;IACA,CAAA,CAAA;IACA,IAAA,CAAA,IAAA,EAAA;MACA,OAAA,OAAA,CAAA,IAAA,CAAA,iCAAA,CAAA;IACA;IACA,MAAA,CAAA,GAAA,GAAA,SAAA;IACA,WAAA,CAAA,SAAA,CAAA;MACA,IAAA,EAAA,SAAA,CAAA,YAAA;MACA,IAAA,EAAA;QACA,IAAA;QACA,aAAA,EAAA;UACA,IAAA,EAAA,MAAA,CAAA,WAAA,KAAA,SAAA,GACA,MAAA,CAAA,WAAA,GACA,CAAA,QAAA,KAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,eAAA,CAAA,UAAA,MACA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAA,KAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,IAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,CAAA,KACA,QAAA,KAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,IAAA,CAAA,UAAA,CAAA,IACA,CAAA;UACA,GAAA,EAAA,MAAA,CAAA,WAAA,KAAA,SAAA,GACA,MAAA,CAAA,WAAA,GACA,CAAA,QAAA,KAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,eAAA,CAAA,SAAA,MACA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,QAAA,KAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,IAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,aAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAA,CAAA,KACA,QAAA,KAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IACA;QACA;MACA;IACA,CAAA,CAAA,CAAA;IACA,eAAA,CAAA,OAAA,CAAA,GAAA,IAAA,GAAA,CAAA,MAAA,EAAA,CAAA;EACA,CAAA;EACA,IAAA;IACA,MAAA,QAAA,GAAA,EAAA;IACA,QAAA,CAAA,IAAA,CAAA,EAAA,CAAA,kBAAA,EAAA,MAAA;MACA,WAAA,CAAA,SAAA,CAAA;QACA,IAAA,EAAA,SAAA,CAAA,gBAAA;QACA,IAAA,EAAA,CAAA;MACA,CAAA,CAAA,CAAA;IACA,CAAA,CAAA,CAAA;IACA,MAAA,OAAA,GAAA,GAAA,IAAA;MACA,IAAA,EAAA;MACA,OAAA,eAAA,CAAA,aAAA,CAAA,CAAA;QACA,UAAA;QACA,UAAA,EAAA,mBAAA;QACA,WAAA,EAAA,CAAA,SAAA,EAAA,MAAA,KAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA;YACA,MAAA;YACA;UACA;QACA,CAAA,CAAA,CAAA;QACA,kBAAA,EAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;YAAA,MAAA,EAAA,iBAAA,CAAA;UAAA,CAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,QAAA,EAAA,iBAAA;QACA,gBAAA,EAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;YAAA,MAAA,EAAA,iBAAA,CAAA;UAAA,CAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,OAAA,EAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;YAAA,MAAA,EAAA,iBAAA,CAAA;UAAA,CAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,kBAAA,EAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;YAAA,MAAA,EAAA,iBAAA,CAAA;UAAA,CAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,gBAAA,EAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;YAAA,MAAA,EAAA,iBAAA,CAAA;UAAA,CAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,kBAAA,EAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;YAAA,MAAA,EAAA,iBAAA,CAAA;UAAA,CAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,gBAAA,EAAA,yBAAA;QACA,MAAA,EAAA,CAAA,IAAA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,mBAAA;UACA,IAAA,EAAA,MAAA,CAAA,MAAA,CAAA;YAAA,MAAA,EAAA,iBAAA,CAAA;UAAA,CAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,UAAA;QACA,WAAA;QACA,cAAA;QACA,aAAA;QACA,gBAAA;QACA,kBAAA;QACA,iBAAA;QACA,mBAAA;QACA,gBAAA;QACA,gBAAA;QACA,QAAA;QACA,YAAA;QACA,YAAA;QACA,oBAAA;QACA,YAAA;QACA,GAAA;QACA,WAAA;QACA,WAAA;QACA,UAAA;QACA,aAAA;QACA,eAAA;QACA,cAAA;QACA,MAAA;QACA,aAAA;QACA,gBAAA;QACA,aAAA;QACA,OAAA,EAAA,CAAA,CAAA,EAAA,GAAA,OAAA,KAAA,IAAA,IAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,MAAA,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAAA,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,CAAA,KAAA;UACA,QAAA,EAAA,CAAA,CAAA,QAAA;UACA,OAAA,EAAA,CAAA,CAAA,OAAA;UACA,QAAA,EAAA,OAAA,IAAA,WAAA,CAAA,SAAA,CAAA;YACA,IAAA,EAAA,SAAA,CAAA,MAAA;YACA,IAAA,EAAA;cACA,MAAA,EAAA,CAAA,CAAA,IAAA;cACA;YACA;UACA,CAAA,CAAA;QACA,CAAA,CAAA,CAAA,KAAA;MACA,CAAA,EAAA,KAAA,CAAA;IACA,CAAA;IACA,aAAA,CAAA,eAAA,CAAA,QAAA,IAAA;MACA,IAAA;QACA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA,QAAA,CAAA,eAAA,CAAA,CAAA;MACA,CAAA,CACA,OAAA,KAAA,EAAA;QACA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA;MACA;IACA,CAAA,CAAA;IACA,MAAA,IAAA,GAAA,MAAA;MACA,gBAAA,EAAA;MACA,QAAA,CAAA,IAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;IACA,CAAA;IACA,IAAA,QAAA,CAAA,UAAA,KAAA,aAAA,IACA,QAAA,CAAA,UAAA,KAAA,UAAA,EAAA;MACA,IAAA,EAAA;IACA,CAAA,MACA;MACA,QAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,EAAA,MAAA;QACA,WAAA,CAAA,SAAA,CAAA;UACA,IAAA,EAAA,SAAA,CAAA,IAAA;UACA,IAAA,EAAA,CAAA;QACA,CAAA,CAAA,CAAA;QACA,IAAA,EAAA;MACA,CAAA,EAAA,MAAA,CAAA,CAAA;IACA;IACA,OAAA,MAAA;MACA,QAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAA,EAAA,CAAA;IACA,CAAA;EACA,CAAA,CACA,OAAA,KAAA,EAAA;IACA,OAAA,CAAA,IAAA,CAAA,KAAA,CAAA;EACA;AACA;AACA,MAAA,CAAA,cAAA,GAAA,CAAA,GAAA,EAAA,OAAA,KAAA;EACA,IAAA,CAAA,WAAA,EAAA;IACA,MAAA,IAAA,KAAA,CAAA,+CAAA,CAAA;EACA;EACA,WAAA,CAAA,SAAA,CAAA;IACA,IAAA,EAAA,SAAA,CAAA,MAAA;IACA,IAAA,EAAA;MACA,GAAA;MACA;IACA;EACA,CAAA,CAAA,CAAA;AACA,CAAA;AACA,MAAA,CAAA,UAAA,GAAA,MAAA;EACA,eAAA,CAAA,OAAA,CAAA,GAAA,IAAA,GAAA,CAAA,MAAA,EAAA,CAAA;AACA,CAAA;AACA,MAAA,CAAA,gBAAA,GAAA,UAAA,IAAA;EACA,IAAA,CAAA,gBAAA,EAAA;IACA,MAAA,IAAA,KAAA,CAAA,iDAAA,CAAA;EACA;EACA,gBAAA,CAAA,UAAA,CAAA;AACA,CAAA;AACA,MAAA,CAAA,MAAA,GAAA,MAAA;AC5WA,MAAA,qBAAA,GAAA,CACA,MAAA,EACA,MAAA,EACA,WAAA,EACA,cAAA,EACA,UAAA,CACA;AAEA,SAAA,sBAAA,CAAA,CAAA,EAAA;EACA,OAAA,UAAA,CAAA,EAAA;IACA,OAAA,qBAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA;EACA,CAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,wBAAA,CACA,WAAA,EACA,OAAA,EACA;EACA;EACA,MAAA,CAAA,yBAAA,EAAA,kBAAA,EAAA,eAAA,CAAA,GAAA,WAAA,CAAA,MAAA,CACA,CAAA,GAAA,EAAA,KAAA,KAAA;IACA,IAAA,KAAA,CAAA,SAAA,KAAA,YAAA,EAAA;MACA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA;IACA,CAAA,MAAA,IAAA,KAAA,CAAA,SAAA,KAAA,0BAAA,EAAA;MACA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA;IACA,CAAA,MAAA;MACA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,KAAA,CAAA;IACA;IACA,OAAA,GAAA;EACA,CAAA,EACA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,CACA;EAEA,MAAA,UAAA,GAAA,EAAA;EACA,MAAA,oBAAA,GAAA,EAAA;EACA,IAAA,WAAA,GAAA,kBAAA,CAAA,MAAA,GACA,kBAAA,CAAA,kBAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA;EAAA,EACA,SAAA;EAEA,OAAA,CAAA,OAAA,CAAA,KAAA,IAAA;IACA,IAAA,KAAA,CAAA,SAAA,KAAA,0BAAA,EAAA;MACA;MACA,IAAA,CAAA,WAAA,IAAA,WAAA,CAAA,SAAA,GAAA,KAAA,CAAA,SAAA,EAAA;QACA,WAAA,GAAA,KAAA;MACA;MACA;IACA;IAEA,IAAA,KAAA,CAAA,SAAA,KAAA,YAAA,EAAA;MACA,MAAA,eAAA,GAAA,KAAA;;MAEA;MACA;MACA;MACA,KAAA,CAAA,QAAA,GAAA,CAAA;MACA;MACA,CAAA,yBAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CAAA;MACA;MACA,CAAA,oBAAA,CAAA,IAAA,CAAA,sBAAA,CAAA,eAAA,CAAA,CAAA,EACA;QACA,oBAAA,CAAA,IAAA,CAAA,eAAA,CAAA;MACA;;MAEA;MACA;IACA;IAEA,UAAA,CAAA,IAAA,CAAA,KAAA,CAAA;EACA,CAAA,CAAA;;EAEA;EACA,OAAA,CACA,IAAA,WAAA,GAAA,CAAA,WAAA,CAAA,GAAA,EAAA,CAAA,EACA,GAAA,yBAAA,EACA,GAAA,eAAA,EACA,GAAA,UAAA,EACA,GAAA,oBAAA,CACA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAA,SAAA,GAAA,CAAA,CAAA,SAAA,CAAA;AACA;;ACxFA;AACA;AACA;AACA,SAAA,wBAAA,CAAA,MAAA,EAAA;EACA,MAAA,0BAAA,GAAA,IAAA,IAAA;IACA;IACA;IACA,MAAA,qBAAA,GAAA,wBAAA,CACA,MAAA,CAAA,iBAAA,EACA,IAAA,CAAA,UAAA,EAAA,CACA;IACA,MAAA,CAAA,iBAAA,GAAA,qBAAA;EACA,CAAA;EAEA,MAAA,mBAAA,GAAA,IAAA,mBAAA,CAAA,0BAAA,CAAA;EAEA,CACA,SAAA,EACA,OAAA,EACA,aAAA,EACA,0BAAA,EACA,cAAA,EACA,UAAA,EACA,YAAA,EACA,OAAA,EACA,UAAA,CACA,CAAA,OAAA,CAAA,IAAA,IAAA;IACA,IAAA;MACA,mBAAA,CAAA,OAAA,CAAA;QACA,IAAA;QACA,QAAA,EAAA;MACA,CAAA,CAAA;IACA,CAAA,CAAA,OAAA,CAAA,EAAA;MACA;MACA;IAAA;EAEA,CAAA,CAAA;EAEA,OAAA,mBAAA;AACA;AC1CA,MAAA,CAAA,GAAA;AACA,kw7CAAA;ACDA,SAAA,CAAA,GAAA;EAAA,MAAA,CAAA,GAAA,IAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA;EAAA,OAAA,GAAA,CAAA,eAAA,CAAA,CAAA,CAAA;AAAA;;ACEA;AACA;AACA;AACA;AACA,MAAA,gBAAA,CAAA;EACA;;EAGA,WAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,EAAA;EACA;;EAEA;EACA,IAAA,SAAA,GAAA;IACA,OAAA,IAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA;EACA;;EAEA;EACA,OAAA,GAAA;IACA,IAAA,CAAA,MAAA,GAAA,EAAA;EACA;;EAEA;EACA,MAAA,QAAA,CAAA,KAAA,EAAA,UAAA,EAAA;IACA,IAAA,UAAA,EAAA;MACA,IAAA,CAAA,MAAA,GAAA,CAAA,KAAA,CAAA;MACA;IACA;IAEA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA;IACA;EACA;;EAEA;EACA,MAAA,GAAA;IACA,OAAA,IAAA,OAAA,CAAA,OAAA,IAAA;MACA;MACA;MACA;MACA,MAAA,SAAA,GAAA,IAAA,CAAA,MAAA;MACA,IAAA,CAAA,MAAA,GAAA,EAAA;MACA,OAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,CAAA;IACA,CAAA,CAAA;EACA;AACA;;AC1CA;AACA;AACA;AACA;AACA,MAAA,aAAA,CAAA;EAKA,WAAA,CAAA,MAAA,EAAA;IACA,IAAA,CAAA,OAAA,GAAA,MAAA;IACA,IAAA,CAAA,GAAA,GAAA,CAAA;EACA;;EAEA;AACA;AACA;AACA;EACA,WAAA,GAAA;IACA;IACA,IAAA,IAAA,CAAA,mBAAA,EAAA;MACA,OAAA,IAAA,CAAA,mBAAA;IACA;IAEA,IAAA,CAAA,mBAAA,GAAA,IAAA,OAAA,CAAA,CAAA,OAAA,EAAA,MAAA,KAAA;MACA,IAAA,CAAA,OAAA,CAAA,gBAAA,CACA,SAAA,EACA,UAAA;QAAA,IAAA;UAAA;QAAA,CAAA;QACA,IAAA,IAAA,CAAA,OAAA,EAAA;UACA,OAAA,EAAA;QACA,CAAA,MAAA;UACA,MAAA,EAAA;QACA;MACA,CAAA,EACA;QAAA,IAAA,EAAA;MAAA,CAAA,CACA;MAEA,IAAA,CAAA,OAAA,CAAA,gBAAA,CACA,OAAA,EACA,KAAA,IAAA;QACA,MAAA,CAAA,KAAA,CAAA;MACA,CAAA,EACA;QAAA,IAAA,EAAA;MAAA,CAAA,CACA;IACA,CAAA,CAAA;IAEA,OAAA,IAAA,CAAA,mBAAA;EACA;;EAEA;AACA;AACA;EACA,OAAA,GAAA;IACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,wCAAA,CAAA;IACA,IAAA,CAAA,OAAA,CAAA,SAAA,EAAA;EACA;;EAEA;AACA;AACA;EACA,WAAA,CAAA,MAAA,EAAA,GAAA,EAAA;IACA,MAAA,EAAA,GAAA,IAAA,CAAA,kBAAA,EAAA;IAEA,OAAA,IAAA,OAAA,CAAA,CAAA,OAAA,EAAA,MAAA,KAAA;MACA,MAAA,QAAA,GAAA,UAAA;QAAA,IAAA;UAAA;QAAA,CAAA;QACA,MAAA,QAAA,GAAA,IAAA;QACA,IAAA,QAAA,CAAA,MAAA,KAAA,MAAA,EAAA;UACA;QACA;;QAEA;QACA;QACA,IAAA,QAAA,CAAA,EAAA,KAAA,EAAA,EAAA;UACA;QACA;;QAEA;QACA,IAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,SAAA,EAAA,QAAA,CAAA;QAEA,IAAA,CAAA,QAAA,CAAA,OAAA,EAAA;UACA;UACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA,EAAA,QAAA,CAAA,QAAA,CAAA;UAEA,MAAA,CAAA,IAAA,KAAA,CAAA,6BAAA,CAAA,CAAA;UACA;QACA;QAEA,OAAA,CAAA,QAAA,CAAA,QAAA,CAAA;MACA,CAAA;;MAEA;MACA;MACA,IAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,SAAA,EAAA,QAAA,CAAA;MACA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA;QAAA,EAAA;QAAA,MAAA;QAAA;MAAA,CAAA,CAAA;IACA,CAAA,CAAA;EACA;;EAEA;EACA,kBAAA,GAAA;IACA,OAAA,IAAA,CAAA,GAAA,EAAA;EACA;AACA;;ACpGA;AACA;AACA;AACA;AACA,MAAA,4BAAA,CAAA;EACA;;EAKA,WAAA,CAAA,MAAA,EAAA;IACA,IAAA,CAAA,OAAA,GAAA,IAAA,aAAA,CAAA,MAAA,CAAA;IACA,IAAA,CAAA,SAAA,GAAA,KAAA;EACA;;EAEA;AACA;AACA;AACA;EACA,WAAA,GAAA;IACA,OAAA,IAAA,CAAA,OAAA,CAAA,WAAA,EAAA;EACA;;EAEA;AACA;AACA;EACA,OAAA,GAAA;IACA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;EACA,MAAA,QAAA,CAAA,KAAA,EAAA,UAAA,EAAA;IACA,IAAA,CAAA,SAAA,GAAA,IAAA;IAEA,IAAA,UAAA,EAAA;MACA;MACA;MACA,MAAA,IAAA,CAAA,MAAA,EAAA;IACA;IAEA,OAAA,IAAA,CAAA,kBAAA,CAAA,KAAA,CAAA;EACA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IACA,OAAA,IAAA,CAAA,cAAA,EAAA;EACA;;EAEA;AACA;AACA;EACA,kBAAA,CAAA,KAAA,EAAA;IACA,OAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,UAAA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,CAAA,CAAA;EACA;;EAEA;AACA;AACA;EACA,MAAA,cAAA,GAAA;IACA,MAAA,QAAA,GAAA,MAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,QAAA,CAAA;IAEA,IAAA,CAAA,SAAA,GAAA,KAAA;IAEA,OAAA,QAAA;EACA;;EAEA;EACA,MAAA,GAAA;IACA,OAAA,IAAA,CAAA,OAAA,CAAA,WAAA,CAAA,OAAA,CAAA;EACA;AACA;;AC1EA;AACA;AACA;AACA;AACA;AACA,MAAA,gBAAA,CAAA;EAMA,WAAA,CAAA,MAAA,EAAA;IACA,IAAA,CAAA,SAAA,GAAA,IAAA,gBAAA,EAAA;IACA,IAAA,CAAA,YAAA,GAAA,IAAA,4BAAA,CAAA,MAAA,CAAA;IACA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,SAAA;IAEA,IAAA,CAAA,4BAAA,GAAA,IAAA,CAAA,qBAAA,EAAA;EACA;;EAEA;EACA,IAAA,SAAA,GAAA;IACA,OAAA,IAAA,CAAA,KAAA,CAAA,SAAA;EACA;;EAEA;EACA,OAAA,GAAA;IACA,IAAA,CAAA,SAAA,CAAA,OAAA,EAAA;IACA,IAAA,CAAA,YAAA,CAAA,OAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;EACA,QAAA,CAAA,KAAA,EAAA,UAAA,EAAA;IACA,OAAA,IAAA,CAAA,KAAA,CAAA,QAAA,CAAA,KAAA,EAAA,UAAA,CAAA;EACA;;EAEA;EACA,MAAA,MAAA,GAAA;IACA;IACA,MAAA,IAAA,CAAA,oBAAA,EAAA;IAEA,OAAA,IAAA,CAAA,KAAA,CAAA,MAAA,EAAA;EACA;;EAEA;EACA,oBAAA,GAAA;IACA,OAAA,IAAA,CAAA,4BAAA;EACA;;EAEA;EACA,MAAA,qBAAA,GAAA;IACA,IAAA;MACA,MAAA,IAAA,CAAA,YAAA,CAAA,WAAA,EAAA;IACA,CAAA,CAAA,OAAA,KAAA,EAAA;MACA;MACA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,+EAAA,CAAA;MACA;IACA;;IAEA;IACA,MAAA,IAAA,CAAA,0BAAA,EAAA;EACA;;EAEA;EACA,MAAA,0BAAA,GAAA;IACA,MAAA;MAAA;IAAA,CAAA,GAAA,IAAA,CAAA,SAAA;IAEA,MAAA,gBAAA,GAAA,EAAA;IACA,KAAA,MAAA,KAAA,IAAA,MAAA,EAAA;MACA,gBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA;IACA;;IAEA;IACA;IACA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,YAAA;;IAEA;IACA,IAAA;MACA,MAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,CAAA;IACA,CAAA,CAAA,OAAA,KAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,IAAA,CAAA,uDAAA,EAAA,KAAA,CAAA;IACA;EACA;AACA;;ACnFA;AACA;AACA;AACA,SAAA,iBAAA,SAAA;EAAA,IAAA;IAAA;EAAA,CAAA;EACA;EACA,IAAA,cAAA,IAAA,MAAA,CAAA,MAAA,EAAA;IACA,IAAA;MACA,MAAA,SAAA,GAAA,CAAA,EAAA;MAEA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,mCAAA,CAAA;MACA,MAAA,MAAA,GAAA,IAAA,MAAA,CAAA,SAAA,CAAA;MACA,OAAA,IAAA,gBAAA,CAAA,MAAA,CAAA;IACA,CAAA,CAAA,OAAA,KAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,8CAAA,CAAA;MACA;IACA;EACA;;EAEA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,8BAAA,CAAA;EACA,OAAA,IAAA,gBAAA,EAAA;AACA;;AC/BA;AACA;AACA;AACA;AACA,SAAA,SAAA,CACA,WAAA,EACA,MAAA,EAEA;EAAA,IADA,UAAA,uEAAA,CAAA,IAAA,IAAA,EAAA;EAEA;EACA,IAAA,WAAA,KAAA,IAAA,IAAA,MAAA,KAAA,SAAA,IAAA,MAAA,GAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;;EAEA;EACA,IAAA,MAAA,KAAA,CAAA,EAAA;IACA,OAAA,KAAA;EACA;EAEA,OAAA,WAAA,GAAA,MAAA,IAAA,UAAA;AACA;;ACjBA;AACA;AACA;AACA,SAAA,gBAAA,CAAA,OAAA,EAAA,QAAA,EAAA;EAAA,IAAA,UAAA,uEAAA,CAAA,IAAA,IAAA,EAAA;EACA;IACA;IACA,SAAA,CAAA,OAAA,CAAA,OAAA,EAAA,QAAA,CAAA,cAAA,EAAA,UAAA,CAAA;IACA;IACA;IACA,SAAA,CAAA,OAAA,CAAA,YAAA,EAAA,QAAA,CAAA,WAAA,EAAA,UAAA;EAAA;AAEA;;ACXA;AACA;AACA;AACA,SAAA,WAAA,CAAA,OAAA,EAAA;EACA,MAAA,iBAAA,IAAA,gBAAA,IAAA,MAAA;EACA,IAAA,CAAA,iBAAA,EAAA;IACA;EACA;EAEA,IAAA;IACA,MAAA,CAAA,cAAA,CAAA,OAAA,CAAA,kBAAA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,CAAA;EACA,CAAA,CAAA,OAAA,CAAA,EAAA;IACA;EAAA;AAEA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,SAAA,CAAA,UAAA,EAAA;EACA,IAAA,UAAA,KAAA,SAAA,EAAA;IACA,OAAA,KAAA;EACA;;EAEA;EACA,OAAA,IAAA,CAAA,MAAA,EAAA,GAAA,UAAA;AACA;;ACRA;AACA;AACA;AACA,SAAA,WAAA,CAAA,OAAA,EAAA;EACA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,EAAA;EACA,MAAA,EAAA,GAAA,OAAA,CAAA,EAAA,IAAA,KAAA,EAAA;EACA;EACA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,IAAA,GAAA;EACA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,IAAA,GAAA;EACA,MAAA,SAAA,GAAA,OAAA,CAAA,SAAA,IAAA,CAAA;EACA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA;EAEA,OAAA;IACA,EAAA;IACA,OAAA;IACA,YAAA;IACA,SAAA;IACA;EACA,CAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,oBAAA,CAAA,iBAAA,EAAA,eAAA,EAAA;EACA,OAAA,SAAA,CAAA,iBAAA,CAAA,GAAA,SAAA,GAAA,SAAA,CAAA,eAAA,CAAA,GAAA,OAAA,GAAA,KAAA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA,SAAA,aAAA,SAAA;EAAA,IAAA;IAAA,iBAAA;IAAA,eAAA;IAAA,aAAA,GAAA;EAAA,CAAA;EACA,MAAA,OAAA,GAAA,oBAAA,CAAA,iBAAA,EAAA,eAAA,CAAA;EACA,MAAA,OAAA,GAAA,WAAA,CAAA;IACA;EACA,CAAA,CAAA;EAEA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,kCAAA,OAAA,CAAA,EAAA,EAAA,CAAA;EAEA,IAAA,aAAA,EAAA;IACA,WAAA,CAAA,OAAA,CAAA;EACA;EAEA,OAAA,OAAA;AACA;;ACpBA;AACA;AACA;AACA,SAAA,YAAA,GAAA;EACA,MAAA,iBAAA,IAAA,gBAAA,IAAA,MAAA;EAEA,IAAA,CAAA,iBAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,IAAA;IACA;IACA,MAAA,wBAAA,GAAA,MAAA,CAAA,cAAA,CAAA,OAAA,CAAA,kBAAA,CAAA;IAEA,IAAA,CAAA,wBAAA,EAAA;MACA,OAAA,IAAA;IACA;IAEA,MAAA,UAAA,GAAA,IAAA,CAAA,KAAA,CAAA,wBAAA,CAAA;IAEA,OAAA,WAAA,CAAA,UAAA,CAAA;EACA,CAAA,CAAA,OAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;AACA;;ACXA;AACA;AACA;AACA,SAAA,UAAA,SAMA;EAAA,IANA;IACA,QAAA;IACA,cAAA;IACA,aAAA;IACA,iBAAA;IACA;EACA,CAAA;EACA;EACA,MAAA,OAAA,GAAA,cAAA,IAAA,aAAA,IAAA,YAAA,EAAA;EAEA,IAAA,OAAA,EAAA;IACA;IACA;IACA;IACA,MAAA,SAAA,GAAA,gBAAA,CAAA,OAAA,EAAA,QAAA,CAAA;IAEA,IAAA,CAAA,SAAA,EAAA;MACA,OAAA;QAAA,IAAA,EAAA,OAAA;QAAA;MAAA,CAAA;IACA,CAAA,MAAA,IAAA,OAAA,CAAA,OAAA,KAAA,OAAA,EAAA;MACA;MACA,MAAA,gBAAA,GAAA,WAAA,CAAA;QAAA,OAAA,EAAA;MAAA,CAAA,CAAA;MACA,OAAA;QAAA,IAAA,EAAA,KAAA;QAAA,OAAA,EAAA;MAAA,CAAA;IACA,CAAA,MAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,8BAAA,CAAA;IACA;IACA;EACA;;EAEA,MAAA,UAAA,GAAA,aAAA,CAAA;IACA,aAAA;IACA,iBAAA;IACA;EACA,CAAA,CAAA;EAEA,OAAA;IAAA,IAAA,EAAA,KAAA;IAAA,OAAA,EAAA;EAAA,CAAA;AACA;;AClDA;AACA;AACA;AACA;AACA,eAAA,QAAA,CACA,MAAA,EACA,KAAA,EACA,UAAA,EACA;EACA,IAAA,CAAA,MAAA,CAAA,WAAA,EAAA;IACA;IACA,OAAA,IAAA;EACA;EAEA,IAAA,MAAA,CAAA,QAAA,EAAA,EAAA;IACA;IACA,OAAA,IAAA;EACA;;EAEA;EACA;EACA,MAAA,IAAA,GAAA,KAAA,CAAA,SAAA,GAAA,UAAA;EACA,MAAA,aAAA,GAAA,IAAA,GAAA,KAAA,CAAA,SAAA,GAAA,KAAA,CAAA,SAAA,GAAA,IAAA;;EAEA;EACA;EACA;EACA;EACA,IAAA,aAAA,GAAA,MAAA,CAAA,QAAA,CAAA,WAAA,GAAA,IAAA,CAAA,GAAA,EAAA,EAAA;IACA,OAAA,IAAA;EACA;;EAEA;EACA;EACA,MAAA,aAAA,GAAA,MAAA,CAAA,UAAA,EAAA,CAAA,aAAA;EACA,IAAA,MAAA,CAAA,OAAA,IAAA,MAAA,CAAA,OAAA,CAAA,SAAA,KAAA,CAAA,KAAA,CAAA,aAAA,IAAA,aAAA,GAAA,aAAA,CAAA,EAAA;IACA,MAAA,CAAA,UAAA,EAAA,CAAA,aAAA,GAAA,aAAA;EACA;EAEA,IAAA;IACA,OAAA,MAAA,MAAA,CAAA,WAAA,CAAA,QAAA,CAAA,KAAA,EAAA,UAAA,CAAA;EACA,CAAA,CAAA,OAAA,KAAA,EAAA;IACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA;IACA,MAAA,CAAA,IAAA,CAAA,UAAA,CAAA;IAEA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;IAEA,IAAA,MAAA,EAAA;MACA,MAAA,CAAA,kBAAA,CAAA,oBAAA,EAAA,QAAA,CAAA;IACA;EACA;AACA;;ACtDA;AACA,SAAA,YAAA,CAAA,KAAA,EAAA;EACA,OAAA,CAAA,KAAA,CAAA,IAAA;AACA;;AAEA;AACA,SAAA,kBAAA,CAAA,KAAA,EAAA;EACA,OAAA,KAAA,CAAA,IAAA,KAAA,aAAA;AACA;;AAEA;AACA,SAAA,aAAA,CAAA,KAAA,EAAA;EACA,OAAA,KAAA,CAAA,IAAA,KAAA,cAAA;AACA;;ACNA;AACA;AACA;AACA,SAAA,oBAAA,CAAA,MAAA,EAAA;EACA;EACA;EACA,MAAA,iBAAA,GAAA,mBAAA,EAAA;EAEA,OAAA,CAAA,KAAA,EAAA,YAAA,KAAA;IACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,EAAA;MACA;IACA;IAEA,MAAA,UAAA,GAAA,YAAA,IAAA,YAAA,CAAA,UAAA;;IAEA;IACA;IACA;IACA,IAAA,iBAAA,KAAA,CAAA,UAAA,IAAA,UAAA,GAAA,GAAA,IAAA,UAAA,IAAA,GAAA,CAAA,EAAA;MACA;IACA;;IAEA;IACA;IACA,IAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,QAAA,CAAA,KAAA,IAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,EAAA;MACA,MAAA,CAAA,UAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,QAAA,CAAA;MACA;IACA;;IAEA;IACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,EAAA;MACA;IACA;;IAEA;IACA,IAAA,KAAA,CAAA,QAAA,EAAA;MACA,MAAA,CAAA,UAAA,EAAA,CAAA,QAAA,CAAA,GAAA,CAAA,KAAA,CAAA,QAAA,CAAA;IACA;;IAEA;IACA;IACA,IACA,MAAA,CAAA,aAAA,KAAA,OAAA,IACA,KAAA,CAAA,SAAA,IACA,KAAA,CAAA,OAAA,KAAA,qBAAA,CAAA;IAAA,EACA;MACA,UAAA,CAAA,YAAA;QACA;QACA;QACA;QACA;QACA,MAAA,MAAA,CAAA,cAAA,EAAA;QAEA,IAAA,MAAA,CAAA,aAAA,EAAA,EAAA;UACA;UACA;UACA,MAAA,CAAA,aAAA,GAAA,SAAA;UACA,MAAA,CAAA,cAAA,EAAA;QACA;MACA,CAAA,CAAA;IACA;EACA,CAAA;AACA;AAEA,SAAA,mBAAA,GAAA;EACA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;EACA,IAAA,CAAA,MAAA,EAAA;IACA,OAAA,KAAA;EACA;EAEA,MAAA,SAAA,GAAA,MAAA,CAAA,YAAA,EAAA;EACA,IAAA,CAAA,SAAA,EAAA;IACA,OAAA,KAAA;EACA;EAEA,OACA,SAAA,CAAA,IAAA,CAAA,yBAAA,IAAA,KAAA;AAEA;ACvFA,IAAA,QAAA;AACA,CAAA,UAAA,QAAA,EAAA;EACA,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;EACA,QAAA,CAAA,QAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;EACA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;EACA,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;EACA,QAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;EACA,QAAA,CAAA,QAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,CAAA,EAAA,QAAA,KAAA,QAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;ACJA;AACA;AACA;AACA,SAAA,gBAAA,CACA,UAAA,EACA;EACA,OAAA;IACA,SAAA,EAAA,IAAA,CAAA,GAAA,EAAA,GAAA,IAAA;IACA,IAAA,EAAA,SAAA;IACA,GAAA;EACA,CAAA;AACA;;ACTA;AACA;AACA;AACA,SAAA,kBAAA,CAAA,MAAA,EAAA,UAAA,EAAA;EACA,IAAA,UAAA,CAAA,QAAA,KAAA,oBAAA,EAAA;IACA;EACA;EAEA,IAAA,CAAA,UAAA,EAAA,UAAA,CAAA,CAAA,QAAA,CAAA,UAAA,CAAA,QAAA,CAAA,EAAA;IACA,MAAA,CAAA,mBAAA,EAAA;EACA,CAAA,MAAA;IACA,MAAA,CAAA,4BAAA,EAAA;EACA;EAEA,MAAA,CAAA,SAAA,CAAA,MAAA;IACA,KAAA,QAAA,CAAA,MAAA,EAAA;MACA,IAAA,EAAA,SAAA,CAAA,MAAA;MACA;MACA;MACA,SAAA,EAAA,CAAA,UAAA,CAAA,SAAA,IAAA,CAAA,IAAA,IAAA;MACA,IAAA,EAAA;QACA,GAAA,EAAA,YAAA;QACA,OAAA,EAAA;MACA;IACA,CAAA,CAAA;;IAEA;IACA,OAAA,UAAA,CAAA,QAAA,KAAA,SAAA;EACA,CAAA,CAAA;AACA;;ACnCA;AACA;AACA,MAAA,oBAAA,GAAA,IAAA,GAAA,CAAA,CACA,IAAA,EACA,OAAA,EACA,YAAA,EACA,MAAA,EACA,MAAA,EACA,KAAA,EACA,OAAA,EACA,cAAA,EACA,aAAA,CACA,CAAA;;AAEA;AACA;AACA;AACA,SAAA,qBAAA,CAAA,UAAA,EAAA;EACA,MAAA,GAAA,GAAA,CAAA,CAAA;EACA,KAAA,MAAA,GAAA,IAAA,UAAA,EAAA;IACA,IAAA,oBAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA;MACA,IAAA,aAAA,GAAA,GAAA;MAEA,IAAA,GAAA,KAAA,aAAA,IAAA,GAAA,KAAA,cAAA,EAAA;QACA,aAAA,GAAA,QAAA;MACA;MAEA,GAAA,CAAA,aAAA,CAAA,GAAA,UAAA,CAAA,GAAA,CAAA;IACA;EACA;EAEA,OAAA,GAAA;AACA;ACjBA,MAAA,iBAAA,GACA,MAAA,IACA,WAAA,IAAA;EACA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;IACA;EACA;EAEA,MAAA,MAAA,GAAA,SAAA,CAAA,WAAA,CAAA;EAEA,IAAA,CAAA,MAAA,EAAA;IACA;EACA;EAEA,kBAAA,CAAA,MAAA,EAAA,MAAA,CAAA;AACA,CAAA;;AAEA;AACA;AACA;AACA,SAAA,SAAA,CAAA,WAAA,EAAA;EACA,IAAA,MAAA;EACA,IAAA,UAAA;;EAEA;EACA,IAAA;IACA,UAAA,GAAA,aAAA,CAAA,WAAA,CAAA;IACA,MAAA,GAAA,gBAAA,CAAA,UAAA,CAAA;EACA,CAAA,CAAA,OAAA,CAAA,EAAA;IACA,MAAA,GAAA,WAAA;EACA;;EAEA;EACA,MAAA,cAAA,GACA,UAAA,IAAA,MAAA,IAAA,UAAA,IAAA,UAAA,CAAA,IAAA,CAAA,IAAA,KAAA,QAAA,CAAA,OAAA,GAAA,UAAA,CAAA,IAAA,GAAA,IAAA;EAEA,OAAA,gBAAA,CAAA;IACA,QAAA,EAAA,MAAA,WAAA,CAAA,IAAA,EAAA;IACA,OAAA,EAAA,MAAA;IACA,IAAA,EAAA,cAAA,GACA;MACA,MAAA,EAAA,cAAA,CAAA,EAAA;MACA,IAAA,EAAA;QACA,EAAA,EAAA,cAAA,CAAA,EAAA;QACA,OAAA,EAAA,cAAA,CAAA,OAAA;QACA,WAAA,EAAA,UAAA,GACA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,UAAA,CAAA,CACA,GAAA,CACA,IAAA,IAAA,MAAA,IAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA,IAAA,KAAA,QAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CACA,CACA,MAAA,CAAA,OAAA,CAAA,CAAA;QAAA,CACA,GAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CACA,IAAA,CAAA,EAAA,CAAA,GACA,EAAA;QACA,UAAA,EAAA,qBAAA,CAAA,cAAA,CAAA,UAAA;MACA;IACA,CAAA,GACA,CAAA;EACA,CAAA,CAAA;AACA;AAEA,SAAA,aAAA,CAAA,WAAA,EAAA;EACA,IAAA,iBAAA,CAAA,WAAA,CAAA,KAAA,CAAA,EAAA;IACA,OAAA,WAAA,CAAA,KAAA,CAAA,MAAA;EACA;EAEA,OAAA,WAAA,CAAA,KAAA;AACA;AAEA,SAAA,iBAAA,CAAA,KAAA,EAAA;EACA,OAAA,CAAA,CAAA,KAAA,CAAA,MAAA;AACA;;ACnFA;AACA;AACA;AACA,SAAA,YAAA,CAAA,KAAA,EAAA,IAAA,EAAA;EACA,IAAA,KAAA,CAAA,IAAA,IAAA,CAAA,KAAA,CAAA,SAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,MAAA,EAAA;IACA,OAAA,KAAA;EACA;;EAEA;EACA,IAAA,IAAA,CAAA,iBAAA,IAAA,IAAA,CAAA,iBAAA,CAAA,SAAA,EAAA;IACA,OAAA,IAAA;EACA;;EAEA;EACA,OAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,IAAA;IACA,IAAA,CAAA,SAAA,CAAA,UAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,MAAA,IAAA,CAAA,SAAA,CAAA,UAAA,CAAA,MAAA,CAAA,MAAA,EAAA;MACA,OAAA,KAAA;IACA;IAEA,OAAA,SAAA,CAAA,UAAA,CAAA,MAAA,CAAA,IAAA,CAAA,KAAA,IAAA,KAAA,CAAA,QAAA,IAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,aAAA,CAAA,CAAA;EACA,CAAA,CAAA;AACA;;ACdA;AACA;AACA;AACA,SAAA,yBAAA,CACA,MAAA,EAEA;EAAA,IADA,6BAAA,uEAAA,KAAA;EAEA,MAAA,gBAAA,GAAA,6BAAA,GAAA,oBAAA,CAAA,MAAA,CAAA,GAAA,SAAA;EAEA,OAAA,CAAA,KAAA,EAAA,IAAA,KAAA;IACA,IAAA,aAAA,CAAA,KAAA,CAAA,EAAA;MACA;MACA;MACA,OAAA,KAAA,CAAA,WAAA;MACA,OAAA,KAAA;IACA;;IAEA;IACA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,EAAA;MACA,OAAA,KAAA;IACA;;IAEA;IACA;IACA,IAAA,YAAA,CAAA,KAAA,EAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,UAAA,EAAA,CAAA,YAAA,CAAA,iBAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,8CAAA,EAAA,KAAA,CAAA;MACA,OAAA,IAAA;IACA;;IAEA;IACA,IAAA,YAAA,CAAA,KAAA,CAAA,IAAA,kBAAA,CAAA,KAAA,CAAA,IAAA,MAAA,CAAA,aAAA,KAAA,SAAA,EAAA;MACA,KAAA,CAAA,IAAA,GAAA;QAAA,GAAA,KAAA,CAAA,IAAA;QAAA,QAAA,EAAA,MAAA,CAAA,YAAA;MAAA,CAAA;IACA;IAEA,IAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,UAAA,EAAA,CAAA,YAAA,CAAA,cAAA,IAAA,YAAA,CAAA,KAAA,CAAA,EAAA;MACA,MAAA,GAAA,GAAA,uBAAA,CAAA,KAAA,CAAA;MACA,qBAAA,CAAA;QACA,OAAA,EAAA,kBAAA,KAAA,CAAA,QAAA,OAAA,KAAA,CAAA,OAAA,MAAA,GAAA,CAAA,IAAA,KAAA,GAAA,CAAA,KAAA;MACA,CAAA,CAAA;IACA;;IAEA;IACA;IACA,IAAA,gBAAA,EAAA;MACA;MACA,gBAAA,CAAA,KAAA,EAAA;QAAA,UAAA,EAAA;MAAA,CAAA,CAAA;IACA;IAEA,OAAA,KAAA;EACA,CAAA;AACA;AAEA,SAAA,qBAAA,CAAA,GAAA,EAAA;EACA,MAAA;IAAA,QAAA;IAAA,KAAA;IAAA,OAAA;IAAA,GAAA;EAAA,CAAA,GAAA,GAAA;EAEA,aAAA,CAAA;IACA,QAAA,EAAA,QAAA,IAAA,SAAA;IACA,KAAA,EAAA,KAAA,IAAA,OAAA;IACA,OAAA,EAAA,YAAA,OAAA,EAAA;IACA,GAAA;EACA,CAAA,CAAA;AACA;AAEA,SAAA,uBAAA,CAAA,KAAA,EAAA;EACA,OAAA;IACA,IAAA,EAAA,SAAA;IACA,KAAA,EAAA,KAAA;IACA,IAAA,KAAA,CAAA,SAAA,IAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,CAAA;EACA,CAAA;AACA;;ACzEA;AACA;AACA;AACA,SAAA,sBAAA,CACA,MAAA,EACA,OAAA,EACA;EACA,OAAA,OAAA,CAAA,GAAA,CAAA;IAAA,IAAA;MAAA,IAAA;MAAA,KAAA;MAAA,GAAA;MAAA,IAAA;MAAA;IAAA,CAAA;IAAA,OACA,QAAA,CAAA,MAAA,EAAA;MACA,IAAA,EAAA,SAAA,CAAA,MAAA;MACA,SAAA,EAAA,KAAA;MACA,IAAA,EAAA;QACA,GAAA,EAAA,iBAAA;QACA,OAAA,EAAA;UACA,EAAA,EAAA,IAAA;UACA,WAAA,EAAA,IAAA;UACA,cAAA,EAAA,KAAA;UACA,YAAA,EAAA,GAAA;UACA;QACA;MACA;IACA,CAAA,CAAA;EAAA,EACA;AACA;ACpBA,SAAA,aAAA,CAAA,WAAA,EAAA;EACA,MAAA;IAAA,IAAA;IAAA;EAAA,CAAA,GAAA,WAAA;EAEA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,EAAA,GAAA,IAAA;EAEA,OAAA;IACA,IAAA,EAAA,iBAAA;IACA,KAAA,EAAA,GAAA;IACA,GAAA,EAAA,GAAA;IACA,IAAA,EAAA,EAAA;IACA,IAAA,EAAA;MACA,QAAA,EAAA;IACA;EACA,CAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,yBAAA,CAAA,MAAA,EAAA;EACA,OAAA,WAAA,IAAA;IACA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;MACA;IACA;IAEA,MAAA,MAAA,GAAA,aAAA,CAAA,WAAA,CAAA;IAEA,IAAA,MAAA,KAAA,IAAA,EAAA;MACA;IACA;;IAEA;IACA,MAAA,CAAA,UAAA,EAAA,CAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,IAAA,CAAA;IACA,MAAA,CAAA,mBAAA,EAAA;IAEA,MAAA,CAAA,SAAA,CAAA,MAAA;MACA,sBAAA,CAAA,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA;MACA;MACA,OAAA,KAAA;IACA,CAAA,CAAA;EACA,CAAA;AACA;;AC7CA;AACA;AACA;AACA;AACA,SAAA,mBAAA,CAAA,MAAA,EAAA,GAAA,EAAA;EACA;EACA,IAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,UAAA,EAAA,CAAA,YAAA,CAAA,cAAA,EAAA;IACA,OAAA,KAAA;EACA;EAEA,OAAA,gBAAA,CAAA,GAAA,CAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,gBAAA,CAAA,GAAA,EAAA;EACA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;EACA,MAAA,GAAA,GAAA,MAAA,IAAA,MAAA,CAAA,MAAA,EAAA;EACA,OAAA,GAAA,GAAA,GAAA,CAAA,QAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,KAAA;AACA;;ACpBA;AACA,SAAA,oBAAA,CAAA,MAAA,EAAA,MAAA,EAAA;EACA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;IACA;EACA;EAEA,IAAA,MAAA,KAAA,IAAA,EAAA;IACA;EACA;EAEA,IAAA,mBAAA,CAAA,MAAA,EAAA,MAAA,CAAA,IAAA,CAAA,EAAA;IACA;EACA;EAEA,MAAA,CAAA,SAAA,CAAA,MAAA;IACA,sBAAA,CAAA,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA;IACA;IACA;IACA;IACA,OAAA,IAAA;EACA,CAAA,CAAA;AACA;;ACpBA;AACA,SAAA,WAAA,CAAA,WAAA,EAAA;EACA,MAAA;IAAA,cAAA;IAAA,YAAA;IAAA,SAAA;IAAA;EAAA,CAAA,GAAA,WAAA;EAEA,IAAA,CAAA,YAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,MAAA;IAAA,MAAA;IAAA,iBAAA,EAAA,eAAA;IAAA,kBAAA,EAAA;EAAA,CAAA,GAAA,SAAA;EAEA,OAAA;IACA,IAAA,EAAA,gBAAA;IACA,KAAA,EAAA,cAAA,GAAA,IAAA;IACA,GAAA,EAAA,YAAA,GAAA,IAAA;IACA,IAAA,EAAA,SAAA,CAAA,GAAA;IACA,IAAA,EAAA;MACA,MAAA;MACA,UAAA,EAAA,QAAA,IAAA,QAAA,CAAA,MAAA;MACA,eAAA;MACA;IACA;EACA,CAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,uBAAA,CAAA,MAAA,EAAA;EACA,OAAA,WAAA,IAAA;IACA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;MACA;IACA;IAEA,MAAA,MAAA,GAAA,WAAA,CAAA,WAAA,CAAA;IAEA,oBAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EACA,CAAA;AACA;;ACrCA;AACA,SAAA,SAAA,CAAA,WAAA,EAAA;EACA,MAAA;IAAA,cAAA;IAAA,YAAA;IAAA;EAAA,CAAA,GAAA,WAAA;EAEA,IAAA,CAAA,cAAA,IAAA,CAAA,YAAA,IAAA,CAAA,GAAA,CAAA,cAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,MAAA;IACA,MAAA;IACA,GAAA;IACA,WAAA,EAAA,UAAA;IACA,iBAAA,EAAA,eAAA;IACA,kBAAA,EAAA;EACA,CAAA,GAAA,GAAA,CAAA,cAAA;EAEA,IAAA,GAAA,KAAA,SAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,OAAA;IACA,IAAA,EAAA,cAAA;IACA,IAAA,EAAA,GAAA;IACA,KAAA,EAAA,cAAA,GAAA,IAAA;IACA,GAAA,EAAA,YAAA,GAAA,IAAA;IACA,IAAA,EAAA;MACA,MAAA;MACA,UAAA;MACA,eAAA;MACA;IACA;EACA,CAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,qBAAA,CAAA,MAAA,EAAA;EACA,OAAA,WAAA,IAAA;IACA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;MACA;IACA;IAEA,MAAA,MAAA,GAAA,SAAA,CAAA,WAAA,CAAA;IAEA,oBAAA,CAAA,MAAA,EAAA,MAAA,CAAA;EACA,CAAA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,wBAAA,CAAA,MAAA,EAAA;EACA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;EAEA,IAAA;IACA,MAAA,WAAA,GAAA,IAAA,WAAA,EAAA;IAEA,MAAA,OAAA,GAAA;MACA,MAAA;MACA;IACA,CAAA;IAEA,IAAA,MAAA,IAAA,MAAA,CAAA,EAAA,EAAA;MACA,MAAA,CAAA,EAAA,CAAA,qBAAA,EAAA,CAAA,UAAA,EAAA,IAAA,KAAA,0BAAA,CAAA,OAAA,EAAA,UAAA,EAAA,IAAA,CAAA,CAAA;IACA,CAAA,MAAA;MACA;MACA,yBAAA,CAAA,OAAA,EAAA,uBAAA,CAAA,MAAA,CAAA,CAAA;MACA,yBAAA,CAAA,KAAA,EAAA,qBAAA,CAAA,MAAA,CAAA,CAAA;IACA;EACA,CAAA,CAAA,OAAA,EAAA,EAAA;IACA;EAAA;AAEA;;AAEA;AACA,SAAA,0BAAA,CACA,OAAA,EACA,UAAA,EACA,IAAA,EACA;EACA,IAAA,CAAA,UAAA,CAAA,IAAA,EAAA;IACA;EACA;EAEA,IAAA;IACA,IAAA,gBAAA,CAAA,UAAA,CAAA,IAAA,UAAA,CAAA,IAAA,CAAA,EAAA;MACA,oBAAA,CAAA,UAAA,EAAA,IAAA,EAAA,OAAA,CAAA;IACA;IAEA,IAAA,kBAAA,CAAA,UAAA,CAAA,IAAA,YAAA,CAAA,IAAA,CAAA,EAAA;MACA;MACA;MACA;MACA,sBAAA,CAAA,UAAA,EAAA,IAAA,EAAA,OAAA,CAAA;MAEA,KAAA,sBAAA,CAAA,UAAA,EAAA,IAAA,EAAA,OAAA,CAAA;IACA;EACA,CAAA,CAAA,OAAA,CAAA,EAAA;IACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,IAAA,CAAA,yCAAA,CAAA;EACA;AACA;AAEA,SAAA,oBAAA,CACA,UAAA,EACA,IAAA,EACA,OAAA,EACA;EACA;EACA,oBAAA,CAAA,UAAA,EAAA,IAAA,EAAA,OAAA,CAAA;;EAEA;EACA,MAAA,MAAA,GAAA,4BAAA,CAAA,cAAA,EAAA,UAAA,EAAA,IAAA,CAAA;EACA,oBAAA,CAAA,OAAA,CAAA,MAAA,EAAA,MAAA,CAAA;AACA;AAEA,eAAA,sBAAA,CACA,UAAA,EACA,IAAA,EACA,OAAA,EACA;EACA,MAAA,cAAA,GAAA,MAAA,mBAAA,CAAA,UAAA,EAAA,IAAA,EAAA,OAAA,CAAA;;EAEA;EACA,MAAA,MAAA,GAAA,4BAAA,CAAA,gBAAA,EAAA,cAAA,EAAA,IAAA,CAAA;EACA,oBAAA,CAAA,OAAA,CAAA,MAAA,EAAA,MAAA,CAAA;AACA;;AAEA;AACA,eAAA,mBAAA,CACA,UAAA,EACA,IAAA,EACA,OAAA,EACA;EACA,IAAA,UAAA,CAAA,IAAA,CAAA,kBAAA,IAAA,CAAA,IAAA,CAAA,QAAA,EAAA;IACA,OAAA,UAAA;EACA;;EAEA;EACA,IAAA;IACA;IACA,MAAA,QAAA,GAAA,IAAA,CAAA,QAAA,CAAA,KAAA,EAAA;IACA,MAAA,IAAA,GAAA,MAAA,QAAA,CAAA,IAAA,EAAA;IAEA,IAAA,IAAA,CAAA,MAAA,EAAA;MACA,OAAA;QACA,GAAA,UAAA;QACA,IAAA,EAAA;UAAA,GAAA,UAAA,CAAA,IAAA;UAAA,kBAAA,EAAA,WAAA,CAAA,IAAA,EAAA,OAAA,CAAA,WAAA;QAAA;MACA,CAAA;IACA;EACA,CAAA,CAAA,OAAA,EAAA,EAAA;IACA;EAAA;EAGA,OAAA,UAAA;AACA;AAEA,SAAA,4BAAA,CACA,IAAA,EACA,UAAA,EACA,IAAA,EACA;EACA,MAAA;IAAA,cAAA;IAAA;EAAA,CAAA,GAAA,IAAA;EAEA,IAAA,CAAA,YAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,MAAA;IACA,GAAA;IACA,MAAA;IACA,WAAA,EAAA,UAAA;IACA,iBAAA,EAAA,eAAA;IACA,kBAAA,EAAA;EACA,CAAA,GAAA,UAAA,CAAA,IAAA;EAEA,IAAA,GAAA,KAAA,SAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,MAAA,MAAA,GAAA;IACA,IAAA;IACA,KAAA,EAAA,cAAA,GAAA,IAAA;IACA,GAAA,EAAA,YAAA,GAAA,IAAA;IACA,IAAA,EAAA,GAAA;IACA,IAAA,EAAA;MACA,MAAA;MACA;IACA;EACA,CAAA;EAEA,IAAA,eAAA,EAAA;IACA,MAAA,CAAA,IAAA,CAAA,eAAA,GAAA,eAAA;EACA;EACA,IAAA,gBAAA,EAAA;IACA,MAAA,CAAA,IAAA,CAAA,gBAAA,GAAA,gBAAA;EACA;EAEA,OAAA,MAAA;AACA;AAEA,SAAA,oBAAA,CACA,UAAA,EACA,IAAA,EACA,OAAA,EACA;EACA,MAAA;IAAA,GAAA;IAAA;EAAA,CAAA,GAAA,IAAA;EAEA,MAAA,OAAA,GAAA,WAAA,CAAA,KAAA,EAAA,OAAA,CAAA,WAAA,CAAA;EACA,MAAA,OAAA,GAAA,GAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,GACA,sBAAA,CAAA,GAAA,CAAA,iBAAA,CAAA,gBAAA,CAAA,CAAA,GACA,WAAA,CAAA,GAAA,CAAA,QAAA,EAAA,OAAA,CAAA,WAAA,CAAA;EAEA,IAAA,OAAA,KAAA,SAAA,EAAA;IACA,UAAA,CAAA,IAAA,CAAA,iBAAA,GAAA,OAAA;EACA;EACA,IAAA,OAAA,KAAA,SAAA,EAAA;IACA,UAAA,CAAA,IAAA,CAAA,kBAAA,GAAA,OAAA;EACA;AACA;AAEA,SAAA,sBAAA,CACA,UAAA,EACA,IAAA,EACA,OAAA,EACA;EACA,MAAA;IAAA,KAAA;IAAA;EAAA,CAAA,GAAA,IAAA;EAEA,MAAA,IAAA,GAAA,YAAA,CAAA,KAAA,CAAA;EACA,MAAA,OAAA,GAAA,WAAA,CAAA,IAAA,EAAA,OAAA,CAAA,WAAA,CAAA;EACA,MAAA,OAAA,GAAA,QAAA,GAAA,sBAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,gBAAA,CAAA,CAAA,GAAA,SAAA;EAEA,IAAA,OAAA,KAAA,SAAA,EAAA;IACA,UAAA,CAAA,IAAA,CAAA,iBAAA,GAAA,OAAA;EACA;EACA,IAAA,OAAA,KAAA,SAAA,EAAA;IACA,UAAA,CAAA,IAAA,CAAA,kBAAA,GAAA,OAAA;EACA;AACA;;AAEA;AACA,SAAA,WAAA,CACA,IAAA,EACA,WAAA,EACA;EACA,IAAA,CAAA,IAAA,EAAA;IACA,OAAA,SAAA;EACA;EAEA,IAAA;IACA,IAAA,OAAA,IAAA,KAAA,QAAA,EAAA;MACA,OAAA,WAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,MAAA;IACA;IAEA,IAAA,IAAA,YAAA,eAAA,EAAA;MACA,OAAA,WAAA,CAAA,MAAA,CAAA,IAAA,CAAA,QAAA,EAAA,CAAA,CAAA,MAAA;IACA;IAEA,IAAA,IAAA,YAAA,QAAA,EAAA;MACA;MACA;MACA;MACA,MAAA,WAAA,GAAA,IAAA,eAAA,CAAA,IAAA,CAAA,CAAA,QAAA,EAAA;MACA,OAAA,WAAA,CAAA,MAAA,CAAA,WAAA,CAAA,CAAA,MAAA;IACA;IAEA,IAAA,IAAA,YAAA,IAAA,EAAA;MACA,OAAA,IAAA,CAAA,IAAA;IACA;IAEA,IAAA,IAAA,YAAA,WAAA,EAAA;MACA,OAAA,IAAA,CAAA,UAAA;IACA;;IAEA;EACA,CAAA,CAAA,OAAA,EAAA,EAAA;IACA;EAAA;EAGA,OAAA,SAAA;AACA;;AAEA;AACA,SAAA,sBAAA,CAAA,MAAA,EAAA;EACA,IAAA,CAAA,MAAA,EAAA;IACA,OAAA,SAAA;EACA;EAEA,MAAA,IAAA,GAAA,QAAA,CAAA,MAAA,EAAA,EAAA,CAAA;EACA,OAAA,KAAA,CAAA,IAAA,CAAA,GAAA,SAAA,GAAA,IAAA;AACA;AAEA,SAAA,YAAA,GAAA;EAAA,IAAA,SAAA,uEAAA,EAAA;EACA;EACA,IAAA,SAAA,CAAA,MAAA,KAAA,CAAA,IAAA,OAAA,SAAA,CAAA,CAAA,CAAA,KAAA,QAAA,EAAA;IACA,OAAA,SAAA;EACA;EAEA,OAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA;AACA;AAEA,SAAA,gBAAA,CAAA,UAAA,EAAA;EACA,OAAA,UAAA,CAAA,QAAA,KAAA,KAAA;AACA;AAEA,SAAA,kBAAA,CAAA,UAAA,EAAA;EACA,OAAA,UAAA,CAAA,QAAA,KAAA,OAAA;AACA;AAEA,SAAA,UAAA,CAAA,IAAA,EAAA;EACA,OAAA,IAAA,IAAA,IAAA,CAAA,GAAA;AACA;AAEA,SAAA,YAAA,CAAA,IAAA,EAAA;EACA,OAAA,IAAA,IAAA,IAAA,CAAA,QAAA;AACA;AC1SA,IAAA,gBAAA,GAAA,IAAA;AAEA,MAAA,mBAAA,GACA,MAAA,IACA,KAAA,IAAA;EACA,IAAA,CAAA,MAAA,CAAA,SAAA,EAAA,EAAA;IACA;EACA;EAEA,MAAA,MAAA,GAAA,WAAA,CAAA,KAAA,CAAA;EAEA,IAAA,CAAA,MAAA,EAAA;IACA;EACA;EAEA,kBAAA,CAAA,MAAA,EAAA,MAAA,CAAA;AACA,CAAA;;AAEA;AACA;AACA;AACA,SAAA,WAAA,CAAA,KAAA,EAAA;EACA;EACA;EACA;EACA;EACA,MAAA,aAAA,GAAA,KAAA,CAAA,iBAAA,IAAA,KAAA,CAAA,iBAAA,EAAA;;EAEA;EACA;EACA,IAAA,gBAAA,KAAA,aAAA,IAAA,CAAA,aAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,gBAAA,GAAA,aAAA;EAEA,IACA,aAAA,CAAA,QAAA,KACA,CAAA,OAAA,EAAA,KAAA,EAAA,cAAA,EAAA,oBAAA,CAAA,CAAA,QAAA,CAAA,aAAA,CAAA,QAAA,CAAA,IACA,aAAA,CAAA,QAAA,CAAA,UAAA,CAAA,KAAA,CAAA,CAAA,EACA;IACA,OAAA,IAAA;EACA;EAEA,OAAA,gBAAA,CAAA,aAAA,CAAA;AACA;;ACtCA;AACA;AACA;AACA,SAAA,kBAAA,CAAA,MAAA,EAAA;EACA;EACA,MAAA,KAAA,GAAA,aAAA,EAAA,CAAA,QAAA,EAAA;EACA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;EAEA,IAAA,KAAA,EAAA;IACA,KAAA,CAAA,gBAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,CAAA;EACA;EACA,yBAAA,CAAA,KAAA,EAAA,iBAAA,CAAA,MAAA,CAAA,CAAA;EACA,yBAAA,CAAA,SAAA,EAAA,yBAAA,CAAA,MAAA,CAAA,CAAA;EACA,wBAAA,CAAA,MAAA,CAAA;;EAEA;EACA;EACA,uBAAA,CAAA,yBAAA,CAAA,MAAA,EAAA,CAAA,QAAA,CAAA,MAAA,CAAA,CAAA,CAAA;;EAEA;EACA,IAAA,QAAA,CAAA,MAAA,CAAA,EAAA;IACA,MAAA,CAAA,EAAA,CAAA,gBAAA,EAAA,oBAAA,CAAA,MAAA,CAAA,CAAA;IACA,MAAA,CAAA,EAAA,CAAA,WAAA,EAAA,GAAA,IAAA;MACA,MAAA,QAAA,GAAA,MAAA,CAAA,YAAA,EAAA;MACA,IAAA,QAAA,EAAA;QACA,GAAA,CAAA,SAAA,GAAA,QAAA;MACA;IACA,CAAA,CAAA;EACA;AACA;;AAEA;AACA,SAAA,QAAA,CAAA,MAAA,EAAA;EACA,OAAA,CAAA,EAAA,MAAA,IAAA,MAAA,CAAA,EAAA,CAAA;AACA;;ACnCA;AACA;AACA;AACA;AACA,eAAA,cAAA,CAAA,MAAA,EAAA;EACA;EACA,IAAA;IACA,OAAA,OAAA,CAAA,GAAA,CACA,sBAAA,CAAA,MAAA,EAAA;IACA;IACA,iBAAA,CAAA,MAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CACA,CAAA,CACA;EACA,CAAA,CAAA,OAAA,KAAA,EAAA;IACA;IACA,OAAA,EAAA;EACA;AACA;AAEA,SAAA,iBAAA,CAAA,WAAA,EAAA;EACA,MAAA;IAAA,eAAA;IAAA,eAAA;IAAA;EAAA,CAAA,GAAA,WAAA;EACA;EACA;EACA,MAAA,IAAA,GAAA,IAAA,CAAA,GAAA,EAAA,GAAA,IAAA;EACA,OAAA;IACA,IAAA,EAAA,QAAA;IACA,IAAA,EAAA,QAAA;IACA,KAAA,EAAA,IAAA;IACA,GAAA,EAAA,IAAA;IACA,IAAA,EAAA;MACA,MAAA,EAAA;QACA,eAAA;QACA,eAAA;QACA;MACA;IACA;EACA,CAAA;AACA;;ACtCA;AACA;AACA,MAAA,WAAA,GAAA;EACA;EACA,QAAA,EAAA,mBAAA;EACA,KAAA,EAAA,gBAAA;EACA;EACA,UAAA,EAAA,qBAAA;EACA;EACA,CAAA,0BAAA,GAAA;AACA,CAAA;;AAEA;AACA;AACA;AACA,SAAA,wBAAA,CAAA,OAAA,EAAA;EACA,OAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,CAAA,CAAA,MAAA,CAAA,OAAA,CAAA;AACA;AAEA,SAAA,sBAAA,CAAA,KAAA,EAAA;EACA,IAAA,WAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA,SAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,OAAA,WAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA,KAAA,CAAA;AACA;AAEA,SAAA,eAAA,CAAA,IAAA,EAAA;EACA;EACA;EACA,OAAA,CAAA,CAAA,4BAAA,IAAA,MAAA,CAAA,WAAA,CAAA,UAAA,IAAA,IAAA,IAAA,IAAA;AACA;;AAEA;AACA;AACA,SAAA,gBAAA,CAAA,KAAA,EAAA;EACA,MAAA;IAAA,QAAA;IAAA,SAAA;IAAA,IAAA;IAAA;EAAA,CAAA,GAAA,KAAA;EAEA,MAAA,KAAA,GAAA,eAAA,CAAA,SAAA,CAAA;EACA,OAAA;IACA,IAAA,EAAA,SAAA;IACA,IAAA;IACA,KAAA;IACA,GAAA,EAAA,KAAA,GAAA;EACA,CAAA;AACA;;AAEA;AACA;AACA,SAAA,qBAAA,CAAA,KAAA,EAAA;EACA;EACA,MAAA;IAAA,SAAA;IAAA,IAAA;IAAA,QAAA;IAAA,WAAA;IAAA,SAAA;IAAA,YAAA;IAAA;EAAA,CAAA,GAAA,KAAA;;EAEA;EACA,IAAA,QAAA,KAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,OAAA;IACA,IAAA,EAAA,GAAA,SAAA,IAAA,IAAA,EAAA;IACA,KAAA,EAAA,eAAA,CAAA,SAAA,CAAA;IACA,GAAA,EAAA,eAAA,CAAA,WAAA,CAAA;IACA,IAAA;IACA,IAAA,EAAA;MACA,IAAA,EAAA,YAAA;MACA;IACA;EACA,CAAA;AACA;;AAEA;AACA;AACA,SAAA,mBAAA,CAAA,KAAA,EAAA;EACA,MAAA;IAAA,SAAA;IAAA,aAAA;IAAA,IAAA;IAAA,WAAA;IAAA,SAAA;IAAA,eAAA;IAAA;EAAA,CAAA,GAAA,KAAA;;EAEA;EACA,IAAA,CAAA,OAAA,EAAA,gBAAA,CAAA,CAAA,QAAA,CAAA,aAAA,CAAA,EAAA;IACA,OAAA,IAAA;EACA;EAEA,OAAA;IACA,IAAA,EAAA,GAAA,SAAA,IAAA,aAAA,EAAA;IACA,KAAA,EAAA,eAAA,CAAA,SAAA,CAAA;IACA,GAAA,EAAA,eAAA,CAAA,WAAA,CAAA;IACA,IAAA;IACA,IAAA,EAAA;MACA,IAAA,EAAA,YAAA;MACA;IACA;EACA,CAAA;AACA;;AAEA;AACA;AACA,SAAA,4BAAA,CAAA,KAAA,EAAA;EACA,MAAA;IAAA,SAAA;IAAA,SAAA;IAAA;EAAA,CAAA,GAAA,KAAA;EAEA,IAAA,+BAAA,GAAA,CAAA;EAEA,IAAA,MAAA,CAAA,WAAA,EAAA;IACA,MAAA,QAAA,GAAA,MAAA,CAAA,WAAA,CAAA,gBAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA;;IAIA;IACA,+BAAA,GAAA,QAAA,IAAA,QAAA,CAAA,eAAA,IAAA,CAAA;EACA;;EAEA;EACA,MAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,SAAA,GAAA,+BAAA,EAAA,CAAA,CAAA;EACA;EACA;EACA,MAAA,GAAA,GAAA,eAAA,CAAA,+BAAA,CAAA,GAAA,KAAA,GAAA,IAAA;EAEA,OAAA;IACA,IAAA,EAAA,SAAA;IACA,IAAA,EAAA,SAAA;IACA,KAAA,EAAA,GAAA;IACA,GAAA;IACA,IAAA,EAAA;MACA,KAAA;MAAA;MACA,IAAA;MACA;MACA;MACA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA,KAAA,CAAA,KAAA,CAAA,OAAA;IACA;EACA,CAAA;AACA;;AClIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA;EACA,IAAA,mBAAA;EAEA,IAAA,OAAA;EACA,IAAA,UAAA;EAEA,MAAA,OAAA,GAAA,OAAA,IAAA,OAAA,CAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CAAA,GAAA,CAAA;EAEA,SAAA,UAAA,GAAA;IACA,YAAA,EAAA;IACA,mBAAA,GAAA,IAAA,EAAA;IACA,OAAA,mBAAA;EACA;EAEA,SAAA,YAAA,GAAA;IACA,OAAA,KAAA,SAAA,IAAA,YAAA,CAAA,OAAA,CAAA;IACA,UAAA,KAAA,SAAA,IAAA,YAAA,CAAA,UAAA,CAAA;IACA,OAAA,GAAA,UAAA,GAAA,SAAA;EACA;EAEA,SAAA,KAAA,GAAA;IACA,IAAA,OAAA,KAAA,SAAA,IAAA,UAAA,KAAA,SAAA,EAAA;MACA,OAAA,UAAA,EAAA;IACA;IACA,OAAA,mBAAA;EACA;EAEA,SAAA,SAAA,GAAA;IACA,IAAA,OAAA,EAAA;MACA,YAAA,CAAA,OAAA,CAAA;IACA;IACA,OAAA,GAAA,UAAA,CAAA,UAAA,EAAA,IAAA,CAAA;IAEA,IAAA,OAAA,IAAA,UAAA,KAAA,SAAA,EAAA;MACA,UAAA,GAAA,UAAA,CAAA,UAAA,EAAA,OAAA,CAAA;IACA;IAEA,OAAA,mBAAA;EACA;EAEA,SAAA,CAAA,MAAA,GAAA,YAAA;EACA,SAAA,CAAA,KAAA,GAAA,KAAA;EACA,OAAA,SAAA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA,SAAA,sBAAA,CAAA,MAAA,EAAA;EACA,IAAA,aAAA,GAAA,KAAA;EAEA,OAAA,CAAA,KAAA,EAAA,WAAA,KAAA;IACA;IACA,IAAA,CAAA,MAAA,CAAA,4BAAA,EAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,IAAA,CAAA,uDAAA,CAAA;MAEA;IACA;;IAEA;IACA;IACA,MAAA,UAAA,GAAA,WAAA,IAAA,CAAA,aAAA;IACA,aAAA,GAAA,IAAA;;IAEA;IACA,MAAA,CAAA,SAAA,CAAA,MAAA;MACA;MACA;MACA;MACA;MACA;MACA,IAAA,MAAA,CAAA,aAAA,KAAA,OAAA,IAAA,UAAA,EAAA;QACA,MAAA,CAAA,eAAA,EAAA;MACA;;MAEA;MACA;MACA,KAAA,QAAA,CAAA,MAAA,EAAA,KAAA,EAAA,UAAA,CAAA;;MAEA;MACA;MACA,IAAA,CAAA,UAAA,EAAA;QACA,OAAA,KAAA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA,IAAA,MAAA,CAAA,OAAA,IAAA,MAAA,CAAA,OAAA,CAAA,iBAAA,EAAA;QACA,OAAA,IAAA;MACA;;MAEA;MACA;MACA,IAAA,MAAA,CAAA,aAAA,KAAA,OAAA,IAAA,MAAA,CAAA,OAAA,EAAA;QACA,MAAA;UAAA;QAAA,CAAA,GAAA,MAAA,CAAA,UAAA,EAAA;QACA,IAAA,aAAA,EAAA;UACA,MAAA,CAAA,OAAA,CAAA,OAAA,GAAA,aAAA;UAEA,IAAA,MAAA,CAAA,UAAA,EAAA,CAAA,aAAA,EAAA;YACA,WAAA,CAAA,MAAA,CAAA,OAAA,CAAA;UACA;QACA;MACA;;MAEA;MACA;MACA;MACA;MACA,IAAA,MAAA,CAAA,aAAA,KAAA,SAAA,EAAA;QACA;QACA,KAAA,MAAA,CAAA,cAAA,EAAA;MACA;MAEA,OAAA,IAAA;IACA,CAAA,CAAA;EACA,CAAA;AACA;;AClFA;AACA;AACA;AACA;AACA,SAAA,oBAAA,CACA,WAAA,EACA,aAAA,EACA,GAAA,EACA,MAAA,EACA;EACA,OAAA,cAAA,CACA,0BAAA,CAAA,WAAA,EAAA,+BAAA,CAAA,WAAA,CAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EACA,CACA,CAAA;IAAA,IAAA,EAAA;EAAA,CAAA,EAAA,WAAA,CAAA,EACA,CACA;IACA,IAAA,EAAA,kBAAA;IACA;IACA;IACA;IACA,MAAA,EACA,OAAA,aAAA,KAAA,QAAA,GAAA,IAAA,WAAA,EAAA,CAAA,MAAA,CAAA,aAAA,CAAA,CAAA,MAAA,GAAA,aAAA,CAAA;EACA,CAAA,EACA,aAAA,CACA,CACA,CACA;AACA;;AC5BA;AACA;AACA;AACA,SAAA,oBAAA,SAMA;EAAA,IANA;IACA,aAAA;IACA;EACA,CAAA;EAIA,IAAA,mBAAA;;EAEA;EACA,MAAA,aAAA,GAAA,GAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA;AACA,CAAA;EAEA,IAAA,OAAA,aAAA,KAAA,QAAA,EAAA;IACA,mBAAA,GAAA,GAAA,aAAA,GAAA,aAAA,EAAA;EACA,CAAA,MAAA;IACA,MAAA,GAAA,GAAA,IAAA,WAAA,EAAA;IACA;IACA,MAAA,QAAA,GAAA,GAAA,CAAA,MAAA,CAAA,aAAA,CAAA;IACA;IACA,mBAAA,GAAA,IAAA,UAAA,CAAA,QAAA,CAAA,MAAA,GAAA,aAAA,CAAA,MAAA,CAAA;IACA,mBAAA,CAAA,GAAA,CAAA,QAAA,CAAA;IACA,mBAAA,CAAA,GAAA,CAAA,aAAA,EAAA,QAAA,CAAA,MAAA,CAAA;EACA;EAEA,OAAA,mBAAA;AACA;;AC1BA;AACA;AACA;AACA,eAAA,kBAAA,SAUA;EAAA,IAVA;IACA,MAAA;IACA,KAAA;IACA,QAAA,EAAA,QAAA;IACA;EACA,CAAA;EAMA,MAAA,YAAA,GACA,OAAA,MAAA,CAAA,aAAA,KAAA,QAAA,IAAA,MAAA,CAAA,aAAA,KAAA,IAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,aAAA,CAAA,GACA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,aAAA,CAAA,GACA,SAAA;EACA,MAAA,aAAA,GAAA,MAAA,YAAA,CACA,MAAA,CAAA,UAAA,EAAA,EACA,KAAA,EACA;IAAA,QAAA;IAAA;EAAA,CAAA,EACA,KAAA,CACA;;EAEA;EACA,IAAA,CAAA,aAAA,EAAA;IACA,OAAA,IAAA;EACA;;EAEA;EACA;EACA;EACA,aAAA,CAAA,QAAA,GAAA,aAAA,CAAA,QAAA,IAAA,YAAA;;EAEA;EACA,MAAA,QAAA,GAAA,MAAA,CAAA,cAAA,IAAA,MAAA,CAAA,cAAA,EAAA;EACA,MAAA;IAAA,IAAA;IAAA;EAAA,CAAA,GAAA,QAAA,IAAA,QAAA,CAAA,GAAA,IAAA,CAAA,CAAA;EAEA,aAAA,CAAA,GAAA,GAAA;IACA,GAAA,aAAA,CAAA,GAAA;IACA,IAAA,EAAA,IAAA,IAAA,2BAAA;IACA,OAAA,EAAA,OAAA,IAAA;EACA,CAAA;EAEA,OAAA,aAAA;AACA;;ACzCA;AACA;AACA;AACA,eAAA,iBAAA,SASA;EAAA,IATA;IACA,aAAA;IACA,QAAA;IACA,SAAA,EAAA,UAAA;IACA,2BAAA;IACA,YAAA;IACA,SAAA;IACA,OAAA;IACA;EACA,CAAA;EACA,MAAA,qBAAA,GAAA,oBAAA,CAAA;IACA,aAAA;IACA,OAAA,EAAA;MACA;IACA;EACA,CAAA,CAAA;EAEA,MAAA;IAAA,IAAA;IAAA,QAAA;IAAA,QAAA;IAAA;EAAA,CAAA,GAAA,YAAA;EAEA,MAAA,GAAA,GAAA,aAAA,EAAA;EACA,MAAA,MAAA,GAAA,GAAA,CAAA,SAAA,EAAA;EACA,MAAA,KAAA,GAAA,GAAA,CAAA,QAAA,EAAA;EACA,MAAA,SAAA,GAAA,MAAA,IAAA,MAAA,CAAA,YAAA,EAAA;EACA,MAAA,GAAA,GAAA,MAAA,IAAA,MAAA,CAAA,MAAA,EAAA;EAEA,IAAA,CAAA,MAAA,IAAA,CAAA,KAAA,IAAA,CAAA,SAAA,IAAA,CAAA,GAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA;IACA;EACA;EAEA,MAAA,SAAA,GAAA;IACA;IACA,IAAA,EAAA,iBAAA;IACA,IAAA,2BAAA,GAAA;MAAA,sBAAA,EAAA,gBAAA,GAAA;IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;IACA,SAAA,EAAA,SAAA,GAAA,IAAA;IACA,SAAA,EAAA,QAAA;IACA,SAAA,EAAA,QAAA;IACA,IAAA;IACA,SAAA,EAAA,QAAA;IACA,UAAA;IACA,WAAA,EAAA,OAAA,CAAA;EACA,CAAA;EAEA,MAAA,WAAA,GAAA,MAAA,kBAAA,CAAA;IAAA,KAAA;IAAA,MAAA;IAAA,QAAA;IAAA,KAAA,EAAA;EAAA,CAAA,CAAA;EAEA,IAAA,CAAA,WAAA,EAAA;IACA;IACA,MAAA,CAAA,kBAAA,CAAA,iBAAA,EAAA,QAAA,EAAA,SAAA,CAAA;IACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,0DAAA,CAAA;IACA;EACA;EAEA,WAAA,CAAA,QAAA,GAAA;IACA,GAAA,WAAA,CAAA,QAAA;IACA,MAAA,EAAA;MACA,IAAA,WAAA,CAAA,QAAA,IAAA,WAAA,CAAA,QAAA,CAAA,MAAA,CAAA;MACA,mBAAA,EAAA,OAAA,CAAA,iBAAA;MACA,iBAAA,EAAA,OAAA,CAAA;IACA;EACA,CAAA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEA,MAAA,QAAA,GAAA,oBAAA,CAAA,WAAA,EAAA,qBAAA,EAAA,GAAA,EAAA,MAAA,CAAA,UAAA,EAAA,CAAA,MAAA,CAAA;EAEA,IAAA,QAAA;EAEA,IAAA;IACA,QAAA,GAAA,MAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA;EACA,CAAA,CAAA,OAAA,GAAA,EAAA;IACA,MAAA,KAAA,GAAA,IAAA,KAAA,CAAA,qBAAA,CAAA;IAEA,IAAA;MACA;MACA;MACA,KAAA,CAAA,KAAA,GAAA,GAAA;IACA,CAAA,CAAA,OAAA,CAAA,EAAA;MACA;IAAA;IAEA,MAAA,KAAA;EACA;;EAEA;EACA,IAAA,CAAA,QAAA,EAAA;IACA,OAAA,QAAA;EACA;;EAEA;EACA,IAAA,OAAA,QAAA,CAAA,UAAA,KAAA,QAAA,KAAA,QAAA,CAAA,UAAA,GAAA,GAAA,IAAA,QAAA,CAAA,UAAA,IAAA,GAAA,CAAA,EAAA;IACA,MAAA,IAAA,wBAAA,CAAA,QAAA,CAAA,UAAA,CAAA;EACA;EAEA,OAAA,QAAA;AACA;;AAEA;AACA;AACA;AACA,MAAA,wBAAA,SAAA,KAAA,CAAA;EACA,WAAA,CAAA,UAAA,EAAA;IACA,KAAA,CAAA,kCAAA,UAAA,EAAA,CAAA;EACA;AACA;;AChJA;AACA;AACA;AACA,eAAA,UAAA,CACA,UAAA,EAKA;EAAA,IAJA,WAAA,uEAAA;IACA,KAAA,EAAA,CAAA;IACA,QAAA,EAAA;EACA,CAAA;EAEA,MAAA;IAAA,aAAA;IAAA;EAAA,CAAA,GAAA,UAAA;;EAEA;EACA,IAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IACA;EACA;EAEA,IAAA;IACA,MAAA,iBAAA,CAAA,UAAA,CAAA;IACA,OAAA,IAAA;EACA,CAAA,CAAA,OAAA,GAAA,EAAA;IACA,IAAA,GAAA,YAAA,wBAAA,EAAA;MACA,MAAA,GAAA;IACA;;IAEA;IACA,UAAA,CAAA,SAAA,EAAA;MACA,WAAA,EAAA,WAAA,CAAA;IACA,CAAA,CAAA;IAEA,IAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,OAAA,CAAA,YAAA,IAAA,OAAA,CAAA,YAAA,CAAA,iBAAA,EAAA;MACA,gBAAA,CAAA,GAAA,CAAA;IACA;;IAEA;IACA;IACA,IAAA,WAAA,CAAA,KAAA,IAAA,eAAA,EAAA;MACA,MAAA,KAAA,GAAA,IAAA,KAAA,CAAA,GAAA,qBAAA,yBAAA,CAAA;MAEA,IAAA;QACA;QACA;QACA,KAAA,CAAA,KAAA,GAAA,GAAA;MACA,CAAA,CAAA,OAAA,CAAA,EAAA;QACA;MAAA;MAGA,MAAA,KAAA;IACA;;IAEA;IACA,WAAA,CAAA,QAAA,IAAA,EAAA,WAAA,CAAA,KAAA;IAEA,OAAA,MAAA,IAAA,OAAA,CAAA,CAAA,OAAA,EAAA,MAAA,KAAA;MACA,UAAA,CAAA,YAAA;QACA,IAAA;UACA,MAAA,UAAA,CAAA,UAAA,EAAA,WAAA,CAAA;UACA,OAAA,CAAA,IAAA,CAAA;QACA,CAAA,CAAA,OAAA,GAAA,EAAA;UACA,MAAA,CAAA,GAAA,CAAA;QACA;MACA,CAAA,EAAA,WAAA,CAAA,QAAA,CAAA;IACA,CAAA,CAAA;EACA;AACA;;ACtEA,+BAAA;;AAoCA;AACA;AACA;AACA,MAAA,eAAA,CAAA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,WAAA,GAAA,IAAA;EAAA;;EAEA;AACA;AACA;EACA,OAAA,GAAA;IAAA,IAAA,CAAA,iBAAA,GAAA,EAAA;EAAA;;EAIA;AACA;AACA;AACA;AACA;EACA,OAAA,GAAA;IAAA,IAAA,CAAA,aAAA,GAAA,SAAA;EAAA;;EAEA;AACA;AACA;AACA;EACA,OAAA,GAAA;IAAA,IAAA,CAAA,QAAA,GAAA;MACA,WAAA,EAAA,qBAAA;MACA,cAAA,EAAA;IACA,CAAA;EAAA;;EAEA;AACA;AACA;;EAKA,OAAA,GAAA;IAAA,IAAA,CAAA,oBAAA,GAAA,IAAA;EAAA;EAGA,OAAA,GAAA;IAAA,IAAA,CAAA,UAAA,GAAA,IAAA;EAAA;;EAEA;AACA;AACA;EACA,OAAA,GAAA;IAAA,IAAA,CAAA,aAAA,GAAA,IAAA,CAAA,GAAA,EAAA;EAAA;;EAEA;AACA;AACA;EACA,OAAA,GAAA;IAAA,IAAA,CAAA,UAAA,GAAA,KAAA;EAAA;;EAEA;AACA;AACA;AACA;AACA;EACA,OAAA,GAAA;IAAA,IAAA,CAAA,SAAA,GAAA,KAAA;EAAA;;EAEA;AACA;AACA;AACA;EACA,QAAA,GAAA;IAAA,IAAA,CAAA,4BAAA,GAAA,KAAA;EAAA;;EAEA;AACA;AACA;EACA,QAAA,GAAA;IAAA,IAAA,CAAA,cAAA,GAAA,IAAA;EAAA;EAEA,QAAA,GAAA;IAAA,IAAA,CAAA,QAAA,GAAA;MACA,QAAA,EAAA,IAAA,GAAA,EAAA;MACA,QAAA,EAAA,IAAA,GAAA,EAAA;MACA,IAAA,EAAA,EAAA;MACA,aAAA,EAAA,IAAA;MACA,gBAAA,EAAA,IAAA,CAAA,GAAA,EAAA;MACA,UAAA,EAAA;IACA,CAAA;EAAA;EAEA,WAAA,SAMA;IAAA,IANA;MACA,OAAA;MACA;IACA,CAAA;IAGA,eAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IAAA,eAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,IAAA,CAAA,iBAAA,GAAA,gBAAA;IACA,IAAA,CAAA,QAAA,GAAA,OAAA;IAEA,IAAA,CAAA,eAAA,GAAA,QAAA,CAAA,MAAA,IAAA,CAAA,MAAA,EAAA,EAAA,IAAA,CAAA,QAAA,CAAA,aAAA,EAAA;MACA,OAAA,EAAA,IAAA,CAAA,QAAA,CAAA;IACA,CAAA,CAAA;EACA;;EAEA;EACA,UAAA,GAAA;IACA,OAAA,IAAA,CAAA,QAAA;EACA;;EAEA;EACA,SAAA,GAAA;IACA,OAAA,IAAA,CAAA,UAAA;EACA;;EAEA;EACA,QAAA,GAAA;IACA,OAAA,IAAA,CAAA,SAAA;EACA;;EAEA;EACA,UAAA,GAAA;IACA,OAAA,IAAA,CAAA,QAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA,KAAA,GAAA;IACA,IAAA,CAAA,eAAA,EAAA;IAEA,IAAA,CAAA,IAAA,CAAA,oBAAA,EAAA,EAAA;MACA;IACA;;IAEA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,IAAA,KAAA,CAAA,kBAAA,CAAA,CAAA;MACA;IACA;IAEA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA;MACA;MACA;IACA;;IAEA;IACA;IACA,IAAA,IAAA,CAAA,OAAA,CAAA,OAAA,KAAA,OAAA,EAAA;MACA,IAAA,CAAA,aAAA,GAAA,OAAA;IACA;;IAEA;IACA;IACA,IAAA,CAAA,sBAAA,EAAA;IAEA,IAAA,CAAA,WAAA,GAAA,iBAAA,CAAA;MACA,cAAA,EAAA,IAAA,CAAA,QAAA,CAAA;IACA,CAAA,CAAA;IAEA,IAAA,CAAA,aAAA,EAAA;;IAEA;IACA,IAAA,CAAA,UAAA,GAAA,IAAA;IAEA,IAAA,CAAA,cAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;EACA,cAAA,GAAA;IACA,IAAA;MACA,IAAA,CAAA,cAAA,GAAA,MAAA,CAAA;QACA,GAAA,IAAA,CAAA,iBAAA;QACA;QACA;QACA;QACA,IAAA,IAAA,CAAA,aAAA,KAAA,OAAA,IAAA;UAAA,gBAAA,EAAA;QAAA,CAAA,CAAA;QACA,IAAA,EAAA,sBAAA,CAAA,IAAA,CAAA;QACA,UAAA,EAAA,SAAA,IAAA;UACA,IAAA,IAAA,CAAA,QAAA,CAAA,YAAA,CAAA,mBAAA,EAAA;YACA,MAAA,KAAA,GAAA,SAAA,CAAA,MAAA;YAEA,IAAA,KAAA,GAAA,GAAA,EAAA;cACA,MAAA,UAAA,GAAA,gBAAA,CAAA;gBACA,QAAA,EAAA,kBAAA;gBACA,IAAA,EAAA;kBACA;gBACA;cACA,CAAA,CAAA;cACA,IAAA,CAAA,uBAAA,CAAA,UAAA,CAAA;YACA;UACA;UACA;UACA,OAAA,IAAA;QACA;MACA,CAAA,CAAA;IACA,CAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;IACA;EACA;;EAEA;AACA;AACA;AACA;EACA,aAAA,GAAA;IACA,IAAA;MACA,IAAA,IAAA,CAAA,cAAA,EAAA;QACA,IAAA,CAAA,cAAA,EAAA;QACA,IAAA,CAAA,cAAA,GAAA,SAAA;QACA,OAAA,IAAA;MACA;MAEA,OAAA,KAAA;IACA,CAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;MACA,OAAA,KAAA;IACA;EACA;;EAEA;AACA;AACA;AACA;EACA,IAAA,CAAA,MAAA,EAAA;IACA,IAAA,CAAA,IAAA,CAAA,UAAA,EAAA;MACA;IACA;IAEA,IAAA;MACA,IAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,EAAA;QACA,MAAA,GAAA,GAAA,2BAAA,MAAA,GAAA,iBAAA,MAAA,EAAA,GAAA,EAAA,EAAA;;QAEA;QACA;QACA;QACA,MAAA,GAAA,GAAA,IAAA,CAAA,UAAA,EAAA,CAAA,YAAA,CAAA,cAAA,GAAA,OAAA,CAAA,IAAA,GAAA,MAAA,CAAA,GAAA;QACA,GAAA,CAAA,GAAA,CAAA;MACA;MAEA,IAAA,CAAA,UAAA,GAAA,KAAA;MACA,IAAA,CAAA,gBAAA,EAAA;MACA,IAAA,CAAA,aAAA,EAAA;MACA,IAAA,CAAA,WAAA,IAAA,IAAA,CAAA,WAAA,CAAA,OAAA,EAAA;MACA,IAAA,CAAA,WAAA,GAAA,IAAA;MACA,IAAA,CAAA,eAAA,CAAA,MAAA,EAAA;IACA,CAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;IACA;EACA;;EAEA;AACA;AACA;AACA;AACA;EACA,KAAA,GAAA;IACA,IAAA,CAAA,SAAA,GAAA,IAAA;IACA,IAAA,CAAA,aAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA,MAAA,GAAA;IACA,IAAA,CAAA,IAAA,CAAA,oBAAA,EAAA,EAAA;MACA;IACA;IAEA,IAAA,CAAA,SAAA,GAAA,KAAA;IACA,IAAA,CAAA,cAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAAA,CAAA,EAAA,EAAA;IACA;IACA,MAAA,QAAA,GAAA,EAAA,EAAA;;IAEA;IACA;IACA,IAAA,IAAA,CAAA,aAAA,KAAA,OAAA,EAAA;MACA;IACA;;IAEA;IACA;IACA,IAAA,QAAA,KAAA,IAAA,EAAA;MACA;IACA;;IAEA;IACA;IACA,IAAA,CAAA,eAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;EACA,mBAAA,GAAA;IACA,IAAA,CAAA,mBAAA,EAAA;;IAEA;IACA;IACA,IAAA,CAAA,IAAA,CAAA,cAAA,EAAA;MACA;MACA;MACA,IAAA,CAAA,IAAA,CAAA,oBAAA,EAAA,EAAA;QACA;MACA;;MAEA;MACA,IAAA,CAAA,MAAA,EAAA;MACA;IACA;;IAEA;IACA,IAAA,CAAA,4BAAA,EAAA;IAEA,IAAA,CAAA,sBAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA,cAAA,GAAA;IACA,IAAA,CAAA,eAAA,EAAA;IACA;IACA,OAAA,IAAA,CAAA,eAAA,CAAA,KAAA,EAAA;EACA;;EAEA;EACA,YAAA,GAAA;IACA,OAAA,IAAA,CAAA,OAAA,IAAA,IAAA,CAAA,OAAA,CAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,4BAAA,GAAA;IACA,MAAA,YAAA,GAAA,IAAA,CAAA,YAAA,EAAA;;IAEA;IACA;IACA;IACA;IACA,IACA,IAAA,CAAA,aAAA,IACA,SAAA,CAAA,IAAA,CAAA,aAAA,EAAA,IAAA,CAAA,QAAA,CAAA,WAAA,CAAA,IACA,IAAA,CAAA,OAAA,IACA,IAAA,CAAA,OAAA,CAAA,OAAA,KAAA,SAAA,EACA;MACA;MACA;MACA;MACA;MACA,IAAA,CAAA,KAAA,EAAA;MACA;IACA;;IAEA;IACA;IACA,IAAA,CAAA,IAAA,CAAA,oBAAA,EAAA,EAAA;MACA;IACA;;IAEA;IACA,MAAA,OAAA,GAAA,YAAA,KAAA,IAAA,CAAA,YAAA,EAAA;IAEA,IAAA,CAAA,OAAA,EAAA;MACA,OAAA,IAAA;IACA;;IAEA;IACA,IAAA,CAAA,oBAAA,EAAA;IAEA,OAAA,KAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;EACA,eAAA,GAAA;IACA,MAAA,OAAA,GAAA,GAAA,MAAA,CAAA,QAAA,CAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,MAAA,CAAA,QAAA,CAAA,MAAA,EAAA;IACA,MAAA,GAAA,GAAA,GAAA,MAAA,CAAA,QAAA,CAAA,MAAA,GAAA,OAAA,EAAA;IAEA,IAAA,CAAA,iBAAA,GAAA,EAAA;;IAEA;IACA,IAAA,CAAA,aAAA,EAAA;IAEA,IAAA,CAAA,QAAA,CAAA,UAAA,GAAA,GAAA;IACA,IAAA,CAAA,QAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,GAAA,EAAA;IACA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA;EACA;;EAEA;EACA,gBAAA,CAAA,KAAA,EAAA;IACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,UAAA,EAAA,KAAA,CAAA;IAEA,IAAA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,IAAA,CAAA,QAAA,CAAA,YAAA,IAAA,IAAA,CAAA,QAAA,CAAA,YAAA,CAAA,iBAAA,EAAA;MACA,gBAAA,CAAA,KAAA,CAAA;IACA;EACA;;EAEA;AACA;AACA;AACA;EACA,oBAAA,GAAA;IACA,MAAA;MAAA,IAAA;MAAA;IAAA,CAAA,GAAA,UAAA,CAAA;MACA,QAAA,EAAA,IAAA,CAAA,QAAA;MACA,aAAA,EAAA,OAAA,CAAA,IAAA,CAAA,QAAA,CAAA,aAAA,CAAA;MACA,cAAA,EAAA,IAAA,CAAA,OAAA;MACA,iBAAA,EAAA,IAAA,CAAA,QAAA,CAAA,iBAAA;MACA,eAAA,EAAA,IAAA,CAAA,QAAA,CAAA;IACA,CAAA,CAAA;;IAEA;IACA;IACA,IAAA,IAAA,KAAA,KAAA,EAAA;MACA,IAAA,CAAA,eAAA,EAAA;IACA;IAEA,MAAA,gBAAA,GAAA,IAAA,CAAA,YAAA,EAAA;IACA,IAAA,OAAA,CAAA,EAAA,KAAA,gBAAA,EAAA;MACA,OAAA,CAAA,iBAAA,GAAA,gBAAA;IACA;IAEA,IAAA,CAAA,OAAA,GAAA,OAAA;IAEA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA;MACA,IAAA,CAAA,IAAA,CAAA,mBAAA,CAAA;MACA,OAAA,KAAA;IACA;IAEA,OAAA,IAAA;EACA;;EAEA;AACA;AACA;EACA,aAAA,GAAA;IACA,IAAA;MACA,MAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,kBAAA,EAAA,IAAA,CAAA,uBAAA,CAAA;MACA,MAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,IAAA,CAAA,iBAAA,CAAA;MACA,MAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,IAAA,CAAA,kBAAA,CAAA;;MAEA;MACA,IAAA,CAAA,IAAA,CAAA,4BAAA,EAAA;QACA,kBAAA,CAAA,IAAA,CAAA;QAEA,IAAA,CAAA,4BAAA,GAAA,IAAA;MACA;IACA,CAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;IACA;;IAEA;IACA,IAAA,EAAA,qBAAA,IAAA,MAAA,CAAA,EAAA;MACA;IACA;IAEA,IAAA,CAAA,oBAAA,GAAA,wBAAA,CAAA,IAAA,CAAA;EACA;;EAEA;AACA;AACA;EACA,gBAAA,GAAA;IACA,IAAA;MACA,MAAA,CAAA,QAAA,CAAA,mBAAA,CAAA,kBAAA,EAAA,IAAA,CAAA,uBAAA,CAAA;MAEA,MAAA,CAAA,mBAAA,CAAA,MAAA,EAAA,IAAA,CAAA,iBAAA,CAAA;MACA,MAAA,CAAA,mBAAA,CAAA,OAAA,EAAA,IAAA,CAAA,kBAAA,CAAA;MAEA,IAAA,IAAA,CAAA,oBAAA,EAAA;QACA,IAAA,CAAA,oBAAA,CAAA,UAAA,EAAA;QACA,IAAA,CAAA,oBAAA,GAAA,IAAA;MACA;IACA,CAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;IACA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA,QAAA,GAAA;IAAA,IAAA,CAAA,uBAAA,GAAA,MAAA;MACA,IAAA,MAAA,CAAA,QAAA,CAAA,eAAA,KAAA,SAAA,EAAA;QACA,IAAA,CAAA,0BAAA,EAAA;MACA,CAAA,MAAA;QACA,IAAA,CAAA,0BAAA,EAAA;MACA;IACA,CAAA;EAAA;;EAEA;AACA;AACA;EACA,QAAA,GAAA;IAAA,IAAA,CAAA,iBAAA,GAAA,MAAA;MACA,MAAA,UAAA,GAAA,gBAAA,CAAA;QACA,QAAA,EAAA;MACA,CAAA,CAAA;;MAEA;MACA;MACA,IAAA,CAAA,0BAAA,CAAA,UAAA,CAAA;IACA,CAAA;EAAA;;EAEA;AACA;AACA;EACA,QAAA,GAAA;IAAA,IAAA,CAAA,kBAAA,GAAA,MAAA;MACA,MAAA,UAAA,GAAA,gBAAA,CAAA;QACA,QAAA,EAAA;MACA,CAAA,CAAA;;MAEA;MACA;MACA,IAAA,CAAA,0BAAA,CAAA,UAAA,CAAA;IACA,CAAA;EAAA;;EAEA;AACA;AACA;EACA,0BAAA,CAAA,UAAA,EAAA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;MACA;IACA;IAEA,MAAA,OAAA,GAAA,gBAAA,CAAA,IAAA,CAAA,OAAA,EAAA,IAAA,CAAA,QAAA,CAAA;IAEA,IAAA,UAAA,IAAA,CAAA,OAAA,EAAA;MACA,IAAA,CAAA,uBAAA,CAAA,UAAA,CAAA;IACA;;IAEA;IACA;IACA;IACA,IAAA,CAAA,iBAAA,EAAA;EACA;;EAEA;AACA;AACA;EACA,0BAAA,CAAA,UAAA,EAAA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;MACA;IACA;IAEA,MAAA,eAAA,GAAA,IAAA,CAAA,4BAAA,EAAA;IAEA,IAAA,CAAA,eAAA,EAAA;MACA;MACA;MACA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,8DAAA,CAAA;MACA;IACA;IAEA,IAAA,UAAA,EAAA;MACA,IAAA,CAAA,uBAAA,CAAA,UAAA,CAAA;IACA;EACA;;EAEA;AACA;AACA;AACA;EACA,oBAAA,GAAA;IACA,IAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,GAAA,CAAA,qCAAA,CAAA;MACA,MAAA,CAAA,gBAAA,CAAA,IAAA,CAAA;IACA,CAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;IACA;EACA;;EAEA;AACA;AACA;EACA,mBAAA,GAAA;IAAA,IAAA,aAAA,uEAAA,IAAA,CAAA,GAAA,EAAA;IACA,IAAA,CAAA,aAAA,GAAA,aAAA;EACA;;EAEA;AACA;AACA;EACA,sBAAA,GAAA;IAAA,IAAA,aAAA,uEAAA,IAAA,CAAA,GAAA,EAAA;IACA,IAAA,IAAA,CAAA,OAAA,EAAA;MACA,IAAA,CAAA,OAAA,CAAA,YAAA,GAAA,aAAA;MACA,IAAA,CAAA,iBAAA,EAAA;IACA;EACA;;EAEA;AACA;AACA;EACA,uBAAA,CAAA,UAAA,EAAA;IACA,IAAA,CAAA,SAAA,CAAA,MAAA;MACA,KAAA,QAAA,CAAA,IAAA,EAAA;QACA,IAAA,EAAA,SAAA,CAAA,MAAA;QACA,SAAA,EAAA,UAAA,CAAA,SAAA,IAAA,CAAA;QACA,IAAA,EAAA;UACA,GAAA,EAAA,YAAA;UACA,OAAA,EAAA;QACA;MACA,CAAA,CAAA;IACA,CAAA,CAAA;EACA;;EAEA;AACA;AACA;AACA;EACA,sBAAA,GAAA;IACA;IACA,MAAA,OAAA,GAAA,CAAA,GAAA,IAAA,CAAA,iBAAA,CAAA;IACA,IAAA,CAAA,iBAAA,GAAA,EAAA;IAEA,OAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,CAAA,IAAA,EAAA,wBAAA,CAAA,OAAA,CAAA,CAAA,CAAA;EACA;;EAEA;AACA;AACA;EACA,iBAAA,GAAA;IACA,IAAA,IAAA,CAAA,aAAA,KAAA,OAAA,EAAA;MACA;IACA;IAEA,KAAA,IAAA,CAAA,cAAA,EAAA;EACA;;EAEA;AACA;AACA;EACA,aAAA,GAAA;IACA;IACA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,KAAA,EAAA;IACA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,KAAA,EAAA;IACA,IAAA,CAAA,QAAA,CAAA,IAAA,GAAA,EAAA;IACA,IAAA,CAAA,QAAA,CAAA,aAAA,GAAA,IAAA;EACA;;EAEA;AACA;AACA;EACA,gBAAA,GAAA;IACA,IAAA,IAAA,CAAA,QAAA,CAAA,aAAA,IAAA,IAAA,CAAA,QAAA,CAAA,aAAA,GAAA,IAAA,CAAA,QAAA,CAAA,gBAAA,EAAA;MACA,IAAA,CAAA,QAAA,CAAA,gBAAA,GAAA,IAAA,CAAA,QAAA,CAAA,aAAA;IACA;IAEA,MAAA,QAAA,GAAA;MACA,gBAAA,EAAA,IAAA,CAAA,QAAA,CAAA,gBAAA;MACA,UAAA,EAAA,IAAA,CAAA,QAAA,CAAA,UAAA;MACA,QAAA,EAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,OAAA,CAAA;MACA,QAAA,EAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,OAAA,CAAA;MACA,IAAA,EAAA,IAAA,CAAA,QAAA,CAAA;IACA,CAAA;IAEA,IAAA,CAAA,aAAA,EAAA;IAEA,OAAA,QAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,MAAA,SAAA,GAAA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA;MACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,oDAAA,CAAA;MACA;IACA;IAEA,MAAA,IAAA,CAAA,sBAAA,EAAA;;IAEA;IACA,IAAA,CAAA,IAAA,CAAA,WAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,SAAA,EAAA;MACA;IACA;;IAEA;IACA,MAAA,cAAA,CAAA,IAAA,CAAA;;IAEA;IACA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA;MACA;IACA;IAEA,IAAA;MACA;MACA,MAAA,aAAA,GAAA,MAAA,IAAA,CAAA,WAAA,CAAA,MAAA,EAAA;;MAEA;MACA;MACA,MAAA,QAAA,GAAA,IAAA,CAAA,OAAA,CAAA,EAAA;MACA,MAAA,YAAA,GAAA,IAAA,CAAA,gBAAA,EAAA;MACA;MACA,MAAA,SAAA,GAAA,IAAA,CAAA,OAAA,CAAA,SAAA,EAAA;MACA,IAAA,CAAA,iBAAA,EAAA;MAEA,MAAA,UAAA,CAAA;QACA,QAAA;QACA,aAAA;QACA,SAAA;QACA,2BAAA,EAAA,SAAA,KAAA,CAAA;QACA,YAAA;QACA,OAAA,EAAA,IAAA,CAAA,OAAA;QACA,OAAA,EAAA,IAAA,CAAA,UAAA,EAAA;QACA,SAAA,EAAA,IAAA,CAAA,GAAA;MACA,CAAA,CAAA;IACA,CAAA,CAAA,OAAA,GAAA,EAAA;MACA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;;MAEA;MACA;MACA;MACA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA;MAEA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;MAEA,IAAA,MAAA,EAAA;QACA,MAAA,CAAA,kBAAA,CAAA,YAAA,EAAA,QAAA,CAAA;MACA;IACA;EACA;;EAEA;AACA;AACA;AACA;EACA,QAAA,GAAA;IAAA,IAAA,CAAA,MAAA,GAAA,YAAA;MACA,IAAA,CAAA,IAAA,CAAA,UAAA,EAAA;QACA;QACA;MACA;MAEA,IAAA,CAAA,IAAA,CAAA,4BAAA,EAAA,EAAA;QACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,mEAAA,CAAA;QACA;MACA;MAEA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;QACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,qCAAA,CAAA;QACA;MACA;;MAEA;MACA,IAAA,CAAA,eAAA,CAAA,MAAA,EAAA;;MAEA;MACA;MACA,IAAA,CAAA,IAAA,CAAA,UAAA,EAAA;QACA,IAAA,CAAA,UAAA,GAAA,IAAA,CAAA,SAAA,EAAA;QACA,MAAA,IAAA,CAAA,UAAA;QACA,IAAA,CAAA,UAAA,GAAA,IAAA;QACA;MACA;;MAEA;MACA;MACA;MACA;MACA;;MAEA,IAAA;QACA,MAAA,IAAA,CAAA,UAAA;MACA,CAAA,CAAA,OAAA,GAAA,EAAA;QACA,CAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA;MACA,CAAA,SAAA;QACA,IAAA,CAAA,eAAA,EAAA;MACA;IACA,CAAA;EAAA;;EAEA;EACA,iBAAA,GAAA;IACA,IAAA,IAAA,CAAA,OAAA,IAAA,IAAA,CAAA,QAAA,CAAA,aAAA,EAAA;MACA,WAAA,CAAA,IAAA,CAAA,OAAA,CAAA;IACA;EACA;AACA;ACxzBA,SAAA,SAAA,CACA,SAAA,EACA,gBAAA,EACA,qBAAA,EACA,wBAAA,EACA;EACA,MAAA,mBAAA,GAAA,OAAA,wBAAA,KAAA,QAAA,GAAA,wBAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,EAAA;EAEA,MAAA,YAAA,GAAA,CACA,GAAA,SAAA;EACA;EACA,GAAA,mBAAA;EAEA;EACA,GAAA,gBAAA,CACA;;EAEA;EACA,IAAA,OAAA,qBAAA,KAAA,WAAA,EAAA;IACA;IACA,IAAA,OAAA,qBAAA,KAAA,QAAA,EAAA;MACA,YAAA,CAAA,IAAA,CAAA,IAAA,qBAAA,EAAA,CAAA;IACA;;IAEA;IACA,OAAA,CAAA,IAAA,CACA,yIAAA,CACA;EACA;EAEA,OAAA,YAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,iBAAA,SAiBA;EAAA,IAjBA;IACA,IAAA;IACA,MAAA;IACA,KAAA;IACA,OAAA;IACA,MAAA;IAEA;IACA,UAAA;IACA;IACA,aAAA;IACA;IACA,aAAA;IACA;IACA,gBAAA;IACA;IACA;EACA,CAAA;EACA,MAAA,sBAAA,GAAA,CAAA,gBAAA,CAAA;EAEA,MAAA,YAAA,GAAA,SAAA,CAAA,IAAA,EAAA,CAAA,cAAA,EAAA,oBAAA,CAAA,EAAA,aAAA,EAAA,gBAAA,CAAA;EACA,MAAA,cAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,gBAAA,EAAA,sBAAA,CAAA,CAAA;EAEA,MAAA,OAAA,GAAA;IACA;IACA,gBAAA,EAAA,YAAA;IACA,kBAAA,EAAA,cAAA;IACA,iBAAA,EAAA,YAAA;IACA,mBAAA,EAAA,cAAA;IAEA,aAAA,EAAA,SAAA,CACA,KAAA,EACA,CAAA,eAAA,EAAA,qBAAA,EAAA,GAAA,sBAAA,CAAA,EACA,UAAA,EACA,aAAA,CACA;IACA,eAAA,EAAA,SAAA,CAAA,OAAA,EAAA,CAAA,iBAAA,EAAA,uBAAA,CAAA,CAAA;IACA,cAAA,EAAA,SAAA,CAAA,MAAA,EAAA,CAAA,gBAAA,EAAA,sBAAA,EAAA,oBAAA,CAAA,EAAA,WAAA;EACA,CAAA;EAEA,IAAA,UAAA,YAAA,MAAA,EAAA;IACA,OAAA,CAAA,UAAA,GAAA,UAAA;EACA;EAEA,IAAA,aAAA,YAAA,MAAA,EAAA;IACA,OAAA,CAAA,aAAA,GAAA,aAAA;EACA;EAEA,OAAA,OAAA;AACA;;ACpGA;AACA;AACA;AACA,SAAA,SAAA,GAAA;EACA;EACA,OAAA,OAAA,MAAA,KAAA,WAAA,KAAA,CAAA,SAAA,EAAA,IAAA,sBAAA,EAAA,CAAA;AACA;;AAIA;AACA,SAAA,sBAAA,GAAA;EACA,OAAA,OAAA,OAAA,KAAA,WAAA,IAAA,OAAA,CAAA,IAAA,KAAA,UAAA;AACA;ACLA,MAAA,eAAA,GACA,kGAAA;AAEA,IAAA,YAAA,GAAA,KAAA;;AAKA;AACA;AACA;AACA,MAAA,MAAA,CAAA;EACA;AACA;AACA;EACA,OAAA,YAAA,GAAA;IAAA,IAAA,CAAA,EAAA,GAAA,QAAA;EAAA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,IAAA,GAAA,MAAA,CAAA,EAAA;EAAA;;EAEA;AACA;AACA;;EAGA;AACA;AACA;AACA;AACA;AACA;AACA;;EAKA,WAAA,GA+BA;IAAA,IA/BA;MACA,aAAA,GAAA,uBAAA;MACA,aAAA,GAAA,uBAAA;MACA,aAAA,GAAA,IAAA;MACA,cAAA,GAAA,IAAA;MACA,YAAA,GAAA,CAAA,CAAA;MACA,iBAAA;MACA,eAAA;MACA,WAAA,GAAA,IAAA;MACA,aAAA,GAAA,IAAA;MACA,aAAA,GAAA,IAAA;MAEA,IAAA,GAAA,EAAA;MACA,MAAA,GAAA,EAAA;MACA,KAAA,GAAA,EAAA;MACA,OAAA,GAAA,EAAA;MACA,MAAA,GAAA,EAAA;MACA,MAAA;MAEA;MACA,UAAA;MACA;MACA,aAAA;MACA;MACA,gBAAA;MACA;MACA,aAAA;MACA;MACA,gBAAA;MACA;MACA;IACA,CAAA,uEAAA,CAAA,CAAA;IAAA,MAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,IAAA,CAAA,iBAAA,GAAA;MACA,aAAA;MACA,WAAA;MACA,gBAAA,EAAA;QAAA,IAAA,gBAAA,IAAA,CAAA,CAAA,CAAA;QAAA,QAAA,EAAA;MAAA,CAAA;MACA,UAAA,EAAA,MAAA;MACA,WAAA,EAAA,MAAA;MAEA,GAAA,iBAAA,CAAA;QACA,IAAA;QACA,MAAA;QACA,KAAA;QACA,OAAA;QACA,MAAA;QACA,UAAA;QACA,aAAA;QACA,aAAA;QACA,gBAAA;QACA;MACA,CAAA,CAAA;MAEA;MACA,cAAA,EAAA,KAAA;MACA,gBAAA,EAAA,IAAA;MACA;MACA,YAAA,EAAA,KAAA;MACA;MACA;MACA,YAAA,EAAA;IACA,CAAA;IAEA,IAAA,CAAA,eAAA,GAAA;MACA,aAAA;MACA,aAAA;MACA,aAAA;MACA,iBAAA;MACA,eAAA;MACA,cAAA;MACA,aAAA;MACA;IACA,CAAA;IAEA,IAAA,OAAA,iBAAA,KAAA,QAAA,EAAA;MACA;MACA,OAAA,CAAA,IAAA,CACA;AACA;AACA;AACA,0CAAA,iBAAA,KAAA,CACA;MAEA,IAAA,CAAA,eAAA,CAAA,iBAAA,GAAA,iBAAA;IACA;IAEA,IAAA,OAAA,eAAA,KAAA,QAAA,EAAA;MACA;MACA,OAAA,CAAA,IAAA,CACA;AACA;AACA;AACA,0CAAA,eAAA,KAAA,CACA;MAEA,IAAA,CAAA,eAAA,CAAA,eAAA,GAAA,eAAA;IACA;IAEA,IAAA,IAAA,CAAA,eAAA,CAAA,aAAA,EAAA;MACA;MACA;MACA,IAAA,CAAA,iBAAA,CAAA,aAAA,GAAA,CAAA,IAAA,CAAA,iBAAA,CAAA,aAAA,GACA,eAAA,GACA,GAAA,IAAA,CAAA,iBAAA,CAAA,aAAA,IAAA,eAAA,EAAA;IACA;IAEA,IAAA,IAAA,CAAA,cAAA,IAAA,SAAA,EAAA,EAAA;MACA,MAAA,IAAA,KAAA,CAAA,4DAAA,CAAA;IACA;IAEA,IAAA,CAAA,cAAA,GAAA,IAAA;EACA;;EAEA;EACA,IAAA,cAAA,GAAA;IACA,OAAA,YAAA;EACA;;EAEA;EACA,IAAA,cAAA,CAAA,KAAA,EAAA;IACA,YAAA,GAAA,KAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAAA,GAAA;IACA,IAAA,CAAA,SAAA,EAAA,EAAA;MACA;IACA;IAEA,IAAA,CAAA,MAAA,EAAA;;IAEA;IACA,UAAA,CAAA,MAAA,IAAA,CAAA,KAAA,EAAA,CAAA;EACA;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA,KAAA,GAAA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;MACA;IACA;IAEA,IAAA,CAAA,OAAA,CAAA,KAAA,EAAA;EACA;;EAEA;AACA;AACA;AACA;EACA,IAAA,GAAA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,EAAA;MACA;IACA;IAEA,IAAA,CAAA,OAAA,CAAA,IAAA,EAAA;EACA;;EAEA;AACA;AACA;EACA,KAAA,GAAA;IACA,IAAA,CAAA,IAAA,CAAA,OAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,SAAA,EAAA,EAAA;MACA;IACA;IAEA,OAAA,IAAA,CAAA,OAAA,CAAA,cAAA,EAAA;EACA;;EAEA;EACA,MAAA,GAAA;IACA;IACA,MAAA,YAAA,GAAA,2BAAA,CAAA,IAAA,CAAA,eAAA,CAAA;IAEA,IAAA,CAAA,OAAA,GAAA,IAAA,eAAA,CAAA;MACA,OAAA,EAAA,YAAA;MACA,gBAAA,EAAA,IAAA,CAAA;IACA,CAAA,CAAA;EACA;AACA;AAAA,MAAA,CAAA,YAAA,EAAA;;AAEA;AACA,SAAA,2BAAA,CAAA,cAAA,EAAA;EACA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;EACA,MAAA,GAAA,GAAA,MAAA,IAAA,MAAA,CAAA,UAAA,EAAA;EAEA,MAAA,YAAA,GAAA;IAAA,iBAAA,EAAA,CAAA;IAAA,eAAA,EAAA,CAAA;IAAA,GAAA,iBAAA,CAAA,cAAA;EAAA,CAAA;EAEA,IAAA,CAAA,GAAA,EAAA;IACA;IACA,OAAA,CAAA,IAAA,CAAA,8BAAA,CAAA;IACA,OAAA,YAAA;EACA;EAEA,IACA,cAAA,CAAA,iBAAA,IAAA,IAAA;EAAA;EACA,cAAA,CAAA,eAAA,IAAA,IAAA;EAAA;EACA,GAAA,CAAA,wBAAA,IAAA,IAAA,IACA,GAAA,CAAA,wBAAA,IAAA,IAAA,EACA;IACA;IACA,OAAA,CAAA,IAAA,CACA,uGAAA,CACA;EACA;EAEA,IAAA,OAAA,GAAA,CAAA,wBAAA,KAAA,QAAA,EAAA;IACA,YAAA,CAAA,iBAAA,GAAA,GAAA,CAAA,wBAAA;EACA;EAEA,IAAA,OAAA,GAAA,CAAA,wBAAA,KAAA,QAAA,EAAA;IACA,YAAA,CAAA,eAAA,GAAA,GAAA,CAAA,wBAAA;EACA;EAEA,OAAA,YAAA;AACA","sourcesContent":["import { GLOBAL_OBJ } from '@sentry/utils';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nexport const WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nexport const REPLAY_SESSION_KEY = 'sentryReplaySession';\nexport const REPLAY_EVENT_NAME = 'replay_event';\nexport const RECORDING_EVENT_NAME = 'replay_recording';\nexport const UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session\nexport const SESSION_IDLE_DURATION = 300_000; // 5 minutes in ms\n\n// The maximum length of a session\nexport const MAX_SESSION_LIFE = 3_600_000; // 60 minutes\n\n/** Default flush delays */\nexport const DEFAULT_FLUSH_MIN_DELAY = 5_000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nexport const DEFAULT_FLUSH_MAX_DELAY = 5_500;\n\n/* How long to wait for error checkouts */\nexport const ERROR_CHECKOUT_TIME = 60_000;\n\nexport const RETRY_BASE_INTERVAL = 5000;\nexport const RETRY_MAX_COUNT = 3;\n","var NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\nfunction isElement(n) {\n    return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n    const host = n === null || n === void 0 ? void 0 : n.host;\n    return Boolean(host && host.shadowRoot && host.shadowRoot === n);\n}\nfunction isInputTypeMasked({ maskInputOptions, tagName, type, }) {\n    if (tagName.toLowerCase() === 'option') {\n        tagName = 'select';\n    }\n    const actualType = typeof type === 'string' ? type.toLowerCase() : undefined;\n    return (maskInputOptions[tagName.toLowerCase()] ||\n        (actualType && maskInputOptions[actualType]) ||\n        actualType === 'password' ||\n        (tagName === 'input' && !type && maskInputOptions['text']));\n}\nfunction hasInputMaskOptions({ tagName, type, maskInputOptions, maskInputSelector, }) {\n    return (maskInputSelector || isInputTypeMasked({ maskInputOptions, tagName, type }));\n}\nfunction maskInputValue({ input, maskInputSelector, unmaskInputSelector, maskInputOptions, tagName, type, value, maskInputFn, }) {\n    let text = value || '';\n    if (unmaskInputSelector && input.matches(unmaskInputSelector)) {\n        return text;\n    }\n    if (input.hasAttribute('rr_is_password')) {\n        type = 'password';\n    }\n    if (isInputTypeMasked({ maskInputOptions, tagName, type }) ||\n        (maskInputSelector && input.matches(maskInputSelector))) {\n        if (maskInputFn) {\n            text = maskInputFn(text);\n        }\n        else {\n            text = '*'.repeat(text.length);\n        }\n    }\n    return text;\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        return true;\n    const chunkSize = 50;\n    for (let x = 0; x < canvas.width; x += chunkSize) {\n        for (let y = 0; y < canvas.height; y += chunkSize) {\n            const getImageData = ctx.getImageData;\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\n                : getImageData;\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n            if (pixelBuffer.some((pixel) => pixel !== 0))\n                return false;\n        }\n    }\n    return true;\n}\n\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction defaultMaskFn(str) {\n    return str ? str.replace(/[\\S]/g, '*') : '';\n}\nfunction genId() {\n    return _id++;\n}\nfunction getValidTagName(element) {\n    if (element instanceof HTMLFormElement) {\n        return 'form';\n    }\n    const processedTagName = element.tagName.toLowerCase().trim();\n    if (tagNameRegex.test(processedTagName)) {\n        return 'div';\n    }\n    return processedTagName;\n}\nfunction getCssRulesString(s) {\n    try {\n        const rules = s.rules || s.cssRules;\n        return rules ? Array.from(rules).map(getCssRuleString).join('') : null;\n    }\n    catch (error) {\n        return null;\n    }\n}\nfunction getCssRuleString(rule) {\n    let cssStringified = rule.cssText;\n    if (isCSSImportRule(rule)) {\n        try {\n            cssStringified = getCssRulesString(rule.styleSheet) || cssStringified;\n        }\n        catch (_a) {\n        }\n    }\n    return cssStringified;\n}\nfunction isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n}\nfunction stringifyStyleSheet(sheet) {\n    return sheet.cssRules\n        ? Array.from(sheet.cssRules)\n            .map((rule) => rule.cssText || '')\n            .join('')\n        : '';\n}\nfunction extractOrigin(url) {\n    let origin = '';\n    if (url.indexOf('//') > -1) {\n        origin = url.split('/').slice(0, 3).join('/');\n    }\n    else {\n        origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/|#).*/;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n        const filePath = path1 || path2 || path3;\n        const maybeQuote = quote1 || quote2 || '';\n        if (!filePath) {\n            return origin;\n        }\n        if (!RELATIVE_PATH.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (DATA_URI.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (filePath[0] === '/') {\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n        }\n        const stack = href.split('/');\n        const parts = filePath.split('/');\n        stack.pop();\n        for (const part of parts) {\n            if (part === '.') {\n                continue;\n            }\n            else if (part === '..') {\n                stack.pop();\n            }\n            else {\n                stack.push(part);\n            }\n        }\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n    });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    let pos = 0;\n    function collectCharacters(regEx) {\n        let chars;\n        let match = regEx.exec(attributeValue.substring(pos));\n        if (match) {\n            chars = match[0];\n            pos += chars.length;\n            return chars;\n        }\n        return '';\n    }\n    let output = [];\n    while (true) {\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\n        if (pos >= attributeValue.length) {\n            break;\n        }\n        let url = collectCharacters(SRCSET_NOT_SPACES);\n        if (url.slice(-1) === ',') {\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n            output.push(url);\n        }\n        else {\n            let descriptorsStr = '';\n            url = absoluteToDoc(doc, url);\n            let inParens = false;\n            while (true) {\n                let c = attributeValue.charAt(pos);\n                if (c === '') {\n                    output.push((url + descriptorsStr).trim());\n                    break;\n                }\n                else if (!inParens) {\n                    if (c === ',') {\n                        pos += 1;\n                        output.push((url + descriptorsStr).trim());\n                        break;\n                    }\n                    else if (c === '(') {\n                        inParens = true;\n                    }\n                }\n                else {\n                    if (c === ')') {\n                        inParens = false;\n                    }\n                }\n                descriptorsStr += c;\n                pos += 1;\n            }\n        }\n    }\n    return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    const a = doc.createElement('a');\n    a.href = attributeValue;\n    return a.href;\n}\nfunction isSVGElement(el) {\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n    const a = document.createElement('a');\n    a.href = '';\n    return a.href;\n}\nfunction transformAttribute(doc, element, _tagName, _name, value, maskAllText, unmaskTextSelector, maskTextFn) {\n    if (!value) {\n        return value;\n    }\n    const name = _name.toLowerCase();\n    const tagName = _tagName.toLowerCase();\n    if (name === 'src' || name === 'href') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'xlink:href' && value[0] !== '#') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'background' &&\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'srcset') {\n        return getAbsoluteSrcsetString(doc, value);\n    }\n    else if (name === 'style') {\n        return absoluteToStylesheet(value, getHref());\n    }\n    else if (tagName === 'object' && name === 'data') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (maskAllText &&\n        _shouldMaskAttribute(element, name, tagName, unmaskTextSelector)) {\n        return maskTextFn ? maskTextFn(value) : defaultMaskFn(value);\n    }\n    return value;\n}\nfunction _shouldMaskAttribute(element, attribute, tagName, unmaskTextSelector) {\n    if (unmaskTextSelector && element.matches(unmaskTextSelector)) {\n        return false;\n    }\n    return (['placeholder', 'title', 'aria-label'].indexOf(attribute) > -1 ||\n        (tagName === 'input' &&\n            attribute === 'value' &&\n            element.hasAttribute('type') &&\n            ['submit', 'button'].indexOf(element.getAttribute('type').toLowerCase()) > -1));\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n    if (unblockSelector && element.matches(unblockSelector)) {\n        return false;\n    }\n    if (typeof blockClass === 'string') {\n        if (element.classList.contains(blockClass)) {\n            return true;\n        }\n    }\n    else {\n        for (let eIndex = 0; eIndex < element.classList.length; eIndex++) {\n            const className = element.classList[eIndex];\n            if (blockClass.test(className)) {\n                return true;\n            }\n        }\n    }\n    if (blockSelector) {\n        return element.matches(blockSelector);\n    }\n    return false;\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) {\n    if (!node) {\n        return false;\n    }\n    if (node.nodeType !== node.ELEMENT_NODE) {\n        return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n    }\n    if (unmaskTextSelector) {\n        if (node.matches(unmaskTextSelector) ||\n            node.closest(unmaskTextSelector)) {\n            return false;\n        }\n    }\n    if (maskAllText) {\n        return true;\n    }\n    if (typeof maskTextClass === 'string') {\n        if (node.classList.contains(maskTextClass)) {\n            return true;\n        }\n    }\n    else {\n        for (let eIndex = 0; eIndex < node.classList.length; eIndex++) {\n            const className = node.classList[eIndex];\n            if (maskTextClass.test(className)) {\n                return true;\n            }\n        }\n    }\n    if (maskTextSelector) {\n        if (node.matches(maskTextSelector)) {\n            return true;\n        }\n    }\n    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n    const win = iframeEl.contentWindow;\n    if (!win) {\n        return;\n    }\n    let fired = false;\n    let readyState;\n    try {\n        readyState = win.document.readyState;\n    }\n    catch (error) {\n        return;\n    }\n    if (readyState !== 'complete') {\n        const timer = setTimeout(() => {\n            if (!fired) {\n                listener();\n                fired = true;\n            }\n        }, iframeLoadTimeout);\n        iframeEl.addEventListener('load', () => {\n            clearTimeout(timer);\n            fired = true;\n            listener();\n        });\n        return;\n    }\n    const blankUrl = 'about:blank';\n    if (win.location.href !== blankUrl ||\n        iframeEl.src === blankUrl ||\n        iframeEl.src === '') {\n        setTimeout(listener, 0);\n        return;\n    }\n    iframeEl.addEventListener('load', listener);\n}\nfunction serializeNode(n, options) {\n    var _a;\n    const { doc, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, } = options;\n    let rootId;\n    if (doc.__sn) {\n        const docId = doc.__sn.id;\n        rootId = docId === 1 ? undefined : docId;\n    }\n    switch (n.nodeType) {\n        case n.DOCUMENT_NODE:\n            if (n.compatMode !== 'CSS1Compat') {\n                return {\n                    type: NodeType.Document,\n                    childNodes: [],\n                    compatMode: n.compatMode,\n                    rootId,\n                };\n            }\n            else {\n                return {\n                    type: NodeType.Document,\n                    childNodes: [],\n                    rootId,\n                };\n            }\n        case n.DOCUMENT_TYPE_NODE:\n            return {\n                type: NodeType.DocumentType,\n                name: n.name,\n                publicId: n.publicId,\n                systemId: n.systemId,\n                rootId,\n            };\n        case n.ELEMENT_NODE:\n            const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n            const tagName = getValidTagName(n);\n            let attributes = {};\n            for (const { name, value } of Array.from(n.attributes)) {\n                if (!skipAttribute(tagName, name)) {\n                    attributes[name] = transformAttribute(doc, n, tagName, name, value, maskAllText, unmaskTextSelector, maskTextFn);\n                }\n            }\n            if (tagName === 'link' && inlineStylesheet) {\n                const stylesheet = Array.from(doc.styleSheets).find((s) => {\n                    return s.href === n.href;\n                });\n                let cssText = null;\n                if (stylesheet) {\n                    cssText = getCssRulesString(stylesheet);\n                }\n                if (cssText) {\n                    delete attributes.rel;\n                    delete attributes.href;\n                    attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n                }\n            }\n            if (tagName === 'style' &&\n                n.sheet &&\n                !(n.innerText ||\n                    n.textContent ||\n                    '').trim().length) {\n                const cssText = getCssRulesString(n.sheet);\n                if (cssText) {\n                    attributes._cssText = absoluteToStylesheet(cssText, getHref());\n                }\n            }\n            if (tagName === 'input' ||\n                tagName === 'textarea' ||\n                tagName === 'select' ||\n                tagName === 'option') {\n                const el = n;\n                const value = getInputValue(tagName, el, attributes);\n                const checked = n.checked;\n                if (attributes.type !== 'submit' &&\n                    attributes.type !== 'button' &&\n                    value) {\n                    attributes.value = maskInputValue({\n                        input: el,\n                        type: attributes.type,\n                        tagName,\n                        value,\n                        maskInputSelector,\n                        unmaskInputSelector,\n                        maskInputOptions,\n                        maskInputFn,\n                    });\n                }\n                if (checked) {\n                    attributes.checked = checked;\n                }\n            }\n            if (tagName === 'option') {\n                if (n.selected && !maskInputOptions['select']) {\n                    attributes.selected = true;\n                }\n                else {\n                    delete attributes.selected;\n                }\n            }\n            if (tagName === 'canvas' && recordCanvas) {\n                if (n.__context === '2d') {\n                    if (!is2DCanvasBlank(n)) {\n                        attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    }\n                }\n                else if (!('__context' in n)) {\n                    const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    const blankCanvas = document.createElement('canvas');\n                    blankCanvas.width = n.width;\n                    blankCanvas.height = n.height;\n                    const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    if (canvasDataURL !== blankCanvasDataURL) {\n                        attributes.rr_dataURL = canvasDataURL;\n                    }\n                }\n            }\n            if (tagName === 'img' && inlineImages) {\n                if (!canvasService) {\n                    canvasService = doc.createElement('canvas');\n                    canvasCtx = canvasService.getContext('2d');\n                }\n                const image = n;\n                const oldValue = image.crossOrigin;\n                image.crossOrigin = 'anonymous';\n                const recordInlineImage = () => {\n                    try {\n                        canvasService.width = image.naturalWidth;\n                        canvasService.height = image.naturalHeight;\n                        canvasCtx.drawImage(image, 0, 0);\n                        attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    }\n                    catch (err) {\n                        console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\n                    }\n                    oldValue\n                        ? (attributes.crossOrigin = oldValue)\n                        : delete attributes.crossOrigin;\n                };\n                if (image.complete && image.naturalWidth !== 0)\n                    recordInlineImage();\n                else\n                    image.onload = recordInlineImage;\n            }\n            if (tagName === 'audio' || tagName === 'video') {\n                attributes.rr_mediaState = n.paused\n                    ? 'paused'\n                    : 'played';\n                attributes.rr_mediaCurrentTime = n.currentTime;\n            }\n            if (n.scrollLeft) {\n                attributes.rr_scrollLeft = n.scrollLeft;\n            }\n            if (n.scrollTop) {\n                attributes.rr_scrollTop = n.scrollTop;\n            }\n            if (needBlock) {\n                const { width, height } = n.getBoundingClientRect();\n                attributes = {\n                    class: attributes.class,\n                    rr_width: `${width}px`,\n                    rr_height: `${height}px`,\n                };\n            }\n            if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n                if (!n.contentDocument) {\n                    attributes.rr_src = attributes.src;\n                }\n                delete attributes.src;\n            }\n            return {\n                type: NodeType.Element,\n                tagName,\n                attributes,\n                childNodes: [],\n                isSVG: isSVGElement(n) || undefined,\n                needBlock,\n                rootId,\n            };\n        case n.TEXT_NODE:\n            const parentTagName = n.parentNode && n.parentNode.tagName;\n            let textContent = n.textContent;\n            const isStyle = parentTagName === 'STYLE' ? true : undefined;\n            const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n            if (isStyle && textContent) {\n                try {\n                    if (n.nextSibling || n.previousSibling) {\n                    }\n                    else if ((_a = n.parentNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) {\n                        textContent = stringifyStyleSheet(n.parentNode.sheet);\n                    }\n                }\n                catch (err) {\n                    console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n                }\n                textContent = absoluteToStylesheet(textContent, getHref());\n            }\n            if (isScript) {\n                textContent = 'SCRIPT_PLACEHOLDER';\n            }\n            if (parentTagName === 'TEXTAREA' && textContent) {\n                textContent = '';\n            }\n            else if (parentTagName === 'OPTION' && textContent) {\n                const option = n.parentNode;\n                textContent = maskInputValue({\n                    input: option,\n                    type: null,\n                    tagName: parentTagName,\n                    value: textContent,\n                    maskInputSelector,\n                    unmaskInputSelector,\n                    maskInputOptions,\n                    maskInputFn,\n                });\n            }\n            else if (!isStyle &&\n                !isScript &&\n                needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) &&\n                textContent) {\n                textContent = maskTextFn\n                    ? maskTextFn(textContent)\n                    : defaultMaskFn(textContent);\n            }\n            return {\n                type: NodeType.Text,\n                textContent: textContent || '',\n                isStyle,\n                rootId,\n            };\n        case n.CDATA_SECTION_NODE:\n            return {\n                type: NodeType.CDATA,\n                textContent: '',\n                rootId,\n            };\n        case n.COMMENT_NODE:\n            return {\n                type: NodeType.Comment,\n                textContent: n.textContent || '',\n                rootId,\n            };\n        default:\n            return false;\n    }\n}\nfunction lowerIfExists(maybeAttr) {\n    if (maybeAttr === undefined || maybeAttr === null) {\n        return '';\n    }\n    else {\n        return maybeAttr.toLowerCase();\n    }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n    if (slimDOMOptions.comment && sn.type === NodeType.Comment) {\n        return true;\n    }\n    else if (sn.type === NodeType.Element) {\n        if (slimDOMOptions.script &&\n            (sn.tagName === 'script' ||\n                (sn.tagName === 'link' &&\n                    (sn.attributes.rel === 'preload' ||\n                        sn.attributes.rel === 'modulepreload') &&\n                    sn.attributes.as === 'script') ||\n                (sn.tagName === 'link' &&\n                    sn.attributes.rel === 'prefetch' &&\n                    typeof sn.attributes.href === 'string' &&\n                    sn.attributes.href.endsWith('.js')))) {\n            return true;\n        }\n        else if (slimDOMOptions.headFavicon &&\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\n                (sn.tagName === 'meta' &&\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\n            return true;\n        }\n        else if (sn.tagName === 'meta') {\n            if (slimDOMOptions.headMetaDescKeywords &&\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaSocial &&\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaRobots &&\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaHttpEquiv &&\n                sn.attributes['http-equiv'] !== undefined) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaAuthorship &&\n                (lowerIfExists(sn.attributes.name) === 'author' ||\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaVerification &&\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction serializeNodeWithId(n, options) {\n    const { doc, map, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, keepIframeSrcFn = () => false, } = options;\n    let { preserveWhiteSpace = true } = options;\n    const _serializedNode = serializeNode(n, {\n        doc,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskInputSelector,\n        unmaskInputSelector,\n        maskAllText,\n        maskInputOptions,\n        maskTextFn,\n        maskInputFn,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        keepIframeSrcFn,\n    });\n    if (!_serializedNode) {\n        console.warn(n, 'not serialized');\n        return null;\n    }\n    let id;\n    if ('__sn' in n) {\n        id = n.__sn.id;\n    }\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\n        (!preserveWhiteSpace &&\n            _serializedNode.type === NodeType.Text &&\n            !_serializedNode.isStyle &&\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\n        id = IGNORED_NODE;\n    }\n    else {\n        id = genId();\n    }\n    const serializedNode = Object.assign(_serializedNode, { id });\n    n.__sn = serializedNode;\n    if (id === IGNORED_NODE) {\n        return null;\n    }\n    map[id] = n;\n    if (onSerialize) {\n        onSerialize(n);\n    }\n    let recordChild = !skipChild;\n    if (serializedNode.type === NodeType.Element) {\n        recordChild = recordChild && !serializedNode.needBlock;\n        delete serializedNode.needBlock;\n        if (n.shadowRoot)\n            serializedNode.isShadowHost = true;\n    }\n    if ((serializedNode.type === NodeType.Document ||\n        serializedNode.type === NodeType.Element) &&\n        recordChild) {\n        if (slimDOMOptions.headWhitespace &&\n            _serializedNode.type === NodeType.Element &&\n            _serializedNode.tagName === 'head') {\n            preserveWhiteSpace = false;\n        }\n        const bypassOptions = {\n            doc,\n            map,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild,\n            inlineStylesheet,\n            maskInputSelector,\n            unmaskInputSelector,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            keepIframeSrcFn,\n        };\n        for (const childN of Array.from(n.childNodes)) {\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n            if (serializedChildNode) {\n                serializedNode.childNodes.push(serializedChildNode);\n            }\n        }\n        if (isElement(n) && n.shadowRoot) {\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n                if (serializedChildNode) {\n                    serializedChildNode.isShadow = true;\n                    serializedNode.childNodes.push(serializedChildNode);\n                }\n            }\n        }\n    }\n    if (n.parentNode && isShadowRoot(n.parentNode)) {\n        serializedNode.isShadow = true;\n    }\n    if (serializedNode.type === NodeType.Element &&\n        serializedNode.tagName === 'iframe') {\n        onceIframeLoaded(n, () => {\n            const iframeDoc = n.contentDocument;\n            if (iframeDoc && onIframeLoad) {\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n                    doc: iframeDoc,\n                    map,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputSelector,\n                    unmaskInputSelector,\n                    maskAllText,\n                    maskInputOptions,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedIframeNode) {\n                    onIframeLoad(n, serializedIframeNode);\n                }\n            }\n        }, iframeLoadTimeout);\n    }\n    return serializedNode;\n}\nfunction snapshot(n, options) {\n    const { blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskTextClass = 'rr-mask', maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskInputSelector = null, unmaskInputSelector = null, maskAllText = false, maskAllInputs = false, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\n    const idNodeMap = {};\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n        }\n        : maskAllInputs === false\n            ? {}\n            : maskAllInputs;\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\n        ?\n            {\n                script: true,\n                comment: true,\n                headFavicon: true,\n                headWhitespace: true,\n                headMetaDescKeywords: slimDOM === 'all',\n                headMetaSocial: true,\n                headMetaRobots: true,\n                headMetaHttpEquiv: true,\n                headMetaAuthorship: true,\n                headMetaVerification: true,\n            }\n        : slimDOM === false\n            ? {}\n            : slimDOM;\n    return [\n        serializeNodeWithId(n, {\n            doc: n,\n            map: idNodeMap,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild: false,\n            inlineStylesheet,\n            maskInputSelector,\n            unmaskInputSelector,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            keepIframeSrcFn,\n        }),\n        idNodeMap,\n    ];\n}\nfunction skipAttribute(tagName, attributeName, value) {\n    return ((tagName === 'video' || tagName === 'audio') && attributeName === 'autoplay');\n}\nfunction getInputValue(tagName, el, attributes) {\n    if (tagName === 'input' &&\n        (attributes.type === 'radio' || attributes.type === 'checkbox')) {\n        return el.getAttribute('value') || '';\n    }\n    return el.value;\n}\n\nconst commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nfunction parse(css, options = {}) {\n    let lineno = 1;\n    let column = 1;\n    function updatePosition(str) {\n        const lines = str.match(/\\n/g);\n        if (lines) {\n            lineno += lines.length;\n        }\n        let i = str.lastIndexOf('\\n');\n        column = i === -1 ? column + str.length : str.length - i;\n    }\n    function position() {\n        const start = { line: lineno, column };\n        return (node) => {\n            node.position = new Position(start);\n            whitespace();\n            return node;\n        };\n    }\n    class Position {\n        constructor(start) {\n            this.start = start;\n            this.end = { line: lineno, column };\n            this.source = options.source;\n        }\n    }\n    Position.prototype.content = css;\n    const errorsList = [];\n    function error(msg) {\n        const err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n        err.reason = msg;\n        err.filename = options.source;\n        err.line = lineno;\n        err.column = column;\n        err.source = css;\n        if (options.silent) {\n            errorsList.push(err);\n        }\n        else {\n            throw err;\n        }\n    }\n    function stylesheet() {\n        const rulesList = rules();\n        return {\n            type: 'stylesheet',\n            stylesheet: {\n                source: options.source,\n                rules: rulesList,\n                parsingErrors: errorsList,\n            },\n        };\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n    function rules() {\n        let node;\n        const rules = [];\n        whitespace();\n        comments(rules);\n        while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\n            if (node !== false) {\n                rules.push(node);\n                comments(rules);\n            }\n        }\n        return rules;\n    }\n    function match(re) {\n        const m = re.exec(css);\n        if (!m) {\n            return;\n        }\n        const str = m[0];\n        updatePosition(str);\n        css = css.slice(str.length);\n        return m;\n    }\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function comments(rules = []) {\n        let c;\n        while ((c = comment())) {\n            if (c !== false) {\n                rules.push(c);\n            }\n            c = comment();\n        }\n        return rules;\n    }\n    function comment() {\n        const pos = position();\n        if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\n            return;\n        }\n        let i = 2;\n        while ('' !== css.charAt(i) &&\n            ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))) {\n            ++i;\n        }\n        i += 2;\n        if ('' === css.charAt(i - 1)) {\n            return error('End of comment missing');\n        }\n        const str = css.slice(2, i - 2);\n        column += 2;\n        updatePosition(str);\n        css = css.slice(i);\n        column += 2;\n        return pos({\n            type: 'comment',\n            comment: str,\n        });\n    }\n    function selector() {\n        const m = match(/^([^{]+)/);\n        if (!m) {\n            return;\n        }\n        return trim(m[0])\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, (m) => {\n            return m.replace(/,/g, '\\u200C');\n        })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map((s) => {\n            return s.replace(/\\u200C/g, ',');\n        });\n    }\n    function declaration() {\n        const pos = position();\n        let propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!propMatch) {\n            return;\n        }\n        const prop = trim(propMatch[0]);\n        if (!match(/^:\\s*/)) {\n            return error(`property missing ':'`);\n        }\n        const val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\n        const ret = pos({\n            type: 'declaration',\n            property: prop.replace(commentre, ''),\n            value: val ? trim(val[0]).replace(commentre, '') : '',\n        });\n        match(/^[;\\s]*/);\n        return ret;\n    }\n    function declarations() {\n        const decls = [];\n        if (!open()) {\n            return error(`missing '{'`);\n        }\n        comments(decls);\n        let decl;\n        while ((decl = declaration())) {\n            if (decl !== false) {\n                decls.push(decl);\n                comments(decls);\n            }\n            decl = declaration();\n        }\n        if (!close()) {\n            return error(`missing '}'`);\n        }\n        return decls;\n    }\n    function keyframe() {\n        let m;\n        const vals = [];\n        const pos = position();\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n        if (!vals.length) {\n            return;\n        }\n        return pos({\n            type: 'keyframe',\n            values: vals,\n            declarations: declarations(),\n        });\n    }\n    function atkeyframes() {\n        const pos = position();\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n        if (!m) {\n            return;\n        }\n        const vendor = m[1];\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n        const name = m[1];\n        if (!open()) {\n            return error(`@keyframes missing '{'`);\n        }\n        let frame;\n        let frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n        if (!close()) {\n            return error(`@keyframes missing '}'`);\n        }\n        return pos({\n            type: 'keyframes',\n            name,\n            vendor,\n            keyframes: frames,\n        });\n    }\n    function atsupports() {\n        const pos = position();\n        const m = match(/^@supports *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const supports = trim(m[1]);\n        if (!open()) {\n            return error(`@supports missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@supports missing '}'`);\n        }\n        return pos({\n            type: 'supports',\n            supports,\n            rules: style,\n        });\n    }\n    function athost() {\n        const pos = position();\n        const m = match(/^@host\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(`@host missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@host missing '}'`);\n        }\n        return pos({\n            type: 'host',\n            rules: style,\n        });\n    }\n    function atmedia() {\n        const pos = position();\n        const m = match(/^@media *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const media = trim(m[1]);\n        if (!open()) {\n            return error(`@media missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@media missing '}'`);\n        }\n        return pos({\n            type: 'media',\n            media,\n            rules: style,\n        });\n    }\n    function atcustommedia() {\n        const pos = position();\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (!m) {\n            return;\n        }\n        return pos({\n            type: 'custom-media',\n            name: trim(m[1]),\n            media: trim(m[2]),\n        });\n    }\n    function atpage() {\n        const pos = position();\n        const m = match(/^@page */);\n        if (!m) {\n            return;\n        }\n        const sel = selector() || [];\n        if (!open()) {\n            return error(`@page missing '{'`);\n        }\n        let decls = comments();\n        let decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(`@page missing '}'`);\n        }\n        return pos({\n            type: 'page',\n            selectors: sel,\n            declarations: decls,\n        });\n    }\n    function atdocument() {\n        const pos = position();\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const vendor = trim(m[1]);\n        const doc = trim(m[2]);\n        if (!open()) {\n            return error(`@document missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@document missing '}'`);\n        }\n        return pos({\n            type: 'document',\n            document: doc,\n            vendor,\n            rules: style,\n        });\n    }\n    function atfontface() {\n        const pos = position();\n        const m = match(/^@font-face\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(`@font-face missing '{'`);\n        }\n        let decls = comments();\n        let decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(`@font-face missing '}'`);\n        }\n        return pos({\n            type: 'font-face',\n            declarations: decls,\n        });\n    }\n    const atimport = _compileAtrule('import');\n    const atcharset = _compileAtrule('charset');\n    const atnamespace = _compileAtrule('namespace');\n    function _compileAtrule(name) {\n        const re = new RegExp('^@' + name + '\\\\s*([^;]+);');\n        return () => {\n            const pos = position();\n            const m = match(re);\n            if (!m) {\n                return;\n            }\n            const ret = { type: name };\n            ret[name] = m[1].trim();\n            return pos(ret);\n        };\n    }\n    function atrule() {\n        if (css[0] !== '@') {\n            return;\n        }\n        return (atkeyframes() ||\n            atmedia() ||\n            atcustommedia() ||\n            atsupports() ||\n            atimport() ||\n            atcharset() ||\n            atnamespace() ||\n            atdocument() ||\n            atpage() ||\n            athost() ||\n            atfontface());\n    }\n    function rule() {\n        const pos = position();\n        const sel = selector();\n        if (!sel) {\n            return error('selector missing');\n        }\n        comments();\n        return pos({\n            type: 'rule',\n            selectors: sel,\n            declarations: declarations(),\n        });\n    }\n    return addParent(stylesheet());\n}\nfunction trim(str) {\n    return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\n}\nfunction addParent(obj, parent) {\n    const isNode = obj && typeof obj.type === 'string';\n    const childParent = isNode ? obj : parent;\n    for (const k of Object.keys(obj)) {\n        const value = obj[k];\n        if (Array.isArray(value)) {\n            value.forEach((v) => {\n                addParent(v, childParent);\n            });\n        }\n        else if (value && typeof value === 'object') {\n            addParent(value, childParent);\n        }\n    }\n    if (isNode) {\n        Object.defineProperty(obj, 'parent', {\n            configurable: true,\n            writable: true,\n            enumerable: false,\n            value: parent || null,\n        });\n    }\n    return obj;\n}\n\nconst tagMap = {\n    script: 'noscript',\n    altglyph: 'altGlyph',\n    altglyphdef: 'altGlyphDef',\n    altglyphitem: 'altGlyphItem',\n    animatecolor: 'animateColor',\n    animatemotion: 'animateMotion',\n    animatetransform: 'animateTransform',\n    clippath: 'clipPath',\n    feblend: 'feBlend',\n    fecolormatrix: 'feColorMatrix',\n    fecomponenttransfer: 'feComponentTransfer',\n    fecomposite: 'feComposite',\n    feconvolvematrix: 'feConvolveMatrix',\n    fediffuselighting: 'feDiffuseLighting',\n    fedisplacementmap: 'feDisplacementMap',\n    fedistantlight: 'feDistantLight',\n    fedropshadow: 'feDropShadow',\n    feflood: 'feFlood',\n    fefunca: 'feFuncA',\n    fefuncb: 'feFuncB',\n    fefuncg: 'feFuncG',\n    fefuncr: 'feFuncR',\n    fegaussianblur: 'feGaussianBlur',\n    feimage: 'feImage',\n    femerge: 'feMerge',\n    femergenode: 'feMergeNode',\n    femorphology: 'feMorphology',\n    feoffset: 'feOffset',\n    fepointlight: 'fePointLight',\n    fespecularlighting: 'feSpecularLighting',\n    fespotlight: 'feSpotLight',\n    fetile: 'feTile',\n    feturbulence: 'feTurbulence',\n    foreignobject: 'foreignObject',\n    glyphref: 'glyphRef',\n    lineargradient: 'linearGradient',\n    radialgradient: 'radialGradient',\n};\nfunction getTagName(n) {\n    let tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\n    if (tagName === 'link' && n.attributes._cssText) {\n        tagName = 'style';\n    }\n    return tagName;\n}\nfunction escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nconst HOVER_SELECTOR = /([^\\\\]):hover/;\nconst HOVER_SELECTOR_GLOBAL = new RegExp(HOVER_SELECTOR.source, 'g');\nfunction addHoverClass(cssText, cache) {\n    const cachedStyle = cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.get(cssText);\n    if (cachedStyle)\n        return cachedStyle;\n    const ast = parse(cssText, {\n        silent: true,\n    });\n    if (!ast.stylesheet) {\n        return cssText;\n    }\n    const selectors = [];\n    ast.stylesheet.rules.forEach((rule) => {\n        if ('selectors' in rule) {\n            (rule.selectors || []).forEach((selector) => {\n                if (HOVER_SELECTOR.test(selector)) {\n                    selectors.push(selector);\n                }\n            });\n        }\n    });\n    if (selectors.length === 0) {\n        return cssText;\n    }\n    const selectorMatcher = new RegExp(selectors\n        .filter((selector, index) => selectors.indexOf(selector) === index)\n        .sort((a, b) => b.length - a.length)\n        .map((selector) => {\n        return escapeRegExp(selector);\n    })\n        .join('|'), 'g');\n    const result = cssText.replace(selectorMatcher, (selector) => {\n        const newSelector = selector.replace(HOVER_SELECTOR_GLOBAL, '$1.\\\\:hover');\n        return `${selector}, ${newSelector}`;\n    });\n    cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.set(cssText, result);\n    return result;\n}\nfunction createCache() {\n    const stylesWithHoverClass = new Map();\n    return {\n        stylesWithHoverClass,\n    };\n}\nfunction buildNode(n, options) {\n    const { doc, hackCss, cache } = options;\n    switch (n.type) {\n        case NodeType.Document:\n            return doc.implementation.createDocument(null, '', null);\n        case NodeType.DocumentType:\n            return doc.implementation.createDocumentType(n.name || 'html', n.publicId, n.systemId);\n        case NodeType.Element:\n            const tagName = getTagName(n);\n            let node;\n            if (n.isSVG) {\n                node = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\n            }\n            else {\n                node = doc.createElement(tagName);\n            }\n            for (const name in n.attributes) {\n                if (!n.attributes.hasOwnProperty(name)) {\n                    continue;\n                }\n                let value = n.attributes[name];\n                if (tagName === 'option' && name === 'selected' && value === false) {\n                    continue;\n                }\n                value =\n                    typeof value === 'boolean' || typeof value === 'number' || value === null ? '' : value;\n                if (!name.startsWith('rr_')) {\n                    const isTextarea = tagName === 'textarea' && name === 'value';\n                    const isRemoteOrDynamicCss = tagName === 'style' && name === '_cssText';\n                    if (isRemoteOrDynamicCss && hackCss) {\n                        value = addHoverClass(value, cache);\n                    }\n                    if (isTextarea || isRemoteOrDynamicCss) {\n                        const child = doc.createTextNode(value);\n                        for (const c of Array.from(node.childNodes)) {\n                            if (c.nodeType === node.TEXT_NODE) {\n                                node.removeChild(c);\n                            }\n                        }\n                        node.appendChild(child);\n                        continue;\n                    }\n                    try {\n                        if (n.isSVG && name === 'xlink:href') {\n                            node.setAttributeNS('http://www.w3.org/1999/xlink', name, value);\n                        }\n                        else if (name === 'onload' ||\n                            name === 'onclick' ||\n                            name.substring(0, 7) === 'onmouse') {\n                            node.setAttribute('_' + name, value);\n                        }\n                        else if (tagName === 'meta' &&\n                            n.attributes['http-equiv'] === 'Content-Security-Policy' &&\n                            name === 'content') {\n                            node.setAttribute('csp-content', value);\n                            continue;\n                        }\n                        else if (tagName === 'link' &&\n                            (n.attributes.rel === 'preload' || n.attributes.rel === 'modulepreload') &&\n                            n.attributes.as === 'script') {\n                        }\n                        else if (tagName === 'link' &&\n                            n.attributes.rel === 'prefetch' &&\n                            typeof n.attributes.href === 'string' &&\n                            n.attributes.href.endsWith('.js')) {\n                        }\n                        else if (tagName === 'img' &&\n                            n.attributes.srcset &&\n                            n.attributes.rr_dataURL) {\n                            node.setAttribute('rrweb-original-srcset', n.attributes.srcset);\n                        }\n                        else {\n                            node.setAttribute(name, value);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else {\n                    if (tagName === 'canvas' && name === 'rr_dataURL') {\n                        const image = document.createElement('img');\n                        image.src = value;\n                        image.onload = () => {\n                            const ctx = node.getContext('2d');\n                            if (ctx) {\n                                ctx.drawImage(image, 0, 0, image.width, image.height);\n                            }\n                        };\n                    }\n                    else if (tagName === 'img' && name === 'rr_dataURL') {\n                        const image = node;\n                        if (!image.currentSrc.startsWith('data:')) {\n                            image.setAttribute('rrweb-original-src', n.attributes.src);\n                            image.src = value;\n                        }\n                    }\n                    if (name === 'rr_width') {\n                        node.style.width = value;\n                    }\n                    else if (name === 'rr_height') {\n                        node.style.height = value;\n                    }\n                    else if (name === 'rr_mediaCurrentTime') {\n                        node.currentTime = n.attributes\n                            .rr_mediaCurrentTime;\n                    }\n                    else if (name === 'rr_mediaState') {\n                        switch (value) {\n                            case 'played':\n                                node\n                                    .play()\n                                    .catch((e) => console.warn('media playback error', e));\n                                break;\n                            case 'paused':\n                                node.pause();\n                                break;\n                        }\n                    }\n                }\n            }\n            if (n.isShadowHost) {\n                if (!node.shadowRoot) {\n                    node.attachShadow({ mode: 'open' });\n                }\n                else {\n                    while (node.shadowRoot.firstChild) {\n                        node.shadowRoot.removeChild(node.shadowRoot.firstChild);\n                    }\n                }\n            }\n            return node;\n        case NodeType.Text:\n            return doc.createTextNode(n.isStyle && hackCss\n                ? addHoverClass(n.textContent, cache)\n                : n.textContent);\n        case NodeType.CDATA:\n            return doc.createCDATASection(n.textContent);\n        case NodeType.Comment:\n            return doc.createComment(n.textContent);\n        default:\n            return null;\n    }\n}\nfunction buildNodeWithSN(n, options) {\n    const { doc, map, skipChild = false, hackCss = true, afterAppend, cache, } = options;\n    let node = buildNode(n, { doc, hackCss, cache });\n    if (!node) {\n        return null;\n    }\n    if (n.rootId) {\n        console.assert(map[n.rootId] === doc, 'Target document should has the same root id.');\n    }\n    if (n.type === NodeType.Document) {\n        doc.close();\n        doc.open();\n        if (n.compatMode === 'BackCompat' &&\n            n.childNodes &&\n            n.childNodes[0].type !== NodeType.DocumentType) {\n            if (n.childNodes[0].type === NodeType.Element &&\n                'xmlns' in n.childNodes[0].attributes &&\n                n.childNodes[0].attributes.xmlns === 'http://www.w3.org/1999/xhtml') {\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">');\n            }\n            else {\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">');\n            }\n        }\n        node = doc;\n    }\n    node.__sn = n;\n    map[n.id] = node;\n    if ((n.type === NodeType.Document || n.type === NodeType.Element) &&\n        !skipChild) {\n        for (const childN of n.childNodes) {\n            const childNode = buildNodeWithSN(childN, {\n                doc,\n                map,\n                skipChild: false,\n                hackCss,\n                afterAppend,\n                cache,\n            });\n            if (!childNode) {\n                console.warn('Failed to rebuild', childN);\n                continue;\n            }\n            if (childN.isShadow && isElement(node) && node.shadowRoot) {\n                node.shadowRoot.appendChild(childNode);\n            }\n            else {\n                node.appendChild(childNode);\n            }\n            if (afterAppend) {\n                afterAppend(childNode);\n            }\n        }\n    }\n    return node;\n}\nfunction visit(idNodeMap, onVisit) {\n    function walk(node) {\n        onVisit(node);\n    }\n    for (const key in idNodeMap) {\n        if (idNodeMap[key]) {\n            walk(idNodeMap[key]);\n        }\n    }\n}\nfunction handleScroll(node) {\n    const n = node.__sn;\n    if (n.type !== NodeType.Element) {\n        return;\n    }\n    const el = node;\n    for (const name in n.attributes) {\n        if (!(n.attributes.hasOwnProperty(name) && name.startsWith('rr_'))) {\n            continue;\n        }\n        const value = n.attributes[name];\n        if (name === 'rr_scrollLeft') {\n            el.scrollLeft = value;\n        }\n        if (name === 'rr_scrollTop') {\n            el.scrollTop = value;\n        }\n    }\n}\nfunction rebuild(n, options) {\n    const { doc, onVisit, hackCss = true, afterAppend, cache } = options;\n    const idNodeMap = {};\n    const node = buildNodeWithSN(n, {\n        doc,\n        map: idNodeMap,\n        skipChild: false,\n        hackCss,\n        afterAppend,\n        cache,\n    });\n    visit(idNodeMap, (visitedNode) => {\n        if (onVisit) {\n            onVisit(visitedNode);\n        }\n        handleScroll(visitedNode);\n    });\n    return [node, idNodeMap];\n}\n\nexport { IGNORED_NODE, NodeType, addHoverClass, buildNodeWithSN, createCache, hasInputMaskOptions, is2DCanvasBlank, isElement, isShadowRoot, maskInputValue, needMaskingText, rebuild, serializeNodeWithId, snapshot, transformAttribute };\n","var EventType;\n(function (EventType) {\n    EventType[EventType[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n    EventType[EventType[\"Load\"] = 1] = \"Load\";\n    EventType[EventType[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n    EventType[EventType[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n    EventType[EventType[\"Meta\"] = 4] = \"Meta\";\n    EventType[EventType[\"Custom\"] = 5] = \"Custom\";\n    EventType[EventType[\"Plugin\"] = 6] = \"Plugin\";\n})(EventType || (EventType = {}));\nvar IncrementalSource;\n(function (IncrementalSource) {\n    IncrementalSource[IncrementalSource[\"Mutation\"] = 0] = \"Mutation\";\n    IncrementalSource[IncrementalSource[\"MouseMove\"] = 1] = \"MouseMove\";\n    IncrementalSource[IncrementalSource[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n    IncrementalSource[IncrementalSource[\"Scroll\"] = 3] = \"Scroll\";\n    IncrementalSource[IncrementalSource[\"ViewportResize\"] = 4] = \"ViewportResize\";\n    IncrementalSource[IncrementalSource[\"Input\"] = 5] = \"Input\";\n    IncrementalSource[IncrementalSource[\"TouchMove\"] = 6] = \"TouchMove\";\n    IncrementalSource[IncrementalSource[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n    IncrementalSource[IncrementalSource[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n    IncrementalSource[IncrementalSource[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n    IncrementalSource[IncrementalSource[\"Font\"] = 10] = \"Font\";\n    IncrementalSource[IncrementalSource[\"Log\"] = 11] = \"Log\";\n    IncrementalSource[IncrementalSource[\"Drag\"] = 12] = \"Drag\";\n    IncrementalSource[IncrementalSource[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n})(IncrementalSource || (IncrementalSource = {}));\nvar MouseInteractions;\n(function (MouseInteractions) {\n    MouseInteractions[MouseInteractions[\"MouseUp\"] = 0] = \"MouseUp\";\n    MouseInteractions[MouseInteractions[\"MouseDown\"] = 1] = \"MouseDown\";\n    MouseInteractions[MouseInteractions[\"Click\"] = 2] = \"Click\";\n    MouseInteractions[MouseInteractions[\"ContextMenu\"] = 3] = \"ContextMenu\";\n    MouseInteractions[MouseInteractions[\"DblClick\"] = 4] = \"DblClick\";\n    MouseInteractions[MouseInteractions[\"Focus\"] = 5] = \"Focus\";\n    MouseInteractions[MouseInteractions[\"Blur\"] = 6] = \"Blur\";\n    MouseInteractions[MouseInteractions[\"TouchStart\"] = 7] = \"TouchStart\";\n    MouseInteractions[MouseInteractions[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n    MouseInteractions[MouseInteractions[\"TouchEnd\"] = 9] = \"TouchEnd\";\n    MouseInteractions[MouseInteractions[\"TouchCancel\"] = 10] = \"TouchCancel\";\n})(MouseInteractions || (MouseInteractions = {}));\nvar CanvasContext;\n(function (CanvasContext) {\n    CanvasContext[CanvasContext[\"2D\"] = 0] = \"2D\";\n    CanvasContext[CanvasContext[\"WebGL\"] = 1] = \"WebGL\";\n    CanvasContext[CanvasContext[\"WebGL2\"] = 2] = \"WebGL2\";\n})(CanvasContext || (CanvasContext = {}));\nvar MediaInteractions;\n(function (MediaInteractions) {\n    MediaInteractions[MediaInteractions[\"Play\"] = 0] = \"Play\";\n    MediaInteractions[MediaInteractions[\"Pause\"] = 1] = \"Pause\";\n    MediaInteractions[MediaInteractions[\"Seeked\"] = 2] = \"Seeked\";\n    MediaInteractions[MediaInteractions[\"VolumeChange\"] = 3] = \"VolumeChange\";\n})(MediaInteractions || (MediaInteractions = {}));\nvar ReplayerEvents;\n(function (ReplayerEvents) {\n    ReplayerEvents[\"Start\"] = \"start\";\n    ReplayerEvents[\"Pause\"] = \"pause\";\n    ReplayerEvents[\"Resume\"] = \"resume\";\n    ReplayerEvents[\"Resize\"] = \"resize\";\n    ReplayerEvents[\"Finish\"] = \"finish\";\n    ReplayerEvents[\"FullsnapshotRebuilded\"] = \"fullsnapshot-rebuilded\";\n    ReplayerEvents[\"LoadStylesheetStart\"] = \"load-stylesheet-start\";\n    ReplayerEvents[\"LoadStylesheetEnd\"] = \"load-stylesheet-end\";\n    ReplayerEvents[\"SkipStart\"] = \"skip-start\";\n    ReplayerEvents[\"SkipEnd\"] = \"skip-end\";\n    ReplayerEvents[\"MouseInteraction\"] = \"mouse-interaction\";\n    ReplayerEvents[\"EventCast\"] = \"event-cast\";\n    ReplayerEvents[\"CustomEvent\"] = \"custom-event\";\n    ReplayerEvents[\"Flush\"] = \"flush\";\n    ReplayerEvents[\"StateChange\"] = \"state-change\";\n    ReplayerEvents[\"PlayBack\"] = \"play-back\";\n})(ReplayerEvents || (ReplayerEvents = {}));\n\nexport { CanvasContext, EventType, IncrementalSource, MediaInteractions, MouseInteractions, ReplayerEvents };\n","import { IncrementalSource } from './types.js';\nimport { IGNORED_NODE, isShadowRoot, NodeType } from '../../rrweb-snapshot/es/rrweb-snapshot.js';\n\nfunction on(type, fn, target = document) {\n    const options = { capture: true, passive: true };\n    target.addEventListener(type, fn, options);\n    return () => target.removeEventListener(type, fn, options);\n}\nfunction createMirror() {\n    return {\n        map: {},\n        getId(n) {\n            if (!n || !n.__sn) {\n                return -1;\n            }\n            return n.__sn.id;\n        },\n        getNode(id) {\n            return this.map[id] || null;\n        },\n        removeNodeFromMap(n) {\n            const id = n.__sn && n.__sn.id;\n            delete this.map[id];\n            if (n.childNodes) {\n                n.childNodes.forEach((child) => this.removeNodeFromMap(child));\n            }\n        },\n        has(id) {\n            return this.map.hasOwnProperty(id);\n        },\n        reset() {\n            this.map = {};\n        },\n    };\n}\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +\n    '\\r\\n' +\n    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +\n    '\\r\\n' +\n    'or you can use record.mirror to access the mirror instance during recording.';\nlet _mirror = {\n    map: {},\n    getId() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return -1;\n    },\n    getNode() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return null;\n    },\n    removeNodeFromMap() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n    has() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return false;\n    },\n    reset() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n    _mirror = new Proxy(_mirror, {\n        get(target, prop, receiver) {\n            if (prop === 'map') {\n                console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n}\nfunction throttle(func, wait, options = {}) {\n    let timeout = null;\n    let previous = 0;\n    return function (arg) {\n        let now = Date.now();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        let remaining = wait - (now - previous);\n        let context = this;\n        let args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(() => {\n                previous = options.leading === false ? 0 : Date.now();\n                timeout = null;\n                func.apply(context, args);\n            }, remaining);\n        }\n    };\n}\nfunction hookSetter(target, key, d, isRevoked, win = window) {\n    const original = win.Object.getOwnPropertyDescriptor(target, key);\n    win.Object.defineProperty(target, key, isRevoked\n        ? d\n        : {\n            set(value) {\n                setTimeout(() => {\n                    d.set.call(this, value);\n                }, 0);\n                if (original && original.set) {\n                    original.set.call(this, value);\n                }\n            },\n        });\n    return () => hookSetter(target, key, original || {}, true);\n}\nfunction patch(source, name, replacement) {\n    try {\n        if (!(name in source)) {\n            return () => { };\n        }\n        const original = source[name];\n        const wrapped = replacement(original);\n        if (typeof wrapped === 'function') {\n            wrapped.prototype = wrapped.prototype || {};\n            Object.defineProperties(wrapped, {\n                __rrweb_original__: {\n                    enumerable: false,\n                    value: original,\n                },\n            });\n        }\n        source[name] = wrapped;\n        return () => {\n            source[name] = original;\n        };\n    }\n    catch (_a) {\n        return () => { };\n    }\n}\nfunction getWindowHeight() {\n    return (window.innerHeight ||\n        (document.documentElement && document.documentElement.clientHeight) ||\n        (document.body && document.body.clientHeight));\n}\nfunction getWindowWidth() {\n    return (window.innerWidth ||\n        (document.documentElement && document.documentElement.clientWidth) ||\n        (document.body && document.body.clientWidth));\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector) {\n    if (!node) {\n        return false;\n    }\n    if (node.nodeType === node.ELEMENT_NODE) {\n        let needBlock = false;\n        const needUnblock = unblockSelector && node.matches(unblockSelector);\n        if (typeof blockClass === 'string') {\n            if (node.closest !== undefined) {\n                needBlock =\n                    !needUnblock &&\n                        node.closest('.' + blockClass) !== null;\n            }\n            else {\n                needBlock =\n                    !needUnblock && node.classList.contains(blockClass);\n            }\n        }\n        else {\n            !needUnblock &&\n                node.classList.forEach((className) => {\n                    if (blockClass.test(className)) {\n                        needBlock = true;\n                    }\n                });\n        }\n        if (!needBlock && blockSelector) {\n            needBlock = node.matches(blockSelector);\n        }\n        return ((!needUnblock && needBlock) ||\n            isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector));\n    }\n    if (node.nodeType === node.TEXT_NODE) {\n        return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n    }\n    return isBlocked(node.parentNode, blockClass, blockSelector, unblockSelector);\n}\nfunction isIgnored(n) {\n    if ('__sn' in n) {\n        return n.__sn.id === IGNORED_NODE;\n    }\n    return false;\n}\nfunction isAncestorRemoved(target, mirror) {\n    if (isShadowRoot(target)) {\n        return false;\n    }\n    const id = mirror.getId(target);\n    if (!mirror.has(id)) {\n        return true;\n    }\n    if (target.parentNode &&\n        target.parentNode.nodeType === target.DOCUMENT_NODE) {\n        return false;\n    }\n    if (!target.parentNode) {\n        return true;\n    }\n    return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction isTouchEvent(event) {\n    return Boolean(event.changedTouches);\n}\nfunction polyfill(win = window) {\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n        win.NodeList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n        win.DOMTokenList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if (!Node.prototype.contains) {\n        Node.prototype.contains = function contains(node) {\n            if (!(0 in arguments)) {\n                throw new TypeError('1 argument is required');\n            }\n            do {\n                if (this === node) {\n                    return true;\n                }\n            } while ((node = node && node.parentNode));\n            return false;\n        };\n    }\n}\nclass TreeIndex {\n    constructor() {\n        this.reset();\n    }\n    add(mutation) {\n        const parentTreeNode = this.indexes.get(mutation.parentId);\n        const treeNode = {\n            id: mutation.node.id,\n            mutation,\n            children: [],\n            texts: [],\n            attributes: [],\n        };\n        if (!parentTreeNode) {\n            this.tree[treeNode.id] = treeNode;\n        }\n        else {\n            treeNode.parent = parentTreeNode;\n            parentTreeNode.children[treeNode.id] = treeNode;\n        }\n        this.indexes.set(treeNode.id, treeNode);\n    }\n    remove(mutation, mirror) {\n        const parentTreeNode = this.indexes.get(mutation.parentId);\n        const treeNode = this.indexes.get(mutation.id);\n        const deepRemoveFromMirror = (id) => {\n            this.removeIdSet.add(id);\n            const node = mirror.getNode(id);\n            node === null || node === void 0 ? void 0 : node.childNodes.forEach((childNode) => {\n                if ('__sn' in childNode) {\n                    deepRemoveFromMirror(childNode.__sn.id);\n                }\n            });\n        };\n        const deepRemoveFromTreeIndex = (node) => {\n            this.removeIdSet.add(node.id);\n            Object.values(node.children).forEach((n) => deepRemoveFromTreeIndex(n));\n            const _treeNode = this.indexes.get(node.id);\n            if (_treeNode) {\n                const _parentTreeNode = _treeNode.parent;\n                if (_parentTreeNode) {\n                    delete _treeNode.parent;\n                    delete _parentTreeNode.children[_treeNode.id];\n                    this.indexes.delete(mutation.id);\n                }\n            }\n        };\n        if (!treeNode) {\n            this.removeNodeMutations.push(mutation);\n            deepRemoveFromMirror(mutation.id);\n        }\n        else if (!parentTreeNode) {\n            delete this.tree[treeNode.id];\n            this.indexes.delete(treeNode.id);\n            deepRemoveFromTreeIndex(treeNode);\n        }\n        else {\n            delete treeNode.parent;\n            delete parentTreeNode.children[treeNode.id];\n            this.indexes.delete(mutation.id);\n            deepRemoveFromTreeIndex(treeNode);\n        }\n    }\n    text(mutation) {\n        const treeNode = this.indexes.get(mutation.id);\n        if (treeNode) {\n            treeNode.texts.push(mutation);\n        }\n        else {\n            this.textMutations.push(mutation);\n        }\n    }\n    attribute(mutation) {\n        const treeNode = this.indexes.get(mutation.id);\n        if (treeNode) {\n            treeNode.attributes.push(mutation);\n        }\n        else {\n            this.attributeMutations.push(mutation);\n        }\n    }\n    scroll(d) {\n        this.scrollMap.set(d.id, d);\n    }\n    input(d) {\n        this.inputMap.set(d.id, d);\n    }\n    flush() {\n        const { tree, removeNodeMutations, textMutations, attributeMutations, } = this;\n        const batchMutationData = {\n            source: IncrementalSource.Mutation,\n            removes: removeNodeMutations,\n            texts: textMutations,\n            attributes: attributeMutations,\n            adds: [],\n        };\n        const walk = (treeNode, removed) => {\n            if (removed) {\n                this.removeIdSet.add(treeNode.id);\n            }\n            batchMutationData.texts = batchMutationData.texts\n                .concat(removed ? [] : treeNode.texts)\n                .filter((m) => !this.removeIdSet.has(m.id));\n            batchMutationData.attributes = batchMutationData.attributes\n                .concat(removed ? [] : treeNode.attributes)\n                .filter((m) => !this.removeIdSet.has(m.id));\n            if (!this.removeIdSet.has(treeNode.id) &&\n                !this.removeIdSet.has(treeNode.mutation.parentId) &&\n                !removed) {\n                batchMutationData.adds.push(treeNode.mutation);\n                if (treeNode.children) {\n                    Object.values(treeNode.children).forEach((n) => walk(n, false));\n                }\n            }\n            else {\n                Object.values(treeNode.children).forEach((n) => walk(n, true));\n            }\n        };\n        Object.values(tree).forEach((n) => walk(n, false));\n        for (const id of this.scrollMap.keys()) {\n            if (this.removeIdSet.has(id)) {\n                this.scrollMap.delete(id);\n            }\n        }\n        for (const id of this.inputMap.keys()) {\n            if (this.removeIdSet.has(id)) {\n                this.inputMap.delete(id);\n            }\n        }\n        const scrollMap = new Map(this.scrollMap);\n        const inputMap = new Map(this.inputMap);\n        this.reset();\n        return {\n            mutationData: batchMutationData,\n            scrollMap,\n            inputMap,\n        };\n    }\n    reset() {\n        this.tree = [];\n        this.indexes = new Map();\n        this.removeNodeMutations = [];\n        this.textMutations = [];\n        this.attributeMutations = [];\n        this.removeIdSet = new Set();\n        this.scrollMap = new Map();\n        this.inputMap = new Map();\n    }\n    idRemoved(id) {\n        return this.removeIdSet.has(id);\n    }\n}\nfunction queueToResolveTrees(queue) {\n    const queueNodeMap = {};\n    const putIntoMap = (m, parent) => {\n        const nodeInTree = {\n            value: m,\n            parent,\n            children: [],\n        };\n        queueNodeMap[m.node.id] = nodeInTree;\n        return nodeInTree;\n    };\n    const queueNodeTrees = [];\n    for (const mutation of queue) {\n        const { nextId, parentId } = mutation;\n        if (nextId && nextId in queueNodeMap) {\n            const nextInTree = queueNodeMap[nextId];\n            if (nextInTree.parent) {\n                const idx = nextInTree.parent.children.indexOf(nextInTree);\n                nextInTree.parent.children.splice(idx, 0, putIntoMap(mutation, nextInTree.parent));\n            }\n            else {\n                const idx = queueNodeTrees.indexOf(nextInTree);\n                queueNodeTrees.splice(idx, 0, putIntoMap(mutation, null));\n            }\n            continue;\n        }\n        if (parentId in queueNodeMap) {\n            const parentInTree = queueNodeMap[parentId];\n            parentInTree.children.push(putIntoMap(mutation, parentInTree));\n            continue;\n        }\n        queueNodeTrees.push(putIntoMap(mutation, null));\n    }\n    return queueNodeTrees;\n}\nfunction iterateResolveTree(tree, cb) {\n    cb(tree.value);\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        iterateResolveTree(tree.children[i], cb);\n    }\n}\nfunction isIframeINode(node) {\n    if ('__sn' in node) {\n        return (node.__sn.type === NodeType.Element && node.__sn.tagName === 'iframe');\n    }\n    return false;\n}\nfunction getBaseDimension(node, rootIframe) {\n    var _a, _b;\n    const frameElement = (_b = (_a = node.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView) === null || _b === void 0 ? void 0 : _b.frameElement;\n    if (!frameElement || frameElement === rootIframe) {\n        return {\n            x: 0,\n            y: 0,\n            relativeScale: 1,\n            absoluteScale: 1,\n        };\n    }\n    const frameDimension = frameElement.getBoundingClientRect();\n    const frameBaseDimension = getBaseDimension(frameElement, rootIframe);\n    const relativeScale = frameDimension.height / frameElement.clientHeight;\n    return {\n        x: frameDimension.x * frameBaseDimension.relativeScale +\n            frameBaseDimension.x,\n        y: frameDimension.y * frameBaseDimension.relativeScale +\n            frameBaseDimension.y,\n        relativeScale,\n        absoluteScale: frameBaseDimension.absoluteScale * relativeScale,\n    };\n}\nfunction hasShadowRoot(n) {\n    return Boolean(n === null || n === void 0 ? void 0 : n.shadowRoot);\n}\n\nexport { TreeIndex, _mirror, createMirror, getBaseDimension, getWindowHeight, getWindowWidth, hasShadowRoot, hookSetter, isAncestorRemoved, isBlocked, isIframeINode, isIgnored, isTouchEvent, iterateResolveTree, on, patch, polyfill, queueToResolveTrees, throttle };\n","import { isShadowRoot, maskInputValue, transformAttribute, needMaskingText, IGNORED_NODE, serializeNodeWithId } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { isIgnored, isBlocked, isAncestorRemoved, isIframeINode, hasShadowRoot } from '../utils.js';\n\nfunction isNodeInLinkedList(n) {\n    return '__ln' in n;\n}\nclass DoubleLinkedList {\n    constructor() {\n        this.length = 0;\n        this.head = null;\n    }\n    get(position) {\n        if (position >= this.length) {\n            throw new Error('Position outside of list range');\n        }\n        let current = this.head;\n        for (let index = 0; index < position; index++) {\n            current = (current === null || current === void 0 ? void 0 : current.next) || null;\n        }\n        return current;\n    }\n    addNode(n) {\n        const node = {\n            value: n,\n            previous: null,\n            next: null,\n        };\n        n.__ln = node;\n        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n            const current = n.previousSibling.__ln.next;\n            node.next = current;\n            node.previous = n.previousSibling.__ln;\n            n.previousSibling.__ln.next = node;\n            if (current) {\n                current.previous = node;\n            }\n        }\n        else if (n.nextSibling &&\n            isNodeInLinkedList(n.nextSibling) &&\n            n.nextSibling.__ln.previous) {\n            const current = n.nextSibling.__ln.previous;\n            node.previous = current;\n            node.next = n.nextSibling.__ln;\n            n.nextSibling.__ln.previous = node;\n            if (current) {\n                current.next = node;\n            }\n        }\n        else {\n            if (this.head) {\n                this.head.previous = node;\n            }\n            node.next = this.head;\n            this.head = node;\n        }\n        this.length++;\n    }\n    removeNode(n) {\n        const current = n.__ln;\n        if (!this.head) {\n            return;\n        }\n        if (!current.previous) {\n            this.head = current.next;\n            if (this.head) {\n                this.head.previous = null;\n            }\n        }\n        else {\n            current.previous.next = current.next;\n            if (current.next) {\n                current.next.previous = current.previous;\n            }\n        }\n        if (n.__ln) {\n            delete n.__ln;\n        }\n        this.length--;\n    }\n}\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\nfunction isINode(n) {\n    return '__sn' in n;\n}\nclass MutationBuffer {\n    constructor() {\n        this.frozen = false;\n        this.locked = false;\n        this.texts = [];\n        this.attributes = [];\n        this.removes = [];\n        this.mapRemoves = [];\n        this.movedMap = {};\n        this.addedSet = new Set();\n        this.movedSet = new Set();\n        this.droppedSet = new Set();\n        this.processMutations = (mutations) => {\n            mutations.forEach(this.processMutation);\n            this.emit();\n        };\n        this.emit = () => {\n            if (this.frozen || this.locked) {\n                return;\n            }\n            const adds = [];\n            const addList = new DoubleLinkedList();\n            const getNextId = (n) => {\n                let ns = n;\n                let nextId = IGNORED_NODE;\n                while (nextId === IGNORED_NODE) {\n                    ns = ns && ns.nextSibling;\n                    nextId = ns && this.mirror.getId(ns);\n                }\n                return nextId;\n            };\n            const pushAdd = (n) => {\n                var _a, _b, _c, _d, _e;\n                const shadowHost = n.getRootNode\n                    ? (_a = n.getRootNode()) === null || _a === void 0 ? void 0 : _a.host\n                    : null;\n                let rootShadowHost = shadowHost;\n                while ((_c = (_b = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _b === void 0 ? void 0 : _b.call(rootShadowHost)) === null || _c === void 0 ? void 0 : _c.host)\n                    rootShadowHost =\n                        ((_e = (_d = rootShadowHost === null || rootShadowHost === void 0 ? void 0 : rootShadowHost.getRootNode) === null || _d === void 0 ? void 0 : _d.call(rootShadowHost)) === null || _e === void 0 ? void 0 : _e.host) ||\n                            null;\n                const notInDoc = !this.doc.contains(n) &&\n                    (!rootShadowHost || !this.doc.contains(rootShadowHost));\n                if (!n.parentNode || notInDoc) {\n                    return;\n                }\n                const parentId = isShadowRoot(n.parentNode)\n                    ? this.mirror.getId(shadowHost)\n                    : this.mirror.getId(n.parentNode);\n                const nextId = getNextId(n);\n                if (parentId === -1 || nextId === -1) {\n                    return addList.addNode(n);\n                }\n                let sn = serializeNodeWithId(n, {\n                    doc: this.doc,\n                    map: this.mirror.map,\n                    blockClass: this.blockClass,\n                    blockSelector: this.blockSelector,\n                    unblockSelector: this.unblockSelector,\n                    maskTextClass: this.maskTextClass,\n                    maskTextSelector: this.maskTextSelector,\n                    unmaskTextSelector: this.unmaskTextSelector,\n                    maskInputSelector: this.maskInputSelector,\n                    unmaskInputSelector: this.unmaskInputSelector,\n                    skipChild: true,\n                    inlineStylesheet: this.inlineStylesheet,\n                    maskAllText: this.maskAllText,\n                    maskInputOptions: this.maskInputOptions,\n                    maskTextFn: this.maskTextFn,\n                    maskInputFn: this.maskInputFn,\n                    slimDOMOptions: this.slimDOMOptions,\n                    recordCanvas: this.recordCanvas,\n                    inlineImages: this.inlineImages,\n                    onSerialize: (currentN) => {\n                        if (isIframeINode(currentN)) {\n                            this.iframeManager.addIframe(currentN);\n                        }\n                        if (hasShadowRoot(n)) {\n                            this.shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                        }\n                    },\n                    onIframeLoad: (iframe, childSn) => {\n                        this.iframeManager.attachIframe(iframe, childSn);\n                        this.shadowDomManager.observeAttachShadow(iframe);\n                    },\n                });\n                if (sn) {\n                    adds.push({\n                        parentId,\n                        nextId,\n                        node: sn,\n                    });\n                }\n            };\n            while (this.mapRemoves.length) {\n                this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n            }\n            for (const n of this.movedSet) {\n                if (isParentRemoved(this.removes, n, this.mirror) &&\n                    !this.movedSet.has(n.parentNode)) {\n                    continue;\n                }\n                pushAdd(n);\n            }\n            for (const n of this.addedSet) {\n                if (!isAncestorInSet(this.droppedSet, n) &&\n                    !isParentRemoved(this.removes, n, this.mirror)) {\n                    pushAdd(n);\n                }\n                else if (isAncestorInSet(this.movedSet, n)) {\n                    pushAdd(n);\n                }\n                else {\n                    this.droppedSet.add(n);\n                }\n            }\n            let candidate = null;\n            while (addList.length) {\n                let node = null;\n                if (candidate) {\n                    const parentId = this.mirror.getId(candidate.value.parentNode);\n                    const nextId = getNextId(candidate.value);\n                    if (parentId !== -1 && nextId !== -1) {\n                        node = candidate;\n                    }\n                }\n                if (!node) {\n                    for (let index = addList.length - 1; index >= 0; index--) {\n                        const _node = addList.get(index);\n                        if (_node) {\n                            const parentId = this.mirror.getId(_node.value.parentNode);\n                            const nextId = getNextId(_node.value);\n                            if (parentId !== -1 && nextId !== -1) {\n                                node = _node;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!node) {\n                    while (addList.head) {\n                        addList.removeNode(addList.head.value);\n                    }\n                    break;\n                }\n                candidate = node.previous;\n                addList.removeNode(node.value);\n                pushAdd(node.value);\n            }\n            const payload = {\n                texts: this.texts\n                    .map((text) => ({\n                    id: this.mirror.getId(text.node),\n                    value: text.value,\n                }))\n                    .filter((text) => this.mirror.has(text.id)),\n                attributes: this.attributes\n                    .map((attribute) => ({\n                    id: this.mirror.getId(attribute.node),\n                    attributes: attribute.attributes,\n                }))\n                    .filter((attribute) => this.mirror.has(attribute.id)),\n                removes: this.removes,\n                adds,\n            };\n            if (!payload.texts.length &&\n                !payload.attributes.length &&\n                !payload.removes.length &&\n                !payload.adds.length) {\n                return;\n            }\n            this.texts = [];\n            this.attributes = [];\n            this.removes = [];\n            this.addedSet = new Set();\n            this.movedSet = new Set();\n            this.droppedSet = new Set();\n            this.movedMap = {};\n            this.mutationCb(payload);\n        };\n        this.processMutation = (m) => {\n            if (isIgnored(m.target)) {\n                return;\n            }\n            switch (m.type) {\n                case 'characterData': {\n                    const value = m.target.textContent;\n                    if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) && value !== m.oldValue) {\n                        this.texts.push({\n                            value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextSelector, this.maskAllText) && value\n                                ? this.maskTextFn\n                                    ? this.maskTextFn(value)\n                                    : value.replace(/[\\S]/g, '*')\n                                : value,\n                            node: m.target,\n                        });\n                    }\n                    break;\n                }\n                case 'attributes': {\n                    const target = m.target;\n                    let value = target.getAttribute(m.attributeName);\n                    if (m.attributeName === 'value') {\n                        value = maskInputValue({\n                            input: target,\n                            maskInputSelector: this.maskInputSelector,\n                            unmaskInputSelector: this.unmaskInputSelector,\n                            maskInputOptions: this.maskInputOptions,\n                            tagName: target.tagName,\n                            type: target.getAttribute('type'),\n                            value,\n                            maskInputFn: this.maskInputFn,\n                        });\n                    }\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || value === m.oldValue) {\n                        return;\n                    }\n                    let item = this.attributes.find((a) => a.node === m.target);\n                    if (!item) {\n                        item = {\n                            node: m.target,\n                            attributes: {},\n                        };\n                        this.attributes.push(item);\n                    }\n                    if (m.attributeName === 'type' &&\n                        m.target.tagName === 'INPUT' &&\n                        (m.oldValue || '').toLowerCase() === 'password') {\n                        m.target.setAttribute('rr_is_password', 'true');\n                    }\n                    if (m.attributeName === 'style') {\n                        const old = this.doc.createElement('span');\n                        if (m.oldValue) {\n                            old.setAttribute('style', m.oldValue);\n                        }\n                        if (item.attributes.style === undefined ||\n                            item.attributes.style === null) {\n                            item.attributes.style = {};\n                        }\n                        try {\n                            const styleObj = item.attributes.style;\n                            for (const pname of Array.from(target.style)) {\n                                const newValue = target.style.getPropertyValue(pname);\n                                const newPriority = target.style.getPropertyPriority(pname);\n                                if (newValue !== old.style.getPropertyValue(pname) ||\n                                    newPriority !== old.style.getPropertyPriority(pname)) {\n                                    if (newPriority === '') {\n                                        styleObj[pname] = newValue;\n                                    }\n                                    else {\n                                        styleObj[pname] = [newValue, newPriority];\n                                    }\n                                }\n                            }\n                            for (const pname of Array.from(old.style)) {\n                                if (target.style.getPropertyValue(pname) === '') {\n                                    styleObj[pname] = false;\n                                }\n                            }\n                        }\n                        catch (error) {\n                            console.warn('[rrweb] Error when parsing update to style attribute:', error);\n                        }\n                    }\n                    else {\n                        const element = m.target;\n                        item.attributes[m.attributeName] = transformAttribute(this.doc, element, element.tagName, m.attributeName, value, this.maskAllText, this.unmaskTextSelector, this.maskTextFn);\n                    }\n                    break;\n                }\n                case 'childList': {\n                    m.addedNodes.forEach((n) => this.genAdds(n, m.target));\n                    m.removedNodes.forEach((n) => {\n                        const nodeId = this.mirror.getId(n);\n                        const parentId = isShadowRoot(m.target)\n                            ? this.mirror.getId(m.target.host)\n                            : this.mirror.getId(m.target);\n                        if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector) || isIgnored(n)) {\n                            return;\n                        }\n                        if (this.addedSet.has(n)) {\n                            deepDelete(this.addedSet, n);\n                            this.droppedSet.add(n);\n                        }\n                        else if (this.addedSet.has(m.target) && nodeId === -1) ;\n                        else if (isAncestorRemoved(m.target, this.mirror)) ;\n                        else if (this.movedSet.has(n) &&\n                            this.movedMap[moveKey(nodeId, parentId)]) {\n                            deepDelete(this.movedSet, n);\n                        }\n                        else {\n                            this.removes.push({\n                                parentId,\n                                id: nodeId,\n                                isShadow: isShadowRoot(m.target) ? true : undefined,\n                            });\n                        }\n                        this.mapRemoves.push(n);\n                    });\n                    break;\n                }\n            }\n        };\n        this.genAdds = (n, target) => {\n            if (target && isBlocked(target, this.blockClass, this.blockSelector, this.unblockSelector)) {\n                return;\n            }\n            if (isINode(n)) {\n                if (isIgnored(n)) {\n                    return;\n                }\n                this.movedSet.add(n);\n                let targetId = null;\n                if (target && isINode(target)) {\n                    targetId = target.__sn.id;\n                }\n                if (targetId) {\n                    this.movedMap[moveKey(n.__sn.id, targetId)] = true;\n                }\n            }\n            else {\n                this.addedSet.add(n);\n                this.droppedSet.delete(n);\n            }\n            if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector))\n                n.childNodes.forEach((childN) => this.genAdds(childN));\n        };\n    }\n    init(options) {\n        [\n            'mutationCb',\n            'blockClass',\n            'blockSelector',\n            'unblockSelector',\n            'maskTextClass',\n            'maskTextSelector',\n            'unmaskTextSelector',\n            'maskInputSelector',\n            'unmaskInputSelector',\n            'inlineStylesheet',\n            'maskAllText',\n            'maskInputOptions',\n            'maskTextFn',\n            'maskInputFn',\n            'recordCanvas',\n            'inlineImages',\n            'slimDOMOptions',\n            'doc',\n            'mirror',\n            'iframeManager',\n            'shadowDomManager',\n            'canvasManager',\n        ].forEach((key) => {\n            this[key] = options[key];\n        });\n    }\n    freeze() {\n        this.frozen = true;\n        this.canvasManager.freeze();\n    }\n    unfreeze() {\n        this.frozen = false;\n        this.canvasManager.unfreeze();\n        this.emit();\n    }\n    isFrozen() {\n        return this.frozen;\n    }\n    lock() {\n        this.locked = true;\n        this.canvasManager.lock();\n    }\n    unlock() {\n        this.locked = false;\n        this.canvasManager.unlock();\n        this.emit();\n    }\n    reset() {\n        this.shadowDomManager.reset();\n        this.canvasManager.reset();\n    }\n}\nfunction deepDelete(addsSet, n) {\n    addsSet.delete(n);\n    n.childNodes.forEach((childN) => deepDelete(addsSet, childN));\n}\nfunction isParentRemoved(removes, n, mirror) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    const parentId = mirror.getId(parentNode);\n    if (removes.some((r) => r.id === parentId)) {\n        return true;\n    }\n    return isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    if (set.has(parentNode)) {\n        return true;\n    }\n    return isAncestorInSet(set, parentNode);\n}\n\nexport { MutationBuffer as default };\n","const callbackWrapper = (cb) => {\n    const rrwebWrapped = (...rest) => {\n        try {\n            return cb(...rest);\n        }\n        catch (error) {\n            try {\n                error.__rrweb__ = true;\n            }\n            catch (_a) {\n            }\n            throw error;\n        }\n    };\n    return rrwebWrapped;\n};\n\nexport { callbackWrapper };\n","import { hasInputMaskOptions, maskInputValue } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { on, throttle, isBlocked, hookSetter, patch, isTouchEvent, getWindowHeight, getWindowWidth } from '../utils.js';\nimport { MouseInteractions, IncrementalSource } from '../types.js';\nimport MutationBuffer from './mutation.js';\nimport { callbackWrapper } from '../sentry/callbackWrapper.js';\n\nconst mutationBuffers = [];\nfunction getEventTarget(event) {\n    try {\n        if ('composedPath' in event) {\n            const path = event.composedPath();\n            if (path.length) {\n                return path[0];\n            }\n        }\n        else if ('path' in event && event.path.length) {\n            return event.path[0];\n        }\n    }\n    catch (_a) { }\n    return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n    var _a, _b;\n    const mutationBuffer = new MutationBuffer();\n    mutationBuffers.push(mutationBuffer);\n    mutationBuffer.init(options);\n    let mutationObserverCtor = window.MutationObserver ||\n        window.__rrMutationObserver;\n    const angularZoneSymbol = (_b = (_a = window === null || window === void 0 ? void 0 : window.Zone) === null || _a === void 0 ? void 0 : _a.__symbol__) === null || _b === void 0 ? void 0 : _b.call(_a, 'MutationObserver');\n    if (angularZoneSymbol &&\n        window[angularZoneSymbol]) {\n        mutationObserverCtor = window[angularZoneSymbol];\n    }\n    const observer = new mutationObserverCtor(callbackWrapper((mutations) => {\n        if (options.onMutation && options.onMutation(mutations) === false) {\n            return;\n        }\n        mutationBuffer.processMutations(mutations);\n    }));\n    observer.observe(rootEl, {\n        attributes: true,\n        attributeOldValue: true,\n        characterData: true,\n        characterDataOldValue: true,\n        childList: true,\n        subtree: true,\n    });\n    return observer;\n}\nfunction initMoveObserver({ mousemoveCb, sampling, doc, mirror, }) {\n    if (sampling.mousemove === false) {\n        return () => { };\n    }\n    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n    const callbackThreshold = typeof sampling.mousemoveCallback === 'number'\n        ? sampling.mousemoveCallback\n        : 500;\n    let positions = [];\n    let timeBaseline;\n    const wrappedCb = throttle((source) => {\n        const totalOffset = Date.now() - timeBaseline;\n        callbackWrapper(mousemoveCb)(positions.map((p) => {\n            p.timeOffset -= totalOffset;\n            return p;\n        }), source);\n        positions = [];\n        timeBaseline = null;\n    }, callbackThreshold);\n    const updatePosition = throttle((evt) => {\n        const target = getEventTarget(evt);\n        const { clientX, clientY } = isTouchEvent(evt)\n            ? evt.changedTouches[0]\n            : evt;\n        if (!timeBaseline) {\n            timeBaseline = Date.now();\n        }\n        positions.push({\n            x: clientX,\n            y: clientY,\n            id: mirror.getId(target),\n            timeOffset: Date.now() - timeBaseline,\n        });\n        wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent\n            ? IncrementalSource.Drag\n            : evt instanceof MouseEvent\n                ? IncrementalSource.MouseMove\n                : IncrementalSource.TouchMove);\n    }, threshold, {\n        trailing: false,\n    });\n    const handlers = [\n        on('mousemove', callbackWrapper(updatePosition), doc),\n        on('touchmove', callbackWrapper(updatePosition), doc),\n        on('drag', callbackWrapper(updatePosition), doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initMouseInteractionObserver({ mouseInteractionCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    if (sampling.mouseInteraction === false) {\n        return () => { };\n    }\n    const disableMap = sampling.mouseInteraction === true ||\n        sampling.mouseInteraction === undefined\n        ? {}\n        : sampling.mouseInteraction;\n    const handlers = [];\n    const getHandler = (eventKey) => {\n        return (event) => {\n            const target = getEventTarget(event);\n            if (isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n                return;\n            }\n            const e = isTouchEvent(event) ? event.changedTouches[0] : event;\n            if (!e) {\n                return;\n            }\n            const id = mirror.getId(target);\n            const { clientX, clientY } = e;\n            callbackWrapper(mouseInteractionCb)({\n                type: MouseInteractions[eventKey],\n                id,\n                x: clientX,\n                y: clientY,\n            });\n        };\n    };\n    Object.keys(MouseInteractions)\n        .filter((key) => Number.isNaN(Number(key)) &&\n        !key.endsWith('_Departed') &&\n        disableMap[key] !== false)\n        .forEach((eventKey) => {\n        const eventName = eventKey.toLowerCase();\n        const handler = callbackWrapper(getHandler(eventKey));\n        handlers.push(on(eventName, handler, doc));\n    });\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initScrollObserver({ scrollCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    const updatePosition = throttle((evt) => {\n        const target = getEventTarget(evt);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n            return;\n        }\n        const id = mirror.getId(target);\n        if (target === doc) {\n            const scrollEl = (doc.scrollingElement || doc.documentElement);\n            callbackWrapper(scrollCb)({\n                id,\n                x: scrollEl.scrollLeft,\n                y: scrollEl.scrollTop,\n            });\n        }\n        else {\n            callbackWrapper(scrollCb)({\n                id,\n                x: target.scrollLeft,\n                y: target.scrollTop,\n            });\n        }\n    }, sampling.scroll || 100);\n    return on('scroll', callbackWrapper(updatePosition), doc);\n}\nfunction initViewportResizeObserver({ viewportResizeCb, }) {\n    let lastH = -1;\n    let lastW = -1;\n    const updateDimension = throttle(() => {\n        const height = getWindowHeight();\n        const width = getWindowWidth();\n        if (lastH !== height || lastW !== width) {\n            callbackWrapper(viewportResizeCb)({\n                width: Number(width),\n                height: Number(height),\n            });\n            lastH = height;\n            lastW = width;\n        }\n    }, 200);\n    return on('resize', callbackWrapper(updateDimension), window);\n}\nfunction wrapEventWithUserTriggeredFlag(v, enable) {\n    const value = Object.assign({}, v);\n    if (!enable)\n        delete value.userTriggered;\n    return value;\n}\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nconst lastInputValueMap = new WeakMap();\nfunction initInputObserver({ inputCb, doc, mirror, blockClass, blockSelector, unblockSelector, ignoreClass, ignoreSelector, maskInputSelector, unmaskInputSelector, maskInputOptions, maskInputFn, sampling, userTriggeredOnInput, }) {\n    function eventHandler(event) {\n        let target = getEventTarget(event);\n        const tagName = target && target.tagName;\n        const userTriggered = event.isTrusted;\n        if (tagName === 'OPTION')\n            target = target.parentElement;\n        if (!target ||\n            !tagName ||\n            INPUT_TAGS.indexOf(tagName) < 0 ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n            return;\n        }\n        let type = target.type;\n        if (target.classList.contains(ignoreClass) ||\n            (ignoreSelector && target.matches(ignoreSelector))) {\n            return;\n        }\n        let text = target.value;\n        let isChecked = false;\n        if (target.hasAttribute('rr_is_password')) {\n            type = 'password';\n        }\n        if (type === 'radio' || type === 'checkbox') {\n            isChecked = target.checked;\n        }\n        else if (hasInputMaskOptions({\n            maskInputOptions,\n            maskInputSelector,\n            tagName,\n            type,\n        })) {\n            text = maskInputValue({\n                input: target,\n                maskInputOptions,\n                maskInputSelector,\n                unmaskInputSelector,\n                tagName,\n                type,\n                value: text,\n                maskInputFn,\n            });\n        }\n        cbWithDedup(target, callbackWrapper(wrapEventWithUserTriggeredFlag)({ text, isChecked, userTriggered }, userTriggeredOnInput));\n        const name = target.name;\n        if (type === 'radio' && name && isChecked) {\n            doc\n                .querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)\n                .forEach((el) => {\n                if (el !== target) {\n                    cbWithDedup(el, callbackWrapper(wrapEventWithUserTriggeredFlag)({\n                        text: el.value,\n                        isChecked: !isChecked,\n                        userTriggered: false,\n                    }, userTriggeredOnInput));\n                }\n            });\n        }\n    }\n    function cbWithDedup(target, v) {\n        const lastInputValue = lastInputValueMap.get(target);\n        if (!lastInputValue ||\n            lastInputValue.text !== v.text ||\n            lastInputValue.isChecked !== v.isChecked) {\n            lastInputValueMap.set(target, v);\n            const id = mirror.getId(target);\n            inputCb(Object.assign(Object.assign({}, v), { id }));\n        }\n    }\n    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n    const handlers = events.map((eventName) => on(eventName, callbackWrapper(eventHandler), doc));\n    const propertyDescriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value');\n    const hookProperties = [\n        [HTMLInputElement.prototype, 'value'],\n        [HTMLInputElement.prototype, 'checked'],\n        [HTMLSelectElement.prototype, 'value'],\n        [HTMLTextAreaElement.prototype, 'value'],\n        [HTMLSelectElement.prototype, 'selectedIndex'],\n        [HTMLOptionElement.prototype, 'selected'],\n    ];\n    if (propertyDescriptor && propertyDescriptor.set) {\n        handlers.push(...hookProperties.map((p) => hookSetter(p[0], p[1], {\n            set() {\n                callbackWrapper(eventHandler)({ target: this });\n            },\n        })));\n    }\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction getNestedCSSRulePositions(rule) {\n    const positions = [];\n    function recurse(childRule, pos) {\n        if ((hasNestedCSSRule('CSSGroupingRule') &&\n            childRule.parentRule instanceof CSSGroupingRule) ||\n            (hasNestedCSSRule('CSSMediaRule') &&\n                childRule.parentRule instanceof CSSMediaRule) ||\n            (hasNestedCSSRule('CSSSupportsRule') &&\n                childRule.parentRule instanceof CSSSupportsRule) ||\n            (hasNestedCSSRule('CSSConditionRule') &&\n                childRule.parentRule instanceof CSSConditionRule)) {\n            const rules = Array.from(childRule.parentRule.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        else {\n            const rules = Array.from(childRule.parentStyleSheet.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        return pos;\n    }\n    return recurse(rule, positions);\n}\nfunction initStyleSheetObserver({ styleSheetRuleCb, mirror }, { win }) {\n    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n        return () => { };\n    }\n    const insertRule = win.CSSStyleSheet.prototype.insertRule;\n    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [rule, index] = argumentsList;\n            const id = mirror.getId(thisArg.ownerNode);\n            if (id !== -1) {\n                styleSheetRuleCb({\n                    id,\n                    adds: [{ rule, index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [index] = argumentsList;\n            const id = mirror.getId(thisArg.ownerNode);\n            if (id !== -1) {\n                styleSheetRuleCb({\n                    id,\n                    removes: [{ index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const supportedNestedCSSRuleTypes = {};\n    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n        supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n    }\n    else {\n        if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n            supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n            supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n            supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n        }\n    }\n    const unmodifiedFunctions = {};\n    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n        unmodifiedFunctions[typeKey] = {\n            insertRule: type.prototype.insertRule,\n            deleteRule: type.prototype.deleteRule,\n        };\n        type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [rule, index] = argumentsList;\n                const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n                if (id !== -1) {\n                    styleSheetRuleCb({\n                        id,\n                        adds: [\n                            {\n                                rule,\n                                index: [\n                                    ...getNestedCSSRulePositions(thisArg),\n                                    index || 0,\n                                ],\n                            },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n        type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [index] = argumentsList;\n                const id = mirror.getId(thisArg.parentStyleSheet.ownerNode);\n                if (id !== -1) {\n                    styleSheetRuleCb({\n                        id,\n                        removes: [\n                            { index: [...getNestedCSSRulePositions(thisArg), index] },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleSheet.prototype.insertRule = insertRule;\n        win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n        Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n            type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n            type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n        });\n    });\n}\nfunction initStyleDeclarationObserver({ styleDeclarationCb, mirror }, { win }) {\n    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            var _a, _b;\n            const [property, value, priority] = argumentsList;\n            const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n            if (id !== -1) {\n                styleDeclarationCb({\n                    id,\n                    set: {\n                        property,\n                        value,\n                        priority,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            var _a, _b;\n            const [property] = argumentsList;\n            const id = mirror.getId((_b = (_a = thisArg.parentRule) === null || _a === void 0 ? void 0 : _a.parentStyleSheet) === null || _b === void 0 ? void 0 : _b.ownerNode);\n            if (id !== -1) {\n                styleDeclarationCb({\n                    id,\n                    remove: {\n                        property,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n        win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n    });\n}\nfunction initMediaInteractionObserver({ mediaInteractionCb, blockClass, blockSelector, unblockSelector, mirror, sampling, }) {\n    const handler = (type) => throttle(callbackWrapper((event) => {\n        const target = getEventTarget(event);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector)) {\n            return;\n        }\n        const { currentTime, volume, muted } = target;\n        mediaInteractionCb({\n            type,\n            id: mirror.getId(target),\n            currentTime,\n            volume,\n            muted,\n        });\n    }), sampling.media || 500);\n    const handlers = [\n        on('play', handler(0)),\n        on('pause', handler(1)),\n        on('seeked', handler(2)),\n        on('volumechange', handler(3)),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initFontObserver({ fontCb, doc }) {\n    const win = doc.defaultView;\n    if (!win) {\n        return () => { };\n    }\n    const handlers = [];\n    const fontMap = new WeakMap();\n    const originalFontFace = win.FontFace;\n    win.FontFace = function FontFace(family, source, descriptors) {\n        const fontFace = new originalFontFace(family, source, descriptors);\n        fontMap.set(fontFace, {\n            family,\n            buffer: typeof source !== 'string',\n            descriptors,\n            fontSource: typeof source === 'string'\n                ? source\n                :\n                    JSON.stringify(Array.from(new Uint8Array(source))),\n        });\n        return fontFace;\n    };\n    const restoreHandler = patch(doc.fonts, 'add', function (original) {\n        return function (fontFace) {\n            setTimeout(() => {\n                const p = fontMap.get(fontFace);\n                if (p) {\n                    fontCb(p);\n                    fontMap.delete(fontFace);\n                }\n            }, 0);\n            return original.apply(this, [fontFace]);\n        };\n    });\n    handlers.push(() => {\n        win.FontFace = originalFontFace;\n    });\n    handlers.push(restoreHandler);\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction mergeHooks(o, hooks) {\n    const { mutationCb, mousemoveCb, mouseInteractionCb, scrollCb, viewportResizeCb, inputCb, mediaInteractionCb, styleSheetRuleCb, styleDeclarationCb, canvasMutationCb, fontCb, } = o;\n    o.mutationCb = (...p) => {\n        if (hooks.mutation) {\n            hooks.mutation(...p);\n        }\n        mutationCb(...p);\n    };\n    o.mousemoveCb = (...p) => {\n        if (hooks.mousemove) {\n            hooks.mousemove(...p);\n        }\n        mousemoveCb(...p);\n    };\n    o.mouseInteractionCb = (...p) => {\n        if (hooks.mouseInteraction) {\n            hooks.mouseInteraction(...p);\n        }\n        mouseInteractionCb(...p);\n    };\n    o.scrollCb = (...p) => {\n        if (hooks.scroll) {\n            hooks.scroll(...p);\n        }\n        scrollCb(...p);\n    };\n    o.viewportResizeCb = (...p) => {\n        if (hooks.viewportResize) {\n            hooks.viewportResize(...p);\n        }\n        viewportResizeCb(...p);\n    };\n    o.inputCb = (...p) => {\n        if (hooks.input) {\n            hooks.input(...p);\n        }\n        inputCb(...p);\n    };\n    o.mediaInteractionCb = (...p) => {\n        if (hooks.mediaInteaction) {\n            hooks.mediaInteaction(...p);\n        }\n        mediaInteractionCb(...p);\n    };\n    o.styleSheetRuleCb = (...p) => {\n        if (hooks.styleSheetRule) {\n            hooks.styleSheetRule(...p);\n        }\n        styleSheetRuleCb(...p);\n    };\n    o.styleDeclarationCb = (...p) => {\n        if (hooks.styleDeclaration) {\n            hooks.styleDeclaration(...p);\n        }\n        styleDeclarationCb(...p);\n    };\n    o.canvasMutationCb = (...p) => {\n        if (hooks.canvasMutation) {\n            hooks.canvasMutation(...p);\n        }\n        canvasMutationCb(...p);\n    };\n    o.fontCb = (...p) => {\n        if (hooks.font) {\n            hooks.font(...p);\n        }\n        fontCb(...p);\n    };\n}\nfunction initObservers(o, hooks = {}) {\n    const currentWindow = o.doc.defaultView;\n    if (!currentWindow) {\n        return () => { };\n    }\n    mergeHooks(o, hooks);\n    const mutationObserver = initMutationObserver(o, o.doc);\n    const mousemoveHandler = initMoveObserver(o);\n    const mouseInteractionHandler = initMouseInteractionObserver(o);\n    const scrollHandler = initScrollObserver(o);\n    const viewportResizeHandler = initViewportResizeObserver(o);\n    const inputHandler = initInputObserver(o);\n    const mediaInteractionHandler = initMediaInteractionObserver(o);\n    const styleSheetObserver = initStyleSheetObserver(o, { win: currentWindow });\n    const styleDeclarationObserver = initStyleDeclarationObserver(o, {\n        win: currentWindow,\n    });\n    const fontObserver = o.collectFonts ? initFontObserver(o) : () => { };\n    const pluginHandlers = [];\n    for (const plugin of o.plugins) {\n        pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n    }\n    return callbackWrapper(() => {\n        mutationBuffers.forEach((b) => b.reset());\n        mutationObserver.disconnect();\n        mousemoveHandler();\n        mouseInteractionHandler();\n        scrollHandler();\n        viewportResizeHandler();\n        inputHandler();\n        mediaInteractionHandler();\n        try {\n            styleSheetObserver();\n            styleDeclarationObserver();\n        }\n        catch (e) {\n        }\n        fontObserver();\n        pluginHandlers.forEach((h) => h());\n    });\n}\nfunction hasNestedCSSRule(prop) {\n    return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n    return Boolean(typeof window[prop] !== 'undefined' &&\n        window[prop].prototype &&\n        'insertRule' in window[prop].prototype &&\n        'deleteRule' in window[prop].prototype);\n}\n\nexport { INPUT_TAGS, initMutationObserver, initObservers, initScrollObserver, mutationBuffers };\n","class IframeManager {\n    constructor(options) {\n        this.iframes = new WeakMap();\n        this.mutationCb = options.mutationCb;\n    }\n    addIframe(iframeEl) {\n        this.iframes.set(iframeEl, true);\n    }\n    addLoadListener(cb) {\n        this.loadListener = cb;\n    }\n    attachIframe(iframeEl, childSn) {\n        var _a;\n        this.mutationCb({\n            adds: [\n                {\n                    parentId: iframeEl.__sn.id,\n                    nextId: null,\n                    node: childSn,\n                },\n            ],\n            removes: [],\n            texts: [],\n            attributes: [],\n            isAttachIframe: true,\n        });\n        (_a = this.loadListener) === null || _a === void 0 ? void 0 : _a.call(this, iframeEl);\n    }\n}\n\nexport { IframeManager };\n","import { initMutationObserver, initScrollObserver } from './observer.js';\nimport { patch } from '../utils.js';\n\nclass ShadowDomManager {\n    constructor(options) {\n        this.restorePatches = [];\n        this.mutationCb = options.mutationCb;\n        this.scrollCb = options.scrollCb;\n        this.bypassOptions = options.bypassOptions;\n        this.mirror = options.mirror;\n        const manager = this;\n        this.restorePatches.push(patch(HTMLElement.prototype, 'attachShadow', function (original) {\n            return function () {\n                const shadowRoot = original.apply(this, arguments);\n                if (this.shadowRoot)\n                    manager.addShadowRoot(this.shadowRoot, this.ownerDocument);\n                return shadowRoot;\n            };\n        }));\n    }\n    addShadowRoot(shadowRoot, doc) {\n        initMutationObserver(Object.assign(Object.assign({}, this.bypassOptions), { doc, mutationCb: this.mutationCb, mirror: this.mirror, shadowDomManager: this }), shadowRoot);\n        initScrollObserver(Object.assign(Object.assign({}, this.bypassOptions), { scrollCb: this.scrollCb, doc: shadowRoot, mirror: this.mirror }));\n    }\n    observeAttachShadow(iframeElement) {\n        if (iframeElement.contentWindow) {\n            const manager = this;\n            this.restorePatches.push(patch(iframeElement.contentWindow.HTMLElement.prototype, 'attachShadow', function (original) {\n                return function () {\n                    const shadowRoot = original.apply(this, arguments);\n                    if (this.shadowRoot)\n                        manager.addShadowRoot(this.shadowRoot, iframeElement.contentDocument);\n                    return shadowRoot;\n                };\n            }));\n        }\n    }\n    reset() {\n        this.restorePatches.forEach((restorePatch) => restorePatch());\n    }\n}\n\nexport { ShadowDomManager };\n","/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nexport { __rest };\n","import { CanvasContext } from '../../../types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\n\nfunction initCanvas2DMutationObserver(cb, win, blockClass, unblockSelector, blockSelector, mirror) {\n    const handlers = [];\n    const props2D = Object.getOwnPropertyNames(win.CanvasRenderingContext2D.prototype);\n    for (const prop of props2D) {\n        try {\n            if (typeof win.CanvasRenderingContext2D.prototype[prop] !== 'function') {\n                continue;\n            }\n            const restoreHandler = patch(win.CanvasRenderingContext2D.prototype, prop, function (original) {\n                return function (...args) {\n                    if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n                        setTimeout(() => {\n                            const recordArgs = [...args];\n                            if (prop === 'drawImage') {\n                                if (recordArgs[0] &&\n                                    recordArgs[0] instanceof HTMLCanvasElement) {\n                                    const canvas = recordArgs[0];\n                                    const ctx = canvas.getContext('2d');\n                                    let imgd = ctx === null || ctx === void 0 ? void 0 : ctx.getImageData(0, 0, canvas.width, canvas.height);\n                                    let pix = imgd === null || imgd === void 0 ? void 0 : imgd.data;\n                                    recordArgs[0] = JSON.stringify(pix);\n                                }\n                            }\n                            cb(this.canvas, {\n                                type: CanvasContext['2D'],\n                                property: prop,\n                                args: recordArgs,\n                            });\n                        }, 0);\n                    }\n                    return original.apply(this, args);\n                };\n            });\n            handlers.push(restoreHandler);\n        }\n        catch (_a) {\n            const hookHandler = hookSetter(win.CanvasRenderingContext2D.prototype, prop, {\n                set(v) {\n                    cb(this.canvas, {\n                        type: CanvasContext['2D'],\n                        property: prop,\n                        args: [v],\n                        setter: true,\n                    });\n                },\n            });\n            handlers.push(hookHandler);\n        }\n    }\n    return () => {\n        handlers.forEach((h) => h());\n    };\n}\n\nexport { initCanvas2DMutationObserver as default };\n","import { patch, isBlocked } from '../../../utils.js';\n\nfunction initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector) {\n    const handlers = [];\n    try {\n        const restoreHandler = patch(win.HTMLCanvasElement.prototype, 'getContext', function (original) {\n            return function (contextType, ...args) {\n                if (!isBlocked(this, blockClass, blockSelector, unblockSelector)) {\n                    if (!('__context' in this))\n                        this.__context = contextType;\n                }\n                return original.apply(this, [contextType, ...args]);\n            };\n        });\n        handlers.push(restoreHandler);\n    }\n    catch (_a) {\n        console.error('failed to patch HTMLCanvasElement.prototype.getContext');\n    }\n    return () => {\n        handlers.forEach((h) => h());\n    };\n}\n\nexport { initCanvasContextObserver as default };\n","/*\n * base64-arraybuffer 1.0.2 <https://github.com/niklasvh/base64-arraybuffer>\n * Copyright (c) 2022 Niklas von Hertzen <https://hertzen.com>\n * Released under MIT License\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nvar lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nvar encode = function (arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nvar decode = function (base64) {\n    var bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n\nexport { decode, encode };\n","import { encode } from './../../../../../../ext/base64-arraybuffer/dist/base64-arraybuffer.es5.js';\n\nconst webGLVarMap = new Map();\nfunction variableListFor(ctx, ctor) {\n    let contextMap = webGLVarMap.get(ctx);\n    if (!contextMap) {\n        contextMap = new Map();\n        webGLVarMap.set(ctx, contextMap);\n    }\n    if (!contextMap.has(ctor)) {\n        contextMap.set(ctor, []);\n    }\n    return contextMap.get(ctor);\n}\nconst saveWebGLVar = (value, win, ctx) => {\n    if (!value ||\n        !(isInstanceOfWebGLObject(value, win) || typeof value === 'object'))\n        return;\n    const name = value.constructor.name;\n    const list = variableListFor(ctx, name);\n    let index = list.indexOf(value);\n    if (index === -1) {\n        index = list.length;\n        list.push(value);\n    }\n    return index;\n};\nfunction serializeArg(value, win, ctx) {\n    if (value instanceof Array) {\n        return value.map((arg) => serializeArg(arg, win, ctx));\n    }\n    else if (value === null) {\n        return value;\n    }\n    else if (value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int16Array ||\n        value instanceof Int8Array ||\n        value instanceof Uint8ClampedArray) {\n        const name = value.constructor.name;\n        return {\n            rr_type: name,\n            args: [Object.values(value)],\n        };\n    }\n    else if (value instanceof ArrayBuffer) {\n        const name = value.constructor.name;\n        const base64 = encode(value);\n        return {\n            rr_type: name,\n            base64,\n        };\n    }\n    else if (value instanceof DataView) {\n        const name = value.constructor.name;\n        return {\n            rr_type: name,\n            args: [\n                serializeArg(value.buffer, win, ctx),\n                value.byteOffset,\n                value.byteLength,\n            ],\n        };\n    }\n    else if (value instanceof HTMLImageElement) {\n        const name = value.constructor.name;\n        const { src } = value;\n        return {\n            rr_type: name,\n            src,\n        };\n    }\n    else if (value instanceof ImageData) {\n        const name = value.constructor.name;\n        return {\n            rr_type: name,\n            args: [serializeArg(value.data, win, ctx), value.width, value.height],\n        };\n    }\n    else if (isInstanceOfWebGLObject(value, win) || typeof value === 'object') {\n        const name = value.constructor.name;\n        const index = saveWebGLVar(value, win, ctx);\n        return {\n            rr_type: name,\n            index: index,\n        };\n    }\n    return value;\n}\nconst serializeArgs = (args, win, ctx) => {\n    return [...args].map((arg) => serializeArg(arg, win, ctx));\n};\nconst isInstanceOfWebGLObject = (value, win) => {\n    const webGLConstructorNames = [\n        'WebGLActiveInfo',\n        'WebGLBuffer',\n        'WebGLFramebuffer',\n        'WebGLProgram',\n        'WebGLRenderbuffer',\n        'WebGLShader',\n        'WebGLShaderPrecisionFormat',\n        'WebGLTexture',\n        'WebGLUniformLocation',\n        'WebGLVertexArrayObject',\n        'WebGLVertexArrayObjectOES',\n    ];\n    const supportedWebGLConstructorNames = webGLConstructorNames.filter((name) => typeof win[name] === 'function');\n    return Boolean(supportedWebGLConstructorNames.find((name) => value instanceof win[name]));\n};\n\nexport { isInstanceOfWebGLObject, saveWebGLVar, serializeArg, serializeArgs, variableListFor };\n","import { CanvasContext } from '../../../types.js';\nimport { patch, isBlocked, hookSetter } from '../../../utils.js';\nimport { saveWebGLVar, serializeArgs } from './serialize-args.js';\n\nfunction patchGLPrototype(prototype, type, cb, blockClass, unblockSelector, blockSelector, mirror, win) {\n    const handlers = [];\n    const props = Object.getOwnPropertyNames(prototype);\n    for (const prop of props) {\n        try {\n            if (typeof prototype[prop] !== 'function') {\n                continue;\n            }\n            const restoreHandler = patch(prototype, prop, function (original) {\n                return function (...args) {\n                    const result = original.apply(this, args);\n                    saveWebGLVar(result, win, prototype);\n                    if (!isBlocked(this.canvas, blockClass, blockSelector, unblockSelector)) {\n                        const id = mirror.getId(this.canvas);\n                        const recordArgs = serializeArgs([...args], win, prototype);\n                        const mutation = {\n                            type,\n                            property: prop,\n                            args: recordArgs,\n                        };\n                        cb(this.canvas, mutation);\n                    }\n                    return result;\n                };\n            });\n            handlers.push(restoreHandler);\n        }\n        catch (_a) {\n            const hookHandler = hookSetter(prototype, prop, {\n                set(v) {\n                    cb(this.canvas, {\n                        type,\n                        property: prop,\n                        args: [v],\n                        setter: true,\n                    });\n                },\n            });\n            handlers.push(hookHandler);\n        }\n    }\n    return handlers;\n}\nfunction initCanvasWebGLMutationObserver(cb, win, blockClass, blockSelector, unblockSelector, mirror) {\n    const handlers = [];\n    handlers.push(...patchGLPrototype(win.WebGLRenderingContext.prototype, CanvasContext.WebGL, cb, blockClass, blockSelector, unblockSelector, mirror, win));\n    if (typeof win.WebGL2RenderingContext !== 'undefined') {\n        handlers.push(...patchGLPrototype(win.WebGL2RenderingContext.prototype, CanvasContext.WebGL2, cb, blockClass, blockSelector, unblockSelector, mirror, win));\n    }\n    return () => {\n        handlers.forEach((h) => h());\n    };\n}\n\nexport { initCanvasWebGLMutationObserver as default };\n","import { __rest } from './../../../../../../ext/tslib/tslib.es6.js';\nimport initCanvas2DMutationObserver from './2d.js';\nimport initCanvasContextObserver from './canvas.js';\nimport initCanvasWebGLMutationObserver from './webgl.js';\n\nclass CanvasManager {\n    reset() {\n        this.pendingCanvasMutations.clear();\n        this.resetObservers && this.resetObservers();\n    }\n    freeze() {\n        this.frozen = true;\n    }\n    unfreeze() {\n        this.frozen = false;\n    }\n    lock() {\n        this.locked = true;\n    }\n    unlock() {\n        this.locked = false;\n    }\n    constructor(options) {\n        this.pendingCanvasMutations = new Map();\n        this.rafStamps = { latestId: 0, invokeId: null };\n        this.frozen = false;\n        this.locked = false;\n        this.processMutation = function (target, mutation) {\n            const newFrame = this.rafStamps.invokeId &&\n                this.rafStamps.latestId !== this.rafStamps.invokeId;\n            if (newFrame || !this.rafStamps.invokeId)\n                this.rafStamps.invokeId = this.rafStamps.latestId;\n            if (!this.pendingCanvasMutations.has(target)) {\n                this.pendingCanvasMutations.set(target, []);\n            }\n            this.pendingCanvasMutations.get(target).push(mutation);\n        };\n        this.mutationCb = options.mutationCb;\n        this.mirror = options.mirror;\n        if (options.recordCanvas === true)\n            this.initCanvasMutationObserver(options.win, options.blockClass, options.blockSelector, options.unblockSelector);\n    }\n    initCanvasMutationObserver(win, blockClass, unblockSelector, blockSelector) {\n        this.startRAFTimestamping();\n        this.startPendingCanvasMutationFlusher();\n        const canvasContextReset = initCanvasContextObserver(win, blockClass, blockSelector, unblockSelector);\n        const canvas2DReset = initCanvas2DMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n        const canvasWebGL1and2Reset = initCanvasWebGLMutationObserver(this.processMutation.bind(this), win, blockClass, blockSelector, unblockSelector, this.mirror);\n        this.resetObservers = () => {\n            canvasContextReset();\n            canvas2DReset();\n            canvasWebGL1and2Reset();\n        };\n    }\n    startPendingCanvasMutationFlusher() {\n        requestAnimationFrame(() => this.flushPendingCanvasMutations());\n    }\n    startRAFTimestamping() {\n        const setLatestRAFTimestamp = (timestamp) => {\n            this.rafStamps.latestId = timestamp;\n            requestAnimationFrame(setLatestRAFTimestamp);\n        };\n        requestAnimationFrame(setLatestRAFTimestamp);\n    }\n    flushPendingCanvasMutations() {\n        this.pendingCanvasMutations.forEach((values, canvas) => {\n            const id = this.mirror.getId(canvas);\n            this.flushPendingCanvasMutationFor(canvas, id);\n        });\n        requestAnimationFrame(() => this.flushPendingCanvasMutations());\n    }\n    flushPendingCanvasMutationFor(canvas, id) {\n        if (this.frozen || this.locked) {\n            return;\n        }\n        const valuesWithType = this.pendingCanvasMutations.get(canvas);\n        if (!valuesWithType || id === -1)\n            return;\n        const values = valuesWithType.map((value) => {\n            const rest = __rest(value, [\"type\"]);\n            return rest;\n        });\n        const { type } = valuesWithType[0];\n        this.mutationCb({ id, type, commands: values });\n        this.pendingCanvasMutations.delete(canvas);\n    }\n}\n\nexport { CanvasManager };\n","import { snapshot } from '../../../rrweb-snapshot/es/rrweb-snapshot.js';\nimport { initObservers, mutationBuffers } from './observer.js';\nimport { polyfill, on, createMirror, getWindowWidth, getWindowHeight, isIframeINode, hasShadowRoot } from '../utils.js';\nimport { EventType, IncrementalSource } from '../types.js';\nimport { IframeManager } from './iframe-manager.js';\nimport { ShadowDomManager } from './shadow-dom-manager.js';\nimport { CanvasManager } from './observers/canvas/canvas-manager.js';\nimport { callbackWrapper } from '../sentry/callbackWrapper.js';\n\nfunction wrapEvent(e) {\n    return Object.assign(Object.assign({}, e), { timestamp: Date.now() });\n}\nlet wrappedEmit;\nlet takeFullSnapshot;\nconst mirror = createMirror();\nfunction record(options = {}) {\n    const { emit, checkoutEveryNms, checkoutEveryNth, blockClass = 'rr-block', blockSelector = null, unblockSelector = null, ignoreClass = 'rr-ignore', ignoreSelector = null, maskTextClass = 'rr-mask', maskTextSelector = null, maskInputSelector = null, unmaskTextSelector = null, unmaskInputSelector = null, inlineStylesheet = true, maskAllText = false, maskAllInputs, maskInputOptions: _maskInputOptions, slimDOMOptions: _slimDOMOptions, maskInputFn, maskTextFn, hooks, packFn, sampling = {}, mousemoveWait, recordCanvas = false, userTriggeredOnInput = false, collectFonts = false, inlineImages = false, plugins, keepIframeSrcFn = () => false, onMutation, } = options;\n    if (!emit) {\n        throw new Error('emit function is required');\n    }\n    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n        sampling.mousemove = mousemoveWait;\n    }\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n            radio: true,\n            checkbox: true,\n        }\n        : _maskInputOptions !== undefined\n            ? _maskInputOptions\n            : {};\n    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all'\n        ? {\n            script: true,\n            comment: true,\n            headFavicon: true,\n            headWhitespace: true,\n            headMetaSocial: true,\n            headMetaRobots: true,\n            headMetaHttpEquiv: true,\n            headMetaVerification: true,\n            headMetaAuthorship: _slimDOMOptions === 'all',\n            headMetaDescKeywords: _slimDOMOptions === 'all',\n        }\n        : _slimDOMOptions\n            ? _slimDOMOptions\n            : {};\n    polyfill();\n    let lastFullSnapshotEvent;\n    let incrementalSnapshotCount = 0;\n    const eventProcessor = (e) => {\n        for (const plugin of plugins || []) {\n            if (plugin.eventProcessor) {\n                e = plugin.eventProcessor(e);\n            }\n        }\n        if (packFn) {\n            e = packFn(e);\n        }\n        return e;\n    };\n    wrappedEmit = (e, isCheckout) => {\n        var _a;\n        if (((_a = mutationBuffers[0]) === null || _a === void 0 ? void 0 : _a.isFrozen()) &&\n            e.type !== EventType.FullSnapshot &&\n            !(e.type === EventType.IncrementalSnapshot &&\n                e.data.source === IncrementalSource.Mutation)) {\n            mutationBuffers.forEach((buf) => buf.unfreeze());\n        }\n        emit(eventProcessor(e), isCheckout);\n        if (e.type === EventType.FullSnapshot) {\n            lastFullSnapshotEvent = e;\n            incrementalSnapshotCount = 0;\n        }\n        else if (e.type === EventType.IncrementalSnapshot) {\n            if (e.data.source === IncrementalSource.Mutation &&\n                e.data.isAttachIframe) {\n                return;\n            }\n            incrementalSnapshotCount++;\n            const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n            const exceedTime = checkoutEveryNms &&\n                e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n            if (exceedCount || exceedTime) {\n                takeFullSnapshot(true);\n            }\n        }\n    };\n    const wrappedMutationEmit = (m) => {\n        wrappedEmit(wrapEvent({\n            type: EventType.IncrementalSnapshot,\n            data: Object.assign({ source: IncrementalSource.Mutation }, m),\n        }));\n    };\n    const wrappedScrollEmit = (p) => wrappedEmit(wrapEvent({\n        type: EventType.IncrementalSnapshot,\n        data: Object.assign({ source: IncrementalSource.Scroll }, p),\n    }));\n    const wrappedCanvasMutationEmit = (p) => wrappedEmit(wrapEvent({\n        type: EventType.IncrementalSnapshot,\n        data: Object.assign({ source: IncrementalSource.CanvasMutation }, p),\n    }));\n    const iframeManager = new IframeManager({\n        mutationCb: wrappedMutationEmit,\n    });\n    const canvasManager = new CanvasManager({\n        recordCanvas,\n        mutationCb: wrappedCanvasMutationEmit,\n        win: window,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        mirror,\n    });\n    const shadowDomManager = new ShadowDomManager({\n        mutationCb: wrappedMutationEmit,\n        scrollCb: wrappedScrollEmit,\n        bypassOptions: {\n            onMutation,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            maskInputSelector,\n            unmaskInputSelector,\n            inlineStylesheet,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            recordCanvas,\n            inlineImages,\n            sampling,\n            slimDOMOptions,\n            iframeManager,\n            canvasManager,\n        },\n        mirror,\n    });\n    takeFullSnapshot = (isCheckout = false) => {\n        var _a, _b, _c, _d;\n        wrappedEmit(wrapEvent({\n            type: EventType.Meta,\n            data: {\n                href: window.location.href,\n                width: getWindowWidth(),\n                height: getWindowHeight(),\n            },\n        }), isCheckout);\n        mutationBuffers.forEach((buf) => buf.lock());\n        const [node, idNodeMap] = snapshot(document, {\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            maskInputSelector,\n            unmaskInputSelector,\n            inlineStylesheet,\n            maskAllText,\n            maskAllInputs: maskInputOptions,\n            maskTextFn,\n            slimDOM: slimDOMOptions,\n            recordCanvas,\n            inlineImages,\n            onSerialize: (n) => {\n                if (isIframeINode(n)) {\n                    iframeManager.addIframe(n);\n                }\n                if (hasShadowRoot(n)) {\n                    shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                }\n            },\n            onIframeLoad: (iframe, childSn) => {\n                iframeManager.attachIframe(iframe, childSn);\n                shadowDomManager.observeAttachShadow(iframe);\n            },\n            keepIframeSrcFn,\n        });\n        if (!node) {\n            return console.warn('Failed to snapshot the document');\n        }\n        mirror.map = idNodeMap;\n        wrappedEmit(wrapEvent({\n            type: EventType.FullSnapshot,\n            data: {\n                node,\n                initialOffset: {\n                    left: window.pageXOffset !== undefined\n                        ? window.pageXOffset\n                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollLeft) ||\n                            ((_b = (_a = document === null || document === void 0 ? void 0 : document.body) === null || _a === void 0 ? void 0 : _a.parentElement) === null || _b === void 0 ? void 0 : _b.scrollLeft) ||\n                            (document === null || document === void 0 ? void 0 : document.body.scrollLeft) ||\n                            0,\n                    top: window.pageYOffset !== undefined\n                        ? window.pageYOffset\n                        : (document === null || document === void 0 ? void 0 : document.documentElement.scrollTop) ||\n                            ((_d = (_c = document === null || document === void 0 ? void 0 : document.body) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.scrollTop) ||\n                            (document === null || document === void 0 ? void 0 : document.body.scrollTop) ||\n                            0,\n                },\n            },\n        }));\n        mutationBuffers.forEach((buf) => buf.unlock());\n    };\n    try {\n        const handlers = [];\n        handlers.push(on('DOMContentLoaded', () => {\n            wrappedEmit(wrapEvent({\n                type: EventType.DomContentLoaded,\n                data: {},\n            }));\n        }));\n        const observe = (doc) => {\n            var _a;\n            return callbackWrapper(initObservers)({\n                onMutation,\n                mutationCb: wrappedMutationEmit,\n                mousemoveCb: (positions, source) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source,\n                        positions,\n                    },\n                })),\n                mouseInteractionCb: (d) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.MouseInteraction }, d),\n                })),\n                scrollCb: wrappedScrollEmit,\n                viewportResizeCb: (d) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.ViewportResize }, d),\n                })),\n                inputCb: (v) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.Input }, v),\n                })),\n                mediaInteractionCb: (p) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.MediaInteraction }, p),\n                })),\n                styleSheetRuleCb: (r) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.StyleSheetRule }, r),\n                })),\n                styleDeclarationCb: (r) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.StyleDeclaration }, r),\n                })),\n                canvasMutationCb: wrappedCanvasMutationEmit,\n                fontCb: (p) => wrappedEmit(wrapEvent({\n                    type: EventType.IncrementalSnapshot,\n                    data: Object.assign({ source: IncrementalSource.Font }, p),\n                })),\n                blockClass,\n                ignoreClass,\n                ignoreSelector,\n                maskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskInputSelector,\n                unmaskInputSelector,\n                maskInputOptions,\n                inlineStylesheet,\n                sampling,\n                recordCanvas,\n                inlineImages,\n                userTriggeredOnInput,\n                collectFonts,\n                doc,\n                maskAllText,\n                maskInputFn,\n                maskTextFn,\n                blockSelector,\n                unblockSelector,\n                slimDOMOptions,\n                mirror,\n                iframeManager,\n                shadowDomManager,\n                canvasManager,\n                plugins: ((_a = plugins === null || plugins === void 0 ? void 0 : plugins.filter((p) => p.observer)) === null || _a === void 0 ? void 0 : _a.map((p) => ({\n                    observer: p.observer,\n                    options: p.options,\n                    callback: (payload) => wrappedEmit(wrapEvent({\n                        type: EventType.Plugin,\n                        data: {\n                            plugin: p.name,\n                            payload,\n                        },\n                    })),\n                }))) || [],\n            }, hooks);\n        };\n        iframeManager.addLoadListener((iframeEl) => {\n            try {\n                handlers.push(observe(iframeEl.contentDocument));\n            }\n            catch (error) {\n                console.warn(error);\n            }\n        });\n        const init = () => {\n            takeFullSnapshot();\n            handlers.push(observe(document));\n        };\n        if (document.readyState === 'interactive' ||\n            document.readyState === 'complete') {\n            init();\n        }\n        else {\n            handlers.push(on('load', () => {\n                wrappedEmit(wrapEvent({\n                    type: EventType.Load,\n                    data: {},\n                }));\n                init();\n            }, window));\n        }\n        return () => {\n            handlers.forEach((h) => h());\n        };\n    }\n    catch (error) {\n        console.warn(error);\n    }\n}\nrecord.addCustomEvent = (tag, payload) => {\n    if (!wrappedEmit) {\n        throw new Error('please add custom event after start recording');\n    }\n    wrappedEmit(wrapEvent({\n        type: EventType.Custom,\n        data: {\n            tag,\n            payload,\n        },\n    }));\n};\nrecord.freezePage = () => {\n    mutationBuffers.forEach((buf) => buf.freeze());\n};\nrecord.takeFullSnapshot = (isCheckout) => {\n    if (!takeFullSnapshot) {\n        throw new Error('please take full snapshot after start recording');\n    }\n    takeFullSnapshot(isCheckout);\n};\nrecord.mirror = mirror;\n\nexport { record as default };\n","import type { PerformanceNavigationTiming, PerformancePaintTiming } from '../types';\n\nconst NAVIGATION_ENTRY_KEYS: Array<keyof PerformanceNavigationTiming> = [\n  'name',\n  'type',\n  'startTime',\n  'transferSize',\n  'duration',\n];\n\nfunction isNavigationEntryEqual(a: PerformanceNavigationTiming) {\n  return function (b: PerformanceNavigationTiming) {\n    return NAVIGATION_ENTRY_KEYS.every(key => a[key] === b[key]);\n  };\n}\n\n/**\n * There are some difficulties diagnosing why there are duplicate navigation\n * entries. We've witnessed several intermittent results:\n * - duplicate entries have duration = 0\n * - duplicate entries are the same object reference\n * - none of the above\n *\n * Compare the values of several keys to determine if the entries are duplicates or not.\n */\n// TODO (high-prio): Figure out wth is returned here\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function dedupePerformanceEntries(\n  currentList: PerformanceEntryList,\n  newList: PerformanceEntryList,\n): PerformanceEntryList {\n  // Partition `currentList` into 3 different lists based on entryType\n  const [existingNavigationEntries, existingLcpEntries, existingEntries] = currentList.reduce(\n    (acc: [PerformanceNavigationTiming[], PerformancePaintTiming[], PerformanceEntryList], entry) => {\n      if (entry.entryType === 'navigation') {\n        acc[0].push(entry as PerformanceNavigationTiming);\n      } else if (entry.entryType === 'largest-contentful-paint') {\n        acc[1].push(entry as PerformancePaintTiming);\n      } else {\n        acc[2].push(entry);\n      }\n      return acc;\n    },\n    [[], [], []],\n  );\n\n  const newEntries: PerformanceEntryList = [];\n  const newNavigationEntries: PerformanceNavigationTiming[] = [];\n  let newLcpEntry: PerformancePaintTiming | undefined = existingLcpEntries.length\n    ? existingLcpEntries[existingLcpEntries.length - 1] // Take the last element as list is sorted\n    : undefined;\n\n  newList.forEach(entry => {\n    if (entry.entryType === 'largest-contentful-paint') {\n      // We want the latest LCP event only\n      if (!newLcpEntry || newLcpEntry.startTime < entry.startTime) {\n        newLcpEntry = entry;\n      }\n      return;\n    }\n\n    if (entry.entryType === 'navigation') {\n      const navigationEntry = entry as PerformanceNavigationTiming;\n\n      // Check if the navigation entry is contained in currentList or newList\n      if (\n        // Ignore any navigation entries with duration 0, as they are likely duplicates\n        entry.duration > 0 &&\n        // Ensure new entry does not already exist in existing entries\n        !existingNavigationEntries.find(isNavigationEntryEqual(navigationEntry)) &&\n        // Ensure new entry does not already exist in new list of navigation entries\n        !newNavigationEntries.find(isNavigationEntryEqual(navigationEntry))\n      ) {\n        newNavigationEntries.push(navigationEntry);\n      }\n\n      // Otherwise this navigation entry is considered a duplicate and is thrown away\n      return;\n    }\n\n    newEntries.push(entry);\n  });\n\n  // Re-combine and sort by startTime\n  return [\n    ...(newLcpEntry ? [newLcpEntry] : []),\n    ...existingNavigationEntries,\n    ...existingEntries,\n    ...newEntries,\n    ...newNavigationEntries,\n  ].sort((a, b) => a.startTime - b.startTime);\n}\n","import type { AllPerformanceEntry, ReplayContainer } from '../types';\nimport { dedupePerformanceEntries } from '../util/dedupePerformanceEntries';\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n */\nexport function setupPerformanceObserver(replay: ReplayContainer): PerformanceObserver {\n  const performanceObserverHandler = (list: PerformanceObserverEntryList): void => {\n    // For whatever reason the observer was returning duplicate navigation\n    // entries (the other entry types were not duplicated).\n    const newPerformanceEntries = dedupePerformanceEntries(\n      replay.performanceEvents,\n      list.getEntries() as AllPerformanceEntry[],\n    );\n    replay.performanceEvents = newPerformanceEntries;\n  };\n\n  const performanceObserver = new PerformanceObserver(performanceObserverHandler);\n\n  [\n    'element',\n    'event',\n    'first-input',\n    'largest-contentful-paint',\n    'layout-shift',\n    'longtask',\n    'navigation',\n    'paint',\n    'resource',\n  ].forEach(type => {\n    try {\n      performanceObserver.observe({\n        type,\n        buffered: true,\n      });\n    } catch {\n      // This can throw if an entry type is not supported in the browser.\n      // Ignore these errors.\n    }\n  });\n\n  return performanceObserver;\n}\n","export default `/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\nfunction t(t){let e=t.length;for(;--e>=0;)t[e]=0}const e=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),a=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),i=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),n=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=new Array(576);t(s);const r=new Array(60);t(r);const o=new Array(512);t(o);const l=new Array(256);t(l);const h=new Array(29);t(h);const d=new Array(30);function _(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let f,c,u;function w(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}t(d);const m=t=>t<256?o[t]:o[256+(t>>>7)],b=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},g=(t,e,a)=>{t.bi_valid>16-a?(t.bi_buf|=e<<t.bi_valid&65535,b(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=a-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)},p=(t,e,a)=>{g(t,a[2*e],a[2*e+1])},k=(t,e)=>{let a=0;do{a|=1&t,t>>>=1,a<<=1}while(--e>0);return a>>>1},v=(t,e,a)=>{const i=new Array(16);let n,s,r=0;for(n=1;n<=15;n++)r=r+a[n-1]<<1,i[n]=r;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=k(i[e]++,e))}},y=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},x=t=>{t.bi_valid>8?b(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},z=(t,e,a,i)=>{const n=2*e,s=2*a;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[a]},A=(t,e,a)=>{const i=t.heap[a];let n=a<<1;for(;n<=t.heap_len&&(n<t.heap_len&&z(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!z(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i},E=(t,i,n)=>{let s,r,o,_,f=0;if(0!==t.sym_next)do{s=255&t.pending_buf[t.sym_buf+f++],s+=(255&t.pending_buf[t.sym_buf+f++])<<8,r=t.pending_buf[t.sym_buf+f++],0===s?p(t,r,i):(o=l[r],p(t,o+256+1,i),_=e[o],0!==_&&(r-=h[o],g(t,r,_)),s--,o=m(s),p(t,o,n),_=a[o],0!==_&&(s-=d[o],g(t,s,_)))}while(f<t.sym_next);p(t,256,i)},R=(t,e)=>{const a=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let r,o,l,h=-1;for(t.heap_len=0,t.heap_max=573,r=0;r<s;r++)0!==a[2*r]?(t.heap[++t.heap_len]=h=r,t.depth[r]=0):a[2*r+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,a[2*l]=1,t.depth[l]=0,t.opt_len--,n&&(t.static_len-=i[2*l+1]);for(e.max_code=h,r=t.heap_len>>1;r>=1;r--)A(t,a,r);l=s;do{r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],A(t,a,1),o=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=o,a[2*l]=a[2*r]+a[2*o],t.depth[l]=(t.depth[r]>=t.depth[o]?t.depth[r]:t.depth[o])+1,a[2*r+1]=a[2*o+1]=l,t.heap[1]=l++,A(t,a,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const a=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.extra_bits,o=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,d,_,f,c,u,w=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(a[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)d=t.heap[h],f=a[2*a[2*d+1]+1]+1,f>l&&(f=l,w++),a[2*d+1]=f,d>i||(t.bl_count[f]++,c=0,d>=o&&(c=r[d-o]),u=a[2*d],t.opt_len+=u*(f+c),s&&(t.static_len+=u*(n[2*d+1]+c)));if(0!==w){do{for(f=l-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[l]--,w-=2}while(w>0);for(f=l;0!==f;f--)for(d=t.bl_count[f];0!==d;)_=t.heap[--h],_>i||(a[2*_+1]!==f&&(t.opt_len+=(f-a[2*_+1])*a[2*_],a[2*_+1]=f),d--)}})(t,e),v(a,h,t.bl_count)},Z=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=r,r=e[2*(i+1)+1],++o<l&&n===r||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):o<=10?t.bl_tree[34]++:t.bl_tree[36]++,o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4))},U=(t,e,a)=>{let i,n,s=-1,r=e[1],o=0,l=7,h=4;for(0===r&&(l=138,h=3),i=0;i<=a;i++)if(n=r,r=e[2*(i+1)+1],!(++o<l&&n===r)){if(o<h)do{p(t,n,t.bl_tree)}while(0!=--o);else 0!==n?(n!==s&&(p(t,n,t.bl_tree),o--),p(t,16,t.bl_tree),g(t,o-3,2)):o<=10?(p(t,17,t.bl_tree),g(t,o-3,3)):(p(t,18,t.bl_tree),g(t,o-11,7));o=0,s=n,0===r?(l=138,h=3):n===r?(l=6,h=3):(l=7,h=4)}};let S=!1;const D=(t,e,a,i)=>{g(t,0+(i?1:0),3),x(t),b(t,a),b(t,~a),a&&t.pending_buf.set(t.window.subarray(e,e+a),t.pending),t.pending+=a};var T=(t,e,a,i)=>{let o,l,h=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),R(t,t.l_desc),R(t,t.d_desc),h=(t=>{let e;for(Z(t,t.dyn_ltree,t.l_desc.max_code),Z(t,t.dyn_dtree,t.d_desc.max_code),R(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*n[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),o=t.opt_len+3+7>>>3,l=t.static_len+3+7>>>3,l<=o&&(o=l)):o=l=a+5,a+4<=o&&-1!==e?D(t,e,a,i):4===t.strategy||l===o?(g(t,2+(i?1:0),3),E(t,s,r)):(g(t,4+(i?1:0),3),((t,e,a,i)=>{let s;for(g(t,e-257,5),g(t,a-1,5),g(t,i-4,4),s=0;s<i;s++)g(t,t.bl_tree[2*n[s]+1],3);U(t,t.dyn_ltree,e-1),U(t,t.dyn_dtree,a-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,h+1),E(t,t.dyn_ltree,t.dyn_dtree)),y(t),i&&x(t)},O={_tr_init:t=>{S||((()=>{let t,n,w,m,b;const g=new Array(16);for(w=0,m=0;m<28;m++)for(h[m]=w,t=0;t<1<<e[m];t++)l[w++]=m;for(l[w-1]=m,b=0,m=0;m<16;m++)for(d[m]=b,t=0;t<1<<a[m];t++)o[b++]=m;for(b>>=7;m<30;m++)for(d[m]=b<<7,t=0;t<1<<a[m]-7;t++)o[256+b++]=m;for(n=0;n<=15;n++)g[n]=0;for(t=0;t<=143;)s[2*t+1]=8,t++,g[8]++;for(;t<=255;)s[2*t+1]=9,t++,g[9]++;for(;t<=279;)s[2*t+1]=7,t++,g[7]++;for(;t<=287;)s[2*t+1]=8,t++,g[8]++;for(v(s,287,g),t=0;t<30;t++)r[2*t+1]=5,r[2*t]=k(t,5);f=new _(s,e,257,286,15),c=new _(r,a,0,30,15),u=new _(new Array(0),i,0,19,7)})(),S=!0),t.l_desc=new w(t.dyn_ltree,f),t.d_desc=new w(t.dyn_dtree,c),t.bl_desc=new w(t.bl_tree,u),t.bi_buf=0,t.bi_valid=0,y(t)},_tr_stored_block:D,_tr_flush_block:T,_tr_tally:(t,e,a)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=a,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(l[a]+256+1)]++,t.dyn_dtree[2*m(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{g(t,2,3),p(t,256,s),(t=>{16===t.bi_valid?(b(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}};var F=(t,e,a,i)=>{let n=65535&t|0,s=t>>>16&65535|0,r=0;for(;0!==a;){r=a>2e3?2e3:a,a-=r;do{n=n+e[i++]|0,s=s+n|0}while(--r);n%=65521,s%=65521}return n|s<<16|0};const L=new Uint32Array((()=>{let t,e=[];for(var a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e})());var N=(t,e,a,i)=>{const n=L,s=i+a;t^=-1;for(let a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t},I={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"},B={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:C,_tr_stored_block:H,_tr_flush_block:M,_tr_tally:j,_tr_align:K}=O,{Z_NO_FLUSH:P,Z_PARTIAL_FLUSH:Y,Z_FULL_FLUSH:G,Z_FINISH:X,Z_BLOCK:W,Z_OK:q,Z_STREAM_END:J,Z_STREAM_ERROR:Q,Z_DATA_ERROR:V,Z_BUF_ERROR:$,Z_DEFAULT_COMPRESSION:tt,Z_FILTERED:et,Z_HUFFMAN_ONLY:at,Z_RLE:it,Z_FIXED:nt,Z_DEFAULT_STRATEGY:st,Z_UNKNOWN:rt,Z_DEFLATED:ot}=B,lt=(t,e)=>(t.msg=I[e],e),ht=t=>2*t-(t>4?9:0),dt=t=>{let e=t.length;for(;--e>=0;)t[e]=0},_t=t=>{let e,a,i,n=t.w_size;e=t.hash_size,i=e;do{a=t.head[--i],t.head[i]=a>=n?a-n:0}while(--e);e=n,i=e;do{a=t.prev[--i],t.prev[i]=a>=n?a-n:0}while(--e)};let ft=(t,e,a)=>(e<<t.hash_shift^a)&t.hash_mask;const ct=t=>{const e=t.state;let a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+a),t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))},ut=(t,e)=>{M(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,ct(t.strm)},wt=(t,e)=>{t.pending_buf[t.pending++]=e},mt=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},bt=(t,e,a,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),a),1===t.state.wrap?t.adler=F(t.adler,e,n,a):2===t.state.wrap&&(t.adler=N(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)},gt=(t,e)=>{let a,i,n=t.max_chain_length,s=t.strstart,r=t.prev_length,o=t.nice_match;const l=t.strstart>t.w_size-262?t.strstart-(t.w_size-262):0,h=t.window,d=t.w_mask,_=t.prev,f=t.strstart+258;let c=h[s+r-1],u=h[s+r];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(a=e,h[a+r]===u&&h[a+r-1]===c&&h[a]===h[s]&&h[++a]===h[s+1]){s+=2,a++;do{}while(h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&h[++s]===h[++a]&&s<f);if(i=258-(f-s),s=f-258,i>r){if(t.match_start=e,r=i,i>=o)break;c=h[s+r-1],u=h[s+r]}}}while((e=_[e&d])>l&&0!=--n);return r<=t.lookahead?r:t.lookahead},pt=t=>{const e=t.w_size;let a,i,n;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-262)&&(t.window.set(t.window.subarray(e,e+e-i),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),_t(t),i+=e),0===t.strm.avail_in)break;if(a=bt(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=a,t.lookahead+t.insert>=3)for(n=t.strstart-t.insert,t.ins_h=t.window[n],t.ins_h=ft(t,t.ins_h,t.window[n+1]);t.insert&&(t.ins_h=ft(t,t.ins_h,t.window[n+3-1]),t.prev[n&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=n,n++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<262&&0!==t.strm.avail_in)},kt=(t,e)=>{let a,i,n,s=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,r=0,o=t.strm.avail_in;do{if(a=65535,n=t.bi_valid+42>>3,t.strm.avail_out<n)break;if(n=t.strm.avail_out-n,i=t.strstart-t.block_start,a>i+t.strm.avail_in&&(a=i+t.strm.avail_in),a>n&&(a=n),a<s&&(0===a&&e!==X||e===P||a!==i+t.strm.avail_in))break;r=e===X&&a===i+t.strm.avail_in?1:0,H(t,0,0,r),t.pending_buf[t.pending-4]=a,t.pending_buf[t.pending-3]=a>>8,t.pending_buf[t.pending-2]=~a,t.pending_buf[t.pending-1]=~a>>8,ct(t.strm),i&&(i>a&&(i=a),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+i),t.strm.next_out),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i,t.block_start+=i,a-=i),a&&(bt(t.strm,t.strm.output,t.strm.next_out,a),t.strm.next_out+=a,t.strm.avail_out-=a,t.strm.total_out+=a)}while(0===r);return o-=t.strm.avail_in,o&&(o>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=o&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-o,t.strm.next_in),t.strstart),t.strstart+=o,t.insert+=o>t.w_size-t.insert?t.w_size-t.insert:o),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),r?4:e!==P&&e!==X&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(n=t.window_size-t.strstart,t.strm.avail_in>n&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,n+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),n>t.strm.avail_in&&(n=t.strm.avail_in),n&&(bt(t.strm,t.window,t.strstart,n),t.strstart+=n,t.insert+=n>t.w_size-t.insert?t.w_size-t.insert:n),t.high_water<t.strstart&&(t.high_water=t.strstart),n=t.bi_valid+42>>3,n=t.pending_buf_size-n>65535?65535:t.pending_buf_size-n,s=n>t.w_size?t.w_size:n,i=t.strstart-t.block_start,(i>=s||(i||e===X)&&e!==P&&0===t.strm.avail_in&&i<=n)&&(a=i>n?n:i,r=e===X&&0===t.strm.avail_in&&a===i?1:0,H(t,t.block_start,a,r),t.block_start+=a,ct(t.strm)),r?3:1)},vt=(t,e)=>{let a,i;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a)),t.match_length>=3)if(i=j(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=ft(t,t.ins_h,t.window[t.strstart+1]);else i=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2},yt=(t,e)=>{let a,i,n;for(;;){if(t.lookahead<262){if(pt(t),t.lookahead<262&&e===P)return 1;if(0===t.lookahead)break}if(a=0,t.lookahead>=3&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-262&&(t.match_length=gt(t,a),t.match_length<=5&&(t.strategy===et||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=j(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=ft(t,t.ins_h,t.window[t.strstart+3-1]),a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(ut(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=j(t,0,t.window[t.strstart-1]),i&&ut(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=j(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2};function xt(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}const zt=[new xt(0,0,0,0,kt),new xt(4,4,8,4,vt),new xt(4,5,16,8,vt),new xt(4,6,32,32,vt),new xt(4,4,16,16,yt),new xt(8,16,32,32,yt),new xt(8,16,128,128,yt),new xt(8,32,128,256,yt),new xt(32,128,258,1024,yt),new xt(32,258,258,4096,yt)];function At(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ot,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),dt(this.dyn_ltree),dt(this.dyn_dtree),dt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),dt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),dt(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Et=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||42!==e.status&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&113!==e.status&&666!==e.status?1:0},Rt=t=>{if(Et(t))return lt(t,Q);t.total_in=t.total_out=0,t.data_type=rt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?42:113,t.adler=2===e.wrap?0:1,e.last_flush=-2,C(e),q},Zt=t=>{const e=Rt(t);var a;return e===q&&((a=t.state).window_size=2*a.w_size,dt(a.head),a.max_lazy_match=zt[a.level].max_lazy,a.good_match=zt[a.level].good_length,a.nice_match=zt[a.level].nice_length,a.max_chain_length=zt[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),e},Ut=(t,e,a,i,n,s)=>{if(!t)return Q;let r=1;if(e===tt&&(e=6),i<0?(r=0,i=-i):i>15&&(r=2,i-=16),n<1||n>9||a!==ot||i<8||i>15||e<0||e>9||s<0||s>nt||8===i&&1!==r)return lt(t,Q);8===i&&(i=9);const o=new At;return t.state=o,o.strm=t,o.status=42,o.wrap=r,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+3-1)/3),o.window=new Uint8Array(2*o.w_size),o.head=new Uint16Array(o.hash_size),o.prev=new Uint16Array(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new Uint8Array(o.pending_buf_size),o.sym_buf=o.lit_bufsize,o.sym_end=3*(o.lit_bufsize-1),o.level=e,o.strategy=s,o.method=a,Zt(t)};var St={deflateInit:(t,e)=>Ut(t,e,ot,15,8,st),deflateInit2:Ut,deflateReset:Zt,deflateResetKeep:Rt,deflateSetHeader:(t,e)=>Et(t)||2!==t.state.wrap?Q:(t.state.gzhead=e,q),deflate:(t,e)=>{if(Et(t)||e>W||e<0)return t?lt(t,Q):Q;const a=t.state;if(!t.output||0!==t.avail_in&&!t.input||666===a.status&&e!==X)return lt(t,0===t.avail_out?$:Q);const i=a.last_flush;if(a.last_flush=e,0!==a.pending){if(ct(t),0===t.avail_out)return a.last_flush=-1,q}else if(0===t.avail_in&&ht(e)<=ht(i)&&e!==X)return lt(t,$);if(666===a.status&&0!==t.avail_in)return lt(t,$);if(42===a.status&&0===a.wrap&&(a.status=113),42===a.status){let e=ot+(a.w_bits-8<<4)<<8,i=-1;if(i=a.strategy>=at||a.level<2?0:a.level<6?1:6===a.level?2:3,e|=i<<6,0!==a.strstart&&(e|=32),e+=31-e%31,mt(a,e),0!==a.strstart&&(mt(a,t.adler>>>16),mt(a,65535&t.adler)),t.adler=1,a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(57===a.status)if(t.adler=0,wt(a,31),wt(a,139),wt(a,8),a.gzhead)wt(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),wt(a,255&a.gzhead.time),wt(a,a.gzhead.time>>8&255),wt(a,a.gzhead.time>>16&255),wt(a,a.gzhead.time>>24&255),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(wt(a,255&a.gzhead.extra.length),wt(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(t.adler=N(t.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69;else if(wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,0),wt(a,9===a.level?2:a.strategy>=at||a.level<2?4:0),wt(a,3),a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q;if(69===a.status){if(a.gzhead.extra){let e=a.pending,i=(65535&a.gzhead.extra.length)-a.gzindex;for(;a.pending+i>a.pending_buf_size;){let n=a.pending_buf_size-a.pending;if(a.pending_buf.set(a.gzhead.extra.subarray(a.gzindex,a.gzindex+n),a.pending),a.pending=a.pending_buf_size,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex+=n,ct(t),0!==a.pending)return a.last_flush=-1,q;e=0,i-=n}let n=new Uint8Array(a.gzhead.extra);a.pending_buf.set(n.subarray(a.gzindex,a.gzindex+i),a.pending),a.pending+=i,a.gzhead.hcrc&&a.pending>e&&(t.adler=N(t.adler,a.pending_buf,a.pending-e,e)),a.gzindex=0}a.status=73}if(73===a.status){if(a.gzhead.name){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),a.gzindex=0}a.status=91}if(91===a.status){if(a.gzhead.comment){let e,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i)),ct(t),0!==a.pending)return a.last_flush=-1,q;i=0}e=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,wt(a,e)}while(0!==e);a.gzhead.hcrc&&a.pending>i&&(t.adler=N(t.adler,a.pending_buf,a.pending-i,i))}a.status=103}if(103===a.status){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size&&(ct(t),0!==a.pending))return a.last_flush=-1,q;wt(a,255&t.adler),wt(a,t.adler>>8&255),t.adler=0}if(a.status=113,ct(t),0!==a.pending)return a.last_flush=-1,q}if(0!==t.avail_in||0!==a.lookahead||e!==P&&666!==a.status){let i=0===a.level?kt(a,e):a.strategy===at?((t,e)=>{let a;for(;;){if(0===t.lookahead&&(pt(t),0===t.lookahead)){if(e===P)return 1;break}if(t.match_length=0,a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):a.strategy===it?((t,e)=>{let a,i,n,s;const r=t.window;for(;;){if(t.lookahead<=258){if(pt(t),t.lookahead<=258&&e===P)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=r[n],i===r[++n]&&i===r[++n]&&i===r[++n])){s=t.strstart+258;do{}while(i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&i===r[++n]&&n<s);t.match_length=258-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(a=j(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=j(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(ut(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===X?(ut(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(ut(t,!1),0===t.strm.avail_out)?1:2})(a,e):zt[a.level].func(a,e);if(3!==i&&4!==i||(a.status=666),1===i||3===i)return 0===t.avail_out&&(a.last_flush=-1),q;if(2===i&&(e===Y?K(a):e!==W&&(H(a,0,0,!1),e===G&&(dt(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),ct(t),0===t.avail_out))return a.last_flush=-1,q}return e!==X?q:a.wrap<=0?J:(2===a.wrap?(wt(a,255&t.adler),wt(a,t.adler>>8&255),wt(a,t.adler>>16&255),wt(a,t.adler>>24&255),wt(a,255&t.total_in),wt(a,t.total_in>>8&255),wt(a,t.total_in>>16&255),wt(a,t.total_in>>24&255)):(mt(a,t.adler>>>16),mt(a,65535&t.adler)),ct(t),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?q:J)},deflateEnd:t=>{if(Et(t))return Q;const e=t.state.status;return t.state=null,113===e?lt(t,V):q},deflateSetDictionary:(t,e)=>{let a=e.length;if(Et(t))return Q;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return Q;if(1===n&&(t.adler=F(t.adler,e,a,0)),i.wrap=0,a>=i.w_size){0===n&&(dt(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(a-i.w_size,a),0),e=t,a=i.w_size}const s=t.avail_in,r=t.next_in,o=t.input;for(t.avail_in=a,t.next_in=0,t.input=e,pt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=ft(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,pt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=r,t.input=o,t.avail_in=s,i.wrap=n,q},deflateInfo:\"pako deflate (from Nodeca project)\"};const Dt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Tt=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const a=e.shift();if(a){if(\"object\"!=typeof a)throw new TypeError(a+\"must be non-object\");for(const e in a)Dt(a,e)&&(t[e]=a[e])}}return t},Ot=t=>{let e=0;for(let a=0,i=t.length;a<i;a++)e+=t[a].length;const a=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];a.set(n,i),i+=n.length}return a};let Ft=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ft=!1}const Lt=new Uint8Array(256);for(let t=0;t<256;t++)Lt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Lt[254]=Lt[254]=1;var Nt=t=>{if(\"function\"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,a,i,n,s,r=t.length,o=0;for(n=0;n<r;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),o+=a<128?1:a<2048?2:a<65536?3:4;for(e=new Uint8Array(o),s=0,n=0;s<o;n++)a=t.charCodeAt(n),55296==(64512&a)&&n+1<r&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),n++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},It=(t,e)=>{const a=e||t.length;if(\"function\"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*a);for(n=0,i=0;i<a;){let e=t[i++];if(e<128){s[n++]=e;continue}let r=Lt[e];if(r>4)s[n++]=65533,i+=r-1;else{for(e&=2===r?31:3===r?15:7;r>1&&i<a;)e=e<<6|63&t[i++],r--;r>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ft)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let a=\"\";for(let i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a})(s,n)},Bt=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let a=e-1;for(;a>=0&&128==(192&t[a]);)a--;return a<0||0===a?e:a+Lt[t[a]]>e?a:e};var Ct=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0};const Ht=Object.prototype.toString,{Z_NO_FLUSH:Mt,Z_SYNC_FLUSH:jt,Z_FULL_FLUSH:Kt,Z_FINISH:Pt,Z_OK:Yt,Z_STREAM_END:Gt,Z_DEFAULT_COMPRESSION:Xt,Z_DEFAULT_STRATEGY:Wt,Z_DEFLATED:qt}=B;function Jt(t){this.options=Tt({level:Xt,method:qt,chunkSize:16384,windowBits:15,memLevel:8,strategy:Wt},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=St.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==Yt)throw new Error(I[a]);if(e.header&&St.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t=\"string\"==typeof e.dictionary?Nt(e.dictionary):\"[object ArrayBuffer]\"===Ht.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=St.deflateSetDictionary(this.strm,t),a!==Yt)throw new Error(I[a]);this._dict_set=!0}}function Qt(t,e){const a=new Jt(e);if(a.push(t,!0),a.err)throw a.msg||I[a.err];return a.result}Jt.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?Pt:Mt,\"string\"==typeof t?a.input=Nt(t):\"[object ArrayBuffer]\"===Ht.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),(s===jt||s===Kt)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=St.deflate(a,s),n===Gt)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=St.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===Yt;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},Jt.prototype.onData=function(t){this.chunks.push(t)},Jt.prototype.onEnd=function(t){t===Yt&&(this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var Vt={Deflate:Jt,deflate:Qt,deflateRaw:function(t,e){return(e=e||{}).raw=!0,Qt(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,Qt(t,e)},constants:B};var $t=function(t,e){let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z,A;const E=t.state;a=t.next_in,z=t.input,i=a+(t.avail_in-5),n=t.next_out,A=t.output,s=n-(e-t.avail_out),r=n+(t.avail_out-257),o=E.dmax,l=E.wsize,h=E.whave,d=E.wnext,_=E.window,f=E.hold,c=E.bits,u=E.lencode,w=E.distcode,m=(1<<E.lenbits)-1,b=(1<<E.distbits)-1;t:do{c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=u[f&m];e:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,0===p)A[n++]=65535&g;else{if(!(16&p)){if(0==(64&p)){g=u[(65535&g)+(f&(1<<p)-1)];continue e}if(32&p){E.mode=16191;break t}t.msg=\"invalid literal/length code\",E.mode=16209;break t}k=65535&g,p&=15,p&&(c<p&&(f+=z[a++]<<c,c+=8),k+=f&(1<<p)-1,f>>>=p,c-=p),c<15&&(f+=z[a++]<<c,c+=8,f+=z[a++]<<c,c+=8),g=w[f&b];a:for(;;){if(p=g>>>24,f>>>=p,c-=p,p=g>>>16&255,!(16&p)){if(0==(64&p)){g=w[(65535&g)+(f&(1<<p)-1)];continue a}t.msg=\"invalid distance code\",E.mode=16209;break t}if(v=65535&g,p&=15,c<p&&(f+=z[a++]<<c,c+=8,c<p&&(f+=z[a++]<<c,c+=8)),v+=f&(1<<p)-1,v>o){t.msg=\"invalid distance too far back\",E.mode=16209;break t}if(f>>>=p,c-=p,p=n-s,v>p){if(p=v-p,p>h&&E.sane){t.msg=\"invalid distance too far back\",E.mode=16209;break t}if(y=0,x=_,0===d){if(y+=l-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}else if(d<p){if(y+=l+d-p,p-=d,p<k){k-=p;do{A[n++]=_[y++]}while(--p);if(y=0,d<k){p=d,k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}}}else if(y+=d-p,p<k){k-=p;do{A[n++]=_[y++]}while(--p);y=n-v,x=A}for(;k>2;)A[n++]=x[y++],A[n++]=x[y++],A[n++]=x[y++],k-=3;k&&(A[n++]=x[y++],k>1&&(A[n++]=x[y++]))}else{y=n-v;do{A[n++]=A[y++],A[n++]=A[y++],A[n++]=A[y++],k-=3}while(k>2);k&&(A[n++]=A[y++],k>1&&(A[n++]=A[y++]))}break}}break}}while(a<i&&n<r);k=c>>3,a-=k,c-=k<<3,f&=(1<<c)-1,t.next_in=a,t.next_out=n,t.avail_in=a<i?i-a+5:5-(a-i),t.avail_out=n<r?r-n+257:257-(n-r),E.hold=f,E.bits=c};const te=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ee=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),ae=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ie=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var ne=(t,e,a,i,n,s,r,o)=>{const l=o.bits;let h,d,_,f,c,u,w=0,m=0,b=0,g=0,p=0,k=0,v=0,y=0,x=0,z=0,A=null;const E=new Uint16Array(16),R=new Uint16Array(16);let Z,U,S,D=null;for(w=0;w<=15;w++)E[w]=0;for(m=0;m<i;m++)E[e[a+m]]++;for(p=l,g=15;g>=1&&0===E[g];g--);if(p>g&&(p=g),0===g)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(b=1;b<g&&0===E[b];b++);for(p<b&&(p=b),y=1,w=1;w<=15;w++)if(y<<=1,y-=E[w],y<0)return-1;if(y>0&&(0===t||1!==g))return-1;for(R[1]=0,w=1;w<15;w++)R[w+1]=R[w]+E[w];for(m=0;m<i;m++)0!==e[a+m]&&(r[R[e[a+m]]++]=m);if(0===t?(A=D=r,u=20):1===t?(A=te,D=ee,u=257):(A=ae,D=ie,u=0),z=0,m=0,w=b,c=s,k=p,v=0,_=-1,x=1<<p,f=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){Z=w-v,r[m]+1<u?(U=0,S=r[m]):r[m]>=u?(U=D[r[m]-u],S=A[r[m]-u]):(U=96,S=0),h=1<<w-v,d=1<<k,b=d;do{d-=h,n[c+(z>>v)+d]=Z<<24|U<<16|S|0}while(0!==d);for(h=1<<w-1;z&h;)h>>=1;if(0!==h?(z&=h-1,z+=h):z=0,m++,0==--E[w]){if(w===g)break;w=e[a+r[m]]}if(w>p&&(z&f)!==_){for(0===v&&(v=p),c+=b,k=w-v,y=1<<k;k+v<g&&(y-=E[k+v],!(y<=0));)k++,y<<=1;if(x+=1<<k,1===t&&x>852||2===t&&x>592)return 1;_=z&f,n[_]=p<<24|k<<16|c-s|0}}return 0!==z&&(n[c+z]=w-v<<24|64<<16|0),o.bits=p,0};const{Z_FINISH:se,Z_BLOCK:re,Z_TREES:oe,Z_OK:le,Z_STREAM_END:he,Z_NEED_DICT:de,Z_STREAM_ERROR:_e,Z_DATA_ERROR:fe,Z_MEM_ERROR:ce,Z_BUF_ERROR:ue,Z_DEFLATED:we}=B,me=16209,be=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function ge(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const pe=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<16180||e.mode>16211?1:0},ke=t=>{if(pe(t))return _e;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg=\"\",e.wrap&&(t.adler=1&e.wrap),e.mode=16180,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,le},ve=t=>{if(pe(t))return _e;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,ke(t)},ye=(t,e)=>{let a;if(pe(t))return _e;const i=t.state;return e<0?(a=0,e=-e):(a=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?_e:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,ve(t))},xe=(t,e)=>{if(!t)return _e;const a=new ge;t.state=a,a.strm=t,a.window=null,a.mode=16180;const i=ye(t,e);return i!==le&&(t.state=null),i};let ze,Ae,Ee=!0;const Re=t=>{if(Ee){ze=new Int32Array(512),Ae=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(ne(1,t.lens,0,288,ze,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;ne(2,t.lens,0,32,Ae,0,t.work,{bits:5}),Ee=!1}t.lencode=ze,t.lenbits=9,t.distcode=Ae,t.distbits=5},Ze=(t,e,a,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(a-s.wsize,a),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(a-i,a-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(a-i,a),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Ue={inflateReset:ve,inflateReset2:ye,inflateResetKeep:ke,inflateInit:t=>xe(t,15),inflateInit2:xe,inflate:(t,e)=>{let a,i,n,s,r,o,l,h,d,_,f,c,u,w,m,b,g,p,k,v,y,x,z=0;const A=new Uint8Array(4);let E,R;const Z=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(pe(t)||!t.output||!t.input&&0!==t.avail_in)return _e;a=t.state,16191===a.mode&&(a.mode=16192),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,_=o,f=l,x=le;t:for(;;)switch(a.mode){case 16180:if(0===a.wrap){a.mode=16192;break}for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(2&a.wrap&&35615===h){0===a.wbits&&(a.wbits=15),a.check=0,A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0),h=0,d=0,a.mode=16181;break}if(a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg=\"incorrect header check\",a.mode=me;break}if((15&h)!==we){t.msg=\"unknown compression method\",a.mode=me;break}if(h>>>=4,d-=4,y=8+(15&h),0===a.wbits&&(a.wbits=y),y>15||y>a.wbits){t.msg=\"invalid window size\",a.mode=me;break}a.dmax=1<<a.wbits,a.flags=0,t.adler=a.check=1,a.mode=512&h?16189:16191,h=0,d=0;break;case 16181:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.flags=h,(255&a.flags)!==we){t.msg=\"unknown compression method\",a.mode=me;break}if(57344&a.flags){t.msg=\"unknown header flags set\",a.mode=me;break}a.head&&(a.head.text=h>>8&1),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16182;case 16182:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.time=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,A[2]=h>>>16&255,A[3]=h>>>24&255,a.check=N(a.check,A,4,0)),h=0,d=0,a.mode=16183;case 16183:for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.head&&(a.head.xflags=255&h,a.head.os=h>>8),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0,a.mode=16184;case 16184:if(1024&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length=h,a.head&&(a.head.extra_len=h),512&a.flags&&4&a.wrap&&(A[0]=255&h,A[1]=h>>>8&255,a.check=N(a.check,A,2,0)),h=0,d=0}else a.head&&(a.head.extra=null);a.mode=16185;case 16185:if(1024&a.flags&&(c=a.length,c>o&&(c=o),c&&(a.head&&(y=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(i.subarray(s,s+c),y)),512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,a.length-=c),a.length))break t;a.length=0,a.mode=16186;case 16186:if(2048&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.name+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=16187;case 16187:if(4096&a.flags){if(0===o)break t;c=0;do{y=i[s+c++],a.head&&y&&a.length<65536&&(a.head.comment+=String.fromCharCode(y))}while(y&&c<o);if(512&a.flags&&4&a.wrap&&(a.check=N(a.check,i,c,s)),o-=c,s+=c,y)break t}else a.head&&(a.head.comment=null);a.mode=16188;case 16188:if(512&a.flags){for(;d<16;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(65535&a.check)){t.msg=\"header crc mismatch\",a.mode=me;break}h=0,d=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=16191;break;case 16189:for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}t.adler=a.check=be(h),h=0,d=0,a.mode=16190;case 16190:if(0===a.havedict)return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,de;t.adler=a.check=1,a.mode=16191;case 16191:if(e===re||e===oe)break t;case 16192:if(a.last){h>>>=7&d,d-=7&d,a.mode=16206;break}for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}switch(a.last=1&h,h>>>=1,d-=1,3&h){case 0:a.mode=16193;break;case 1:if(Re(a),a.mode=16199,e===oe){h>>>=2,d-=2;break t}break;case 2:a.mode=16196;break;case 3:t.msg=\"invalid block type\",a.mode=me}h>>>=2,d-=2;break;case 16193:for(h>>>=7&d,d-=7&d;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if((65535&h)!=(h>>>16^65535)){t.msg=\"invalid stored block lengths\",a.mode=me;break}if(a.length=65535&h,h=0,d=0,a.mode=16194,e===oe)break t;case 16194:a.mode=16195;case 16195:if(c=a.length,c){if(c>o&&(c=o),c>l&&(c=l),0===c)break t;n.set(i.subarray(s,s+c),r),o-=c,s+=c,l-=c,r+=c,a.length-=c;break}a.mode=16191;break;case 16196:for(;d<14;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(a.nlen=257+(31&h),h>>>=5,d-=5,a.ndist=1+(31&h),h>>>=5,d-=5,a.ncode=4+(15&h),h>>>=4,d-=4,a.nlen>286||a.ndist>30){t.msg=\"too many length or distance symbols\",a.mode=me;break}a.have=0,a.mode=16197;case 16197:for(;a.have<a.ncode;){for(;d<3;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.lens[Z[a.have++]]=7&h,h>>>=3,d-=3}for(;a.have<19;)a.lens[Z[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,E={bits:a.lenbits},x=ne(0,a.lens,0,19,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid code lengths set\",a.mode=me;break}a.have=0,a.mode=16198;case 16198:for(;a.have<a.nlen+a.ndist;){for(;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(g<16)h>>>=m,d-=m,a.lens[a.have++]=g;else{if(16===g){for(R=m+2;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(h>>>=m,d-=m,0===a.have){t.msg=\"invalid bit length repeat\",a.mode=me;break}y=a.lens[a.have-1],c=3+(3&h),h>>>=2,d-=2}else if(17===g){for(R=m+3;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=3+(7&h),h>>>=3,d-=3}else{for(R=m+7;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=m,d-=m,y=0,c=11+(127&h),h>>>=7,d-=7}if(a.have+c>a.nlen+a.ndist){t.msg=\"invalid bit length repeat\",a.mode=me;break}for(;c--;)a.lens[a.have++]=y}}if(a.mode===me)break;if(0===a.lens[256]){t.msg=\"invalid code -- missing end-of-block\",a.mode=me;break}if(a.lenbits=9,E={bits:a.lenbits},x=ne(1,a.lens,0,a.nlen,a.lencode,0,a.work,E),a.lenbits=E.bits,x){t.msg=\"invalid literal/lengths set\",a.mode=me;break}if(a.distbits=6,a.distcode=a.distdyn,E={bits:a.distbits},x=ne(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,E),a.distbits=E.bits,x){t.msg=\"invalid distances set\",a.mode=me;break}if(a.mode=16199,e===oe)break t;case 16199:a.mode=16200;case 16200:if(o>=6&&l>=258){t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,$t(t,f),r=t.next_out,n=t.output,l=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,h=a.hold,d=a.bits,16191===a.mode&&(a.back=-1);break}for(a.back=0;z=a.lencode[h&(1<<a.lenbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(b&&0==(240&b)){for(p=m,k=b,v=g;z=a.lencode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,a.length=g,0===b){a.mode=16205;break}if(32&b){a.back=-1,a.mode=16191;break}if(64&b){t.msg=\"invalid literal/length code\",a.mode=me;break}a.extra=15&b,a.mode=16201;case 16201:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.length+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=16202;case 16202:for(;z=a.distcode[h&(1<<a.distbits)-1],m=z>>>24,b=z>>>16&255,g=65535&z,!(m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(0==(240&b)){for(p=m,k=b,v=g;z=a.distcode[v+((h&(1<<p+k)-1)>>p)],m=z>>>24,b=z>>>16&255,g=65535&z,!(p+m<=d);){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}h>>>=p,d-=p,a.back+=p}if(h>>>=m,d-=m,a.back+=m,64&b){t.msg=\"invalid distance code\",a.mode=me;break}a.offset=g,a.extra=15&b,a.mode=16203;case 16203:if(a.extra){for(R=a.extra;d<R;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}a.offset+=h&(1<<a.extra)-1,h>>>=a.extra,d-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg=\"invalid distance too far back\",a.mode=me;break}a.mode=16204;case 16204:if(0===l)break t;if(c=f-l,a.offset>c){if(c=a.offset-c,c>a.whave&&a.sane){t.msg=\"invalid distance too far back\",a.mode=me;break}c>a.wnext?(c-=a.wnext,u=a.wsize-c):u=a.wnext-c,c>a.length&&(c=a.length),w=a.window}else w=n,u=r-a.offset,c=a.length;c>l&&(c=l),l-=c,a.length-=c;do{n[r++]=w[u++]}while(--c);0===a.length&&(a.mode=16200);break;case 16205:if(0===l)break t;n[r++]=a.length,l--,a.mode=16200;break;case 16206:if(a.wrap){for(;d<32;){if(0===o)break t;o--,h|=i[s++]<<d,d+=8}if(f-=l,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,r-f):F(a.check,n,f,r-f)),f=l,4&a.wrap&&(a.flags?h:be(h))!==a.check){t.msg=\"incorrect data check\",a.mode=me;break}h=0,d=0}a.mode=16207;case 16207:if(a.wrap&&a.flags){for(;d<32;){if(0===o)break t;o--,h+=i[s++]<<d,d+=8}if(4&a.wrap&&h!==(4294967295&a.total)){t.msg=\"incorrect length check\",a.mode=me;break}h=0,d=0}a.mode=16208;case 16208:x=he;break t;case me:x=fe;break t;case 16210:return ce;default:return _e}return t.next_out=r,t.avail_out=l,t.next_in=s,t.avail_in=o,a.hold=h,a.bits=d,(a.wsize||f!==t.avail_out&&a.mode<me&&(a.mode<16206||e!==se))&&Ze(t,t.output,t.next_out,f-t.avail_out),_-=t.avail_in,f-=t.avail_out,t.total_in+=_,t.total_out+=f,a.total+=f,4&a.wrap&&f&&(t.adler=a.check=a.flags?N(a.check,n,f,t.next_out-f):F(a.check,n,f,t.next_out-f)),t.data_type=a.bits+(a.last?64:0)+(16191===a.mode?128:0)+(16199===a.mode||16194===a.mode?256:0),(0===_&&0===f||e===se)&&x===le&&(x=ue),x},inflateEnd:t=>{if(pe(t))return _e;let e=t.state;return e.window&&(e.window=null),t.state=null,le},inflateGetHeader:(t,e)=>{if(pe(t))return _e;const a=t.state;return 0==(2&a.wrap)?_e:(a.head=e,e.done=!1,le)},inflateSetDictionary:(t,e)=>{const a=e.length;let i,n,s;return pe(t)?_e:(i=t.state,0!==i.wrap&&16190!==i.mode?_e:16190===i.mode&&(n=1,n=F(n,e,a,0),n!==i.check)?fe:(s=Ze(t,e,a,a),s?(i.mode=16210,ce):(i.havedict=1,le)))},inflateInfo:\"pako inflate (from Nodeca project)\"};var Se=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1};const De=Object.prototype.toString,{Z_NO_FLUSH:Te,Z_FINISH:Oe,Z_OK:Fe,Z_STREAM_END:Le,Z_NEED_DICT:Ne,Z_STREAM_ERROR:Ie,Z_DATA_ERROR:Be,Z_MEM_ERROR:Ce}=B;function He(t){this.options=Tt({chunkSize:65536,windowBits:15,to:\"\"},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new Ct,this.strm.avail_out=0;let a=Ue.inflateInit2(this.strm,e.windowBits);if(a!==Fe)throw new Error(I[a]);if(this.header=new Se,Ue.inflateGetHeader(this.strm,this.header),e.dictionary&&(\"string\"==typeof e.dictionary?e.dictionary=Nt(e.dictionary):\"[object ArrayBuffer]\"===De.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(a=Ue.inflateSetDictionary(this.strm,e.dictionary),a!==Fe)))throw new Error(I[a])}He.prototype.push=function(t,e){const a=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,r,o;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Oe:Te,\"[object ArrayBuffer]\"===De.call(t)?a.input=new Uint8Array(t):a.input=t,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(i),a.next_out=0,a.avail_out=i),s=Ue.inflate(a,r),s===Ne&&n&&(s=Ue.inflateSetDictionary(a,n),s===Fe?s=Ue.inflate(a,r):s===Be&&(s=Ne));a.avail_in>0&&s===Le&&a.state.wrap>0&&0!==t[a.next_in];)Ue.inflateReset(a),s=Ue.inflate(a,r);switch(s){case Ie:case Be:case Ne:case Ce:return this.onEnd(s),this.ended=!0,!1}if(o=a.avail_out,a.next_out&&(0===a.avail_out||s===Le))if(\"string\"===this.options.to){let t=Bt(a.output,a.next_out),e=a.next_out-t,n=It(a.output,t);a.next_out=e,a.avail_out=i-e,e&&a.output.set(a.output.subarray(t,t+e),0),this.onData(n)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==Fe||0!==o){if(s===Le)return s=Ue.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},He.prototype.onData=function(t){this.chunks.push(t)},He.prototype.onEnd=function(t){t===Fe&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=Ot(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};const{Deflate:Me,deflate:je,deflateRaw:Ke,gzip:Pe}=Vt;var Ye=Me,Ge=je,Xe=B;const We=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const e=this._hasEvents?\",\":\"\";this.deflate.push(e+t,Xe.Z_SYNC_FLUSH),this._hasEvents=!0}finish(){if(this.deflate.push(\"]\",Xe.Z_FINISH),this.deflate.err)throw this.deflate.err;const t=this.deflate.result;return this._init(),t}_init(){this._hasEvents=!1,this.deflate=new Ye,this.deflate.push(\"[\",Xe.Z_NO_FLUSH)}},qe={clear:()=>{We.clear()},addEvent:t=>We.addEvent(t),finish:()=>We.finish(),compress:t=>function(t){return Ge(t)}(t)};addEventListener(\"message\",(function(t){const e=t.data.method,a=t.data.id,i=t.data.arg;if(e in qe&&\"function\"==typeof qe[e])try{const t=qe[e](i);postMessage({id:a,method:e,success:!0,response:t})}catch(t){postMessage({id:a,method:e,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\n","import r from\"./worker\";function e(){const e=new Blob([r]);return URL.createObjectURL(e)}export{e as getWorkerURL};\n","import type { AddEventResult, EventBuffer, RecordingEvent } from '../types';\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nexport class EventBufferArray implements EventBuffer {\n  /** All the events that are buffered to be sent. */\n  public events: RecordingEvent[];\n\n  public constructor() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  public get hasEvents(): boolean {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n  public destroy(): void {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n  public async addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    if (isCheckout) {\n      this.events = [event];\n      return;\n    }\n\n    this.events.push(event);\n    return;\n  }\n\n  /** @inheritdoc */\n  public finish(): Promise<string> {\n    return new Promise<string>(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.events = [];\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n}\n","import { logger } from '@sentry/utils';\n\nimport type { WorkerRequest, WorkerResponse } from '../types';\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nexport class WorkerHandler {\n  private _worker: Worker;\n  private _id: number;\n  private _ensureReadyPromise?: Promise<void>;\n\n  public constructor(worker: Worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  public ensureReady(): Promise<void> {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener(\n        'message',\n        ({ data }: MessageEvent) => {\n          if ((data as WorkerResponse).success) {\n            resolve();\n          } else {\n            reject();\n          }\n        },\n        { once: true },\n      );\n\n      this._worker.addEventListener(\n        'error',\n        error => {\n          reject(error);\n        },\n        { once: true },\n      );\n    });\n\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n  public destroy(): void {\n    __DEBUG_BUILD__ && logger.log('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n  public postMessage<T>(method: WorkerRequest['method'], arg?: WorkerRequest['arg']): Promise<T> {\n    const id = this._getAndIncrementId();\n\n    return new Promise((resolve, reject) => {\n      const listener = ({ data }: MessageEvent): void => {\n        const response = data as WorkerResponse;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          __DEBUG_BUILD__ && logger.error('[Replay]', response.response);\n\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n\n        resolve(response.response as T);\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({ id, method, arg });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n  private _getAndIncrementId(): number {\n    return this._id++;\n  }\n}\n","import type { ReplayRecordingData } from '@sentry/types';\n\nimport type { AddEventResult, EventBuffer, RecordingEvent } from '../types';\nimport { WorkerHandler } from './WorkerHandler';\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nexport class EventBufferCompressionWorker implements EventBuffer {\n  /** @inheritdoc */\n  public hasEvents: boolean;\n\n  private _worker: WorkerHandler;\n\n  public constructor(worker: Worker) {\n    this._worker = new WorkerHandler(worker);\n    this.hasEvents = false;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n  public ensureReady(): Promise<void> {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n  public destroy(): void {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n  public async addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    this.hasEvents = true;\n\n    if (isCheckout) {\n      // This event is a checkout, make sure worker buffer is cleared before\n      // proceeding.\n      await this._clear();\n    }\n\n    return this._sendEventToWorker(event);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n  public finish(): Promise<ReplayRecordingData> {\n    return this._finishRequest();\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n  private _sendEventToWorker(event: RecordingEvent): Promise<AddEventResult> {\n    return this._worker.postMessage<void>('addEvent', JSON.stringify(event));\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n  private async _finishRequest(): Promise<Uint8Array> {\n    const response = await this._worker.postMessage<Uint8Array>('finish');\n\n    this.hasEvents = false;\n\n    return response;\n  }\n\n  /** Clear any pending events from the worker. */\n  private _clear(): Promise<void> {\n    return this._worker.postMessage('clear');\n  }\n}\n","import type { ReplayRecordingData } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport type { AddEventResult, EventBuffer, RecordingEvent } from '../types';\nimport { EventBufferArray } from './EventBufferArray';\nimport { EventBufferCompressionWorker } from './EventBufferCompressionWorker';\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nexport class EventBufferProxy implements EventBuffer {\n  private _fallback: EventBufferArray;\n  private _compression: EventBufferCompressionWorker;\n  private _used: EventBuffer;\n  private _ensureWorkerIsLoadedPromise: Promise<void>;\n\n  public constructor(worker: Worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritDoc */\n  public get hasEvents(): boolean {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritDoc */\n  public destroy(): void {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n  public addEvent(event: RecordingEvent, isCheckout?: boolean): Promise<AddEventResult> {\n    return this._used.addEvent(event, isCheckout);\n  }\n\n  /** @inheritDoc */\n  public async finish(): Promise<ReplayRecordingData> {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n  public ensureWorkerIsLoaded(): Promise<void> {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n  private async _ensureWorkerIsLoaded(): Promise<void> {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      __DEBUG_BUILD__ && logger.log('[Replay] Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n  private async _switchToCompressionWorker(): Promise<void> {\n    const { events } = this._fallback;\n\n    const addEventPromises: Promise<void>[] = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n    } catch (error) {\n      __DEBUG_BUILD__ && logger.warn('[Replay] Failed to add events when switching buffers.', error);\n    }\n  }\n}\n","import { getWorkerURL } from '@sentry-internal/replay-worker';\nimport { logger } from '@sentry/utils';\n\nimport type { EventBuffer } from '../types';\nimport { EventBufferArray } from './EventBufferArray';\nimport { EventBufferProxy } from './EventBufferProxy';\n\ninterface CreateEventBufferParams {\n  useCompression: boolean;\n}\n\n/**\n * Create an event buffer for replays.\n */\nexport function createEventBuffer({ useCompression }: CreateEventBufferParams): EventBuffer {\n  // eslint-disable-next-line no-restricted-globals\n  if (useCompression && window.Worker) {\n    try {\n      const workerUrl = getWorkerURL();\n\n      __DEBUG_BUILD__ && logger.log('[Replay] Using compression worker');\n      const worker = new Worker(workerUrl);\n      return new EventBufferProxy(worker);\n    } catch (error) {\n      __DEBUG_BUILD__ && logger.log('[Replay] Failed to create compression worker');\n      // Fall back to use simple event buffer array\n    }\n  }\n\n  __DEBUG_BUILD__ && logger.log('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n","/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nexport function isExpired(\n  initialTime: null | number,\n  expiry: undefined | number,\n  targetTime: number = +new Date(),\n): boolean {\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n\n  return initialTime + expiry <= targetTime;\n}\n","import type { Session, Timeouts } from '../types';\nimport { isExpired } from './isExpired';\n\n/**\n * Checks to see if session is expired\n */\nexport function isSessionExpired(session: Session, timeouts: Timeouts, targetTime: number = +new Date()): boolean {\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, timeouts.maxSessionLife, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `idleTimeout` ms)\n    isExpired(session.lastActivity, timeouts.sessionIdle, targetTime)\n  );\n}\n","import { REPLAY_SESSION_KEY, WINDOW } from '../constants';\nimport type { Session } from '../types';\n\n/**\n * Save a session to session storage.\n */\nexport function saveSession(session: Session): void {\n  const hasSessionStorage = 'sessionStorage' in WINDOW;\n  if (!hasSessionStorage) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch {\n    // Ignore potential SecurityError exceptions\n  }\n}\n","/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nexport function isSampled(sampleRate?: number): boolean {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n","import { uuid4 } from '@sentry/utils';\n\nimport type { Sampled, Session } from '../types';\nimport { isSampled } from '../util/isSampled';\n\n/**\n * Get a session with defaults & applied sampling.\n */\nexport function makeSession(session: Partial<Session> & { sampled: Sampled }): Session {\n  const now = Date.now();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled,\n  };\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nexport function getSessionSampleType(sessionSampleRate: number, errorSampleRate: number): Sampled {\n  return isSampled(sessionSampleRate) ? 'session' : isSampled(errorSampleRate) ? 'error' : false;\n}\n","import { logger } from '@sentry/utils';\n\nimport type { Session, SessionOptions } from '../types';\nimport { saveSession } from './saveSession';\nimport { getSessionSampleType, makeSession } from './Session';\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nexport function createSession({ sessionSampleRate, errorSampleRate, stickySession = false }: SessionOptions): Session {\n  const sampled = getSessionSampleType(sessionSampleRate, errorSampleRate);\n  const session = makeSession({\n    sampled,\n  });\n\n  __DEBUG_BUILD__ && logger.log(`[Replay] Creating new session: ${session.id}`);\n\n  if (stickySession) {\n    saveSession(session);\n  }\n\n  return session;\n}\n","import { REPLAY_SESSION_KEY, WINDOW } from '../constants';\nimport type { Session } from '../types';\nimport { makeSession } from './Session';\n\n/**\n * Fetches a session from storage\n */\nexport function fetchSession(): Session | null {\n  const hasSessionStorage = 'sessionStorage' in WINDOW;\n\n  if (!hasSessionStorage) {\n    return null;\n  }\n\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n\n    const sessionObj = JSON.parse(sessionStringFromStorage) as Session;\n\n    return makeSession(sessionObj);\n  } catch {\n    return null;\n  }\n}\n","import { logger } from '@sentry/utils';\n\nimport type { Session, SessionOptions, Timeouts } from '../types';\nimport { isSessionExpired } from '../util/isSessionExpired';\nimport { createSession } from './createSession';\nimport { fetchSession } from './fetchSession';\nimport { makeSession } from './Session';\n\ninterface GetSessionParams extends SessionOptions {\n  timeouts: Timeouts;\n\n  /**\n   * The current session (e.g. if stickySession is off)\n   */\n  currentSession?: Session;\n}\n\n/**\n * Get or create a session\n */\nexport function getSession({\n  timeouts,\n  currentSession,\n  stickySession,\n  sessionSampleRate,\n  errorSampleRate,\n}: GetSessionParams): { type: 'new' | 'saved'; session: Session } {\n  // If session exists and is passed, use it instead of always hitting session storage\n  const session = currentSession || (stickySession && fetchSession());\n\n  if (session) {\n    // If there is a session, check if it is valid (e.g. \"last activity\" time\n    // should be within the \"session idle time\", and \"session started\" time is\n    // within \"max session time\").\n    const isExpired = isSessionExpired(session, timeouts);\n\n    if (!isExpired) {\n      return { type: 'saved', session };\n    } else if (session.sampled === 'error') {\n      // Error samples should not be re-created when expired, but instead we stop when the replay is done\n      const discardedSession = makeSession({ sampled: false });\n      return { type: 'new', session: discardedSession };\n    } else {\n      __DEBUG_BUILD__ && logger.log('[Replay] Session has expired');\n    }\n    // Otherwise continue to create a new session\n  }\n\n  const newSession = createSession({\n    stickySession,\n    sessionSampleRate,\n    errorSampleRate,\n  });\n\n  return { type: 'new', session: newSession };\n}\n","import { getCurrentHub } from '@sentry/core';\nimport { logger } from '@sentry/utils';\n\nimport type { AddEventResult, RecordingEvent, ReplayContainer } from '../types';\n\n/**\n * Add an event to the event buffer.\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nexport async function addEvent(\n  replay: ReplayContainer,\n  event: RecordingEvent,\n  isCheckout?: boolean,\n): Promise<AddEventResult | null> {\n  if (!replay.eventBuffer) {\n    // This implies that `_isEnabled` is false\n    return null;\n  }\n\n  if (replay.isPaused()) {\n    // Do not add to event buffer when recording is paused\n    return null;\n  }\n\n  // TODO: sadness -- we will want to normalize timestamps to be in ms -\n  // requires coordination with frontend\n  const isMs = event.timestamp > 9999999999;\n  const timestampInMs = isMs ? event.timestamp : event.timestamp * 1000;\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + replay.timeouts.sessionIdle < Date.now()) {\n    return null;\n  }\n\n  // Only record earliest event if a new session was created, otherwise it\n  // shouldn't be relevant\n  const earliestEvent = replay.getContext().earliestEvent;\n  if (replay.session && replay.session.segmentId === 0 && (!earliestEvent || timestampInMs < earliestEvent)) {\n    replay.getContext().earliestEvent = timestampInMs;\n  }\n\n  try {\n    return await replay.eventBuffer.addEvent(event, isCheckout);\n  } catch (error) {\n    __DEBUG_BUILD__ && logger.error(error);\n    replay.stop('addEvent');\n\n    const client = getCurrentHub().getClient();\n\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n","import type { ErrorEvent, Event, ReplayEvent, TransactionEvent } from '@sentry/types';\n\n/** If the event is an error event */\nexport function isErrorEvent(event: Event): event is ErrorEvent {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nexport function isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nexport function isReplayEvent(event: Event): event is ReplayEvent {\n  return event.type === 'replay_event';\n}\n","import { getCurrentHub } from '@sentry/core';\nimport type { Event, Transport, TransportMakeRequestResponse } from '@sentry/types';\n\nimport { UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { ReplayContainer } from '../types';\nimport { isErrorEvent, isTransactionEvent } from '../util/eventUtils';\n\ntype AfterSendEventCallback = (event: Event, sendResponse: TransportMakeRequestResponse | void) => void;\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nexport function handleAfterSendEvent(replay: ReplayContainer): AfterSendEventCallback {\n  // Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there\n  // TODO (v8): remove this check as it will no longer be necessary\n  const enforceStatusCode = isBaseTransportSend();\n\n  return (event: Event, sendResponse: TransportMakeRequestResponse | void) => {\n    if (!isErrorEvent(event) && !isTransactionEvent(event)) {\n      return;\n    }\n\n    const statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (enforceStatusCode && (!statusCode || statusCode < 200 || statusCode >= 300)) {\n      return;\n    }\n\n    // Collect traceIds in _context regardless of `recordingMode`\n    // In error mode, _context gets cleared on every checkout\n    if (isTransactionEvent(event) && event.contexts && event.contexts.trace && event.contexts.trace.trace_id) {\n      replay.getContext().traceIds.add(event.contexts.trace.trace_id as string);\n      return;\n    }\n\n    // Everything below is just for error events\n    if (!isErrorEvent(event)) {\n      return;\n    }\n\n    // Add error to list of errorIds of replay\n    if (event.event_id) {\n      replay.getContext().errorIds.add(event.event_id);\n    }\n\n    // Trigger error recording\n    // Need to be very careful that this does not cause an infinite loop\n    if (\n      replay.recordingMode === 'error' &&\n      event.exception &&\n      event.message !== UNABLE_TO_SEND_REPLAY // ignore this error because otherwise we could loop indefinitely with trying to capture replay and failing\n    ) {\n      setTimeout(async () => {\n        // Allow flush to complete before resuming as a session recording, otherwise\n        // the checkout from `startRecording` may be included in the payload.\n        // Prefer to keep the error replay as a separate (and smaller) segment\n        // than the session replay.\n        await replay.flushImmediate();\n\n        if (replay.stopRecording()) {\n          // Reset all \"capture on error\" configuration before\n          // starting a new recording\n          replay.recordingMode = 'session';\n          replay.startRecording();\n        }\n      });\n    }\n  };\n}\n\nfunction isBaseTransportSend(): boolean {\n  const client = getCurrentHub().getClient();\n  if (!client) {\n    return false;\n  }\n\n  const transport = client.getTransport();\n  if (!transport) {\n    return false;\n  }\n\n  return (\n    (transport.send as Transport['send'] & { __sentry__baseTransport__?: true }).__sentry__baseTransport__ || false\n  );\n}\n","var NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\nfunction isElement(n) {\n    return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n    const host = n === null || n === void 0 ? void 0 : n.host;\n    return Boolean(host && host.shadowRoot && host.shadowRoot === n);\n}\nfunction isInputTypeMasked({ maskInputOptions, tagName, type, }) {\n    if (tagName.toLowerCase() === 'option') {\n        tagName = 'select';\n    }\n    const actualType = typeof type === 'string' ? type.toLowerCase() : undefined;\n    return (maskInputOptions[tagName.toLowerCase()] ||\n        (actualType && maskInputOptions[actualType]) ||\n        actualType === 'password' ||\n        (tagName === 'input' && !type && maskInputOptions['text']));\n}\nfunction hasInputMaskOptions({ tagName, type, maskInputOptions, maskInputSelector, }) {\n    return (maskInputSelector || isInputTypeMasked({ maskInputOptions, tagName, type }));\n}\nfunction maskInputValue({ input, maskInputSelector, unmaskInputSelector, maskInputOptions, tagName, type, value, maskInputFn, }) {\n    let text = value || '';\n    if (unmaskInputSelector && input.matches(unmaskInputSelector)) {\n        return text;\n    }\n    if (input.hasAttribute('rr_is_password')) {\n        type = 'password';\n    }\n    if (isInputTypeMasked({ maskInputOptions, tagName, type }) ||\n        (maskInputSelector && input.matches(maskInputSelector))) {\n        if (maskInputFn) {\n            text = maskInputFn(text);\n        }\n        else {\n            text = '*'.repeat(text.length);\n        }\n    }\n    return text;\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        return true;\n    const chunkSize = 50;\n    for (let x = 0; x < canvas.width; x += chunkSize) {\n        for (let y = 0; y < canvas.height; y += chunkSize) {\n            const getImageData = ctx.getImageData;\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\n                : getImageData;\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n            if (pixelBuffer.some((pixel) => pixel !== 0))\n                return false;\n        }\n    }\n    return true;\n}\n\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction defaultMaskFn(str) {\n    return str ? str.replace(/[\\S]/g, '*') : '';\n}\nfunction genId() {\n    return _id++;\n}\nfunction getValidTagName(element) {\n    if (element instanceof HTMLFormElement) {\n        return 'form';\n    }\n    const processedTagName = element.tagName.toLowerCase().trim();\n    if (tagNameRegex.test(processedTagName)) {\n        return 'div';\n    }\n    return processedTagName;\n}\nfunction getCssRulesString(s) {\n    try {\n        const rules = s.rules || s.cssRules;\n        return rules ? Array.from(rules).map(getCssRuleString).join('') : null;\n    }\n    catch (error) {\n        return null;\n    }\n}\nfunction getCssRuleString(rule) {\n    let cssStringified = rule.cssText;\n    if (isCSSImportRule(rule)) {\n        try {\n            cssStringified = getCssRulesString(rule.styleSheet) || cssStringified;\n        }\n        catch (_a) {\n        }\n    }\n    return cssStringified;\n}\nfunction isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n}\nfunction stringifyStyleSheet(sheet) {\n    return sheet.cssRules\n        ? Array.from(sheet.cssRules)\n            .map((rule) => rule.cssText || '')\n            .join('')\n        : '';\n}\nfunction extractOrigin(url) {\n    let origin = '';\n    if (url.indexOf('//') > -1) {\n        origin = url.split('/').slice(0, 3).join('/');\n    }\n    else {\n        origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst RELATIVE_PATH = /^(?!www\\.|(?:http|ftp)s?:\\/\\/|[A-Za-z]:\\\\|\\/\\/|#).*/;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n        const filePath = path1 || path2 || path3;\n        const maybeQuote = quote1 || quote2 || '';\n        if (!filePath) {\n            return origin;\n        }\n        if (!RELATIVE_PATH.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (DATA_URI.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (filePath[0] === '/') {\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n        }\n        const stack = href.split('/');\n        const parts = filePath.split('/');\n        stack.pop();\n        for (const part of parts) {\n            if (part === '.') {\n                continue;\n            }\n            else if (part === '..') {\n                stack.pop();\n            }\n            else {\n                stack.push(part);\n            }\n        }\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n    });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    let pos = 0;\n    function collectCharacters(regEx) {\n        let chars;\n        let match = regEx.exec(attributeValue.substring(pos));\n        if (match) {\n            chars = match[0];\n            pos += chars.length;\n            return chars;\n        }\n        return '';\n    }\n    let output = [];\n    while (true) {\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\n        if (pos >= attributeValue.length) {\n            break;\n        }\n        let url = collectCharacters(SRCSET_NOT_SPACES);\n        if (url.slice(-1) === ',') {\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n            output.push(url);\n        }\n        else {\n            let descriptorsStr = '';\n            url = absoluteToDoc(doc, url);\n            let inParens = false;\n            while (true) {\n                let c = attributeValue.charAt(pos);\n                if (c === '') {\n                    output.push((url + descriptorsStr).trim());\n                    break;\n                }\n                else if (!inParens) {\n                    if (c === ',') {\n                        pos += 1;\n                        output.push((url + descriptorsStr).trim());\n                        break;\n                    }\n                    else if (c === '(') {\n                        inParens = true;\n                    }\n                }\n                else {\n                    if (c === ')') {\n                        inParens = false;\n                    }\n                }\n                descriptorsStr += c;\n                pos += 1;\n            }\n        }\n    }\n    return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    const a = doc.createElement('a');\n    a.href = attributeValue;\n    return a.href;\n}\nfunction isSVGElement(el) {\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n    const a = document.createElement('a');\n    a.href = '';\n    return a.href;\n}\nfunction transformAttribute(doc, element, _tagName, _name, value, maskAllText, unmaskTextSelector, maskTextFn) {\n    if (!value) {\n        return value;\n    }\n    const name = _name.toLowerCase();\n    const tagName = _tagName.toLowerCase();\n    if (name === 'src' || name === 'href') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'xlink:href' && value[0] !== '#') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'background' &&\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'srcset') {\n        return getAbsoluteSrcsetString(doc, value);\n    }\n    else if (name === 'style') {\n        return absoluteToStylesheet(value, getHref());\n    }\n    else if (tagName === 'object' && name === 'data') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (maskAllText &&\n        _shouldMaskAttribute(element, name, tagName, unmaskTextSelector)) {\n        return maskTextFn ? maskTextFn(value) : defaultMaskFn(value);\n    }\n    return value;\n}\nfunction _shouldMaskAttribute(element, attribute, tagName, unmaskTextSelector) {\n    if (unmaskTextSelector && element.matches(unmaskTextSelector)) {\n        return false;\n    }\n    return (['placeholder', 'title', 'aria-label'].indexOf(attribute) > -1 ||\n        (tagName === 'input' &&\n            attribute === 'value' &&\n            element.hasAttribute('type') &&\n            ['submit', 'button'].indexOf(element.getAttribute('type').toLowerCase()) > -1));\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n    if (unblockSelector && element.matches(unblockSelector)) {\n        return false;\n    }\n    if (typeof blockClass === 'string') {\n        if (element.classList.contains(blockClass)) {\n            return true;\n        }\n    }\n    else {\n        for (let eIndex = 0; eIndex < element.classList.length; eIndex++) {\n            const className = element.classList[eIndex];\n            if (blockClass.test(className)) {\n                return true;\n            }\n        }\n    }\n    if (blockSelector) {\n        return element.matches(blockSelector);\n    }\n    return false;\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) {\n    if (!node) {\n        return false;\n    }\n    if (node.nodeType !== node.ELEMENT_NODE) {\n        return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n    }\n    if (unmaskTextSelector) {\n        if (node.matches(unmaskTextSelector) ||\n            node.closest(unmaskTextSelector)) {\n            return false;\n        }\n    }\n    if (maskAllText) {\n        return true;\n    }\n    if (typeof maskTextClass === 'string') {\n        if (node.classList.contains(maskTextClass)) {\n            return true;\n        }\n    }\n    else {\n        for (let eIndex = 0; eIndex < node.classList.length; eIndex++) {\n            const className = node.classList[eIndex];\n            if (maskTextClass.test(className)) {\n                return true;\n            }\n        }\n    }\n    if (maskTextSelector) {\n        if (node.matches(maskTextSelector)) {\n            return true;\n        }\n    }\n    return needMaskingText(node.parentNode, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText);\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n    const win = iframeEl.contentWindow;\n    if (!win) {\n        return;\n    }\n    let fired = false;\n    let readyState;\n    try {\n        readyState = win.document.readyState;\n    }\n    catch (error) {\n        return;\n    }\n    if (readyState !== 'complete') {\n        const timer = setTimeout(() => {\n            if (!fired) {\n                listener();\n                fired = true;\n            }\n        }, iframeLoadTimeout);\n        iframeEl.addEventListener('load', () => {\n            clearTimeout(timer);\n            fired = true;\n            listener();\n        });\n        return;\n    }\n    const blankUrl = 'about:blank';\n    if (win.location.href !== blankUrl ||\n        iframeEl.src === blankUrl ||\n        iframeEl.src === '') {\n        setTimeout(listener, 0);\n        return;\n    }\n    iframeEl.addEventListener('load', listener);\n}\nfunction serializeNode(n, options) {\n    var _a;\n    const { doc, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, } = options;\n    let rootId;\n    if (doc.__sn) {\n        const docId = doc.__sn.id;\n        rootId = docId === 1 ? undefined : docId;\n    }\n    switch (n.nodeType) {\n        case n.DOCUMENT_NODE:\n            if (n.compatMode !== 'CSS1Compat') {\n                return {\n                    type: NodeType.Document,\n                    childNodes: [],\n                    compatMode: n.compatMode,\n                    rootId,\n                };\n            }\n            else {\n                return {\n                    type: NodeType.Document,\n                    childNodes: [],\n                    rootId,\n                };\n            }\n        case n.DOCUMENT_TYPE_NODE:\n            return {\n                type: NodeType.DocumentType,\n                name: n.name,\n                publicId: n.publicId,\n                systemId: n.systemId,\n                rootId,\n            };\n        case n.ELEMENT_NODE:\n            const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n            const tagName = getValidTagName(n);\n            let attributes = {};\n            for (const { name, value } of Array.from(n.attributes)) {\n                if (!skipAttribute(tagName, name)) {\n                    attributes[name] = transformAttribute(doc, n, tagName, name, value, maskAllText, unmaskTextSelector, maskTextFn);\n                }\n            }\n            if (tagName === 'link' && inlineStylesheet) {\n                const stylesheet = Array.from(doc.styleSheets).find((s) => {\n                    return s.href === n.href;\n                });\n                let cssText = null;\n                if (stylesheet) {\n                    cssText = getCssRulesString(stylesheet);\n                }\n                if (cssText) {\n                    delete attributes.rel;\n                    delete attributes.href;\n                    attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n                }\n            }\n            if (tagName === 'style' &&\n                n.sheet &&\n                !(n.innerText ||\n                    n.textContent ||\n                    '').trim().length) {\n                const cssText = getCssRulesString(n.sheet);\n                if (cssText) {\n                    attributes._cssText = absoluteToStylesheet(cssText, getHref());\n                }\n            }\n            if (tagName === 'input' ||\n                tagName === 'textarea' ||\n                tagName === 'select' ||\n                tagName === 'option') {\n                const el = n;\n                const value = getInputValue(tagName, el, attributes);\n                const checked = n.checked;\n                if (attributes.type !== 'submit' &&\n                    attributes.type !== 'button' &&\n                    value) {\n                    attributes.value = maskInputValue({\n                        input: el,\n                        type: attributes.type,\n                        tagName,\n                        value,\n                        maskInputSelector,\n                        unmaskInputSelector,\n                        maskInputOptions,\n                        maskInputFn,\n                    });\n                }\n                if (checked) {\n                    attributes.checked = checked;\n                }\n            }\n            if (tagName === 'option') {\n                if (n.selected && !maskInputOptions['select']) {\n                    attributes.selected = true;\n                }\n                else {\n                    delete attributes.selected;\n                }\n            }\n            if (tagName === 'canvas' && recordCanvas) {\n                if (n.__context === '2d') {\n                    if (!is2DCanvasBlank(n)) {\n                        attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    }\n                }\n                else if (!('__context' in n)) {\n                    const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    const blankCanvas = document.createElement('canvas');\n                    blankCanvas.width = n.width;\n                    blankCanvas.height = n.height;\n                    const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    if (canvasDataURL !== blankCanvasDataURL) {\n                        attributes.rr_dataURL = canvasDataURL;\n                    }\n                }\n            }\n            if (tagName === 'img' && inlineImages) {\n                if (!canvasService) {\n                    canvasService = doc.createElement('canvas');\n                    canvasCtx = canvasService.getContext('2d');\n                }\n                const image = n;\n                const oldValue = image.crossOrigin;\n                image.crossOrigin = 'anonymous';\n                const recordInlineImage = () => {\n                    try {\n                        canvasService.width = image.naturalWidth;\n                        canvasService.height = image.naturalHeight;\n                        canvasCtx.drawImage(image, 0, 0);\n                        attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n                    }\n                    catch (err) {\n                        console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\n                    }\n                    oldValue\n                        ? (attributes.crossOrigin = oldValue)\n                        : delete attributes.crossOrigin;\n                };\n                if (image.complete && image.naturalWidth !== 0)\n                    recordInlineImage();\n                else\n                    image.onload = recordInlineImage;\n            }\n            if (tagName === 'audio' || tagName === 'video') {\n                attributes.rr_mediaState = n.paused\n                    ? 'paused'\n                    : 'played';\n                attributes.rr_mediaCurrentTime = n.currentTime;\n            }\n            if (n.scrollLeft) {\n                attributes.rr_scrollLeft = n.scrollLeft;\n            }\n            if (n.scrollTop) {\n                attributes.rr_scrollTop = n.scrollTop;\n            }\n            if (needBlock) {\n                const { width, height } = n.getBoundingClientRect();\n                attributes = {\n                    class: attributes.class,\n                    rr_width: `${width}px`,\n                    rr_height: `${height}px`,\n                };\n            }\n            if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n                if (!n.contentDocument) {\n                    attributes.rr_src = attributes.src;\n                }\n                delete attributes.src;\n            }\n            return {\n                type: NodeType.Element,\n                tagName,\n                attributes,\n                childNodes: [],\n                isSVG: isSVGElement(n) || undefined,\n                needBlock,\n                rootId,\n            };\n        case n.TEXT_NODE:\n            const parentTagName = n.parentNode && n.parentNode.tagName;\n            let textContent = n.textContent;\n            const isStyle = parentTagName === 'STYLE' ? true : undefined;\n            const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n            if (isStyle && textContent) {\n                try {\n                    if (n.nextSibling || n.previousSibling) {\n                    }\n                    else if ((_a = n.parentNode.sheet) === null || _a === void 0 ? void 0 : _a.cssRules) {\n                        textContent = stringifyStyleSheet(n.parentNode.sheet);\n                    }\n                }\n                catch (err) {\n                    console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n                }\n                textContent = absoluteToStylesheet(textContent, getHref());\n            }\n            if (isScript) {\n                textContent = 'SCRIPT_PLACEHOLDER';\n            }\n            if (parentTagName === 'TEXTAREA' && textContent) {\n                textContent = '';\n            }\n            else if (parentTagName === 'OPTION' && textContent) {\n                const option = n.parentNode;\n                textContent = maskInputValue({\n                    input: option,\n                    type: null,\n                    tagName: parentTagName,\n                    value: textContent,\n                    maskInputSelector,\n                    unmaskInputSelector,\n                    maskInputOptions,\n                    maskInputFn,\n                });\n            }\n            else if (!isStyle &&\n                !isScript &&\n                needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextSelector, maskAllText) &&\n                textContent) {\n                textContent = maskTextFn\n                    ? maskTextFn(textContent)\n                    : defaultMaskFn(textContent);\n            }\n            return {\n                type: NodeType.Text,\n                textContent: textContent || '',\n                isStyle,\n                rootId,\n            };\n        case n.CDATA_SECTION_NODE:\n            return {\n                type: NodeType.CDATA,\n                textContent: '',\n                rootId,\n            };\n        case n.COMMENT_NODE:\n            return {\n                type: NodeType.Comment,\n                textContent: n.textContent || '',\n                rootId,\n            };\n        default:\n            return false;\n    }\n}\nfunction lowerIfExists(maybeAttr) {\n    if (maybeAttr === undefined || maybeAttr === null) {\n        return '';\n    }\n    else {\n        return maybeAttr.toLowerCase();\n    }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n    if (slimDOMOptions.comment && sn.type === NodeType.Comment) {\n        return true;\n    }\n    else if (sn.type === NodeType.Element) {\n        if (slimDOMOptions.script &&\n            (sn.tagName === 'script' ||\n                (sn.tagName === 'link' &&\n                    (sn.attributes.rel === 'preload' ||\n                        sn.attributes.rel === 'modulepreload') &&\n                    sn.attributes.as === 'script') ||\n                (sn.tagName === 'link' &&\n                    sn.attributes.rel === 'prefetch' &&\n                    typeof sn.attributes.href === 'string' &&\n                    sn.attributes.href.endsWith('.js')))) {\n            return true;\n        }\n        else if (slimDOMOptions.headFavicon &&\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\n                (sn.tagName === 'meta' &&\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\n            return true;\n        }\n        else if (sn.tagName === 'meta') {\n            if (slimDOMOptions.headMetaDescKeywords &&\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaSocial &&\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaRobots &&\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaHttpEquiv &&\n                sn.attributes['http-equiv'] !== undefined) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaAuthorship &&\n                (lowerIfExists(sn.attributes.name) === 'author' ||\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaVerification &&\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction serializeNodeWithId(n, options) {\n    const { doc, map, blockClass, blockSelector, unblockSelector, maskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputSelector, unmaskInputSelector, maskAllText, maskInputOptions = {}, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, keepIframeSrcFn = () => false, } = options;\n    let { preserveWhiteSpace = true } = options;\n    const _serializedNode = serializeNode(n, {\n        doc,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskInputSelector,\n        unmaskInputSelector,\n        maskAllText,\n        maskInputOptions,\n        maskTextFn,\n        maskInputFn,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        keepIframeSrcFn,\n    });\n    if (!_serializedNode) {\n        console.warn(n, 'not serialized');\n        return null;\n    }\n    let id;\n    if ('__sn' in n) {\n        id = n.__sn.id;\n    }\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\n        (!preserveWhiteSpace &&\n            _serializedNode.type === NodeType.Text &&\n            !_serializedNode.isStyle &&\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\n        id = IGNORED_NODE;\n    }\n    else {\n        id = genId();\n    }\n    const serializedNode = Object.assign(_serializedNode, { id });\n    n.__sn = serializedNode;\n    if (id === IGNORED_NODE) {\n        return null;\n    }\n    map[id] = n;\n    if (onSerialize) {\n        onSerialize(n);\n    }\n    let recordChild = !skipChild;\n    if (serializedNode.type === NodeType.Element) {\n        recordChild = recordChild && !serializedNode.needBlock;\n        delete serializedNode.needBlock;\n        if (n.shadowRoot)\n            serializedNode.isShadowHost = true;\n    }\n    if ((serializedNode.type === NodeType.Document ||\n        serializedNode.type === NodeType.Element) &&\n        recordChild) {\n        if (slimDOMOptions.headWhitespace &&\n            _serializedNode.type === NodeType.Element &&\n            _serializedNode.tagName === 'head') {\n            preserveWhiteSpace = false;\n        }\n        const bypassOptions = {\n            doc,\n            map,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild,\n            inlineStylesheet,\n            maskInputSelector,\n            unmaskInputSelector,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            keepIframeSrcFn,\n        };\n        for (const childN of Array.from(n.childNodes)) {\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n            if (serializedChildNode) {\n                serializedNode.childNodes.push(serializedChildNode);\n            }\n        }\n        if (isElement(n) && n.shadowRoot) {\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n                if (serializedChildNode) {\n                    serializedChildNode.isShadow = true;\n                    serializedNode.childNodes.push(serializedChildNode);\n                }\n            }\n        }\n    }\n    if (n.parentNode && isShadowRoot(n.parentNode)) {\n        serializedNode.isShadow = true;\n    }\n    if (serializedNode.type === NodeType.Element &&\n        serializedNode.tagName === 'iframe') {\n        onceIframeLoaded(n, () => {\n            const iframeDoc = n.contentDocument;\n            if (iframeDoc && onIframeLoad) {\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n                    doc: iframeDoc,\n                    map,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputSelector,\n                    unmaskInputSelector,\n                    maskAllText,\n                    maskInputOptions,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedIframeNode) {\n                    onIframeLoad(n, serializedIframeNode);\n                }\n            }\n        }, iframeLoadTimeout);\n    }\n    return serializedNode;\n}\nfunction snapshot(n, options) {\n    const { blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskTextClass = 'rr-mask', maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskInputSelector = null, unmaskInputSelector = null, maskAllText = false, maskAllInputs = false, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\n    const idNodeMap = {};\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n        }\n        : maskAllInputs === false\n            ? {}\n            : maskAllInputs;\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\n        ?\n            {\n                script: true,\n                comment: true,\n                headFavicon: true,\n                headWhitespace: true,\n                headMetaDescKeywords: slimDOM === 'all',\n                headMetaSocial: true,\n                headMetaRobots: true,\n                headMetaHttpEquiv: true,\n                headMetaAuthorship: true,\n                headMetaVerification: true,\n            }\n        : slimDOM === false\n            ? {}\n            : slimDOM;\n    return [\n        serializeNodeWithId(n, {\n            doc: n,\n            map: idNodeMap,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild: false,\n            inlineStylesheet,\n            maskInputSelector,\n            unmaskInputSelector,\n            maskAllText,\n            maskInputOptions,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            keepIframeSrcFn,\n        }),\n        idNodeMap,\n    ];\n}\nfunction visitSnapshot(node, onVisit) {\n    function walk(current) {\n        onVisit(current);\n        if (current.type === NodeType.Document ||\n            current.type === NodeType.Element) {\n            current.childNodes.forEach(walk);\n        }\n    }\n    walk(node);\n}\nfunction cleanupSnapshot() {\n    _id = 1;\n}\nfunction skipAttribute(tagName, attributeName, value) {\n    return ((tagName === 'video' || tagName === 'audio') && attributeName === 'autoplay');\n}\nfunction getInputValue(tagName, el, attributes) {\n    if (tagName === 'input' &&\n        (attributes.type === 'radio' || attributes.type === 'checkbox')) {\n        return el.getAttribute('value') || '';\n    }\n    return el.value;\n}\n\nconst commentre = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nfunction parse(css, options = {}) {\n    let lineno = 1;\n    let column = 1;\n    function updatePosition(str) {\n        const lines = str.match(/\\n/g);\n        if (lines) {\n            lineno += lines.length;\n        }\n        let i = str.lastIndexOf('\\n');\n        column = i === -1 ? column + str.length : str.length - i;\n    }\n    function position() {\n        const start = { line: lineno, column };\n        return (node) => {\n            node.position = new Position(start);\n            whitespace();\n            return node;\n        };\n    }\n    class Position {\n        constructor(start) {\n            this.start = start;\n            this.end = { line: lineno, column };\n            this.source = options.source;\n        }\n    }\n    Position.prototype.content = css;\n    const errorsList = [];\n    function error(msg) {\n        const err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n        err.reason = msg;\n        err.filename = options.source;\n        err.line = lineno;\n        err.column = column;\n        err.source = css;\n        if (options.silent) {\n            errorsList.push(err);\n        }\n        else {\n            throw err;\n        }\n    }\n    function stylesheet() {\n        const rulesList = rules();\n        return {\n            type: 'stylesheet',\n            stylesheet: {\n                source: options.source,\n                rules: rulesList,\n                parsingErrors: errorsList,\n            },\n        };\n    }\n    function open() {\n        return match(/^{\\s*/);\n    }\n    function close() {\n        return match(/^}/);\n    }\n    function rules() {\n        let node;\n        const rules = [];\n        whitespace();\n        comments(rules);\n        while (css.length && css.charAt(0) !== '}' && (node = atrule() || rule())) {\n            if (node !== false) {\n                rules.push(node);\n                comments(rules);\n            }\n        }\n        return rules;\n    }\n    function match(re) {\n        const m = re.exec(css);\n        if (!m) {\n            return;\n        }\n        const str = m[0];\n        updatePosition(str);\n        css = css.slice(str.length);\n        return m;\n    }\n    function whitespace() {\n        match(/^\\s*/);\n    }\n    function comments(rules = []) {\n        let c;\n        while ((c = comment())) {\n            if (c !== false) {\n                rules.push(c);\n            }\n            c = comment();\n        }\n        return rules;\n    }\n    function comment() {\n        const pos = position();\n        if ('/' !== css.charAt(0) || '*' !== css.charAt(1)) {\n            return;\n        }\n        let i = 2;\n        while ('' !== css.charAt(i) &&\n            ('*' !== css.charAt(i) || '/' !== css.charAt(i + 1))) {\n            ++i;\n        }\n        i += 2;\n        if ('' === css.charAt(i - 1)) {\n            return error('End of comment missing');\n        }\n        const str = css.slice(2, i - 2);\n        column += 2;\n        updatePosition(str);\n        css = css.slice(i);\n        column += 2;\n        return pos({\n            type: 'comment',\n            comment: str,\n        });\n    }\n    function selector() {\n        const m = match(/^([^{]+)/);\n        if (!m) {\n            return;\n        }\n        return trim(m[0])\n            .replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/g, '')\n            .replace(/\"(?:\\\\\"|[^\"])*\"|'(?:\\\\'|[^'])*'/g, (m) => {\n            return m.replace(/,/g, '\\u200C');\n        })\n            .split(/\\s*(?![^(]*\\)),\\s*/)\n            .map((s) => {\n            return s.replace(/\\u200C/g, ',');\n        });\n    }\n    function declaration() {\n        const pos = position();\n        let propMatch = match(/^(\\*?[-#\\/\\*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/);\n        if (!propMatch) {\n            return;\n        }\n        const prop = trim(propMatch[0]);\n        if (!match(/^:\\s*/)) {\n            return error(`property missing ':'`);\n        }\n        const val = match(/^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^\\)]*?\\)|[^};])+)/);\n        const ret = pos({\n            type: 'declaration',\n            property: prop.replace(commentre, ''),\n            value: val ? trim(val[0]).replace(commentre, '') : '',\n        });\n        match(/^[;\\s]*/);\n        return ret;\n    }\n    function declarations() {\n        const decls = [];\n        if (!open()) {\n            return error(`missing '{'`);\n        }\n        comments(decls);\n        let decl;\n        while ((decl = declaration())) {\n            if (decl !== false) {\n                decls.push(decl);\n                comments(decls);\n            }\n            decl = declaration();\n        }\n        if (!close()) {\n            return error(`missing '}'`);\n        }\n        return decls;\n    }\n    function keyframe() {\n        let m;\n        const vals = [];\n        const pos = position();\n        while ((m = match(/^((\\d+\\.\\d+|\\.\\d+|\\d+)%?|[a-z]+)\\s*/))) {\n            vals.push(m[1]);\n            match(/^,\\s*/);\n        }\n        if (!vals.length) {\n            return;\n        }\n        return pos({\n            type: 'keyframe',\n            values: vals,\n            declarations: declarations(),\n        });\n    }\n    function atkeyframes() {\n        const pos = position();\n        let m = match(/^@([-\\w]+)?keyframes\\s*/);\n        if (!m) {\n            return;\n        }\n        const vendor = m[1];\n        m = match(/^([-\\w]+)\\s*/);\n        if (!m) {\n            return error('@keyframes missing name');\n        }\n        const name = m[1];\n        if (!open()) {\n            return error(`@keyframes missing '{'`);\n        }\n        let frame;\n        let frames = comments();\n        while ((frame = keyframe())) {\n            frames.push(frame);\n            frames = frames.concat(comments());\n        }\n        if (!close()) {\n            return error(`@keyframes missing '}'`);\n        }\n        return pos({\n            type: 'keyframes',\n            name,\n            vendor,\n            keyframes: frames,\n        });\n    }\n    function atsupports() {\n        const pos = position();\n        const m = match(/^@supports *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const supports = trim(m[1]);\n        if (!open()) {\n            return error(`@supports missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@supports missing '}'`);\n        }\n        return pos({\n            type: 'supports',\n            supports,\n            rules: style,\n        });\n    }\n    function athost() {\n        const pos = position();\n        const m = match(/^@host\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(`@host missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@host missing '}'`);\n        }\n        return pos({\n            type: 'host',\n            rules: style,\n        });\n    }\n    function atmedia() {\n        const pos = position();\n        const m = match(/^@media *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const media = trim(m[1]);\n        if (!open()) {\n            return error(`@media missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@media missing '}'`);\n        }\n        return pos({\n            type: 'media',\n            media,\n            rules: style,\n        });\n    }\n    function atcustommedia() {\n        const pos = position();\n        const m = match(/^@custom-media\\s+(--[^\\s]+)\\s*([^{;]+);/);\n        if (!m) {\n            return;\n        }\n        return pos({\n            type: 'custom-media',\n            name: trim(m[1]),\n            media: trim(m[2]),\n        });\n    }\n    function atpage() {\n        const pos = position();\n        const m = match(/^@page */);\n        if (!m) {\n            return;\n        }\n        const sel = selector() || [];\n        if (!open()) {\n            return error(`@page missing '{'`);\n        }\n        let decls = comments();\n        let decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(`@page missing '}'`);\n        }\n        return pos({\n            type: 'page',\n            selectors: sel,\n            declarations: decls,\n        });\n    }\n    function atdocument() {\n        const pos = position();\n        const m = match(/^@([-\\w]+)?document *([^{]+)/);\n        if (!m) {\n            return;\n        }\n        const vendor = trim(m[1]);\n        const doc = trim(m[2]);\n        if (!open()) {\n            return error(`@document missing '{'`);\n        }\n        const style = comments().concat(rules());\n        if (!close()) {\n            return error(`@document missing '}'`);\n        }\n        return pos({\n            type: 'document',\n            document: doc,\n            vendor,\n            rules: style,\n        });\n    }\n    function atfontface() {\n        const pos = position();\n        const m = match(/^@font-face\\s*/);\n        if (!m) {\n            return;\n        }\n        if (!open()) {\n            return error(`@font-face missing '{'`);\n        }\n        let decls = comments();\n        let decl;\n        while ((decl = declaration())) {\n            decls.push(decl);\n            decls = decls.concat(comments());\n        }\n        if (!close()) {\n            return error(`@font-face missing '}'`);\n        }\n        return pos({\n            type: 'font-face',\n            declarations: decls,\n        });\n    }\n    const atimport = _compileAtrule('import');\n    const atcharset = _compileAtrule('charset');\n    const atnamespace = _compileAtrule('namespace');\n    function _compileAtrule(name) {\n        const re = new RegExp('^@' + name + '\\\\s*([^;]+);');\n        return () => {\n            const pos = position();\n            const m = match(re);\n            if (!m) {\n                return;\n            }\n            const ret = { type: name };\n            ret[name] = m[1].trim();\n            return pos(ret);\n        };\n    }\n    function atrule() {\n        if (css[0] !== '@') {\n            return;\n        }\n        return (atkeyframes() ||\n            atmedia() ||\n            atcustommedia() ||\n            atsupports() ||\n            atimport() ||\n            atcharset() ||\n            atnamespace() ||\n            atdocument() ||\n            atpage() ||\n            athost() ||\n            atfontface());\n    }\n    function rule() {\n        const pos = position();\n        const sel = selector();\n        if (!sel) {\n            return error('selector missing');\n        }\n        comments();\n        return pos({\n            type: 'rule',\n            selectors: sel,\n            declarations: declarations(),\n        });\n    }\n    return addParent(stylesheet());\n}\nfunction trim(str) {\n    return str ? str.replace(/^\\s+|\\s+$/g, '') : '';\n}\nfunction addParent(obj, parent) {\n    const isNode = obj && typeof obj.type === 'string';\n    const childParent = isNode ? obj : parent;\n    for (const k of Object.keys(obj)) {\n        const value = obj[k];\n        if (Array.isArray(value)) {\n            value.forEach((v) => {\n                addParent(v, childParent);\n            });\n        }\n        else if (value && typeof value === 'object') {\n            addParent(value, childParent);\n        }\n    }\n    if (isNode) {\n        Object.defineProperty(obj, 'parent', {\n            configurable: true,\n            writable: true,\n            enumerable: false,\n            value: parent || null,\n        });\n    }\n    return obj;\n}\n\nconst tagMap = {\n    script: 'noscript',\n    altglyph: 'altGlyph',\n    altglyphdef: 'altGlyphDef',\n    altglyphitem: 'altGlyphItem',\n    animatecolor: 'animateColor',\n    animatemotion: 'animateMotion',\n    animatetransform: 'animateTransform',\n    clippath: 'clipPath',\n    feblend: 'feBlend',\n    fecolormatrix: 'feColorMatrix',\n    fecomponenttransfer: 'feComponentTransfer',\n    fecomposite: 'feComposite',\n    feconvolvematrix: 'feConvolveMatrix',\n    fediffuselighting: 'feDiffuseLighting',\n    fedisplacementmap: 'feDisplacementMap',\n    fedistantlight: 'feDistantLight',\n    fedropshadow: 'feDropShadow',\n    feflood: 'feFlood',\n    fefunca: 'feFuncA',\n    fefuncb: 'feFuncB',\n    fefuncg: 'feFuncG',\n    fefuncr: 'feFuncR',\n    fegaussianblur: 'feGaussianBlur',\n    feimage: 'feImage',\n    femerge: 'feMerge',\n    femergenode: 'feMergeNode',\n    femorphology: 'feMorphology',\n    feoffset: 'feOffset',\n    fepointlight: 'fePointLight',\n    fespecularlighting: 'feSpecularLighting',\n    fespotlight: 'feSpotLight',\n    fetile: 'feTile',\n    feturbulence: 'feTurbulence',\n    foreignobject: 'foreignObject',\n    glyphref: 'glyphRef',\n    lineargradient: 'linearGradient',\n    radialgradient: 'radialGradient',\n};\nfunction getTagName(n) {\n    let tagName = tagMap[n.tagName] ? tagMap[n.tagName] : n.tagName;\n    if (tagName === 'link' && n.attributes._cssText) {\n        tagName = 'style';\n    }\n    return tagName;\n}\nfunction escapeRegExp(str) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nconst HOVER_SELECTOR = /([^\\\\]):hover/;\nconst HOVER_SELECTOR_GLOBAL = new RegExp(HOVER_SELECTOR.source, 'g');\nfunction addHoverClass(cssText, cache) {\n    const cachedStyle = cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.get(cssText);\n    if (cachedStyle)\n        return cachedStyle;\n    const ast = parse(cssText, {\n        silent: true,\n    });\n    if (!ast.stylesheet) {\n        return cssText;\n    }\n    const selectors = [];\n    ast.stylesheet.rules.forEach((rule) => {\n        if ('selectors' in rule) {\n            (rule.selectors || []).forEach((selector) => {\n                if (HOVER_SELECTOR.test(selector)) {\n                    selectors.push(selector);\n                }\n            });\n        }\n    });\n    if (selectors.length === 0) {\n        return cssText;\n    }\n    const selectorMatcher = new RegExp(selectors\n        .filter((selector, index) => selectors.indexOf(selector) === index)\n        .sort((a, b) => b.length - a.length)\n        .map((selector) => {\n        return escapeRegExp(selector);\n    })\n        .join('|'), 'g');\n    const result = cssText.replace(selectorMatcher, (selector) => {\n        const newSelector = selector.replace(HOVER_SELECTOR_GLOBAL, '$1.\\\\:hover');\n        return `${selector}, ${newSelector}`;\n    });\n    cache === null || cache === void 0 ? void 0 : cache.stylesWithHoverClass.set(cssText, result);\n    return result;\n}\nfunction createCache() {\n    const stylesWithHoverClass = new Map();\n    return {\n        stylesWithHoverClass,\n    };\n}\nfunction buildNode(n, options) {\n    const { doc, hackCss, cache } = options;\n    switch (n.type) {\n        case NodeType.Document:\n            return doc.implementation.createDocument(null, '', null);\n        case NodeType.DocumentType:\n            return doc.implementation.createDocumentType(n.name || 'html', n.publicId, n.systemId);\n        case NodeType.Element:\n            const tagName = getTagName(n);\n            let node;\n            if (n.isSVG) {\n                node = doc.createElementNS('http://www.w3.org/2000/svg', tagName);\n            }\n            else {\n                node = doc.createElement(tagName);\n            }\n            for (const name in n.attributes) {\n                if (!n.attributes.hasOwnProperty(name)) {\n                    continue;\n                }\n                let value = n.attributes[name];\n                if (tagName === 'option' && name === 'selected' && value === false) {\n                    continue;\n                }\n                value =\n                    typeof value === 'boolean' || typeof value === 'number' || value === null ? '' : value;\n                if (!name.startsWith('rr_')) {\n                    const isTextarea = tagName === 'textarea' && name === 'value';\n                    const isRemoteOrDynamicCss = tagName === 'style' && name === '_cssText';\n                    if (isRemoteOrDynamicCss && hackCss) {\n                        value = addHoverClass(value, cache);\n                    }\n                    if (isTextarea || isRemoteOrDynamicCss) {\n                        const child = doc.createTextNode(value);\n                        for (const c of Array.from(node.childNodes)) {\n                            if (c.nodeType === node.TEXT_NODE) {\n                                node.removeChild(c);\n                            }\n                        }\n                        node.appendChild(child);\n                        continue;\n                    }\n                    try {\n                        if (n.isSVG && name === 'xlink:href') {\n                            node.setAttributeNS('http://www.w3.org/1999/xlink', name, value);\n                        }\n                        else if (name === 'onload' ||\n                            name === 'onclick' ||\n                            name.substring(0, 7) === 'onmouse') {\n                            node.setAttribute('_' + name, value);\n                        }\n                        else if (tagName === 'meta' &&\n                            n.attributes['http-equiv'] === 'Content-Security-Policy' &&\n                            name === 'content') {\n                            node.setAttribute('csp-content', value);\n                            continue;\n                        }\n                        else if (tagName === 'link' &&\n                            (n.attributes.rel === 'preload' || n.attributes.rel === 'modulepreload') &&\n                            n.attributes.as === 'script') {\n                        }\n                        else if (tagName === 'link' &&\n                            n.attributes.rel === 'prefetch' &&\n                            typeof n.attributes.href === 'string' &&\n                            n.attributes.href.endsWith('.js')) {\n                        }\n                        else if (tagName === 'img' &&\n                            n.attributes.srcset &&\n                            n.attributes.rr_dataURL) {\n                            node.setAttribute('rrweb-original-srcset', n.attributes.srcset);\n                        }\n                        else {\n                            node.setAttribute(name, value);\n                        }\n                    }\n                    catch (error) {\n                    }\n                }\n                else {\n                    if (tagName === 'canvas' && name === 'rr_dataURL') {\n                        const image = document.createElement('img');\n                        image.src = value;\n                        image.onload = () => {\n                            const ctx = node.getContext('2d');\n                            if (ctx) {\n                                ctx.drawImage(image, 0, 0, image.width, image.height);\n                            }\n                        };\n                    }\n                    else if (tagName === 'img' && name === 'rr_dataURL') {\n                        const image = node;\n                        if (!image.currentSrc.startsWith('data:')) {\n                            image.setAttribute('rrweb-original-src', n.attributes.src);\n                            image.src = value;\n                        }\n                    }\n                    if (name === 'rr_width') {\n                        node.style.width = value;\n                    }\n                    else if (name === 'rr_height') {\n                        node.style.height = value;\n                    }\n                    else if (name === 'rr_mediaCurrentTime') {\n                        node.currentTime = n.attributes\n                            .rr_mediaCurrentTime;\n                    }\n                    else if (name === 'rr_mediaState') {\n                        switch (value) {\n                            case 'played':\n                                node\n                                    .play()\n                                    .catch((e) => console.warn('media playback error', e));\n                                break;\n                            case 'paused':\n                                node.pause();\n                                break;\n                        }\n                    }\n                }\n            }\n            if (n.isShadowHost) {\n                if (!node.shadowRoot) {\n                    node.attachShadow({ mode: 'open' });\n                }\n                else {\n                    while (node.shadowRoot.firstChild) {\n                        node.shadowRoot.removeChild(node.shadowRoot.firstChild);\n                    }\n                }\n            }\n            return node;\n        case NodeType.Text:\n            return doc.createTextNode(n.isStyle && hackCss\n                ? addHoverClass(n.textContent, cache)\n                : n.textContent);\n        case NodeType.CDATA:\n            return doc.createCDATASection(n.textContent);\n        case NodeType.Comment:\n            return doc.createComment(n.textContent);\n        default:\n            return null;\n    }\n}\nfunction buildNodeWithSN(n, options) {\n    const { doc, map, skipChild = false, hackCss = true, afterAppend, cache, } = options;\n    let node = buildNode(n, { doc, hackCss, cache });\n    if (!node) {\n        return null;\n    }\n    if (n.rootId) {\n        console.assert(map[n.rootId] === doc, 'Target document should has the same root id.');\n    }\n    if (n.type === NodeType.Document) {\n        doc.close();\n        doc.open();\n        if (n.compatMode === 'BackCompat' &&\n            n.childNodes &&\n            n.childNodes[0].type !== NodeType.DocumentType) {\n            if (n.childNodes[0].type === NodeType.Element &&\n                'xmlns' in n.childNodes[0].attributes &&\n                n.childNodes[0].attributes.xmlns === 'http://www.w3.org/1999/xhtml') {\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"\">');\n            }\n            else {\n                doc.write('<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"\">');\n            }\n        }\n        node = doc;\n    }\n    node.__sn = n;\n    map[n.id] = node;\n    if ((n.type === NodeType.Document || n.type === NodeType.Element) &&\n        !skipChild) {\n        for (const childN of n.childNodes) {\n            const childNode = buildNodeWithSN(childN, {\n                doc,\n                map,\n                skipChild: false,\n                hackCss,\n                afterAppend,\n                cache,\n            });\n            if (!childNode) {\n                console.warn('Failed to rebuild', childN);\n                continue;\n            }\n            if (childN.isShadow && isElement(node) && node.shadowRoot) {\n                node.shadowRoot.appendChild(childNode);\n            }\n            else {\n                node.appendChild(childNode);\n            }\n            if (afterAppend) {\n                afterAppend(childNode);\n            }\n        }\n    }\n    return node;\n}\nfunction visit(idNodeMap, onVisit) {\n    function walk(node) {\n        onVisit(node);\n    }\n    for (const key in idNodeMap) {\n        if (idNodeMap[key]) {\n            walk(idNodeMap[key]);\n        }\n    }\n}\nfunction handleScroll(node) {\n    const n = node.__sn;\n    if (n.type !== NodeType.Element) {\n        return;\n    }\n    const el = node;\n    for (const name in n.attributes) {\n        if (!(n.attributes.hasOwnProperty(name) && name.startsWith('rr_'))) {\n            continue;\n        }\n        const value = n.attributes[name];\n        if (name === 'rr_scrollLeft') {\n            el.scrollLeft = value;\n        }\n        if (name === 'rr_scrollTop') {\n            el.scrollTop = value;\n        }\n    }\n}\nfunction rebuild(n, options) {\n    const { doc, onVisit, hackCss = true, afterAppend, cache } = options;\n    const idNodeMap = {};\n    const node = buildNodeWithSN(n, {\n        doc,\n        map: idNodeMap,\n        skipChild: false,\n        hackCss,\n        afterAppend,\n        cache,\n    });\n    visit(idNodeMap, (visitedNode) => {\n        if (onVisit) {\n            onVisit(visitedNode);\n        }\n        handleScroll(visitedNode);\n    });\n    return [node, idNodeMap];\n}\n\nexport { IGNORED_NODE, NodeType, addHoverClass, buildNodeWithSN, cleanupSnapshot, createCache, hasInputMaskOptions, is2DCanvasBlank, isElement, isShadowRoot, maskInputValue, needMaskingText, rebuild, serializeNodeWithId, snapshot, transformAttribute, visitSnapshot };\n","import type { Breadcrumb } from '@sentry/types';\n\ntype RequiredProperties = 'category' | 'message';\n\n/**\n * Create a breadcrumb for a replay.\n */\nexport function createBreadcrumb(\n  breadcrumb: Pick<Breadcrumb, RequiredProperties> & Partial<Omit<Breadcrumb, RequiredProperties>>,\n): Breadcrumb {\n  return {\n    timestamp: Date.now() / 1000,\n    type: 'default',\n    ...breadcrumb,\n  };\n}\n","import { EventType } from '@sentry-internal/rrweb';\nimport type { Breadcrumb } from '@sentry/types';\n\nimport type { ReplayContainer } from '../types';\nimport { addEvent } from '../util/addEvent';\n\n/**\n * Add a breadcrumb event to replay.\n */\nexport function addBreadcrumbEvent(replay: ReplayContainer, breadcrumb: Breadcrumb): void {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category as string)) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n\n  replay.addUpdate(() => {\n    void addEvent(replay, {\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: breadcrumb,\n      },\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n","// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nconst ATTRIBUTES_TO_RECORD = new Set([\n  'id',\n  'class',\n  'aria-label',\n  'role',\n  'name',\n  'alt',\n  'title',\n  'data-test-id',\n  'data-testid',\n]);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nexport function getAttributesToRecord(attributes: Record<string, unknown>): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  for (const key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      let normalizedKey = key;\n\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n\n  return obj;\n}\n","import type { INode } from '@sentry-internal/rrweb-snapshot';\nimport { NodeType } from '@sentry-internal/rrweb-snapshot';\nimport type { Breadcrumb } from '@sentry/types';\nimport { htmlTreeAsString } from '@sentry/utils';\n\nimport type { ReplayContainer } from '../types';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { addBreadcrumbEvent } from './addBreadcrumbEvent';\nimport { getAttributesToRecord } from './util/getAttributesToRecord';\n\ninterface DomHandlerData {\n  name: string;\n  event: Node | { target: Node };\n}\n\nexport const handleDomListener: (replay: ReplayContainer) => (handlerData: DomHandlerData) => void =\n  (replay: ReplayContainer) =>\n  (handlerData: DomHandlerData): void => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleDom(handlerData);\n\n    if (!result) {\n      return;\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n\n/**\n * An event handler to react to DOM events.\n */\nfunction handleDom(handlerData: DomHandlerData): Breadcrumb | null {\n  let target;\n  let targetNode: Node | INode | undefined;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    targetNode = getTargetNode(handlerData);\n    target = htmlTreeAsString(targetNode);\n  } catch (e) {\n    target = '<unknown>';\n  }\n\n  // `__sn` property is the serialized node created by rrweb\n  const serializedNode =\n    targetNode && '__sn' in targetNode && targetNode.__sn.type === NodeType.Element ? targetNode.__sn : null;\n\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    message: target,\n    data: serializedNode\n      ? {\n          nodeId: serializedNode.id,\n          node: {\n            id: serializedNode.id,\n            tagName: serializedNode.tagName,\n            textContent: targetNode\n              ? Array.from(targetNode.childNodes)\n                  .map(\n                    (node: Node | INode) => '__sn' in node && node.__sn.type === NodeType.Text && node.__sn.textContent,\n                  )\n                  .filter(Boolean) // filter out empty values\n                  .map(text => (text as string).trim())\n                  .join('')\n              : '',\n            attributes: getAttributesToRecord(serializedNode.attributes),\n          },\n        }\n      : {},\n  });\n}\n\nfunction getTargetNode(handlerData: DomHandlerData): Node {\n  if (isEventWithTarget(handlerData.event)) {\n    return handlerData.event.target;\n  }\n\n  return handlerData.event;\n}\n\nfunction isEventWithTarget(event: unknown): event is { target: Node } {\n  return !!(event as { target?: Node }).target;\n}\n","import type { Event, EventHint } from '@sentry/types';\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nexport function isRrwebError(event: Event, hint: EventHint): boolean {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-ignore this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  // Check if any exception originates from rrweb\n  return event.exception.values.some(exception => {\n    if (!exception.stacktrace || !exception.stacktrace.frames || !exception.stacktrace.frames.length) {\n      return false;\n    }\n\n    return exception.stacktrace.frames.some(frame => frame.filename && frame.filename.includes('/rrweb/src/'));\n  });\n}\n","import { addBreadcrumb } from '@sentry/core';\nimport type { Event, EventHint } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport type { ReplayContainer } from '../types';\nimport { isErrorEvent, isReplayEvent, isTransactionEvent } from '../util/eventUtils';\nimport { isRrwebError } from '../util/isRrwebError';\nimport { handleAfterSendEvent } from './handleAfterSendEvent';\n\n/**\n * Returns a listener to be added to `addGlobalEventProcessor(listener)`.\n */\nexport function handleGlobalEventListener(\n  replay: ReplayContainer,\n  includeAfterSendEventHandling = false,\n): (event: Event, hint: EventHint) => Event | null {\n  const afterSendHandler = includeAfterSendEventHandling ? handleAfterSendEvent(replay) : undefined;\n\n  return (event: Event, hint: EventHint) => {\n    if (isReplayEvent(event)) {\n      // Replays have separate set of breadcrumbs, do not include breadcrumbs\n      // from core SDK\n      delete event.breadcrumbs;\n      return event;\n    }\n\n    // We only want to handle errors & transactions, nothing else\n    if (!isErrorEvent(event) && !isTransactionEvent(event)) {\n      return event;\n    }\n\n    // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n    // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n    if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n      __DEBUG_BUILD__ && logger.log('[Replay] Ignoring error from rrweb internals', event);\n      return null;\n    }\n\n    // Only tag transactions with replayId if not waiting for an error\n    if (isErrorEvent(event) || (isTransactionEvent(event) && replay.recordingMode === 'session')) {\n      event.tags = { ...event.tags, replayId: replay.getSessionId() };\n    }\n\n    if (__DEBUG_BUILD__ && replay.getOptions()._experiments.traceInternals && isErrorEvent(event)) {\n      const exc = getEventExceptionValues(event);\n      addInternalBreadcrumb({\n        message: `Tagging event (${event.event_id}) - ${event.message} - ${exc.type}: ${exc.value}`,\n      });\n    }\n\n    // In cases where a custom client is used that does not support the new hooks (yet),\n    // we manually call this hook method here\n    if (afterSendHandler) {\n      // Pretend the error had a 200 response so we always capture it\n      afterSendHandler(event, { statusCode: 200 });\n    }\n\n    return event;\n  };\n}\n\nfunction addInternalBreadcrumb(arg: Parameters<typeof addBreadcrumb>[0]): void {\n  const { category, level, message, ...rest } = arg;\n\n  addBreadcrumb({\n    category: category || 'console',\n    level: level || 'debug',\n    message: `[debug]: ${message}`,\n    ...rest,\n  });\n}\n\nfunction getEventExceptionValues(event: Event): { type: string; value: string } {\n  return {\n    type: 'Unknown',\n    value: 'n/a',\n    ...(event.exception && event.exception.values && event.exception.values[0]),\n  };\n}\n","import { EventType } from '@sentry-internal/rrweb';\n\nimport type { AddEventResult, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { addEvent } from './addEvent';\n\n/**\n * Create a \"span\" for each performance entry. The parent transaction is `this.replayEvent`.\n */\nexport function createPerformanceSpans(\n  replay: ReplayContainer,\n  entries: ReplayPerformanceEntry[],\n): Promise<AddEventResult | null>[] {\n  return entries.map(({ type, start, end, name, data }) =>\n    addEvent(replay, {\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data,\n        },\n      },\n    }),\n  );\n}\n","import type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\n\ninterface HistoryHandlerData {\n  from: string;\n  to: string;\n}\n\nfunction handleHistory(handlerData: HistoryHandlerData): ReplayPerformanceEntry {\n  const { from, to } = handlerData;\n\n  const now = Date.now() / 1000;\n\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('history', listener)`.\n */\nexport function handleHistorySpanListener(replay: ReplayContainer): (handlerData: HistoryHandlerData) => void {\n  return (handlerData: HistoryHandlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleHistory(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n","import { getCurrentHub } from '@sentry/core';\n\nimport type { ReplayContainer } from '../types';\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nexport function shouldFilterRequest(replay: ReplayContainer, url: string): boolean {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if (__DEBUG_BUILD__ && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n\n  return _isSentryRequest(url);\n}\n\n/**\n * Checks wether a given URL belongs to the configured Sentry DSN.\n */\nfunction _isSentryRequest(url: string): boolean {\n  const client = getCurrentHub().getClient();\n  const dsn = client && client.getDsn();\n  return dsn ? url.includes(dsn.host) : false;\n}\n","import type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from '../util/createPerformanceSpans';\nimport { shouldFilterRequest } from '../util/shouldFilterRequest';\n\n/** Add a performance entry breadcrumb */\nexport function addNetworkBreadcrumb(replay: ReplayContainer, result: ReplayPerformanceEntry | null): void {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  if (result === null) {\n    return;\n  }\n\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n\n  replay.addUpdate(() => {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n","import type { HandlerDataFetch } from '@sentry/types';\n\nimport type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { addNetworkBreadcrumb } from './addNetworkBreadcrumb';\n\n/** only exported for tests */\nexport function handleFetch(handlerData: HandlerDataFetch): null | ReplayPerformanceEntry {\n  const { startTimestamp, endTimestamp, fetchData, response } = handlerData;\n\n  if (!endTimestamp) {\n    return null;\n  }\n\n  const { method, request_body_size: requestBodySize, response_body_size: responseBodySize } = fetchData;\n\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: fetchData.url,\n    data: {\n      method,\n      statusCode: response && (response as Response).status,\n      requestBodySize,\n      responseBodySize,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('fetch', listener)`.\n */\nexport function handleFetchSpanListener(replay: ReplayContainer): (handlerData: HandlerDataFetch) => void {\n  return (handlerData: HandlerDataFetch) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleFetch(handlerData);\n\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n","import type { HandlerDataXhr } from '@sentry/types';\n\nimport type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { addNetworkBreadcrumb } from './addNetworkBreadcrumb';\n\n/** only exported for tests */\nexport function handleXhr(handlerData: HandlerDataXhr): ReplayPerformanceEntry | null {\n  const { startTimestamp, endTimestamp, xhr } = handlerData;\n\n  if (!startTimestamp || !endTimestamp || !xhr.__sentry_xhr__) {\n    return null;\n  }\n\n  const {\n    method,\n    url,\n    status_code: statusCode,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = xhr.__sentry_xhr__;\n\n  if (url === undefined) {\n    return null;\n  }\n\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    data: {\n      method,\n      statusCode,\n      requestBodySize,\n      responseBodySize,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addInstrumentationHandler('xhr', listener)`.\n */\nexport function handleXhrSpanListener(replay: ReplayContainer): (handlerData: HandlerDataXhr) => void {\n  return (handlerData: HandlerDataXhr) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleXhr(handlerData);\n\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n","import { getCurrentHub } from '@sentry/core';\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  HandlerDataFetch,\n  SentryWrappedXMLHttpRequest,\n  TextEncoderInternal,\n  XhrBreadcrumbData,\n  XhrBreadcrumbHint,\n} from '@sentry/types';\nimport { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport type { ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { addNetworkBreadcrumb } from './addNetworkBreadcrumb';\nimport { handleFetchSpanListener } from './handleFetch';\nimport { handleXhrSpanListener } from './handleXhr';\n\ntype RequestBody = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\ntype XhrHint = XhrBreadcrumbHint & { xhr: XMLHttpRequest & SentryWrappedXMLHttpRequest; input?: RequestBody };\ntype FetchHint = FetchBreadcrumbHint & {\n  input: HandlerDataFetch['args'];\n  response: Response;\n};\n\ninterface ExtendedNetworkBreadcrumbsOptions {\n  replay: ReplayContainer;\n  textEncoder: TextEncoderInternal;\n}\n\n/**\n * This will enrich the xhr/fetch breadcrumbs with additional information.\n *\n * This adds:\n * * request_body_size\n * * response_body_size\n *\n * to the breadcrumb data.\n */\nexport function handleNetworkBreadcrumbs(replay: ReplayContainer): void {\n  const client = getCurrentHub().getClient();\n\n  try {\n    const textEncoder = new TextEncoder();\n\n    const options: ExtendedNetworkBreadcrumbsOptions = {\n      replay,\n      textEncoder,\n    };\n\n    if (client && client.on) {\n      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n    } else {\n      // Fallback behavior\n      addInstrumentationHandler('fetch', handleFetchSpanListener(replay));\n      addInstrumentationHandler('xhr', handleXhrSpanListener(replay));\n    }\n  } catch {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nexport function beforeAddNetworkBreadcrumb(\n  options: ExtendedNetworkBreadcrumbsOptions,\n  breadcrumb: Breadcrumb,\n  hint?: BreadcrumbHint,\n): void {\n  if (!breadcrumb.data) {\n    return;\n  }\n\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      _handleXhrBreadcrumb(breadcrumb, hint, options);\n    }\n\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      _enrichFetchBreadcrumb(breadcrumb, hint, options);\n\n      void _handleFetchBreadcrumb(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    __DEBUG_BUILD__ && logger.warn('Error when enriching network breadcrumb');\n  }\n}\n\nfunction _handleXhrBreadcrumb(\n  breadcrumb: Breadcrumb & { data: XhrBreadcrumbData },\n  hint: XhrHint,\n  options: ExtendedNetworkBreadcrumbsOptions,\n): void {\n  // Enriches the breadcrumb overall\n  _enrichXhrBreadcrumb(breadcrumb, hint, options);\n\n  // Create a replay performance entry from this breadcrumb\n  const result = _makeNetworkReplayBreadcrumb('resource.xhr', breadcrumb, hint);\n  addNetworkBreadcrumb(options.replay, result);\n}\n\nasync function _handleFetchBreadcrumb(\n  breadcrumb: Breadcrumb & { data: FetchBreadcrumbData },\n  hint: FetchHint,\n  options: ExtendedNetworkBreadcrumbsOptions,\n): Promise<void> {\n  const fullBreadcrumb = await _parseFetchResponse(breadcrumb, hint, options);\n\n  // Create a replay performance entry from this breadcrumb\n  const result = _makeNetworkReplayBreadcrumb('resource.fetch', fullBreadcrumb, hint);\n  addNetworkBreadcrumb(options.replay, result);\n}\n\n// This does async operations on the breadcrumb for replay\nasync function _parseFetchResponse(\n  breadcrumb: Breadcrumb & { data: FetchBreadcrumbData },\n  hint: FetchBreadcrumbHint,\n  options: ExtendedNetworkBreadcrumbsOptions,\n): Promise<Breadcrumb & { data: FetchBreadcrumbData }> {\n  if (breadcrumb.data.response_body_size || !hint.response) {\n    return breadcrumb;\n  }\n\n  // If no Content-Length header exists, we try to get the size from the response body\n  try {\n    // We have to clone this, as the body can only be read once\n    const response = (hint.response as Response).clone();\n    const body = await response.text();\n\n    if (body.length) {\n      return {\n        ...breadcrumb,\n        data: { ...breadcrumb.data, response_body_size: getBodySize(body, options.textEncoder) },\n      };\n    }\n  } catch {\n    // just ignore if something fails here\n  }\n\n  return breadcrumb;\n}\n\nfunction _makeNetworkReplayBreadcrumb(\n  type: string,\n  breadcrumb: Breadcrumb & { data: FetchBreadcrumbData | XhrBreadcrumbData },\n  hint: FetchBreadcrumbHint | XhrBreadcrumbHint,\n): ReplayPerformanceEntry | null {\n  const { startTimestamp, endTimestamp } = hint;\n\n  if (!endTimestamp) {\n    return null;\n  }\n\n  const {\n    url,\n    method,\n    status_code: statusCode,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  if (url === undefined) {\n    return null;\n  }\n\n  const result: ReplayPerformanceEntry & { data: object } = {\n    type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: {\n      method,\n      statusCode,\n    },\n  };\n\n  if (requestBodySize) {\n    result.data.requestBodySize = requestBodySize;\n  }\n  if (responseBodySize) {\n    result.data.responseBodySize = responseBodySize;\n  }\n\n  return result;\n}\n\nfunction _enrichXhrBreadcrumb(\n  breadcrumb: Breadcrumb & { data: XhrBreadcrumbData },\n  hint: XhrHint,\n  options: ExtendedNetworkBreadcrumbsOptions,\n): void {\n  const { xhr, input } = hint;\n\n  const reqSize = getBodySize(input, options.textEncoder);\n  const resSize = xhr.getResponseHeader('content-length')\n    ? parseContentSizeHeader(xhr.getResponseHeader('content-length'))\n    : getBodySize(xhr.response, options.textEncoder);\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nfunction _enrichFetchBreadcrumb(\n  breadcrumb: Breadcrumb & { data: FetchBreadcrumbData },\n  hint: FetchHint,\n  options: ExtendedNetworkBreadcrumbsOptions,\n): void {\n  const { input, response } = hint;\n\n  const body = getFetchBody(input);\n  const reqSize = getBodySize(body, options.textEncoder);\n  const resSize = response ? parseContentSizeHeader(response.headers.get('content-length')) : undefined;\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\n/** only exported for tests */\nexport function getBodySize(\n  body: RequestInit['body'],\n  textEncoder: TextEncoder | TextEncoderInternal,\n): number | undefined {\n  if (!body) {\n    return undefined;\n  }\n\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n\n    if (body instanceof FormData) {\n      // This is a bit simplified, but gives us a decent estimate\n      // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n      // @ts-ignore passing FormData to URLSearchParams actually works\n      const formDataStr = new URLSearchParams(body).toString();\n      return textEncoder.encode(formDataStr).length;\n    }\n\n    if (body instanceof Blob) {\n      return body.size;\n    }\n\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch {\n    // just return undefined\n  }\n\n  return undefined;\n}\n\n/** only exported for tests */\nexport function parseContentSizeHeader(header: string | null | undefined): number | undefined {\n  if (!header) {\n    return undefined;\n  }\n\n  const size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\n\nfunction getFetchBody(fetchArgs: unknown[] = []): RequestInit['body'] | undefined {\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n\n  return (fetchArgs[1] as RequestInit).body;\n}\n\nfunction _isXhrBreadcrumb(breadcrumb: Breadcrumb): breadcrumb is Breadcrumb & { data: XhrBreadcrumbData } {\n  return breadcrumb.category === 'xhr';\n}\n\nfunction _isFetchBreadcrumb(breadcrumb: Breadcrumb): breadcrumb is Breadcrumb & { data: FetchBreadcrumbData } {\n  return breadcrumb.category === 'fetch';\n}\n\nfunction _isXhrHint(hint?: BreadcrumbHint): hint is XhrHint {\n  return hint && hint.xhr;\n}\n\nfunction _isFetchHint(hint?: BreadcrumbHint): hint is FetchHint {\n  return hint && hint.response;\n}\n","import type { Breadcrumb, Scope } from '@sentry/types';\n\nimport type { ReplayContainer } from '../types';\nimport { createBreadcrumb } from '../util/createBreadcrumb';\nimport { addBreadcrumbEvent } from './addBreadcrumbEvent';\n\nlet _LAST_BREADCRUMB: null | Breadcrumb = null;\n\nexport const handleScopeListener: (replay: ReplayContainer) => (scope: Scope) => void =\n  (replay: ReplayContainer) =>\n  (scope: Scope): void => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleScope(scope);\n\n    if (!result) {\n      return;\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n\n/**\n * An event handler to handle scope changes.\n */\nexport function handleScope(scope: Scope): Breadcrumb | null {\n  // TODO (v8): Remove this guard. This was put in place because we introduced\n  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.\n  // For now, we'll just return null if the method doesn't exist but we should eventually\n  // get rid of this guard.\n  const newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();\n\n  // Listener can be called when breadcrumbs have not changed, so we store the\n  // reference to the last crumb and only return a crumb if it has changed\n  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {\n    return null;\n  }\n\n  _LAST_BREADCRUMB = newBreadcrumb;\n\n  if (\n    newBreadcrumb.category &&\n    (['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) ||\n      newBreadcrumb.category.startsWith('ui.'))\n  ) {\n    return null;\n  }\n\n  return createBreadcrumb(newBreadcrumb);\n}\n","import type { BaseClient } from '@sentry/core';\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport type { Client, DynamicSamplingContext } from '@sentry/types';\nimport { addInstrumentationHandler } from '@sentry/utils';\n\nimport { handleAfterSendEvent } from '../coreHandlers/handleAfterSendEvent';\nimport { handleDomListener } from '../coreHandlers/handleDom';\nimport { handleGlobalEventListener } from '../coreHandlers/handleGlobalEvent';\nimport { handleHistorySpanListener } from '../coreHandlers/handleHistory';\nimport { handleNetworkBreadcrumbs } from '../coreHandlers/handleNetworkBreadcrumbs';\nimport { handleScopeListener } from '../coreHandlers/handleScope';\nimport type { ReplayContainer } from '../types';\n\n/**\n * Add global listeners that cannot be removed.\n */\nexport function addGlobalListeners(replay: ReplayContainer): void {\n  // Listeners from core SDK //\n  const scope = getCurrentHub().getScope();\n  const client = getCurrentHub().getClient();\n\n  if (scope) {\n    scope.addScopeListener(handleScopeListener(replay));\n  }\n  addInstrumentationHandler('dom', handleDomListener(replay));\n  addInstrumentationHandler('history', handleHistorySpanListener(replay));\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  addGlobalEventProcessor(handleGlobalEventListener(replay, !hasHooks(client)));\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (hasHooks(client)) {\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', (dsc: DynamicSamplingContext) => {\n      const replayId = replay.getSessionId();\n      if (replayId) {\n        dsc.replay_id = replayId;\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasHooks(client: Client | undefined): client is BaseClient<any> {\n  return !!(client && client.on);\n}\n","import { WINDOW } from '../constants';\nimport type { AddEventResult, ReplayContainer, ReplayPerformanceEntry } from '../types';\nimport { createPerformanceSpans } from './createPerformanceSpans';\n\ntype ReplayMemoryEntry = ReplayPerformanceEntry & { data: { memory: MemoryInfo } };\n\ninterface MemoryInfo {\n  jsHeapSizeLimit: number;\n  totalJSHeapSize: number;\n  usedJSHeapSize: number;\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nexport async function addMemoryEntry(replay: ReplayContainer): Promise<Array<AddEventResult | null>> {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(\n      createPerformanceSpans(replay, [\n        // @ts-ignore memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n        createMemoryEntry(WINDOW.performance.memory),\n      ]),\n    );\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\n\nfunction createMemoryEntry(memoryEntry: MemoryInfo): ReplayMemoryEntry {\n  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize,\n      },\n    },\n  };\n}\n","import { record } from '@sentry-internal/rrweb';\nimport { browserPerformanceTimeOrigin } from '@sentry/utils';\n\nimport { WINDOW } from '../constants';\nimport type {\n  AllPerformanceEntry,\n  PerformanceNavigationTiming,\n  PerformancePaintTiming,\n  ReplayPerformanceEntry,\n} from '../types';\n\n// Map entryType -> function to normalize data for event\n// @ts-ignore TODO: entry type does not fit the create* functions entry type\nconst ENTRY_TYPES: Record<string, (entry: AllPerformanceEntry) => null | ReplayPerformanceEntry> = {\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n  // @ts-ignore TODO: entry type does not fit the create* functions entry type\n  ['largest-contentful-paint']: createLargestContentfulPaint,\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nexport function createPerformanceEntries(entries: AllPerformanceEntry[]): ReplayPerformanceEntry[] {\n  return entries.map(createPerformanceEntry).filter(Boolean) as ReplayPerformanceEntry[];\n}\n\nfunction createPerformanceEntry(entry: AllPerformanceEntry): ReplayPerformanceEntry | null {\n  if (ENTRY_TYPES[entry.entryType] === undefined) {\n    return null;\n  }\n\n  return ENTRY_TYPES[entry.entryType](entry);\n}\n\nfunction getAbsoluteTime(time: number): number {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createPaintEntry(entry: PerformancePaintTiming) {\n  const { duration, entryType, name, startTime } = entry;\n\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createNavigationEntry(entry: PerformanceNavigationTiming) {\n  // TODO: There looks to be some more interesting bits in here (domComplete, domContentLoaded)\n  const { entryType, name, duration, domComplete, startTime, transferSize, type } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      duration,\n    },\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createResourceEntry(entry: PerformanceResourceTiming) {\n  const { entryType, initiatorType, name, responseEnd, startTime, encodedBodySize, transferSize } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      encodedBodySize,\n    },\n  };\n}\n\n// TODO: type definition!\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction createLargestContentfulPaint(entry: PerformanceEntry & { size: number; element: Node }) {\n  const { entryType, startTime, size } = entry;\n\n  let startTimeOrNavigationActivation = 0;\n\n  if (WINDOW.performance) {\n    const navEntry = WINDOW.performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming & {\n      activationStart: number;\n    };\n\n    // See https://github.com/GoogleChrome/web-vitals/blob/9f11c4c6578fb4c5ee6fa4e32b9d1d756475f135/src/lib/getActivationStart.ts#L21\n    startTimeOrNavigationActivation = (navEntry && navEntry.activationStart) || 0;\n  }\n\n  // value is in ms\n  const value = Math.max(startTime - startTimeOrNavigationActivation, 0);\n  // LCP doesn't have a \"duration\", it just happens at a single point in time.\n  // But the UI expects both, so use end (in seconds) for both timestamps.\n  const end = getAbsoluteTime(startTimeOrNavigationActivation) + value / 1000;\n\n  return {\n    type: entryType,\n    name: entryType,\n    start: end,\n    end,\n    data: {\n      value, // LCP \"duration\" in ms\n      size,\n      // Not sure why this errors, Node should be correct (Argument of type 'Node' is not assignable to parameter of type 'INode')\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      nodeId: record.mirror.getId(entry.element as any),\n    },\n  };\n}\n","type DebouncedCallback = {\n  (): void | unknown;\n  flush: () => void | unknown;\n  cancel: () => void;\n};\ntype CallbackFunction = () => unknown;\ntype DebounceOptions = { maxWait?: number };\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nexport function debounce(func: CallbackFunction, wait: number, options?: DebounceOptions): DebouncedCallback {\n  let callbackReturnValue: unknown;\n\n  let timerId: ReturnType<typeof setTimeout> | undefined;\n  let maxTimerId: ReturnType<typeof setTimeout> | undefined;\n\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n\n  function invokeFunc(): unknown {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers(): void {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush(): unknown {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced(): unknown {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n","import { logger } from '@sentry/utils';\n\nimport { saveSession } from '../session/saveSession';\nimport type { RecordingEvent, ReplayContainer } from '../types';\nimport { addEvent } from './addEvent';\n\ntype RecordingEmitCallback = (event: RecordingEvent, isCheckout?: boolean) => void;\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nexport function getHandleRecordingEmit(replay: ReplayContainer): RecordingEmitCallback {\n  let hadFirstEvent = false;\n\n  return (event: RecordingEvent, _isCheckout?: boolean) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      __DEBUG_BUILD__ && logger.warn('[Replay] Received replay event after session expired.');\n\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    const isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'error' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // We need to clear existing events on a checkout, otherwise they are\n      // incremental event updates and should be appended\n      void addEvent(replay, event, isCheckout);\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (replay.session && replay.session.previousSessionId) {\n        return true;\n      }\n\n      // See note above re: session start needs to reflect the most recent\n      // checkout.\n      if (replay.recordingMode === 'error' && replay.session) {\n        const { earliestEvent } = replay.getContext();\n        if (earliestEvent) {\n          replay.session.started = earliestEvent;\n\n          if (replay.getOptions().stickySession) {\n            saveSession(replay.session);\n          }\n        }\n      }\n\n      // Flush immediately so that we do not miss the first segment, otherwise\n      // it can prevent loading on the UI. This will cause an increase in short\n      // replays (e.g. opening and closing a tab quickly), but these can be\n      // filtered on the UI.\n      if (replay.recordingMode === 'session') {\n        // We want to ensure the worker is ready, as otherwise we'd always send the first event uncompressed\n        void replay.flushImmediate();\n      }\n\n      return true;\n    });\n  };\n}\n","import type { DsnComponents, ReplayEnvelope, ReplayEvent, ReplayRecordingData } from '@sentry/types';\nimport { createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader } from '@sentry/utils';\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nexport function createReplayEnvelope(\n  replayEvent: ReplayEvent,\n  recordingData: ReplayRecordingData,\n  dsn: DsnComponents,\n  tunnel?: string,\n): ReplayEnvelope {\n  return createEnvelope<ReplayEnvelope>(\n    createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn),\n    [\n      [{ type: 'replay_event' }, replayEvent],\n      [\n        {\n          type: 'replay_recording',\n          // If string then we need to encode to UTF8, otherwise will have\n          // wrong size. TextEncoder has similar browser support to\n          // MutationObserver, although it does not accept IE11.\n          length:\n            typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length,\n        },\n        recordingData,\n      ],\n    ],\n  );\n}\n","import type { ReplayRecordingData } from '@sentry/types';\n\n/**\n * Prepare the recording data ready to be sent.\n */\nexport function prepareRecordingData({\n  recordingData,\n  headers,\n}: {\n  recordingData: ReplayRecordingData;\n  headers: Record<string, unknown>;\n}): ReplayRecordingData {\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n\n  return payloadWithSequence;\n}\n","import type { Scope } from '@sentry/core';\nimport { prepareEvent } from '@sentry/core';\nimport type { IntegrationIndex } from '@sentry/core/build/types/integration';\nimport type { Client, ReplayEvent } from '@sentry/types';\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nexport async function prepareReplayEvent({\n  client,\n  scope,\n  replayId: event_id,\n  event,\n}: {\n  client: Client & { _integrations?: IntegrationIndex };\n  scope: Scope;\n  replayId: string;\n  event: ReplayEvent;\n}): Promise<ReplayEvent | null> {\n  const integrations =\n    typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations)\n      ? Object.keys(client._integrations)\n      : undefined;\n  const preparedEvent = (await prepareEvent(\n    client.getOptions(),\n    event,\n    { event_id, integrations },\n    scope,\n  )) as ReplayEvent | null;\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata && client.getSdkMetadata();\n  const { name, version } = (metadata && metadata.sdk) || {};\n\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0',\n  };\n\n  return preparedEvent;\n}\n","import { getCurrentHub } from '@sentry/core';\nimport type { ReplayEvent, TransportMakeRequestResponse } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { REPLAY_EVENT_NAME, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { SendReplayData } from '../types';\nimport { createReplayEnvelope } from './createReplayEnvelope';\nimport { prepareRecordingData } from './prepareRecordingData';\nimport { prepareReplayEvent } from './prepareReplayEvent';\n\n/**\n * Send replay attachment using `fetch()`\n */\nexport async function sendReplayRequest({\n  recordingData,\n  replayId,\n  segmentId: segment_id,\n  includeReplayStartTimestamp,\n  eventContext,\n  timestamp,\n  session,\n  options,\n}: SendReplayData): Promise<void | TransportMakeRequestResponse> {\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id,\n    },\n  });\n\n  const { urls, errorIds, traceIds, initialTimestamp } = eventContext;\n\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const scope = hub.getScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n\n  if (!client || !scope || !transport || !dsn || !session.sampled) {\n    return;\n  }\n\n  const baseEvent: ReplayEvent = {\n    // @ts-ignore private api\n    type: REPLAY_EVENT_NAME,\n    ...(includeReplayStartTimestamp ? { replay_start_timestamp: initialTimestamp / 1000 } : {}),\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled,\n  };\n\n  const replayEvent = await prepareReplayEvent({ scope, client, replayId, event: baseEvent });\n\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    __DEBUG_BUILD__ && logger.log('An event processor returned `null`, will not send event.');\n    return;\n  }\n\n  replayEvent.contexts = {\n    ...replayEvent.contexts,\n    replay: {\n      ...(replayEvent.contexts && replayEvent.contexts.replay),\n      session_sample_rate: options.sessionSampleRate,\n      error_sample_rate: options.errorSampleRate,\n    },\n  };\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n        \"replay\": {\n          \"session_sample_rate\": 1,\n          \"error_sample_rate\": 0,\n        },\n      },\n  }\n  */\n\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n\n  let response: void | TransportMakeRequestResponse;\n\n  try {\n    response = await transport.send(envelope);\n  } catch (err) {\n    const error = new Error(UNABLE_TO_SEND_REPLAY);\n\n    try {\n      // In case browsers don't allow this property to be writable\n      // @ts-ignore This needs lib es2022 and newer\n      error.cause = err;\n    } catch {\n      // nothing to do\n    }\n    throw error;\n  }\n\n  // TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore\n  if (!response) {\n    return response;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nexport class TransportStatusCodeError extends Error {\n  public constructor(statusCode: number) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n","import { captureException, setContext } from '@sentry/core';\n\nimport { RETRY_BASE_INTERVAL, RETRY_MAX_COUNT, UNABLE_TO_SEND_REPLAY } from '../constants';\nimport type { SendReplayData } from '../types';\nimport { sendReplayRequest, TransportStatusCodeError } from './sendReplayRequest';\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nexport async function sendReplay(\n  replayData: SendReplayData,\n  retryConfig = {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL,\n  },\n): Promise<unknown> {\n  const { recordingData, options } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count,\n    });\n\n    if (__DEBUG_BUILD__ && options._experiments && options._experiments.captureExceptions) {\n      captureException(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-ignore This needs lib es2022 and newer\n        error.cause = err;\n      } catch {\n        // nothing to do\n      }\n\n      throw error;\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n\n    return await new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\n","/* eslint-disable max-lines */ // TODO: We might want to split this file up\nimport { EventType, record } from '@sentry-internal/rrweb';\nimport { captureException, getCurrentHub } from '@sentry/core';\nimport type { Breadcrumb, ReplayRecordingMode } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { ERROR_CHECKOUT_TIME, MAX_SESSION_LIFE, SESSION_IDLE_DURATION, WINDOW } from './constants';\nimport { setupPerformanceObserver } from './coreHandlers/performanceObserver';\nimport { createEventBuffer } from './eventBuffer';\nimport { getSession } from './session/getSession';\nimport { saveSession } from './session/saveSession';\nimport type {\n  AddEventResult,\n  AddUpdateCallback,\n  AllPerformanceEntry,\n  EventBuffer,\n  InternalEventContext,\n  PopEventContext,\n  RecordingOptions,\n  ReplayContainer as ReplayContainerInterface,\n  ReplayPluginOptions,\n  Session,\n  Timeouts,\n} from './types';\nimport { addEvent } from './util/addEvent';\nimport { addGlobalListeners } from './util/addGlobalListeners';\nimport { addMemoryEntry } from './util/addMemoryEntry';\nimport { createBreadcrumb } from './util/createBreadcrumb';\nimport { createPerformanceEntries } from './util/createPerformanceEntries';\nimport { createPerformanceSpans } from './util/createPerformanceSpans';\nimport { debounce } from './util/debounce';\nimport { getHandleRecordingEmit } from './util/handleRecordingEmit';\nimport { isExpired } from './util/isExpired';\nimport { isSessionExpired } from './util/isSessionExpired';\nimport { sendReplay } from './util/sendReplay';\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nexport class ReplayContainer implements ReplayContainerInterface {\n  public eventBuffer: EventBuffer | null = null;\n\n  /**\n   * List of PerformanceEntry from PerformanceObserver\n   */\n  public performanceEvents: AllPerformanceEntry[] = [];\n\n  public session: Session | undefined;\n\n  /**\n   * Recording can happen in one of two modes:\n   * * session: Record the whole session, sending it continuously\n   * * error: Always keep the last 60s of recording, and when an error occurs, send it immediately\n   */\n  public recordingMode: ReplayRecordingMode = 'session';\n\n  /**\n   * These are here so we can overwrite them in tests etc.\n   * @hidden\n   */\n  public readonly timeouts: Timeouts = {\n    sessionIdle: SESSION_IDLE_DURATION,\n    maxSessionLife: MAX_SESSION_LIFE,\n  } as const;\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n  private readonly _recordingOptions: RecordingOptions;\n\n  private readonly _options: ReplayPluginOptions;\n\n  private _performanceObserver: PerformanceObserver | null = null;\n\n  private _debouncedFlush: ReturnType<typeof debounce>;\n  private _flushLock: Promise<unknown> | null = null;\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n  private _lastActivity: number = Date.now();\n\n  /**\n   * Is the integration currently active?\n   */\n  private _isEnabled: boolean = false;\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n  private _isPaused: boolean = false;\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n  private _hasInitializedCoreListeners: boolean = false;\n\n  /**\n   * Function to stop recording\n   */\n  private _stopRecording: ReturnType<typeof record> | null = null;\n\n  private _context: InternalEventContext = {\n    errorIds: new Set(),\n    traceIds: new Set(),\n    urls: [],\n    earliestEvent: null,\n    initialTimestamp: Date.now(),\n    initialUrl: '',\n  };\n\n  public constructor({\n    options,\n    recordingOptions,\n  }: {\n    options: ReplayPluginOptions;\n    recordingOptions: RecordingOptions;\n  }) {\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay,\n    });\n  }\n\n  /** Get the event context. */\n  public getContext(): InternalEventContext {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n  public isEnabled(): boolean {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n  public isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /** Get the replay integration options. */\n  public getOptions(): ReplayPluginOptions {\n    return this._options;\n  }\n\n  /**\n   * Initializes the plugin.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n  public start(): void {\n    this.setInitialState();\n\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n\n    // If there is no session, then something bad has happened - can't continue\n    if (!this.session) {\n      this._handleException(new Error('No session found'));\n      return;\n    }\n\n    if (!this.session.sampled) {\n      // If session was not sampled, then we do not initialize the integration at all.\n      return;\n    }\n\n    // If session is sampled for errors, then we need to set the recordingMode\n    // to 'error', which will configure recording with different options.\n    if (this.session.sampled === 'error') {\n      this.recordingMode = 'error';\n    }\n\n    // setup() is generally called on page load or manually - in both cases we\n    // should treat it as an activity\n    this._updateSessionActivity();\n\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression,\n    });\n\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n\n    this.startRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n  public startRecording(): void {\n    try {\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'error' && { checkoutEveryNms: ERROR_CHECKOUT_TIME }),\n        emit: getHandleRecordingEmit(this),\n        onMutation: (mutations: unknown[]) => {\n          if (this._options._experiments.captureMutationSize) {\n            const count = mutations.length;\n\n            if (count > 500) {\n              const breadcrumb = createBreadcrumb({\n                category: 'replay.mutations',\n                data: {\n                  count,\n                },\n              });\n              this._createCustomBreadcrumb(breadcrumb);\n            }\n          }\n          // `true` means we use the regular mutation handling by rrweb\n          return true;\n        },\n      });\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   * Returns true if it was stopped, else false.\n   */\n  public stopRecording(): boolean {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n        return true;\n      }\n\n      return false;\n    } catch (err) {\n      this._handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  public stop(reason?: string): void {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    try {\n      if (__DEBUG_BUILD__) {\n        const msg = `[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`;\n\n        // When `traceInternals` is enabled, we want to log this to the console\n        // Else, use the regular debug output\n        // eslint-disable-next-line\n        const log = this.getOptions()._experiments.traceInternals ? console.warn : logger.log;\n        log(msg);\n      }\n\n      this._isEnabled = false;\n      this._removeListeners();\n      this.stopRecording();\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n      this._debouncedFlush.cancel();\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n  public pause(): void {\n    this._isPaused = true;\n    this.stopRecording();\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n  public resume(): void {\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n\n    this._isPaused = false;\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n  public addUpdate(cb: AddUpdateCallback): void {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'error'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'error') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n  public triggerUserActivity(): void {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._loadAndCheckSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n\n    this._updateSessionActivity();\n  }\n\n  /**\n   *\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of mulitple flushes happening closely together.\n   */\n  public flushImmediate(): Promise<void> {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush() as Promise<void>;\n  }\n\n  /** Get the current sesion (=replay) ID */\n  public getSessionId(): string | undefined {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n  public checkAndHandleExpiredSession(): boolean | void {\n    const oldSessionId = this.getSessionId();\n\n    // Prevent starting a new session if the last user activity is older than\n    // SESSION_IDLE_DURATION. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (\n      this._lastActivity &&\n      isExpired(this._lastActivity, this.timeouts.sessionIdle) &&\n      this.session &&\n      this.session.sampled === 'session'\n    ) {\n      // Pause recording only for session-based replays. Otherwise, resuming\n      // will create a new replay and will conflict with users who only choose\n      // to record error-based replays only. (e.g. the resumed replay will not\n      // contain a reference to an error)\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._loadAndCheckSession()) {\n      return;\n    }\n\n    // Session was expired if session ids do not match\n    const expired = oldSessionId !== this.getSessionId();\n\n    if (!expired) {\n      return true;\n    }\n\n    // Session is expired, trigger a full snapshot (which will create a new session)\n    this._triggerFullSnapshot();\n\n    return false;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n  public setInitialState(): void {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n\n    this.performanceEvents = [];\n\n    // Reset _context as well\n    this._clearContext();\n\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = Date.now();\n    this._context.urls.push(url);\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n  private _handleException(error: unknown): void {\n    __DEBUG_BUILD__ && logger.error('[Replay]', error);\n\n    if (__DEBUG_BUILD__ && this._options._experiments && this._options._experiments.captureExceptions) {\n      captureException(error);\n    }\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   * Returns false if session is not recorded.\n   */\n  private _loadAndCheckSession(): boolean {\n    const { type, session } = getSession({\n      timeouts: this.timeouts,\n      stickySession: Boolean(this._options.stickySession),\n      currentSession: this.session,\n      sessionSampleRate: this._options.sessionSampleRate,\n      errorSampleRate: this._options.errorSampleRate,\n    });\n\n    // If session was newly created (i.e. was not loaded from storage), then\n    // enable flag to create the root replay\n    if (type === 'new') {\n      this.setInitialState();\n    }\n\n    const currentSessionId = this.getSessionId();\n    if (session.id !== currentSessionId) {\n      session.previousSessionId = currentSessionId;\n    }\n\n    this.session = session;\n\n    if (!this.session.sampled) {\n      this.stop('session unsampled');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n  private _addListeners(): void {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n\n    // PerformanceObserver //\n    if (!('PerformanceObserver' in WINDOW)) {\n      return;\n    }\n\n    this._performanceObserver = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n  private _removeListeners(): void {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n\n      if (this._performanceObserver) {\n        this._performanceObserver.disconnect();\n        this._performanceObserver = null;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n  private _handleVisibilityChange: () => void = () => {\n    if (WINDOW.document.visibilityState === 'visible') {\n      this._doChangeToForegroundTasks();\n    } else {\n      this._doChangeToBackgroundTasks();\n    }\n  };\n\n  /**\n   * Handle when page is blurred\n   */\n  private _handleWindowBlur: () => void = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.blur',\n    });\n\n    // Do not count blur as a user action -- it's part of the process of them\n    // leaving the page\n    this._doChangeToBackgroundTasks(breadcrumb);\n  };\n\n  /**\n   * Handle when page is focused\n   */\n  private _handleWindowFocus: () => void = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.focus',\n    });\n\n    // Do not count focus as a user action -- instead wait until they focus and\n    // interactive with page\n    this._doChangeToForegroundTasks(breadcrumb);\n  };\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n  private _doChangeToBackgroundTasks(breadcrumb?: Breadcrumb): void {\n    if (!this.session) {\n      return;\n    }\n\n    const expired = isSessionExpired(this.session, this.timeouts);\n\n    if (breadcrumb && !expired) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    this._conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n  private _doChangeToForegroundTasks(breadcrumb?: Breadcrumb): void {\n    if (!this.session) {\n      return;\n    }\n\n    const isSessionActive = this.checkAndHandleExpiredSession();\n\n    if (!isSessionActive) {\n      // If the user has come back to the page within SESSION_IDLE_DURATION\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      __DEBUG_BUILD__ && logger.log('[Replay] Document has become active, but session has expired');\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Trigger rrweb to take a full snapshot which will cause this plugin to\n   * create a new Replay event.\n   */\n  private _triggerFullSnapshot(): void {\n    try {\n      __DEBUG_BUILD__ && logger.log('[Replay] Taking full rrweb snapshot');\n      record.takeFullSnapshot(true);\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n  private _updateUserActivity(_lastActivity: number = Date.now()): void {\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n  private _updateSessionActivity(_lastActivity: number = Date.now()): void {\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n  private _createCustomBreadcrumb(breadcrumb: Breadcrumb): void {\n    this.addUpdate(() => {\n      void addEvent(this, {\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb,\n        },\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEvents`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n  private _addPerformanceEntries(): Promise<Array<AddEventResult | null>> {\n    // Copy and reset entries before processing\n    const entries = [...this.performanceEvents];\n    this.performanceEvents = [];\n\n    return Promise.all(createPerformanceSpans(this, createPerformanceEntries(entries)));\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n  private _conditionalFlush(): void {\n    if (this.recordingMode === 'error') {\n      return;\n    }\n\n    void this.flushImmediate();\n  }\n\n  /**\n   * Clear _context\n   */\n  private _clearContext(): void {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n    this._context.earliestEvent = null;\n  }\n\n  /**\n   * Return and clear _context\n   */\n  private _popEventContext(): PopEventContext {\n    if (this._context.earliestEvent && this._context.earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = this._context.earliestEvent;\n    }\n\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds).filter(Boolean),\n      traceIds: Array.from(this._context.traceIds).filter(Boolean),\n      urls: this._context.urls,\n    };\n\n    this._clearContext();\n\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n  private async _runFlush(): Promise<void> {\n    if (!this.session || !this.eventBuffer) {\n      __DEBUG_BUILD__ && logger.error('[Replay] No session or eventBuffer found to flush.');\n      return;\n    }\n\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n\n    try {\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n\n      // NOTE: Copy values from instance members, as it's possible they could\n      // change before the flush finishes.\n      const replayId = this.session.id;\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        includeReplayStartTimestamp: segmentId === 0,\n        eventContext,\n        session: this.session,\n        options: this.getOptions(),\n        timestamp: Date.now(),\n      });\n    } catch (err) {\n      this._handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      this.stop('sendReplay');\n\n      const client = getCurrentHub().getClient();\n\n      if (client) {\n        client.recordDroppedEvent('send_error', 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n  private _flush: () => Promise<void> = async () => {\n    if (!this._isEnabled) {\n      // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n      return;\n    }\n\n    if (!this.checkAndHandleExpiredSession()) {\n      __DEBUG_BUILD__ && logger.error('[Replay] Attempting to finish replay event after session expired.');\n      return;\n    }\n\n    if (!this.session) {\n      __DEBUG_BUILD__ && logger.error('[Replay] No session found to flush.');\n      return;\n    }\n\n    // A flush is about to happen, cancel any queued flushes\n    this._debouncedFlush.cancel();\n\n    // this._flushLock acts as a lock so that future calls to `_flush()`\n    // will be blocked until this promise resolves\n    if (!this._flushLock) {\n      this._flushLock = this._runFlush();\n      await this._flushLock;\n      this._flushLock = null;\n      return;\n    }\n\n    // Wait for previous flush to finish, then call the debounced `_flush()`.\n    // It's possible there are other flush requests queued and waiting for it\n    // to resolve. We want to reduce all outstanding requests (as well as any\n    // new flush requests that occur within a second of the locked flush\n    // completing) into a single flush.\n\n    try {\n      await this._flushLock;\n    } catch (err) {\n      __DEBUG_BUILD__ && logger.error(err);\n    } finally {\n      this._debouncedFlush();\n    }\n  };\n\n  /** Save the session, if it is sticky */\n  private _maybeSaveSession(): void {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n}\n","import type { DeprecatedPrivacyOptions, ReplayIntegrationPrivacyOptions } from '../types';\n\ntype GetPrivacyOptions = Required<Omit<ReplayIntegrationPrivacyOptions, 'maskFn'>> &\n  Omit<DeprecatedPrivacyOptions, 'maskInputOptions'>;\ninterface GetPrivacyReturn {\n  maskTextSelector: string;\n  unmaskTextSelector: string;\n  maskInputSelector: string;\n  unmaskInputSelector: string;\n  blockSelector: string;\n  unblockSelector: string;\n  ignoreSelector: string;\n\n  blockClass?: RegExp;\n  maskTextClass?: RegExp;\n}\n\nfunction getOption(\n  selectors: string[],\n  defaultSelectors: string[],\n  deprecatedClassOption?: string | RegExp,\n  deprecatedSelectorOption?: string,\n): string {\n  const deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];\n\n  const allSelectors = [\n    ...selectors,\n    // @deprecated\n    ...deprecatedSelectors,\n\n    // sentry defaults\n    ...defaultSelectors,\n  ];\n\n  // @deprecated\n  if (typeof deprecatedClassOption !== 'undefined') {\n    // NOTE: No support for RegExp\n    if (typeof deprecatedClassOption === 'string') {\n      allSelectors.push(`.${deprecatedClassOption}`);\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.',\n    );\n  }\n\n  return allSelectors.join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nexport function getPrivacyOptions({\n  mask,\n  unmask,\n  block,\n  unblock,\n  ignore,\n\n  // eslint-disable-next-line deprecation/deprecation\n  blockClass,\n  // eslint-disable-next-line deprecation/deprecation\n  blockSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextClass,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  ignoreClass,\n}: GetPrivacyOptions): GetPrivacyReturn {\n  const defaultBlockedElements = ['base[href=\"/\"]'];\n\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);\n  const unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);\n\n  const options: GetPrivacyReturn = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n    maskInputSelector: maskSelector,\n    unmaskInputSelector: unmaskSelector,\n\n    blockSelector: getOption(\n      block,\n      ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements],\n      blockClass,\n      blockSelector,\n    ),\n    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]'], ignoreClass),\n  };\n\n  if (blockClass instanceof RegExp) {\n    options.blockClass = blockClass;\n  }\n\n  if (maskTextClass instanceof RegExp) {\n    options.maskTextClass = maskTextClass;\n  }\n\n  return options;\n}\n","import { isNodeEnv } from '@sentry/utils';\n\n/**\n * Returns true if we are in the browser.\n */\nexport function isBrowser(): boolean {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof window !== 'undefined' && (!isNodeEnv() || isElectronNodeRenderer());\n}\n\ntype ElectronProcess = { type?: string };\n\n// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them\nfunction isElectronNodeRenderer(): boolean {\n  return typeof process !== 'undefined' && (process as ElectronProcess).type === 'renderer';\n}\n","import { getCurrentHub } from '@sentry/core';\nimport type { BrowserClientReplayOptions, Integration } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { DEFAULT_FLUSH_MAX_DELAY, DEFAULT_FLUSH_MIN_DELAY } from './constants';\nimport { ReplayContainer } from './replay';\nimport type { RecordingOptions, ReplayConfiguration, ReplayPluginOptions } from './types';\nimport { getPrivacyOptions } from './util/getPrivacyOptions';\nimport { isBrowser } from './util/isBrowser';\n\nconst MEDIA_SELECTORS =\n  'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\n\nlet _initialized = false;\n\ntype InitialReplayPluginOptions = Omit<ReplayPluginOptions, 'sessionSampleRate' | 'errorSampleRate'> &\n  Partial<Pick<ReplayPluginOptions, 'sessionSampleRate' | 'errorSampleRate'>>;\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n */\nexport class Replay implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Replay';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Replay.id;\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n  private readonly _recordingOptions: RecordingOptions;\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n  private readonly _initialOptions: InitialReplayPluginOptions;\n\n  private _replay?: ReplayContainer;\n\n  public constructor({\n    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n    stickySession = true,\n    useCompression = true,\n    _experiments = {},\n    sessionSampleRate,\n    errorSampleRate,\n    maskAllText = true,\n    maskAllInputs = true,\n    blockAllMedia = true,\n\n    mask = [],\n    unmask = [],\n    block = [],\n    unblock = [],\n    ignore = [],\n    maskFn,\n\n    // eslint-disable-next-line deprecation/deprecation\n    blockClass,\n    // eslint-disable-next-line deprecation/deprecation\n    blockSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    maskInputOptions,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextClass,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    ignoreClass,\n  }: ReplayConfiguration = {}) {\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: { ...(maskInputOptions || {}), password: true },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n\n      ...getPrivacyOptions({\n        mask,\n        unmask,\n        block,\n        unblock,\n        ignore,\n        blockClass,\n        blockSelector,\n        maskTextClass,\n        maskTextSelector,\n        ignoreClass,\n      }),\n\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true,\n    };\n\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      stickySession,\n      sessionSampleRate,\n      errorSampleRate,\n      useCompression,\n      blockAllMedia,\n      _experiments,\n    };\n\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`sessionSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysSessionSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`,\n      );\n\n      this._initialOptions.sessionSampleRate = sessionSampleRate;\n    }\n\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`errorSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysOnErrorSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`,\n      );\n\n      this._initialOptions.errorSampleRate = errorSampleRate;\n    }\n\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector\n        ? MEDIA_SELECTORS\n        : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n  protected get _isInitialized(): boolean {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n  protected set _isInitialized(value: boolean) {\n    _initialized = value;\n  }\n\n  /**\n   * We previously used to create a transaction in `setupOnce` and it would\n   * potentially create a transaction before some native SDK integrations have run\n   * and applied their own global event processor. An example is:\n   * https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n   *\n   * So we call `replay.setup` in next event loop as a workaround to wait for other\n   * global event processors to finish. This is no longer needed, but keeping it\n   * here to avoid any future issues.\n   */\n  public setupOnce(): void {\n    if (!isBrowser()) {\n      return;\n    }\n\n    this._setup();\n\n    // XXX: See method comments above\n    setTimeout(() => this.start());\n  }\n\n  /**\n   * Initializes the plugin.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n  public start(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.start();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n  public stop(): void {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.stop();\n  }\n\n  /**\n   * Immediately send all pending events.\n   */\n  public flush(): Promise<void> | void {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n\n    return this._replay.flushImmediate();\n  }\n\n  /** Setup the integration. */\n  private _setup(): void {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions,\n    });\n  }\n}\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions: InitialReplayPluginOptions): ReplayPluginOptions {\n  const client = getCurrentHub().getClient();\n  const opt = client && (client.getOptions() as BrowserClientReplayOptions);\n\n  const finalOptions = { sessionSampleRate: 0, errorSampleRate: 0, ...dropUndefinedKeys(initialOptions) };\n\n  if (!opt) {\n    // eslint-disable-next-line no-console\n    console.warn('SDK client is not available.');\n    return finalOptions;\n  }\n\n  if (\n    initialOptions.sessionSampleRate == null && // TODO remove once deprecated rates are removed\n    initialOptions.errorSampleRate == null && // TODO remove once deprecated rates are removed\n    opt.replaysSessionSampleRate == null &&\n    opt.replaysOnErrorSampleRate == null\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.',\n    );\n  }\n\n  if (typeof opt.replaysSessionSampleRate === 'number') {\n    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;\n  }\n\n  if (typeof opt.replaysOnErrorSampleRate === 'number') {\n    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;\n  }\n\n  return finalOptions;\n}\n"]},"metadata":{},"sourceType":"module"}