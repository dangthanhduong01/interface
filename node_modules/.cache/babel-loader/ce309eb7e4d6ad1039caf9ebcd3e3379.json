{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst reportedMetricIDs = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nconst onLCP = onReport => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report;\n  const handleEntries = entries => {\n    const lastEntry = entries[entries.length - 1];\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n  const po = observe('largest-contentful-paint', handleEntries);\n  if (po) {\n    report = bindReporter(onReport, metric);\n    const stopListening = () => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords());\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, {\n        once: true,\n        capture: true\n      });\n    });\n    onHidden(stopListening, true);\n    return stopListening;\n  }\n  return;\n};\nexport { onLCP };","map":{"version":3,"sources":["../../../../src/browser/web-vitals/getLCP.ts"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA,MAAA,iBAAA,GAAA,CAAA,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,KAAA,GAAA,QAAA,IAAA;EACA,MAAA,iBAAA,GAAA,oBAAA,EAAA;EACA,MAAA,MAAA,GAAA,UAAA,CAAA,KAAA,CAAA;EACA,IAAA,MAAA;EAEA,MAAA,aAAA,GAAA,OAAA,IAAA;IACA,MAAA,SAAA,GAAA,OAAA,CAAA,OAAA,CAAA,MAAA,GAAA,CAAA,CAAA;IACA,IAAA,SAAA,EAAA;MACA;MACA;MACA;MACA;MACA,MAAA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,SAAA,CAAA,SAAA,GAAA,kBAAA,EAAA,EAAA,CAAA,CAAA;;MAEA;MACA,IAAA,KAAA,GAAA,iBAAA,CAAA,eAAA,EAAA;QACA,MAAA,CAAA,KAAA,GAAA,KAAA;QACA,MAAA,CAAA,OAAA,GAAA,CAAA,SAAA,CAAA;QACA,MAAA,EAAA;MACA;IACA;EACA,CAAA;EAEA,MAAA,EAAA,GAAA,OAAA,CAAA,0BAAA,EAAA,aAAA,CAAA;EAEA,IAAA,EAAA,EAAA;IACA,MAAA,GAAA,YAAA,CAAA,QAAA,EAAA,MAAA,CAAA;IAEA,MAAA,aAAA,GAAA,MAAA;MACA,IAAA,CAAA,iBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,EAAA;QACA,aAAA,CAAA,EAAA,CAAA,WAAA,EAAA,CAAA;QACA,EAAA,CAAA,UAAA,EAAA;QACA,iBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,GAAA,IAAA;QACA,MAAA,CAAA,IAAA,CAAA;MACA;IACA,CAAA;;IAEA;IACA;IACA;IACA,CAAA,SAAA,EAAA,OAAA,CAAA,CAAA,OAAA,CAAA,IAAA,IAAA;MACA,gBAAA,CAAA,IAAA,EAAA,aAAA,EAAA;QAAA,IAAA,EAAA,IAAA;QAAA,OAAA,EAAA;MAAA,CAAA,CAAA;IACA,CAAA,CAAA;IAEA,QAAA,CAAA,aAAA,EAAA,IAAA,CAAA;IAEA,OAAA,aAAA;EACA;EAEA;AACA,CAAA","sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport type { LCPMetric, ReportCallback, StopListening } from './types';\n\nconst reportedMetricIDs: Record<string, boolean> = {};\n\n/**\n * Calculates the [LCP](https://web.dev/lcp/) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n */\nexport const onLCP = (onReport: ReportCallback): StopListening | undefined => {\n  const visibilityWatcher = getVisibilityWatcher();\n  const metric = initMetric('LCP');\n  let report: ReturnType<typeof bindReporter>;\n\n  const handleEntries = (entries: LCPMetric['entries']): void => {\n    const lastEntry = entries[entries.length - 1] as LargestContentfulPaint;\n    if (lastEntry) {\n      // The startTime attribute returns the value of the renderTime if it is\n      // not 0, and the value of the loadTime otherwise. The activationStart\n      // reference is used because LCP should be relative to page activation\n      // rather than navigation start if the page was prerendered.\n      const value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n\n      // Only report if the page wasn't hidden prior to LCP.\n      if (value < visibilityWatcher.firstHiddenTime) {\n        metric.value = value;\n        metric.entries = [lastEntry];\n        report();\n      }\n    }\n  };\n\n  const po = observe('largest-contentful-paint', handleEntries);\n\n  if (po) {\n    report = bindReporter(onReport, metric);\n\n    const stopListening = (): void => {\n      if (!reportedMetricIDs[metric.id]) {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        reportedMetricIDs[metric.id] = true;\n        report(true);\n      }\n    };\n\n    // Stop listening after input. Note: while scrolling is an input that\n    // stop LCP observation, it's unreliable since it can be programmatically\n    // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n    ['keydown', 'click'].forEach(type => {\n      addEventListener(type, stopListening, { once: true, capture: true });\n    });\n\n    onHidden(stopListening, true);\n\n    return stopListening;\n  }\n\n  return;\n};\n"]},"metadata":{},"sourceType":"module"}