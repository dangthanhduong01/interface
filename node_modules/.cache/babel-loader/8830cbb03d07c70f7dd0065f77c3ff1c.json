{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql';\nimport gql from 'graphql-tag';\nimport { useCallback, useMemo } from 'react';\nimport { useNftActivityQuery } from '../__generated__/types-and-hooks';\ngql`\n  query NftActivity($filter: NftActivityFilterInput, $after: String, $first: Int) {\n    nftActivity(filter: $filter, after: $after, first: $first) {\n      edges {\n        node {\n          id\n          address\n          tokenId\n          asset {\n            id\n            metadataUrl\n            image {\n              id\n              url\n            }\n            smallImage {\n              id\n              url\n            }\n            name\n            rarities {\n              id\n              provider\n              rank\n              score\n            }\n            suspiciousFlag\n            nftContract {\n              id\n              standard\n            }\n            collection {\n              id\n              image {\n                id\n                url\n              }\n            }\n          }\n          type\n          marketplace\n          fromAddress\n          toAddress\n          transactionHash\n          price {\n            id\n            value\n          }\n          orderStatus\n          quantity\n          url\n          timestamp\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`;\nexport function useNftActivity(filter, first, fetchPolicy) {\n  _s();\n  var _data$nftActivity, _data$nftActivity$pag;\n  const isNftGraphqlEnabled = useNftGraphqlEnabled();\n  const {\n    data,\n    loading,\n    fetchMore,\n    error\n  } = useNftActivityQuery({\n    variables: {\n      filter,\n      first\n    },\n    skip: !isNftGraphqlEnabled,\n    fetchPolicy\n  });\n  const hasNext = data === null || data === void 0 ? void 0 : (_data$nftActivity = data.nftActivity) === null || _data$nftActivity === void 0 ? void 0 : (_data$nftActivity$pag = _data$nftActivity.pageInfo) === null || _data$nftActivity$pag === void 0 ? void 0 : _data$nftActivity$pag.hasNextPage;\n  const loadMore = useCallback(() => {\n    var _data$nftActivity2, _data$nftActivity2$pa;\n    return fetchMore({\n      variables: {\n        after: data === null || data === void 0 ? void 0 : (_data$nftActivity2 = data.nftActivity) === null || _data$nftActivity2 === void 0 ? void 0 : (_data$nftActivity2$pa = _data$nftActivity2.pageInfo) === null || _data$nftActivity2$pa === void 0 ? void 0 : _data$nftActivity2$pa.endCursor\n      }\n    });\n  }, [data, fetchMore]);\n  const nftActivity = useMemo(() => {\n    var _data$nftActivity3, _data$nftActivity3$ed;\n    return data === null || data === void 0 ? void 0 : (_data$nftActivity3 = data.nftActivity) === null || _data$nftActivity3 === void 0 ? void 0 : (_data$nftActivity3$ed = _data$nftActivity3.edges) === null || _data$nftActivity3$ed === void 0 ? void 0 : _data$nftActivity3$ed.map(queryActivity => {\n      var _asset$image, _asset$smallImage, _asset$rarities, _asset$nftContract, _activity$price, _asset$collection, _asset$collection$ima;\n      const activity = queryActivity === null || queryActivity === void 0 ? void 0 : queryActivity.node;\n      const asset = activity === null || activity === void 0 ? void 0 : activity.asset;\n      return {\n        collectionAddress: activity.address,\n        tokenId: activity.tokenId,\n        tokenMetadata: {\n          name: asset === null || asset === void 0 ? void 0 : asset.name,\n          imageUrl: asset === null || asset === void 0 ? void 0 : (_asset$image = asset.image) === null || _asset$image === void 0 ? void 0 : _asset$image.url,\n          smallImageUrl: asset === null || asset === void 0 ? void 0 : (_asset$smallImage = asset.smallImage) === null || _asset$smallImage === void 0 ? void 0 : _asset$smallImage.url,\n          metadataUrl: asset === null || asset === void 0 ? void 0 : asset.metadataUrl,\n          rarity: {\n            primaryProvider: 'Rarity Sniper',\n            // TODO update when backend adds more providers\n            providers: asset === null || asset === void 0 ? void 0 : (_asset$rarities = asset.rarities) === null || _asset$rarities === void 0 ? void 0 : _asset$rarities.map(rarity => {\n              return {\n                ...rarity,\n                provider: 'Rarity Sniper'\n              };\n            })\n          },\n          suspiciousFlag: asset === null || asset === void 0 ? void 0 : asset.suspiciousFlag,\n          standard: asset === null || asset === void 0 ? void 0 : (_asset$nftContract = asset.nftContract) === null || _asset$nftContract === void 0 ? void 0 : _asset$nftContract.standard\n        },\n        eventType: activity.type,\n        marketplace: activity.marketplace,\n        fromAddress: activity.fromAddress,\n        toAddress: activity.toAddress,\n        transactionHash: activity.transactionHash,\n        orderStatus: activity.orderStatus,\n        price: (_activity$price = activity.price) === null || _activity$price === void 0 ? void 0 : _activity$price.value.toString(),\n        symbol: asset === null || asset === void 0 ? void 0 : (_asset$collection = asset.collection) === null || _asset$collection === void 0 ? void 0 : (_asset$collection$ima = _asset$collection.image) === null || _asset$collection$ima === void 0 ? void 0 : _asset$collection$ima.url,\n        quantity: activity.quantity,\n        url: activity.url,\n        eventTimestamp: activity.timestamp * 1000\n      };\n    });\n  }, [data]);\n  return useMemo(() => ({\n    nftActivity,\n    hasNext,\n    loadMore,\n    loading,\n    error\n  }), [hasNext, loadMore, loading, nftActivity, error]);\n}\n_s(useNftActivity, \"iGcl48voun2jjjnL9I8/+z4iAKU=\", false, function () {\n  return [useNftGraphqlEnabled, useNftActivityQuery];\n});","map":{"version":3,"names":["useNftGraphqlEnabled","gql","useCallback","useMemo","useNftActivityQuery","useNftActivity","filter","first","fetchPolicy","isNftGraphqlEnabled","data","loading","fetchMore","error","variables","skip","hasNext","nftActivity","pageInfo","hasNextPage","loadMore","after","endCursor","edges","map","queryActivity","activity","node","asset","collectionAddress","address","tokenId","tokenMetadata","name","imageUrl","image","url","smallImageUrl","smallImage","metadataUrl","rarity","primaryProvider","providers","rarities","provider","suspiciousFlag","standard","nftContract","eventType","type","marketplace","fromAddress","toAddress","transactionHash","orderStatus","price","value","toString","symbol","collection","quantity","eventTimestamp","timestamp"],"sources":["/home/diep/freelance/interface/src/graphql/data/nft/NftActivity.ts"],"sourcesContent":["import { WatchQueryFetchPolicy } from '@apollo/client'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport gql from 'graphql-tag'\nimport { ActivityEvent } from 'nft/types'\nimport { useCallback, useMemo } from 'react'\n\nimport { NftActivityFilterInput, useNftActivityQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query NftActivity($filter: NftActivityFilterInput, $after: String, $first: Int) {\n    nftActivity(filter: $filter, after: $after, first: $first) {\n      edges {\n        node {\n          id\n          address\n          tokenId\n          asset {\n            id\n            metadataUrl\n            image {\n              id\n              url\n            }\n            smallImage {\n              id\n              url\n            }\n            name\n            rarities {\n              id\n              provider\n              rank\n              score\n            }\n            suspiciousFlag\n            nftContract {\n              id\n              standard\n            }\n            collection {\n              id\n              image {\n                id\n                url\n              }\n            }\n          }\n          type\n          marketplace\n          fromAddress\n          toAddress\n          transactionHash\n          price {\n            id\n            value\n          }\n          orderStatus\n          quantity\n          url\n          timestamp\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\nexport function useNftActivity(filter: NftActivityFilterInput, first?: number, fetchPolicy?: WatchQueryFetchPolicy) {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const { data, loading, fetchMore, error } = useNftActivityQuery({\n    variables: {\n      filter,\n      first,\n    },\n    skip: !isNftGraphqlEnabled,\n    fetchPolicy,\n  })\n\n  const hasNext = data?.nftActivity?.pageInfo?.hasNextPage\n  const loadMore = useCallback(\n    () =>\n      fetchMore({\n        variables: {\n          after: data?.nftActivity?.pageInfo?.endCursor,\n        },\n      }),\n    [data, fetchMore]\n  )\n\n  const nftActivity: ActivityEvent[] | undefined = useMemo(\n    () =>\n      data?.nftActivity?.edges?.map((queryActivity) => {\n        const activity = queryActivity?.node\n        const asset = activity?.asset\n        return {\n          collectionAddress: activity.address,\n          tokenId: activity.tokenId,\n          tokenMetadata: {\n            name: asset?.name,\n            imageUrl: asset?.image?.url,\n            smallImageUrl: asset?.smallImage?.url,\n            metadataUrl: asset?.metadataUrl,\n            rarity: {\n              primaryProvider: 'Rarity Sniper', // TODO update when backend adds more providers\n              providers: asset?.rarities?.map((rarity) => {\n                return {\n                  ...rarity,\n                  provider: 'Rarity Sniper',\n                }\n              }),\n            },\n            suspiciousFlag: asset?.suspiciousFlag,\n            standard: asset?.nftContract?.standard,\n          },\n          eventType: activity.type,\n          marketplace: activity.marketplace,\n          fromAddress: activity.fromAddress,\n          toAddress: activity.toAddress,\n          transactionHash: activity.transactionHash,\n          orderStatus: activity.orderStatus,\n          price: activity.price?.value.toString(),\n          symbol: asset?.collection?.image?.url,\n          quantity: activity.quantity,\n          url: activity.url,\n          eventTimestamp: activity.timestamp * 1000,\n        }\n      }),\n    [data]\n  )\n\n  return useMemo(\n    () => ({ nftActivity, hasNext, loadMore, loading, error }),\n    [hasNext, loadMore, loading, nftActivity, error]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}