{"ast":null,"code":"import { makePromiseBuffer, forEachEnvelopeItem, envelopeItemTypeToDataCategory, isRateLimited, resolvedSyncPromise, createEnvelope, SentryError, logger, serializeEnvelope, updateRateLimits } from '@sentry/utils';\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(options, makeRequest) {\n  let buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE);\n  let rateLimits = {};\n  const flush = timeout => buffer.drain(timeout);\n  function send(envelope) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = reason => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n    const requestTask = () => makeRequest({\n      body: serializeEnvelope(filteredEnvelope, options.textEncoder)\n    }).then(response => {\n      // We don't want to throw on NOK responses, but we want to at least log them\n      if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n      }\n      rateLimits = updateRateLimits(rateLimits, response);\n      return response;\n    }, error => {\n      recordEnvelopeLoss('network_error');\n      throw error;\n    });\n    return buffer.add(requestTask).then(result => result, error => {\n      if (error instanceof SentryError) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Skipped sending event because buffer is full.');\n        recordEnvelopeLoss('queue_overflow');\n        return resolvedSyncPromise();\n      } else {\n        throw error;\n      }\n    });\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n  return {\n    send,\n    flush\n  };\n}\nfunction getEventForEnvelopeItem(item, type) {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n  return Array.isArray(item) ? item[1] : undefined;\n}\nexport { DEFAULT_TRANSPORT_BUFFER_SIZE, createTransport };","map":{"version":3,"sources":["../../../src/transports/base.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Envelope,\n  EnvelopeItem,\n  EnvelopeItemType,\n  Event,\n  EventDropReason,\n  EventItem,\n  InternalBaseTransportOptions,\n  Transport,\n  TransportMakeRequestResponse,\n  TransportRequestExecutor,\n} from '@sentry/types';\nimport type { PromiseBuffer, RateLimits } from '@sentry/utils';\nimport {\n  createEnvelope,\n  envelopeItemTypeToDataCategory,\n  forEachEnvelopeItem,\n  isRateLimited,\n  logger,\n  makePromiseBuffer,\n  resolvedSyncPromise,\n  SentryError,\n  serializeEnvelope,\n  updateRateLimits,\n} from '@sentry/utils';\n\nexport const DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nexport function createTransport(\n  options: InternalBaseTransportOptions,\n  makeRequest: TransportRequestExecutor,\n  buffer: PromiseBuffer<void | TransportMakeRequestResponse> = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n): Transport {\n  let rateLimits: RateLimits = {};\n  const flush = (timeout?: number): PromiseLike<boolean> => buffer.drain(timeout);\n\n  function send(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> {\n    const filteredEnvelopeItems: EnvelopeItem[] = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const envelopeItemDataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, envelopeItemDataCategory)) {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', envelopeItemDataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope: Envelope = createEnvelope(envelope[0], filteredEnvelopeItems as any);\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason: EventDropReason): void => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event: Event | undefined = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = (): PromiseLike<void | TransportMakeRequestResponse> =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope, options.textEncoder) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            __DEBUG_BUILD__ && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          __DEBUG_BUILD__ && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise();\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  // We use this to identifify if the transport is the base transport\n  // TODO (v8): Remove this again as we'll no longer need it\n  send.__sentry__baseTransport__ = true;\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item: Envelope[1][number], type: EnvelopeItemType): Event | undefined {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item as EventItem)[1] : undefined;\n}\n"]},"metadata":{},"sourceType":"module"}