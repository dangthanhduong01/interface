{"ast":null,"code":"import { TradeType } from '@uniswap/sdk-core';\nimport _ from 'lodash';\nimport { TokenValidationResult } from '../../../providers';\nimport { log, metric, MetricLoggerUnit, routeToString } from '../../../util';\nimport { V2RouteWithValidQuote } from '../entities';\nimport { computeAllV2Routes } from '../functions/compute-all-routes';\nimport { getV2CandidatePools } from '../functions/get-candidate-pools';\nimport { BaseQuoter } from './base-quoter';\nexport class V2Quoter extends BaseQuoter {\n  constructor(v2SubgraphProvider, v2PoolProvider, v2QuoteProvider, v2GasModelFactory, tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider) {\n    super(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider);\n    this.v2SubgraphProvider = v2SubgraphProvider;\n    this.v2PoolProvider = v2PoolProvider;\n    this.v2QuoteProvider = v2QuoteProvider;\n    this.v2GasModelFactory = v2GasModelFactory;\n  }\n  async getRoutes(tokenIn, tokenOut, tradeType, routingConfig) {\n    // Fetch all the pools that we will consider routing via. There are thousands\n    // of pools, so we filter them to a set of candidate pools that we expect will\n    // result in good prices.\n    const {\n      poolAccessor,\n      candidatePools\n    } = await getV2CandidatePools({\n      tokenIn,\n      tokenOut,\n      tokenProvider: this.tokenProvider,\n      blockedTokenListProvider: this.blockedTokenListProvider,\n      poolProvider: this.v2PoolProvider,\n      routeType: tradeType,\n      subgraphProvider: this.v2SubgraphProvider,\n      routingConfig,\n      chainId: this.chainId\n    });\n    const poolsRaw = poolAccessor.getAllPools();\n    // Drop any pools that contain tokens that can not be transferred according to the token validator.\n    const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n      // If there is no available validation result we assume the token is fine.\n      if (!tokenValidation) {\n        return false;\n      }\n      // Only filters out *intermediate* pools that involve tokens that we detect\n      // cant be transferred. This prevents us trying to route through tokens that may\n      // not be transferrable, but allows users to still swap those tokens if they\n      // specify.\n      if (tokenValidation == TokenValidationResult.STF && (token.equals(tokenIn) || token.equals(tokenOut))) {\n        return false;\n      }\n      return tokenValidation == TokenValidationResult.STF;\n    });\n    // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n    const {\n      maxSwapsPerPath\n    } = routingConfig;\n    const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n    return {\n      routes,\n      candidatePools\n    };\n  }\n  async getQuotes(routes, amounts, percents, quoteToken, tradeType, _routingConfig, candidatePools, _gasModel, gasPriceWei) {\n    log.info('Starting to get V2 quotes');\n    if (gasPriceWei === undefined) {\n      throw new Error('GasPriceWei for V2Routes is required to getQuotes');\n    }\n    if (routes.length == 0) {\n      return {\n        routesWithValidQuotes: [],\n        candidatePools\n      };\n    }\n    // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n    const quoteFn = tradeType == TradeType.EXACT_INPUT ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider) : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n    const beforeQuotes = Date.now();\n    log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n    const {\n      routesWithQuotes\n    } = await quoteFn(amounts, routes);\n    const v2GasModel = await this.v2GasModelFactory.buildGasModel({\n      chainId: this.chainId,\n      gasPriceWei,\n      poolProvider: this.v2PoolProvider,\n      token: quoteToken\n    });\n    metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n    metric.putMetric('V2QuotesFetched', _(routesWithQuotes).map(_ref => {\n      let [, quotes] = _ref;\n      return quotes.length;\n    }).sum(), MetricLoggerUnit.Count);\n    const routesWithValidQuotes = [];\n    for (const routeWithQuote of routesWithQuotes) {\n      const [route, quotes] = routeWithQuote;\n      for (let i = 0; i < quotes.length; i++) {\n        const percent = percents[i];\n        const amountQuote = quotes[i];\n        const {\n          quote,\n          amount\n        } = amountQuote;\n        if (!quote) {\n          log.debug({\n            route: routeToString(route),\n            amountQuote\n          }, 'Dropping a null V2 quote for route.');\n          continue;\n        }\n        const routeWithValidQuote = new V2RouteWithValidQuote({\n          route,\n          rawQuote: quote,\n          amount,\n          percent,\n          gasModel: v2GasModel,\n          quoteToken,\n          tradeType,\n          v2PoolProvider: this.v2PoolProvider\n        });\n        routesWithValidQuotes.push(routeWithValidQuote);\n      }\n    }\n    return {\n      routesWithValidQuotes,\n      candidatePools\n    };\n  }\n}","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/quoters/v2-quoter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { TradeType } from '@uniswap/sdk-core';\nimport _ from 'lodash';\nimport { TokenValidationResult } from '../../../providers';\nimport { log, metric, MetricLoggerUnit, routeToString } from '../../../util';\nimport { V2RouteWithValidQuote } from '../entities';\nimport { computeAllV2Routes } from '../functions/compute-all-routes';\nimport { getV2CandidatePools } from '../functions/get-candidate-pools';\nimport { BaseQuoter } from './base-quoter';\nexport class V2Quoter extends BaseQuoter {\n    constructor(v2SubgraphProvider, v2PoolProvider, v2QuoteProvider, v2GasModelFactory, tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider) {\n        super(tokenProvider, chainId, blockedTokenListProvider, tokenValidatorProvider);\n        this.v2SubgraphProvider = v2SubgraphProvider;\n        this.v2PoolProvider = v2PoolProvider;\n        this.v2QuoteProvider = v2QuoteProvider;\n        this.v2GasModelFactory = v2GasModelFactory;\n    }\n    async getRoutes(tokenIn, tokenOut, tradeType, routingConfig) {\n        // Fetch all the pools that we will consider routing via. There are thousands\n        // of pools, so we filter them to a set of candidate pools that we expect will\n        // result in good prices.\n        const { poolAccessor, candidatePools } = await getV2CandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            poolProvider: this.v2PoolProvider,\n            routeType: tradeType,\n            subgraphProvider: this.v2SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const poolsRaw = poolAccessor.getAllPools();\n        // Drop any pools that contain tokens that can not be transferred according to the token validator.\n        const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n            // If there is no available validation result we assume the token is fine.\n            if (!tokenValidation) {\n                return false;\n            }\n            // Only filters out *intermediate* pools that involve tokens that we detect\n            // cant be transferred. This prevents us trying to route through tokens that may\n            // not be transferrable, but allows users to still swap those tokens if they\n            // specify.\n            if (tokenValidation == TokenValidationResult.STF &&\n                (token.equals(tokenIn) || token.equals(tokenOut))) {\n                return false;\n            }\n            return tokenValidation == TokenValidationResult.STF;\n        });\n        // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        return {\n            routes,\n            candidatePools,\n        };\n    }\n    async getQuotes(routes, amounts, percents, quoteToken, tradeType, _routingConfig, candidatePools, _gasModel, gasPriceWei) {\n        log.info('Starting to get V2 quotes');\n        if (gasPriceWei === undefined) {\n            throw new Error('GasPriceWei for V2Routes is required to getQuotes');\n        }\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = tradeType == TradeType.EXACT_INPUT\n            ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider)\n            : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes);\n        const v2GasModel = await this.v2GasModelFactory.buildGasModel({\n            chainId: this.chainId,\n            gasPriceWei,\n            poolProvider: this.v2PoolProvider,\n            token: quoteToken,\n        });\n        metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('V2QuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount } = amountQuote;\n                if (!quote) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null V2 quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new V2RouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    gasModel: v2GasModel,\n                    quoteToken,\n                    tradeType,\n                    v2PoolProvider: this.v2PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return {\n            routesWithValidQuotes,\n            candidatePools\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjItcXVvdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3JvdXRlcnMvYWxwaGEtcm91dGVyL3F1b3RlcnMvdjItcXVvdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBbUIsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0QsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXZCLE9BQU8sRUFPTCxxQkFBcUIsRUFDdEIsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQTJCLEdBQUcsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3RHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQXFDLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFHMUcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxNQUFNLE9BQU8sUUFBUyxTQUFRLFVBQW1CO0lBTS9DLFlBQ0Usa0JBQXVDLEVBQ3ZDLGNBQStCLEVBQy9CLGVBQWlDLEVBQ2pDLGlCQUFxQyxFQUNyQyxhQUE2QixFQUM3QixPQUFnQixFQUNoQix3QkFBNkMsRUFDN0Msc0JBQWdEO1FBRWhELEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBQzdDLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztJQUM3QyxDQUFDO0lBRVMsS0FBSyxDQUFDLFNB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"]},"metadata":{},"sourceType":"module"}