{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { NetworkStatus } from '@apollo/client';\nimport { CurrencyAmount, Price, SupportedChainId, TradeType } from '@uniswap/sdk-core';\nimport { nativeOnChain } from 'constants/tokens';\nimport { Chain, useTokenSpotPriceQuery } from 'graphql/data/__generated__/types-and-hooks';\nimport { chainIdToBackendName, isGqlSupportedChain, PollingInterval } from 'graphql/data/util';\nimport { RouterPreference } from 'state/routing/slice';\nimport { TradeState } from 'state/routing/types';\nimport { useRoutingAPITrade } from 'state/routing/useRoutingAPITrade';\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens';\nimport useStablecoinPrice from './useStablecoinPrice';\n\n// ETH amounts used when calculating spot price for a given currency.\n// The amount is large enough to filter low liquidity pairs.\nconst ETH_AMOUNT_OUT = {\n  [SupportedChainId.MAINNET]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.MAINNET), 100e18),\n  [SupportedChainId.ARBITRUM_ONE]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.ARBITRUM_ONE), 10e18),\n  [SupportedChainId.OPTIMISM]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.OPTIMISM), 10e18),\n  [SupportedChainId.POLYGON]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.POLYGON), 10000e18),\n  [SupportedChainId.CELO]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.CELO), 10e18)\n};\nfunction useETHValue(currencyAmount) {\n  _s();\n  var _currencyAmount$curre;\n  const chainId = currencyAmount === null || currencyAmount === void 0 ? void 0 : (_currencyAmount$curre = currencyAmount.currency) === null || _currencyAmount$curre === void 0 ? void 0 : _currencyAmount$curre.chainId;\n  const amountOut = isGqlSupportedChain(chainId) ? ETH_AMOUNT_OUT[chainId] : undefined;\n  const {\n    trade,\n    state\n  } = useRoutingAPITrade(TradeType.EXACT_OUTPUT, amountOut, currencyAmount === null || currencyAmount === void 0 ? void 0 : currencyAmount.currency, RouterPreference.PRICE);\n\n  // Get ETH value of ETH or WETH\n  if (chainId && currencyAmount && currencyAmount.currency.wrapped.equals(nativeOnChain(chainId).wrapped)) {\n    return {\n      data: new Price(currencyAmount.currency, currencyAmount.currency, '1', '1').quote(currencyAmount),\n      isLoading: false\n    };\n  }\n  if (!trade || !(currencyAmount === null || currencyAmount === void 0 ? void 0 : currencyAmount.currency) || !isGqlSupportedChain(chainId)) {\n    return {\n      data: undefined,\n      isLoading: state === TradeState.LOADING || state === TradeState.SYNCING\n    };\n  }\n  const {\n    numerator,\n    denominator\n  } = trade.routes[0].midPrice;\n  const price = new Price(currencyAmount === null || currencyAmount === void 0 ? void 0 : currencyAmount.currency, nativeOnChain(chainId), denominator, numerator);\n  return {\n    data: price.quote(currencyAmount),\n    isLoading: false\n  };\n}\n_s(useETHValue, \"udZBZU1WrWXATrMiV3YOqSK+kC4=\", false, function () {\n  return [useRoutingAPITrade];\n});\nexport function useUSDPrice(currencyAmount) {\n  _s2();\n  var _data$token, _data$token$project, _data$token$project$m, _data$token$project$m2, _data$token$project$m3;\n  const chain = (currencyAmount === null || currencyAmount === void 0 ? void 0 : currencyAmount.currency.chainId) ? chainIdToBackendName(currencyAmount === null || currencyAmount === void 0 ? void 0 : currencyAmount.currency.chainId) : undefined;\n  const currency = currencyAmount === null || currencyAmount === void 0 ? void 0 : currencyAmount.currency;\n  const {\n    data: ethValue,\n    isLoading: isEthValueLoading\n  } = useETHValue(currencyAmount);\n  const {\n    data,\n    networkStatus\n  } = useTokenSpotPriceQuery({\n    variables: {\n      chain: chain !== null && chain !== void 0 ? chain : Chain.Ethereum,\n      address: getNativeTokenDBAddress(chain !== null && chain !== void 0 ? chain : Chain.Ethereum)\n    },\n    skip: !chain || !isGqlSupportedChain(currency === null || currency === void 0 ? void 0 : currency.chainId),\n    pollInterval: PollingInterval.Normal,\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-first'\n  });\n\n  // Use USDC price for chains not supported by backend yet\n  const stablecoinPrice = useStablecoinPrice(!isGqlSupportedChain(currency === null || currency === void 0 ? void 0 : currency.chainId) ? currency : undefined);\n  if (!isGqlSupportedChain(currency === null || currency === void 0 ? void 0 : currency.chainId) && currencyAmount && stablecoinPrice) {\n    return {\n      data: parseFloat(stablecoinPrice.quote(currencyAmount).toSignificant()),\n      isLoading: false\n    };\n  }\n  const isFirstLoad = networkStatus === NetworkStatus.loading;\n\n  // Otherwise, get the price of the token in ETH, and then multiple by the price of ETH\n  const ethUSDPrice = data === null || data === void 0 ? void 0 : (_data$token = data.token) === null || _data$token === void 0 ? void 0 : (_data$token$project = _data$token.project) === null || _data$token$project === void 0 ? void 0 : (_data$token$project$m = _data$token$project.markets) === null || _data$token$project$m === void 0 ? void 0 : (_data$token$project$m2 = _data$token$project$m[0]) === null || _data$token$project$m2 === void 0 ? void 0 : (_data$token$project$m3 = _data$token$project$m2.price) === null || _data$token$project$m3 === void 0 ? void 0 : _data$token$project$m3.value;\n  if (!ethUSDPrice || !ethValue) return {\n    data: undefined,\n    isLoading: isEthValueLoading || isFirstLoad\n  };\n  return {\n    data: parseFloat(ethValue.toExact()) * ethUSDPrice,\n    isLoading: false\n  };\n}\n_s2(useUSDPrice, \"k/TloTUvQN7c4bmSl93Osq1BcEo=\", false, function () {\n  return [useETHValue, useTokenSpotPriceQuery, useStablecoinPrice];\n});","map":{"version":3,"names":["NetworkStatus","CurrencyAmount","Price","SupportedChainId","TradeType","nativeOnChain","Chain","useTokenSpotPriceQuery","chainIdToBackendName","isGqlSupportedChain","PollingInterval","RouterPreference","TradeState","useRoutingAPITrade","getNativeTokenDBAddress","useStablecoinPrice","ETH_AMOUNT_OUT","MAINNET","fromRawAmount","ARBITRUM_ONE","OPTIMISM","POLYGON","CELO","useETHValue","currencyAmount","chainId","currency","amountOut","undefined","trade","state","EXACT_OUTPUT","PRICE","wrapped","equals","data","quote","isLoading","LOADING","SYNCING","numerator","denominator","routes","midPrice","price","useUSDPrice","chain","ethValue","isEthValueLoading","networkStatus","variables","Ethereum","address","skip","pollInterval","Normal","notifyOnNetworkStatusChange","fetchPolicy","stablecoinPrice","parseFloat","toSignificant","isFirstLoad","loading","ethUSDPrice","token","project","markets","value","toExact"],"sources":["/home/diep/freelance/interface/src/hooks/useUSDPrice.ts"],"sourcesContent":["import { NetworkStatus } from '@apollo/client'\nimport { Currency, CurrencyAmount, Price, SupportedChainId, TradeType } from '@uniswap/sdk-core'\nimport { nativeOnChain } from 'constants/tokens'\nimport { Chain, useTokenSpotPriceQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { chainIdToBackendName, isGqlSupportedChain, PollingInterval } from 'graphql/data/util'\nimport { RouterPreference } from 'state/routing/slice'\nimport { TradeState } from 'state/routing/types'\nimport { useRoutingAPITrade } from 'state/routing/useRoutingAPITrade'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\nimport useStablecoinPrice from './useStablecoinPrice'\n\n// ETH amounts used when calculating spot price for a given currency.\n// The amount is large enough to filter low liquidity pairs.\nconst ETH_AMOUNT_OUT: { [chainId: number]: CurrencyAmount<Currency> } = {\n  [SupportedChainId.MAINNET]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.MAINNET), 100e18),\n  [SupportedChainId.ARBITRUM_ONE]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.ARBITRUM_ONE), 10e18),\n  [SupportedChainId.OPTIMISM]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.OPTIMISM), 10e18),\n  [SupportedChainId.POLYGON]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.POLYGON), 10_000e18),\n  [SupportedChainId.CELO]: CurrencyAmount.fromRawAmount(nativeOnChain(SupportedChainId.CELO), 10e18),\n}\n\nfunction useETHValue(currencyAmount?: CurrencyAmount<Currency>): {\n  data: CurrencyAmount<Currency> | undefined\n  isLoading: boolean\n} {\n  const chainId = currencyAmount?.currency?.chainId\n  const amountOut = isGqlSupportedChain(chainId) ? ETH_AMOUNT_OUT[chainId] : undefined\n  const { trade, state } = useRoutingAPITrade(\n    TradeType.EXACT_OUTPUT,\n    amountOut,\n    currencyAmount?.currency,\n    RouterPreference.PRICE\n  )\n\n  // Get ETH value of ETH or WETH\n  if (chainId && currencyAmount && currencyAmount.currency.wrapped.equals(nativeOnChain(chainId).wrapped)) {\n    return {\n      data: new Price(currencyAmount.currency, currencyAmount.currency, '1', '1').quote(currencyAmount),\n      isLoading: false,\n    }\n  }\n\n  if (!trade || !currencyAmount?.currency || !isGqlSupportedChain(chainId)) {\n    return { data: undefined, isLoading: state === TradeState.LOADING || state === TradeState.SYNCING }\n  }\n\n  const { numerator, denominator } = trade.routes[0].midPrice\n  const price = new Price(currencyAmount?.currency, nativeOnChain(chainId), denominator, numerator)\n  return { data: price.quote(currencyAmount), isLoading: false }\n}\n\nexport function useUSDPrice(currencyAmount?: CurrencyAmount<Currency>): {\n  data: number | undefined\n  isLoading: boolean\n} {\n  const chain = currencyAmount?.currency.chainId ? chainIdToBackendName(currencyAmount?.currency.chainId) : undefined\n  const currency = currencyAmount?.currency\n  const { data: ethValue, isLoading: isEthValueLoading } = useETHValue(currencyAmount)\n\n  const { data, networkStatus } = useTokenSpotPriceQuery({\n    variables: { chain: chain ?? Chain.Ethereum, address: getNativeTokenDBAddress(chain ?? Chain.Ethereum) },\n    skip: !chain || !isGqlSupportedChain(currency?.chainId),\n    pollInterval: PollingInterval.Normal,\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-first',\n  })\n\n  // Use USDC price for chains not supported by backend yet\n  const stablecoinPrice = useStablecoinPrice(!isGqlSupportedChain(currency?.chainId) ? currency : undefined)\n  if (!isGqlSupportedChain(currency?.chainId) && currencyAmount && stablecoinPrice) {\n    return { data: parseFloat(stablecoinPrice.quote(currencyAmount).toSignificant()), isLoading: false }\n  }\n\n  const isFirstLoad = networkStatus === NetworkStatus.loading\n\n  // Otherwise, get the price of the token in ETH, and then multiple by the price of ETH\n  const ethUSDPrice = data?.token?.project?.markets?.[0]?.price?.value\n  if (!ethUSDPrice || !ethValue) return { data: undefined, isLoading: isEthValueLoading || isFirstLoad }\n\n  return { data: parseFloat(ethValue.toExact()) * ethUSDPrice, isLoading: false }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}