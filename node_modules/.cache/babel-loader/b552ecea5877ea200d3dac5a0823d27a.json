{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/home/diep/freelance/interface/src/components/WalletModal/index.tsx\",\n  _s = $RefreshSig$();\nimport { sendAnalyticsEvent, user } from '@uniswap/analytics';\nimport { CustomUserProperties, InterfaceEventName, WalletConnectionResult } from '@uniswap/analytics-events';\nimport { getWalletMeta } from '@uniswap/conedison/provider/meta';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAccountDrawer } from 'components/AccountDrawer';\nimport IconButton from 'components/AccountDrawer/IconButton';\nimport { sendEvent } from 'components/analytics';\nimport { AutoColumn } from 'components/Column';\nimport { AutoRow } from 'components/Row';\nimport { ConnectionType, getConnections, networkConnection } from 'connection';\nimport { useGetConnection } from 'connection';\nimport { ErrorCode } from 'connection/utils';\nimport { isSupportedChain } from 'constants/chains';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Settings } from 'react-feather';\nimport { useAppDispatch } from 'state/hooks';\nimport { updateSelectedWallet } from 'state/user/reducer';\nimport { useConnectedWallets } from 'state/wallets/hooks';\nimport { ThemedText } from 'theme';\nimport { flexColumnNoWrap } from 'theme/styles';\nimport ConnectionErrorView from './ConnectionErrorView';\nimport Option from './Option';\nimport PrivacyPolicyNotice from './PrivacyPolicyNotice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = _styled.div.withConfig({\n  displayName: \"WalletModal__Wrapper\",\n  componentId: \"sc-1hmbv05-0\"\n})([\"\", \";background-color:\", \";width:100%;padding:14px 16px 16px;flex:1;\"], flexColumnNoWrap, _ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.backgroundSurface;\n});\nconst OptionGrid = _styled.div.withConfig({\n  displayName: \"WalletModal__OptionGrid\",\n  componentId: \"sc-1hmbv05-1\"\n})([\"display:grid;grid-gap:2px;border-radius:12px;overflow:hidden;\", \";\"], _ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.deprecated_mediaWidth.deprecated_upToMedium`\n    grid-template-columns: 1fr;\n  `;\n});\nconst PrivacyPolicyWrapper = _styled.div.withConfig({\n  displayName: \"WalletModal__PrivacyPolicyWrapper\",\n  componentId: \"sc-1hmbv05-2\"\n})([\"padding:0 4px;\"]);\nconst sendAnalyticsEventAndUserInfo = (account, walletType, chainId, isReconnect, peerWalletAgent) => {\n  // User properties *must* be set before sending corresponding event properties,\n  // so that the event contains the correct and up-to-date user properties.\n  user.set(CustomUserProperties.WALLET_ADDRESS, account);\n  user.set(CustomUserProperties.WALLET_TYPE, walletType);\n  user.set(CustomUserProperties.PEER_WALLET_AGENT, peerWalletAgent !== null && peerWalletAgent !== void 0 ? peerWalletAgent : '');\n  if (chainId) {\n    user.postInsert(CustomUserProperties.ALL_WALLET_CHAIN_IDS, chainId);\n  }\n  user.postInsert(CustomUserProperties.ALL_WALLET_ADDRESSES_CONNECTED, account);\n  sendAnalyticsEvent(InterfaceEventName.WALLET_CONNECT_TXN_COMPLETED, {\n    result: WalletConnectionResult.SUCCEEDED,\n    wallet_address: account,\n    wallet_type: walletType,\n    is_reconnect: isReconnect,\n    peer_wallet_agent: peerWalletAgent\n  });\n};\nfunction didUserReject(connection, error) {\n  var _error$toString, _error$toString2;\n  return (error === null || error === void 0 ? void 0 : error.code) === ErrorCode.USER_REJECTED_REQUEST || connection.type === ConnectionType.WALLET_CONNECT && (error === null || error === void 0 ? void 0 : (_error$toString = error.toString) === null || _error$toString === void 0 ? void 0 : _error$toString.call(error)) === ErrorCode.WC_MODAL_CLOSED || connection.type === ConnectionType.COINBASE_WALLET && (error === null || error === void 0 ? void 0 : (_error$toString2 = error.toString) === null || _error$toString2 === void 0 ? void 0 : _error$toString2.call(error)) === ErrorCode.CB_REJECTED_REQUEST;\n}\nexport default function WalletModal(_ref3) {\n  _s();\n  let {\n    openSettings\n  } = _ref3;\n  const dispatch = useAppDispatch();\n  const {\n    connector,\n    account,\n    chainId,\n    provider\n  } = useWeb3React();\n  const [drawerOpen, toggleWalletDrawer] = useAccountDrawer();\n  const [connectedWallets, addWalletToConnectedWallets] = useConnectedWallets();\n  const [lastActiveWalletAddress, setLastActiveWalletAddress] = useState(account);\n  const [pendingConnection, setPendingConnection] = useState();\n  const [pendingError, setPendingError] = useState();\n  const connections = getConnections();\n  const getConnection = useGetConnection();\n  useEffect(() => {\n    // Clean up errors when the dropdown closes\n    return () => setPendingError(undefined);\n  }, [setPendingError]);\n  const openOptions = useCallback(() => {\n    if (pendingConnection) {\n      setPendingError(undefined);\n      setPendingConnection(undefined);\n    }\n  }, [pendingConnection, setPendingError]);\n\n  // Keep the network connector in sync with any active user connector to prevent chain-switching on wallet disconnection.\n  useEffect(() => {\n    if (chainId && isSupportedChain(chainId) && connector !== networkConnection.connector) {\n      networkConnection.connector.activate(chainId);\n    }\n  }, [chainId, connector]);\n\n  // When new wallet is successfully set by the user, trigger logging of Amplitude analytics event.\n  useEffect(() => {\n    if (account && account !== lastActiveWalletAddress) {\n      var _getWalletMeta;\n      const walletName = getConnection(connector).getName();\n      const peerWalletAgent = provider ? (_getWalletMeta = getWalletMeta(provider)) === null || _getWalletMeta === void 0 ? void 0 : _getWalletMeta.agent : undefined;\n      const isReconnect = connectedWallets.filter(wallet => wallet.account === account && wallet.walletType === walletName).length > 0;\n      sendAnalyticsEventAndUserInfo(account, walletName, chainId, isReconnect, peerWalletAgent);\n      if (!isReconnect) addWalletToConnectedWallets({\n        account,\n        walletType: walletName\n      });\n    }\n    setLastActiveWalletAddress(account);\n  }, [connectedWallets, addWalletToConnectedWallets, lastActiveWalletAddress, account, connector, chainId, provider, getConnection]);\n\n  // Used to track the state of the drawer in async function\n  const drawerOpenRef = useRef(drawerOpen);\n  drawerOpenRef.current = drawerOpen;\n  const tryActivation = useCallback(async connection => {\n    var _connection$overrideA;\n    // Skips wallet connection if the connection should override the default behavior, i.e. install metamask or launch coinbase app\n    if ((_connection$overrideA = connection.overrideActivate) === null || _connection$overrideA === void 0 ? void 0 : _connection$overrideA.call(connection)) return;\n\n    // log selected wallet\n    sendEvent({\n      category: 'Wallet',\n      action: 'Change Wallet',\n      label: connection.type\n    });\n    try {\n      setPendingConnection(connection);\n      setPendingError(undefined);\n      await connection.connector.activate();\n      console.debug(`connection activated: ${connection.getName()}`);\n      dispatch(updateSelectedWallet({\n        wallet: connection.type\n      }));\n      if (drawerOpenRef.current) toggleWalletDrawer();\n    } catch (error) {\n      console.debug(`web3-react connection error: ${JSON.stringify(error)}`);\n      // TODO(WEB-3162): re-add special treatment for already-pending injected errors\n      if (didUserReject(connection, error)) {\n        setPendingConnection(undefined);\n      } else {\n        setPendingError(error);\n        sendAnalyticsEvent(InterfaceEventName.WALLET_CONNECT_TXN_COMPLETED, {\n          result: WalletConnectionResult.FAILED,\n          wallet_type: connection.getName()\n        });\n      }\n    }\n  }, [dispatch, setPendingError, toggleWalletDrawer]);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    \"data-testid\": \"wallet-modal\",\n    children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n      justify: \"space-between\",\n      width: \"100%\",\n      marginBottom: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(ThemedText.SubHeader, {\n        fontWeight: 500,\n        children: \"Connect a wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        Icon: Settings,\n        onClick: openSettings,\n        \"data-testid\": \"wallet-settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), pendingError ? pendingConnection && /*#__PURE__*/_jsxDEV(ConnectionErrorView, {\n      openOptions: openOptions,\n      retryActivation: () => tryActivation(pendingConnection)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(OptionGrid, {\n        \"data-testid\": \"option-grid\",\n        children: connections.map(connection => connection.shouldDisplay() ? /*#__PURE__*/_jsxDEV(Option, {\n          connection: connection,\n          activate: () => tryActivation(connection),\n          pendingConnectionType: pendingConnection === null || pendingConnection === void 0 ? void 0 : pendingConnection.type\n        }, connection.getName(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this) : null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PrivacyPolicyWrapper, {\n        children: /*#__PURE__*/_jsxDEV(PrivacyPolicyNotice, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n_s(WalletModal, \"Je9/1/nUnmxBg+o6UUTNolMqqDg=\", false, function () {\n  return [useAppDispatch, useWeb3React, useAccountDrawer, useConnectedWallets, useGetConnection];\n});\n_c = WalletModal;\nvar _c;\n$RefreshReg$(_c, \"WalletModal\");","map":{"version":3,"names":["sendAnalyticsEvent","user","CustomUserProperties","InterfaceEventName","WalletConnectionResult","getWalletMeta","useWeb3React","useAccountDrawer","IconButton","sendEvent","AutoColumn","AutoRow","ConnectionType","getConnections","networkConnection","useGetConnection","ErrorCode","isSupportedChain","useCallback","useEffect","useRef","useState","Settings","useAppDispatch","updateSelectedWallet","useConnectedWallets","ThemedText","flexColumnNoWrap","ConnectionErrorView","Option","PrivacyPolicyNotice","Wrapper","styled","div","theme","backgroundSurface","OptionGrid","deprecated_mediaWidth","deprecated_upToMedium","PrivacyPolicyWrapper","sendAnalyticsEventAndUserInfo","account","walletType","chainId","isReconnect","peerWalletAgent","set","WALLET_ADDRESS","WALLET_TYPE","PEER_WALLET_AGENT","postInsert","ALL_WALLET_CHAIN_IDS","ALL_WALLET_ADDRESSES_CONNECTED","WALLET_CONNECT_TXN_COMPLETED","result","SUCCEEDED","wallet_address","wallet_type","is_reconnect","peer_wallet_agent","didUserReject","connection","error","code","USER_REJECTED_REQUEST","type","WALLET_CONNECT","toString","WC_MODAL_CLOSED","COINBASE_WALLET","CB_REJECTED_REQUEST","WalletModal","openSettings","dispatch","connector","provider","drawerOpen","toggleWalletDrawer","connectedWallets","addWalletToConnectedWallets","lastActiveWalletAddress","setLastActiveWalletAddress","pendingConnection","setPendingConnection","pendingError","setPendingError","connections","getConnection","undefined","openOptions","activate","walletName","getName","agent","filter","wallet","length","drawerOpenRef","current","tryActivation","overrideActivate","category","action","label","console","debug","JSON","stringify","FAILED","map","shouldDisplay"],"sources":["/home/diep/freelance/interface/src/components/WalletModal/index.tsx"],"sourcesContent":["import { sendAnalyticsEvent, user } from '@uniswap/analytics'\nimport { CustomUserProperties, InterfaceEventName, WalletConnectionResult } from '@uniswap/analytics-events'\nimport { getWalletMeta } from '@uniswap/conedison/provider/meta'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAccountDrawer } from 'components/AccountDrawer'\nimport IconButton from 'components/AccountDrawer/IconButton'\nimport { sendEvent } from 'components/analytics'\nimport { AutoColumn } from 'components/Column'\nimport { AutoRow } from 'components/Row'\nimport { Connection, ConnectionType, getConnections, networkConnection } from 'connection'\nimport { useGetConnection } from 'connection'\nimport { ErrorCode } from 'connection/utils'\nimport { isSupportedChain } from 'constants/chains'\nimport { useCallback, useEffect, useRef, useState } from 'react'\nimport { Settings } from 'react-feather'\nimport { useAppDispatch } from 'state/hooks'\nimport { updateSelectedWallet } from 'state/user/reducer'\nimport { useConnectedWallets } from 'state/wallets/hooks'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { flexColumnNoWrap } from 'theme/styles'\n\nimport ConnectionErrorView from './ConnectionErrorView'\nimport Option from './Option'\nimport PrivacyPolicyNotice from './PrivacyPolicyNotice'\n\nconst Wrapper = styled.div`\n  ${flexColumnNoWrap};\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  width: 100%;\n  padding: 14px 16px 16px;\n  flex: 1;\n`\n\nconst OptionGrid = styled.div`\n  display: grid;\n  grid-gap: 2px;\n  border-radius: 12px;\n  overflow: hidden;\n  ${({ theme }) => theme.deprecated_mediaWidth.deprecated_upToMedium`\n    grid-template-columns: 1fr;\n  `};\n`\n\nconst PrivacyPolicyWrapper = styled.div`\n  padding: 0 4px;\n`\n\nconst sendAnalyticsEventAndUserInfo = (\n  account: string,\n  walletType: string,\n  chainId: number | undefined,\n  isReconnect: boolean,\n  peerWalletAgent: string | undefined\n) => {\n  // User properties *must* be set before sending corresponding event properties,\n  // so that the event contains the correct and up-to-date user properties.\n  user.set(CustomUserProperties.WALLET_ADDRESS, account)\n  user.set(CustomUserProperties.WALLET_TYPE, walletType)\n  user.set(CustomUserProperties.PEER_WALLET_AGENT, peerWalletAgent ?? '')\n  if (chainId) {\n    user.postInsert(CustomUserProperties.ALL_WALLET_CHAIN_IDS, chainId)\n  }\n  user.postInsert(CustomUserProperties.ALL_WALLET_ADDRESSES_CONNECTED, account)\n\n  sendAnalyticsEvent(InterfaceEventName.WALLET_CONNECT_TXN_COMPLETED, {\n    result: WalletConnectionResult.SUCCEEDED,\n    wallet_address: account,\n    wallet_type: walletType,\n    is_reconnect: isReconnect,\n    peer_wallet_agent: peerWalletAgent,\n  })\n}\n\nfunction didUserReject(connection: Connection, error: any): boolean {\n  return (\n    error?.code === ErrorCode.USER_REJECTED_REQUEST ||\n    (connection.type === ConnectionType.WALLET_CONNECT && error?.toString?.() === ErrorCode.WC_MODAL_CLOSED) ||\n    (connection.type === ConnectionType.COINBASE_WALLET && error?.toString?.() === ErrorCode.CB_REJECTED_REQUEST)\n  )\n}\n\nexport default function WalletModal({ openSettings }: { openSettings: () => void }) {\n  const dispatch = useAppDispatch()\n  const { connector, account, chainId, provider } = useWeb3React()\n  const [drawerOpen, toggleWalletDrawer] = useAccountDrawer()\n\n  const [connectedWallets, addWalletToConnectedWallets] = useConnectedWallets()\n  const [lastActiveWalletAddress, setLastActiveWalletAddress] = useState<string | undefined>(account)\n  const [pendingConnection, setPendingConnection] = useState<Connection | undefined>()\n  const [pendingError, setPendingError] = useState<any>()\n\n  const connections = getConnections()\n  const getConnection = useGetConnection()\n\n  useEffect(() => {\n    // Clean up errors when the dropdown closes\n    return () => setPendingError(undefined)\n  }, [setPendingError])\n\n  const openOptions = useCallback(() => {\n    if (pendingConnection) {\n      setPendingError(undefined)\n      setPendingConnection(undefined)\n    }\n  }, [pendingConnection, setPendingError])\n\n  // Keep the network connector in sync with any active user connector to prevent chain-switching on wallet disconnection.\n  useEffect(() => {\n    if (chainId && isSupportedChain(chainId) && connector !== networkConnection.connector) {\n      networkConnection.connector.activate(chainId)\n    }\n  }, [chainId, connector])\n\n  // When new wallet is successfully set by the user, trigger logging of Amplitude analytics event.\n  useEffect(() => {\n    if (account && account !== lastActiveWalletAddress) {\n      const walletName = getConnection(connector).getName()\n      const peerWalletAgent = provider ? getWalletMeta(provider)?.agent : undefined\n      const isReconnect =\n        connectedWallets.filter((wallet) => wallet.account === account && wallet.walletType === walletName).length > 0\n      sendAnalyticsEventAndUserInfo(account, walletName, chainId, isReconnect, peerWalletAgent)\n      if (!isReconnect) addWalletToConnectedWallets({ account, walletType: walletName })\n    }\n    setLastActiveWalletAddress(account)\n  }, [\n    connectedWallets,\n    addWalletToConnectedWallets,\n    lastActiveWalletAddress,\n    account,\n    connector,\n    chainId,\n    provider,\n    getConnection,\n  ])\n\n  // Used to track the state of the drawer in async function\n  const drawerOpenRef = useRef(drawerOpen)\n  drawerOpenRef.current = drawerOpen\n\n  const tryActivation = useCallback(\n    async (connection: Connection) => {\n      // Skips wallet connection if the connection should override the default behavior, i.e. install metamask or launch coinbase app\n      if (connection.overrideActivate?.()) return\n\n      // log selected wallet\n      sendEvent({\n        category: 'Wallet',\n        action: 'Change Wallet',\n        label: connection.type,\n      })\n\n      try {\n        setPendingConnection(connection)\n        setPendingError(undefined)\n\n        await connection.connector.activate()\n        console.debug(`connection activated: ${connection.getName()}`)\n        dispatch(updateSelectedWallet({ wallet: connection.type }))\n        if (drawerOpenRef.current) toggleWalletDrawer()\n      } catch (error) {\n        console.debug(`web3-react connection error: ${JSON.stringify(error)}`)\n        // TODO(WEB-3162): re-add special treatment for already-pending injected errors\n        if (didUserReject(connection, error)) {\n          setPendingConnection(undefined)\n        } else {\n          setPendingError(error)\n\n          sendAnalyticsEvent(InterfaceEventName.WALLET_CONNECT_TXN_COMPLETED, {\n            result: WalletConnectionResult.FAILED,\n            wallet_type: connection.getName(),\n          })\n        }\n      }\n    },\n    [dispatch, setPendingError, toggleWalletDrawer]\n  )\n\n  return (\n    <Wrapper data-testid=\"wallet-modal\">\n      <AutoRow justify=\"space-between\" width=\"100%\" marginBottom=\"16px\">\n        <ThemedText.SubHeader fontWeight={500}>Connect a wallet</ThemedText.SubHeader>\n        <IconButton Icon={Settings} onClick={openSettings} data-testid=\"wallet-settings\" />\n      </AutoRow>\n      {pendingError ? (\n        pendingConnection && (\n          <ConnectionErrorView openOptions={openOptions} retryActivation={() => tryActivation(pendingConnection)} />\n        )\n      ) : (\n        <AutoColumn gap=\"16px\">\n          <OptionGrid data-testid=\"option-grid\">\n            {connections.map((connection) =>\n              connection.shouldDisplay() ? (\n                <Option\n                  key={connection.getName()}\n                  connection={connection}\n                  activate={() => tryActivation(connection)}\n                  pendingConnectionType={pendingConnection?.type}\n                />\n              ) : null\n            )}\n          </OptionGrid>\n          <PrivacyPolicyWrapper>\n            <PrivacyPolicyNotice />\n          </PrivacyPolicyWrapper>\n        </AutoColumn>\n      )}\n    </Wrapper>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}