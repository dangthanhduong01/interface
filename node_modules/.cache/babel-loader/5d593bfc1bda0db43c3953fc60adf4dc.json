{"ast":null,"code":"import * as Sentry from '@sentry/react';\n/**\n * Sets up TraceCallbackOptions for a Span (NB: Transaction extends Span).\n * @returns a handler which will run a TraceCallback and propagate its result.\n */\nfunction traceSpan(span) {\n  const traceChild = (name, callback, metadata) => {\n    const child = span === null || span === void 0 ? void 0 : span.startChild({\n      ...metadata,\n      op: name\n    });\n    return traceSpan(child)(callback);\n  };\n  const setTraceData = (key, value) => {\n    span === null || span === void 0 ? void 0 : span.setData(key, value);\n  };\n  const setTraceTag = (key, value) => {\n    span === null || span === void 0 ? void 0 : span.setTag(key, value);\n  };\n  const setTraceStatus = status => {\n    if (typeof status === 'number') {\n      span === null || span === void 0 ? void 0 : span.setHttpStatus(status);\n    } else {\n      span === null || span === void 0 ? void 0 : span.setStatus(status);\n    }\n  };\n  const setTraceError = error => {\n    span === null || span === void 0 ? void 0 : span.setData('error', error);\n  };\n  return async function boundTrace(callback) {\n    try {\n      return await callback({\n        traceChild,\n        setTraceData,\n        setTraceTag,\n        setTraceStatus,\n        setTraceError\n      });\n    } catch (error) {\n      // Do not overwrite any custom status or error data that was already set.\n      if (!(span === null || span === void 0 ? void 0 : span.status)) span === null || span === void 0 ? void 0 : span.setStatus('internal_error');\n      if (!(span === null || span === void 0 ? void 0 : span.data.error)) span === null || span === void 0 ? void 0 : span.setData('error', error);\n      throw error;\n    } finally {\n      // If no status was reported, assume that it was 'ok'. Otherwise, it will default to 'unknown'.\n      if (!(span === null || span === void 0 ? void 0 : span.status)) span === null || span === void 0 ? void 0 : span.setStatus('ok');\n      span === null || span === void 0 ? void 0 : span.finish();\n    }\n  };\n}\n\n/**\n * Traces the callback, adding any metadata to the trace.\n * @param name - The name of your trace.\n * @param callback - The callback to trace. The trace will run for the duration of the callback.\n * @param metadata - Any data or tags to include in the trace.\n */\nexport async function trace(name, callback, metadata) {\n  const transaction = Sentry.startTransaction({\n    name,\n    data: metadata === null || metadata === void 0 ? void 0 : metadata.data,\n    tags: metadata === null || metadata === void 0 ? void 0 : metadata.tags\n  });\n  return traceSpan(transaction)(callback);\n}","map":{"version":3,"names":["Sentry","traceSpan","span","traceChild","name","callback","metadata","child","startChild","op","setTraceData","key","value","setData","setTraceTag","setTag","setTraceStatus","status","setHttpStatus","setStatus","setTraceError","error","boundTrace","data","finish","trace","transaction","startTransaction","tags"],"sources":["/home/diep/freelance/interface/src/tracing/trace.ts"],"sourcesContent":["import * as Sentry from '@sentry/react'\nimport { Span, SpanStatusType } from '@sentry/tracing'\n\ntype TraceTags = {\n  is_widget: boolean\n}\n\ninterface TraceMetadata {\n  /** Arbitrary data stored on a trace. */\n  data?: Record<string, unknown>\n  /** Indexed (ie searchable) tags associated with a trace. */\n  tags?: Partial<TraceTags>\n}\n\n// These methods are provided as an abstraction so that users will not interact with Sentry directly.\n// This avoids tightly coupling Sentry to our instrumentation outside of this file, in case we swap services.\ninterface TraceCallbackOptions {\n  /**\n   * Traces the callback as a child of the active trace.\n   * @param name - The name of the child. (On Sentry, this will appear as the \"op\".)\n   * @param callback - The callback to trace. The child trace will run for the duration of the callback.\n   * @param metadata - Any data or tags to include in the child trace.\n   */\n  traceChild<T>(name: string, callback: TraceCallback<T>, metadata?: TraceMetadata): Promise<T>\n  setTraceData(key: string, value: unknown): void\n  setTraceTag<K extends keyof TraceTags>(key: K, value: TraceTags[K]): void\n  /**\n   * Sets the status of a trace. If unset, the status will be set to 'ok' (or 'internal_error' if the callback throws).\n   * @param status - If a number is passed, the corresponding http status will be used.\n   */\n  setTraceStatus(status: number | SpanStatusType): void\n  /** Sets the error data of a trace. If unset and the callback throws, the thrown error will be set. */\n  setTraceError(error: unknown): void\n}\ntype TraceCallback<T> = (options: TraceCallbackOptions) => Promise<T>\n\n/**\n * Sets up TraceCallbackOptions for a Span (NB: Transaction extends Span).\n * @returns a handler which will run a TraceCallback and propagate its result.\n */\nfunction traceSpan(span?: Span) {\n  const traceChild = <T>(name: string, callback: TraceCallback<T>, metadata?: TraceMetadata) => {\n    const child = span?.startChild({ ...metadata, op: name })\n    return traceSpan(child)(callback)\n  }\n  const setTraceData = <K extends keyof TraceTags>(key: K, value: TraceTags[K]) => {\n    span?.setData(key, value)\n  }\n  const setTraceTag = (key: string, value: string | number | boolean) => {\n    span?.setTag(key, value)\n  }\n  const setTraceStatus = (status: number | SpanStatusType) => {\n    if (typeof status === 'number') {\n      span?.setHttpStatus(status)\n    } else {\n      span?.setStatus(status)\n    }\n  }\n  const setTraceError = (error: unknown) => {\n    span?.setData('error', error)\n  }\n\n  return async function boundTrace<T>(callback: TraceCallback<T>): Promise<T> {\n    try {\n      return await callback({ traceChild, setTraceData, setTraceTag, setTraceStatus, setTraceError })\n    } catch (error) {\n      // Do not overwrite any custom status or error data that was already set.\n      if (!span?.status) span?.setStatus('internal_error')\n      if (!span?.data.error) span?.setData('error', error)\n\n      throw error\n    } finally {\n      // If no status was reported, assume that it was 'ok'. Otherwise, it will default to 'unknown'.\n      if (!span?.status) span?.setStatus('ok')\n      span?.finish()\n    }\n  }\n}\n\n/**\n * Traces the callback, adding any metadata to the trace.\n * @param name - The name of your trace.\n * @param callback - The callback to trace. The trace will run for the duration of the callback.\n * @param metadata - Any data or tags to include in the trace.\n */\nexport async function trace<T>(name: string, callback: TraceCallback<T>, metadata?: TraceMetadata): Promise<T> {\n  const transaction = Sentry.startTransaction({ name, data: metadata?.data, tags: metadata?.tags })\n  return traceSpan(transaction)(callback)\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,eAAe;AAoCvC;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,IAAW,EAAE;EAC9B,MAAMC,UAAU,GAAG,CAAIC,IAAY,EAAEC,QAA0B,EAAEC,QAAwB,KAAK;IAC5F,MAAMC,KAAK,GAAGL,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEM,UAAU,CAAC;MAAE,GAAGF,QAAQ;MAAEG,EAAE,EAAEL;IAAK,CAAC,CAAC;IACzD,OAAOH,SAAS,CAACM,KAAK,CAAC,CAACF,QAAQ,CAAC;EACnC,CAAC;EACD,MAAMK,YAAY,GAAG,CAA4BC,GAAM,EAAEC,KAAmB,KAAK;IAC/EV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,OAAO,CAACF,GAAG,EAAEC,KAAK,CAAC;EAC3B,CAAC;EACD,MAAME,WAAW,GAAG,CAACH,GAAW,EAAEC,KAAgC,KAAK;IACrEV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,MAAM,CAACJ,GAAG,EAAEC,KAAK,CAAC;EAC1B,CAAC;EACD,MAAMI,cAAc,GAAIC,MAA+B,IAAK;IAC1D,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MAC9Bf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgB,aAAa,CAACD,MAAM,CAAC;IAC7B,CAAC,MAAM;MACLf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,SAAS,CAACF,MAAM,CAAC;IACzB;EACF,CAAC;EACD,MAAMG,aAAa,GAAIC,KAAc,IAAK;IACxCnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,OAAO,CAAC,OAAO,EAAEQ,KAAK,CAAC;EAC/B,CAAC;EAED,OAAO,eAAeC,UAAU,CAAIjB,QAA0B,EAAc;IAC1E,IAAI;MACF,OAAO,MAAMA,QAAQ,CAAC;QAAEF,UAAU;QAAEO,YAAY;QAAEI,WAAW;QAAEE,cAAc;QAAEI;MAAc,CAAC,CAAC;IACjG,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACA,IAAI,EAACnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe,MAAM,GAAEf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,SAAS,CAAC,gBAAgB,CAAC;MACpD,IAAI,EAACjB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEqB,IAAI,CAACF,KAAK,GAAEnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,OAAO,CAAC,OAAO,EAAEQ,KAAK,CAAC;MAEpD,MAAMA,KAAK;IACb,CAAC,SAAS;MACR;MACA,IAAI,EAACnB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe,MAAM,GAAEf,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEiB,SAAS,CAAC,IAAI,CAAC;MACxCjB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,MAAM,EAAE;IAChB;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,KAAK,CAAIrB,IAAY,EAAEC,QAA0B,EAAEC,QAAwB,EAAc;EAC7G,MAAMoB,WAAW,GAAG1B,MAAM,CAAC2B,gBAAgB,CAAC;IAAEvB,IAAI;IAAEmB,IAAI,EAAEjB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEiB,IAAI;IAAEK,IAAI,EAAEtB,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEsB;EAAK,CAAC,CAAC;EACjG,OAAO3B,SAAS,CAACyB,WAAW,CAAC,CAACrB,QAAQ,CAAC;AACzC"},"metadata":{},"sourceType":"module"}