{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { DEFAULT_DEADLINE_FROM_NOW } from '../../constants/misc';\nimport { updateVersion } from '../global/actions';\nconst currentTimestamp = () => new Date().getTime();\nfunction pairKey(token0Address, token1Address) {\n  return `${token0Address};${token1Address}`;\n}\nexport const initialState = {\n  buyFiatFlowCompleted: undefined,\n  selectedWallet: undefined,\n  userExpertMode: false,\n  userLocale: null,\n  userClientSideRouter: false,\n  userHideClosedPositions: false,\n  userSlippageTolerance: 'auto',\n  userSlippageToleranceHasBeenMigratedToAuto: true,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true,\n  hideUniswapWalletBanner: false,\n  showSurveyPopup: undefined\n};\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    updateUserBuyFiatFlowCompleted(state, action) {\n      state.buyFiatFlowCompleted = action.payload;\n    },\n    updateSelectedWallet(state, _ref) {\n      let {\n        payload: {\n          wallet\n        }\n      } = _ref;\n      state.selectedWallet = wallet;\n    },\n    updateUserExpertMode(state, action) {\n      state.userExpertMode = action.payload.userExpertMode;\n      state.timestamp = currentTimestamp();\n    },\n    updateUserLocale(state, action) {\n      state.userLocale = action.payload.userLocale;\n      state.timestamp = currentTimestamp();\n    },\n    updateUserSlippageTolerance(state, action) {\n      state.userSlippageTolerance = action.payload.userSlippageTolerance;\n      state.timestamp = currentTimestamp();\n    },\n    updateUserDeadline(state, action) {\n      state.userDeadline = action.payload.userDeadline;\n      state.timestamp = currentTimestamp();\n    },\n    updateUserClientSideRouter(state, action) {\n      state.userClientSideRouter = action.payload.userClientSideRouter;\n    },\n    updateHideClosedPositions(state, action) {\n      state.userHideClosedPositions = action.payload.userHideClosedPositions;\n    },\n    updateHideUniswapWalletBanner(state, action) {\n      state.hideUniswapWalletBanner = action.payload.hideUniswapWalletBanner;\n    },\n    addSerializedToken(state, _ref2) {\n      let {\n        payload: {\n          serializedToken\n        }\n      } = _ref2;\n      if (!state.tokens) {\n        state.tokens = {};\n      }\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {};\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken;\n      state.timestamp = currentTimestamp();\n    },\n    addSerializedPair(state, _ref3) {\n      let {\n        payload: {\n          serializedPair\n        }\n      } = _ref3;\n      if (serializedPair.token0.chainId === serializedPair.token1.chainId && serializedPair.token0.address !== serializedPair.token1.address) {\n        const chainId = serializedPair.token0.chainId;\n        state.pairs[chainId] = state.pairs[chainId] || {};\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair;\n      }\n      state.timestamp = currentTimestamp();\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateVersion, state => {\n      // slippage isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userSlippageTolerance !== 'number' || !Number.isInteger(state.userSlippageTolerance) || state.userSlippageTolerance < 0 || state.userSlippageTolerance > 5000) {\n        state.userSlippageTolerance = 'auto';\n      } else {\n        if (!state.userSlippageToleranceHasBeenMigratedToAuto && [10, 50, 100].indexOf(state.userSlippageTolerance) !== -1) {\n          state.userSlippageTolerance = 'auto';\n          state.userSlippageToleranceHasBeenMigratedToAuto = true;\n        }\n      }\n\n      // deadline isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (typeof state.userDeadline !== 'number' || !Number.isInteger(state.userDeadline) || state.userDeadline < 60 || state.userDeadline > 180 * 60) {\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW;\n      }\n      state.lastUpdateVersionTimestamp = currentTimestamp();\n    });\n  }\n});\nexport const {\n  addSerializedPair,\n  addSerializedToken,\n  updateUserBuyFiatFlowCompleted,\n  updateSelectedWallet,\n  updateHideClosedPositions,\n  updateUserClientSideRouter,\n  updateUserDeadline,\n  updateUserExpertMode,\n  updateUserLocale,\n  updateUserSlippageTolerance,\n  updateHideUniswapWalletBanner\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","DEFAULT_DEADLINE_FROM_NOW","updateVersion","currentTimestamp","Date","getTime","pairKey","token0Address","token1Address","initialState","buyFiatFlowCompleted","undefined","selectedWallet","userExpertMode","userLocale","userClientSideRouter","userHideClosedPositions","userSlippageTolerance","userSlippageToleranceHasBeenMigratedToAuto","userDeadline","tokens","pairs","timestamp","URLWarningVisible","hideUniswapWalletBanner","showSurveyPopup","userSlice","name","reducers","updateUserBuyFiatFlowCompleted","state","action","payload","updateSelectedWallet","wallet","updateUserExpertMode","updateUserLocale","updateUserSlippageTolerance","updateUserDeadline","updateUserClientSideRouter","updateHideClosedPositions","updateHideUniswapWalletBanner","addSerializedToken","serializedToken","chainId","address","addSerializedPair","serializedPair","token0","token1","extraReducers","builder","addCase","Number","isInteger","indexOf","lastUpdateVersionTimestamp","actions","reducer"],"sources":["/home/diep/freelance/interface/src/state/user/reducer.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { ConnectionType } from 'connection'\nimport { SupportedLocale } from 'constants/locales'\n\nimport { DEFAULT_DEADLINE_FROM_NOW } from '../../constants/misc'\nimport { updateVersion } from '../global/actions'\nimport { SerializedPair, SerializedToken } from './types'\n\nconst currentTimestamp = () => new Date().getTime()\n\nexport interface UserState {\n  buyFiatFlowCompleted: boolean | undefined\n\n  selectedWallet?: ConnectionType\n\n  // the timestamp of the last updateVersion action\n  lastUpdateVersionTimestamp?: number\n\n  userLocale: SupportedLocale | null\n\n  userExpertMode: boolean\n\n  userClientSideRouter: boolean // whether routes should be calculated with the client side router only\n\n  // hides closed (inactive) positions across the app\n  userHideClosedPositions: boolean\n\n  // user defined slippage tolerance in bips, used in all txns\n  userSlippageTolerance: number | 'auto'\n  userSlippageToleranceHasBeenMigratedToAuto: boolean // temporary flag for migration status\n\n  // deadline set by user in minutes, used in all txns\n  userDeadline: number\n\n  tokens: {\n    [chainId: number]: {\n      [address: string]: SerializedToken\n    }\n  }\n\n  pairs: {\n    [chainId: number]: {\n      // keyed by token0Address:token1Address\n      [key: string]: SerializedPair\n    }\n  }\n\n  timestamp: number\n  URLWarningVisible: boolean\n  hideUniswapWalletBanner: boolean\n  // undefined means has not gone through A/B split yet\n  showSurveyPopup: boolean | undefined\n}\n\nfunction pairKey(token0Address: string, token1Address: string) {\n  return `${token0Address};${token1Address}`\n}\n\nexport const initialState: UserState = {\n  buyFiatFlowCompleted: undefined,\n  selectedWallet: undefined,\n  userExpertMode: false,\n  userLocale: null,\n  userClientSideRouter: false,\n  userHideClosedPositions: false,\n  userSlippageTolerance: 'auto',\n  userSlippageToleranceHasBeenMigratedToAuto: true,\n  userDeadline: DEFAULT_DEADLINE_FROM_NOW,\n  tokens: {},\n  pairs: {},\n  timestamp: currentTimestamp(),\n  URLWarningVisible: true,\n  hideUniswapWalletBanner: false,\n  showSurveyPopup: undefined,\n}\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    updateUserBuyFiatFlowCompleted(state, action) {\n      state.buyFiatFlowCompleted = action.payload\n    },\n    updateSelectedWallet(state, { payload: { wallet } }) {\n      state.selectedWallet = wallet\n    },\n    updateUserExpertMode(state, action) {\n      state.userExpertMode = action.payload.userExpertMode\n      state.timestamp = currentTimestamp()\n    },\n    updateUserLocale(state, action) {\n      state.userLocale = action.payload.userLocale\n      state.timestamp = currentTimestamp()\n    },\n    updateUserSlippageTolerance(state, action) {\n      state.userSlippageTolerance = action.payload.userSlippageTolerance\n      state.timestamp = currentTimestamp()\n    },\n    updateUserDeadline(state, action) {\n      state.userDeadline = action.payload.userDeadline\n      state.timestamp = currentTimestamp()\n    },\n    updateUserClientSideRouter(state, action) {\n      state.userClientSideRouter = action.payload.userClientSideRouter\n    },\n    updateHideClosedPositions(state, action) {\n      state.userHideClosedPositions = action.payload.userHideClosedPositions\n    },\n    updateHideUniswapWalletBanner(state, action) {\n      state.hideUniswapWalletBanner = action.payload.hideUniswapWalletBanner\n    },\n    addSerializedToken(state, { payload: { serializedToken } }) {\n      if (!state.tokens) {\n        state.tokens = {}\n      }\n      state.tokens[serializedToken.chainId] = state.tokens[serializedToken.chainId] || {}\n      state.tokens[serializedToken.chainId][serializedToken.address] = serializedToken\n      state.timestamp = currentTimestamp()\n    },\n    addSerializedPair(state, { payload: { serializedPair } }) {\n      if (\n        serializedPair.token0.chainId === serializedPair.token1.chainId &&\n        serializedPair.token0.address !== serializedPair.token1.address\n      ) {\n        const chainId = serializedPair.token0.chainId\n        state.pairs[chainId] = state.pairs[chainId] || {}\n        state.pairs[chainId][pairKey(serializedPair.token0.address, serializedPair.token1.address)] = serializedPair\n      }\n      state.timestamp = currentTimestamp()\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(updateVersion, (state) => {\n      // slippage isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (\n        typeof state.userSlippageTolerance !== 'number' ||\n        !Number.isInteger(state.userSlippageTolerance) ||\n        state.userSlippageTolerance < 0 ||\n        state.userSlippageTolerance > 5000\n      ) {\n        state.userSlippageTolerance = 'auto'\n      } else {\n        if (\n          !state.userSlippageToleranceHasBeenMigratedToAuto &&\n          [10, 50, 100].indexOf(state.userSlippageTolerance) !== -1\n        ) {\n          state.userSlippageTolerance = 'auto'\n          state.userSlippageToleranceHasBeenMigratedToAuto = true\n        }\n      }\n\n      // deadline isnt being tracked in local storage, reset to default\n      // noinspection SuspiciousTypeOfGuard\n      if (\n        typeof state.userDeadline !== 'number' ||\n        !Number.isInteger(state.userDeadline) ||\n        state.userDeadline < 60 ||\n        state.userDeadline > 180 * 60\n      ) {\n        state.userDeadline = DEFAULT_DEADLINE_FROM_NOW\n      }\n\n      state.lastUpdateVersionTimestamp = currentTimestamp()\n    })\n  },\n})\n\nexport const {\n  addSerializedPair,\n  addSerializedToken,\n  updateUserBuyFiatFlowCompleted,\n  updateSelectedWallet,\n  updateHideClosedPositions,\n  updateUserClientSideRouter,\n  updateUserDeadline,\n  updateUserExpertMode,\n  updateUserLocale,\n  updateUserSlippageTolerance,\n  updateHideUniswapWalletBanner,\n} = userSlice.actions\nexport default userSlice.reducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}