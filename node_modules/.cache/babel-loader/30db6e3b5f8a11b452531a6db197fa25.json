{"ast":null,"code":"import { logger, dropUndefinedKeys } from '@sentry/utils';\nimport { DEFAULT_ENVIRONMENT } from '../constants.js';\nimport { getCurrentHub } from '../hub.js';\nimport { Span, SpanRecorder } from './span.js';\n\n/** JSDoc */\nclass Transaction extends Span {\n  /**\n   * The reference to the current hub.\n   */\n\n  __init() {\n    this._measurements = {};\n  }\n  __init2() {\n    this._contexts = {};\n  }\n  __init3() {\n    this._frozenDynamicSamplingContext = undefined;\n  }\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  constructor(transactionContext, hub) {\n    super(transactionContext);\n    Transaction.prototype.__init.call(this);\n    Transaction.prototype.__init2.call(this);\n    Transaction.prototype.__init3.call(this);\n    this._hub = hub || getCurrentHub();\n    this._name = transactionContext.name || '';\n    this.metadata = {\n      source: 'custom',\n      ...transactionContext.metadata,\n      spanMetadata: {}\n    };\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = {\n        ...incomingDynamicSamplingContext\n      };\n    }\n  }\n\n  /** Getter for `name` property */\n  get name() {\n    return this._name;\n  }\n\n  /** Setter for `name` property, which also sets `source` as custom */\n  set name(newName) {\n    this.setName(newName);\n  }\n\n  /**\n   * JSDoc\n   */\n  setName(name) {\n    let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'custom';\n    this._name = name;\n    this.metadata.source = source;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  initSpanRecorder() {\n    let maxlen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMeasurement(name, value) {\n    let unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    this._measurements[name] = {\n      value,\n      unit\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setMetadata(newMetadata) {\n    this.metadata = {\n      ...this.metadata,\n      ...newMetadata\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  finish(endTimestamp) {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n    if (!this.name) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev, current) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n    const metadata = this.metadata;\n    const transaction = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: this.getTraceContext()\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        dynamicSamplingContext: this.getDynamicSamplingContext()\n      },\n      ...(metadata.source && {\n        transaction_info: {\n          source: metadata.source\n        }\n      })\n    };\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n    if (hasMeasurements) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n      transaction.measurements = this._measurements;\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toContext() {\n    const spanContext = super.toContext();\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateWithContext(transactionContext) {\n    super.updateWithContext(transactionContext);\n    this.name = transactionContext.name || '';\n    this._trimEnd = transactionContext.trimEnd;\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   */\n  getDynamicSamplingContext() {\n    if (this._frozenDynamicSamplingContext) {\n      return this._frozenDynamicSamplingContext;\n    }\n    const hub = this._hub || getCurrentHub();\n    const client = hub && hub.getClient();\n    if (!client) return {};\n    const {\n      environment,\n      release\n    } = client.getOptions() || {};\n    const {\n      publicKey: public_key\n    } = client.getDsn() || {};\n    const maybeSampleRate = this.metadata.sampleRate;\n    const sample_rate = maybeSampleRate !== undefined ? maybeSampleRate.toString() : undefined;\n    const {\n      segment: user_segment\n    } = hub.getScope().getUser() || {};\n    const source = this.metadata.source;\n\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const transaction = source && source !== 'url' ? this.name : undefined;\n    const dsc = dropUndefinedKeys({\n      environment: environment || DEFAULT_ENVIRONMENT,\n      release,\n      transaction,\n      user_segment,\n      public_key,\n      trace_id: this.traceId,\n      sample_rate\n    });\n\n    // Uncomment if we want to make DSC immutable\n    // this._frozenDynamicSamplingContext = dsc;\n\n    client.emit && client.emit('createDsc', dsc);\n    return dsc;\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  setHub(hub) {\n    this._hub = hub;\n  }\n}\nexport { Transaction };","map":{"version":3,"sources":["../../../src/tracing/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  Context,\n  Contexts,\n  DynamicSamplingContext,\n  Event,\n  Measurements,\n  MeasurementUnit,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\n\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport type { Hub } from '../hub';\nimport { getCurrentHub } from '../hub';\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public metadata: TransactionMetadata;\n\n  /**\n   * The reference to the current hub.\n   */\n  public _hub: Hub;\n\n  private _name: string;\n\n  private _measurements: Measurements = {};\n\n  private _contexts: Contexts = {};\n\n  private _trimEnd?: boolean;\n\n  private _frozenDynamicSamplingContext: Readonly<Partial<DynamicSamplingContext>> | undefined = undefined;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    this._hub = hub || getCurrentHub();\n\n    this._name = transactionContext.name || '';\n\n    this.metadata = {\n      source: 'custom',\n      ...transactionContext.metadata,\n      spanMetadata: {},\n    };\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n\n    // If Dynamic Sampling Context is provided during the creation of the transaction, we freeze it as it usually means\n    // there is incoming Dynamic Sampling Context. (Either through an incoming request, a baggage meta-tag, or other means)\n    const incomingDynamicSamplingContext = this.metadata.dynamicSamplingContext;\n    if (incomingDynamicSamplingContext) {\n      // We shallow copy this in case anything writes to the original reference of the passed in `dynamicSamplingContext`\n      this._frozenDynamicSamplingContext = { ...incomingDynamicSamplingContext };\n    }\n  }\n\n  /** Getter for `name` property */\n  public get name(): string {\n    return this._name;\n  }\n\n  /** Setter for `name` property, which also sets `source` as custom */\n  public set name(newName: string) {\n    this.setName(newName);\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string, source: TransactionMetadata['source'] = 'custom'): void {\n    this._name = name;\n    this.metadata.source = source;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): void {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMeasurement(name: string, value: number, unit: MeasurementUnit = ''): void {\n    this._measurements[name] = { value, unit };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setMetadata(newMetadata: Partial<TransactionMetadata>): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      __DEBUG_BUILD__ && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    const client = this._hub.getClient();\n    if (client && client.emit) {\n      client.emit('finishTransaction', this);\n    }\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      __DEBUG_BUILD__ && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const metadata = this.metadata;\n\n    const transaction: Event = {\n      contexts: {\n        ...this._contexts,\n        // We don't want to override trace context\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        ...metadata,\n        dynamicSamplingContext: this.getDynamicSamplingContext(),\n      },\n      ...(metadata.source && {\n        transaction_info: {\n          source: metadata.source,\n        },\n      }),\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      __DEBUG_BUILD__ &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    __DEBUG_BUILD__ && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name || '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n\n  /**\n   * @inheritdoc\n   *\n   * @experimental\n   */\n  public getDynamicSamplingContext(): Readonly<Partial<DynamicSamplingContext>> {\n    if (this._frozenDynamicSamplingContext) {\n      return this._frozenDynamicSamplingContext;\n    }\n\n    const hub: Hub = this._hub || getCurrentHub();\n    const client = hub && hub.getClient();\n\n    if (!client) return {};\n\n    const { environment, release } = client.getOptions() || {};\n    const { publicKey: public_key } = client.getDsn() || {};\n\n    const maybeSampleRate = this.metadata.sampleRate;\n    const sample_rate = maybeSampleRate !== undefined ? maybeSampleRate.toString() : undefined;\n\n    const { segment: user_segment } = hub.getScope().getUser() || {};\n\n    const source = this.metadata.source;\n\n    // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n    const transaction = source && source !== 'url' ? this.name : undefined;\n\n    const dsc = dropUndefinedKeys({\n      environment: environment || DEFAULT_ENVIRONMENT,\n      release,\n      transaction,\n      user_segment,\n      public_key,\n      trace_id: this.traceId,\n      sample_rate,\n    });\n\n    // Uncomment if we want to make DSC immutable\n    // this._frozenDynamicSamplingContext = dsc;\n\n    client.emit && client.emit('createDsc', dsc);\n\n    return dsc;\n  }\n\n  /**\n   * Override the current hub with a new one.\n   * Used if you want another hub to finish the transaction.\n   *\n   * @internal\n   */\n  public setHub(hub: Hub): void {\n    this._hub = hub;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}