{"ast":null,"code":"var _s = $RefreshSig$();\nimport { TradeType } from '@uniswap/sdk-core';\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance';\nimport { useBestTrade } from 'hooks/useBestTrade';\nimport { useMemo } from 'react';\nexport default function useDerivedPayWithAnyTokenSwapInfo(inputCurrency, parsedOutputAmount) {\n  _s();\n  const {\n    state,\n    trade\n  } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined);\n  const allowedSlippage = useAutoSlippageTolerance(trade);\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade === null || trade === void 0 ? void 0 : trade.maximumAmountIn(allowedSlippage);\n    return (maximumAmountIn === null || maximumAmountIn === void 0 ? void 0 : maximumAmountIn.currency.isToken) ? maximumAmountIn : undefined;\n  }, [allowedSlippage, trade]);\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage\n    };\n  }, [allowedSlippage, maximumAmountIn, state, trade]);\n}\n_s(useDerivedPayWithAnyTokenSwapInfo, \"qYZUZrH52aEWyQ0a/CtX439H7ok=\", false, function () {\n  return [useBestTrade, useAutoSlippageTolerance];\n});","map":{"version":3,"names":["TradeType","useAutoSlippageTolerance","useBestTrade","useMemo","useDerivedPayWithAnyTokenSwapInfo","inputCurrency","parsedOutputAmount","state","trade","EXACT_OUTPUT","undefined","allowedSlippage","maximumAmountIn","currency","isToken"],"sources":["/home/diep/freelance/interface/src/nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts"],"sourcesContent":["import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n  maximumAmountIn: CurrencyAmount<Token> | undefined\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\n  const allowedSlippage = useAutoSlippageTolerance(trade)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n"],"mappings":";AAAA,SAAmEA,SAAS,QAAQ,mBAAmB;AACvG,OAAOC,wBAAwB,MAAM,gCAAgC;AACrE,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,OAAO,QAAQ,OAAO;AAG/B,eAAe,SAASC,iCAAiC,CACvDC,aAAwB,EACxBC,kBAA2D,EAM3D;EAAA;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAGN,YAAY,CAACF,SAAS,CAACS,YAAY,EAAEH,kBAAkB,EAAED,aAAa,aAAbA,aAAa,cAAbA,aAAa,GAAIK,SAAS,CAAC;EAC7G,MAAMC,eAAe,GAAGV,wBAAwB,CAACO,KAAK,CAAC;EACvD,MAAMI,eAAe,GAAGT,OAAO,CAAC,MAAM;IACpC,MAAMS,eAAe,GAAGJ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,eAAe,CAACD,eAAe,CAAC;IAC/D,OAAO,CAAAC,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEC,QAAQ,CAACC,OAAO,IAAIF,eAAe,GAA6BF,SAAS;EACnG,CAAC,EAAE,CAACC,eAAe,EAAEH,KAAK,CAAC,CAAC;EAE5B,OAAOL,OAAO,CAAC,MAAM;IACnB,OAAO;MACLI,KAAK;MACLC,KAAK;MACLI,eAAe;MACfD;IACF,CAAC;EACH,CAAC,EAAE,CAACA,eAAe,EAAEC,eAAe,EAAEL,KAAK,EAAEC,KAAK,CAAC,CAAC;AACtD;AAAC,GAxBuBJ,iCAAiC;EAAA,QAS9BF,YAAY,EACbD,wBAAwB;AAAA"},"metadata":{},"sourceType":"module"}