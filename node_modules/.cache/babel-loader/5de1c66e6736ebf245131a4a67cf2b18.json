{"ast":null,"code":"import { makeDsn, logger, checkOrSetAlreadyCaught, isPrimitive, resolvedSyncPromise, addItemToEnvelope, createAttachmentEnvelopeItem, SyncPromise, rejectedSyncPromise, SentryError, isThenable, isPlainObject } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api.js';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope.js';\nimport { setupIntegrations, setupIntegration } from './integration.js';\nimport { updateSession } from './session.js';\nimport { prepareEvent } from './utils/prepareEvent.js';\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nclass BaseClient {\n  /** Options passed to the SDK. */\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n  /** Array of set up integrations. */\n  __init() {\n    this._integrations = {};\n  }\n\n  /** Indicates whether this client's integrations have been set up. */\n  __init2() {\n    this._integrationsInitialized = false;\n  }\n\n  /** Number of calls being processed */\n  __init3() {\n    this._numProcessing = 0;\n  }\n\n  /** Holds flushable  */\n  __init4() {\n    this._outcomes = {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  __init5() {\n    this._hooks = {};\n  }\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  constructor(options) {\n    BaseClient.prototype.__init.call(this);\n    BaseClient.prototype.__init2.call(this);\n    BaseClient.prototype.__init3.call(this);\n    BaseClient.prototype.__init4.call(this);\n    BaseClient.prototype.__init5.call(this);\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url\n      });\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('No DSN provided, client will not do anything.');\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  captureException(exception, hint, scope) {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n    let eventId = hint && hint.event_id;\n    this._process(this.eventFromException(exception, hint).then(event => this._captureEvent(event, hint, scope)).then(result => {\n      eventId = result;\n    }));\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureMessage(message,\n  // eslint-disable-next-line deprecation/deprecation\n  level, hint, scope) {\n    let eventId = hint && hint.event_id;\n    const promisedEvent = isPrimitive(message) ? this.eventFromMessage(String(message), level, hint) : this.eventFromException(message, hint);\n    this._process(promisedEvent.then(event => this._captureEvent(event, hint, scope)).then(result => {\n      eventId = result;\n    }));\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint, scope) {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n    let eventId = hint && hint.event_id;\n    this._process(this._captureEvent(event, hint, scope).then(result => {\n      eventId = result;\n    }));\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureSession(session) {\n    if (!this._isEnabled()) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n    if (!(typeof session.release === 'string')) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, {\n        init: false\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getDsn() {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getOptions() {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */\n  getSdkMetadata() {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getTransport() {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  flush(timeout) {\n    const transport = this._transport;\n    if (transport) {\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  close(timeout) {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  setupIntegrations() {\n    if (this._isEnabled() && !this._integrationsInitialized) {\n      this._integrations = setupIntegrations(this._options.integrations);\n      this._integrationsInitialized = true;\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   */\n  getIntegrationById(integrationId) {\n    return this._integrations[integrationId];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIntegration(integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addIntegration(integration) {\n    setupIntegration(integration, this._integrations);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  sendEvent(event) {\n    let hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this._dsn) {\n      let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n      for (const attachment of hint.attachments || []) {\n        env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment, this._options.transportOptions && this._options.transportOptions.textEncoder));\n      }\n      const promise = this._sendEnvelope(env);\n      if (promise) {\n        promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  sendSession(session) {\n    if (this._dsn) {\n      const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n      void this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  recordDroppedEvent(reason, category, _event) {\n    // Note: we use `event` in replay, where we overwrite this hook.\n\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(`Adding outcome: \"${key}\"`);\n\n      // The following works because undefined + 1 === NaN and NaN is falsy\n      this._outcomes[key] = this._outcomes[key] + 1 || 1;\n    }\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n  on(hook, callback) {\n    if (!this._hooks[hook]) {\n      this._hooks[hook] = [];\n    }\n\n    // @ts-ignore We assue the types are correct\n    this._hooks[hook].push(callback);\n  }\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n  emit(hook) {\n    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n    if (this._hooks[hook]) {\n      // @ts-ignore we cannot enforce the callback to match the hook\n      this._hooks[hook].forEach(callback => callback(...rest));\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  _updateSessionFromEvent(session, event) {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n    if (exceptions) {\n      errored = true;\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = sessionNonTerminal && session.errors === 0 || sessionNonTerminal && crashed;\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && {\n          status: 'crashed'\n        }),\n        errors: session.errors || Number(errored || crashed)\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  _isClientDoneProcessing(timeout) {\n    return new SyncPromise(resolve => {\n      let ticked = 0;\n      const tick = 1;\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  _isEnabled() {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  _prepareEvent(event, hint, scope) {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n    return prepareEvent(options, event, hint, scope);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  _captureEvent(event) {\n    let hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let scope = arguments.length > 2 ? arguments[2] : undefined;\n    return this._processEvent(event, hint, scope).then(finalEvent => {\n      return finalEvent.event_id;\n    }, reason => {\n      if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n        // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n        // control flow, log just the message (no stack) as a log-level log.\n        const sentryError = reason;\n        if (sentryError.logLevel === 'log') {\n          logger.log(sentryError.message);\n        } else {\n          logger.warn(sentryError);\n        }\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  _processEvent(event, hint, scope) {\n    const options = this.getOptions();\n    const {\n      sampleRate\n    } = options;\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.', 'log'));\n    }\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return rejectedSyncPromise(new SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, 'log'));\n    }\n    const dataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n    return this._prepareEvent(event, hint, scope).then(prepared => {\n      if (prepared === null) {\n        this.recordDroppedEvent('event_processor', dataCategory, event);\n        throw new SentryError('An event processor returned `null`, will not send event.', 'log');\n      }\n      const isInternalException = hint.data && hint.data.__sentry__ === true;\n      if (isInternalException) {\n        return prepared;\n      }\n      const result = processBeforeSend(options, prepared, hint);\n      return _validateBeforeSendResult(result, beforeSendLabel);\n    }).then(processedEvent => {\n      if (processedEvent === null) {\n        this.recordDroppedEvent('before_send', dataCategory, event);\n        throw new SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n      }\n      const session = scope && scope.getSession();\n      if (!isTransaction && session) {\n        this._updateSessionFromEvent(session, processedEvent);\n      }\n\n      // None of the Sentry built event processor will update transaction name,\n      // so if the transaction name has been changed by an event processor, we know\n      // it has to come from custom event processor added by a user\n      const transactionInfo = processedEvent.transaction_info;\n      if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n        const source = 'custom';\n        processedEvent.transaction_info = {\n          ...transactionInfo,\n          source\n        };\n      }\n      this.sendEvent(processedEvent, hint);\n      return processedEvent;\n    }).then(null, reason => {\n      if (reason instanceof SentryError) {\n        throw reason;\n      }\n      this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n      throw new SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`);\n    });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  _process(promise) {\n    this._numProcessing++;\n    void promise.then(value => {\n      this._numProcessing--;\n      return value;\n    }, reason => {\n      this._numProcessing--;\n      return reason;\n    });\n  }\n\n  /**\n   * @inheritdoc\n   */\n  _sendEnvelope(envelope) {\n    if (this._transport && this._dsn) {\n      this.emit('beforeEnvelope', envelope);\n      return this._transport.send(envelope).then(null, reason => {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  _clearOutcomes() {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':');\n      return {\n        reason,\n        category,\n        quantity: outcomes[key]\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(event => {\n      if (!isPlainObject(event) && event !== null) {\n        throw new SentryError(invalidValueError);\n      }\n      return event;\n    }, e => {\n      throw new SentryError(`${beforeSendLabel} rejected with ${e}`);\n    });\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(options, event, hint) {\n  const {\n    beforeSend,\n    beforeSendTransaction\n  } = options;\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n  if (isTransactionEvent(event) && beforeSendTransaction) {\n    return beforeSendTransaction(event, hint);\n  }\n  return event;\n}\nfunction isErrorEvent(event) {\n  return event.type === undefined;\n}\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\nexport { BaseClient };","map":{"version":3,"sources":["../../src/baseclient.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport type {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  ClientOptions,\n  DataCategory,\n  DsnComponents,\n  DynamicSamplingContext,\n  Envelope,\n  ErrorEvent,\n  Event,\n  EventDropReason,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Outcome,\n  SdkMetadata,\n  Session,\n  SessionAggregates,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionEvent,\n  Transport,\n  TransportMakeRequestResponse,\n} from '@sentry/types';\nimport {\n  addItemToEnvelope,\n  checkOrSetAlreadyCaught,\n  createAttachmentEnvelopeItem,\n  isPlainObject,\n  isPrimitive,\n  isThenable,\n  logger,\n  makeDsn,\n  rejectedSyncPromise,\n  resolvedSyncPromise,\n  SentryError,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope';\nimport type { IntegrationIndex } from './integration';\nimport { setupIntegration, setupIntegrations } from './integration';\nimport type { Scope } from './scope';\nimport { updateSession } from './session';\nimport { prepareEvent } from './utils/prepareEvent';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<O extends ClientOptions> implements Client<O> {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: DsnComponents;\n\n  protected readonly _transport?: Transport;\n\n  /** Array of set up integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Indicates whether this client's integrations have been set up. */\n  protected _integrationsInitialized: boolean = false;\n\n  /** Number of calls being processed */\n  protected _numProcessing: number = 0;\n\n  /** Holds flushable  */\n  private _outcomes: { [key: string]: number } = {};\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private _hooks: Record<string, Function[]> = {};\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n  protected constructor(options: O) {\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options);\n      this._transport = options.transport({\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.warn('No DSN provided, client will not do anything.');\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this.eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n    scope?: Scope,\n  ): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(String(message), level, hint)\n      : this.eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      __DEBUG_BUILD__ && logger.log(ALREADY_SEEN_ERROR);\n      return;\n    }\n\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!this._isEnabled()) {\n      __DEBUG_BUILD__ && logger.warn('SDK not enabled, will not capture session.');\n      return;\n    }\n\n    if (!(typeof session.release === 'string')) {\n      __DEBUG_BUILD__ && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): DsnComponents | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */\n  public getSdkMetadata(): SdkMetadata | undefined {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport | undefined {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    const transport = this._transport;\n    if (transport) {\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled() && !this._integrationsInitialized) {\n      this._integrations = setupIntegrations(this._options.integrations);\n      this._integrationsInitialized = true;\n    }\n  }\n\n  /**\n   * Gets an installed integration by its `id`.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `id` was installed.\n   */\n  public getIntegrationById(integrationId: string): Integration | undefined {\n    return this._integrations[integrationId];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addIntegration(integration: Integration): void {\n    setupIntegration(integration, this._integrations);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint: EventHint = {}): void {\n    if (this._dsn) {\n      let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n      for (const attachment of hint.attachments || []) {\n        env = addItemToEnvelope(\n          env,\n          createAttachmentEnvelopeItem(\n            attachment,\n            this._options.transportOptions && this._options.transportOptions.textEncoder,\n          ),\n        );\n      }\n\n      const promise = this._sendEnvelope(env);\n      if (promise) {\n        promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session | SessionAggregates): void {\n    if (this._dsn) {\n      const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n      void this._sendEnvelope(env);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public recordDroppedEvent(reason: EventDropReason, category: DataCategory, _event?: Event): void {\n    // Note: we use `event` in replay, where we overwrite this hook.\n\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      __DEBUG_BUILD__ && logger.log(`Adding outcome: \"${key}\"`);\n\n      // The following works because undefined + 1 === NaN and NaN is falsy\n      this._outcomes[key] = this._outcomes[key] + 1 || 1;\n    }\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n\n  /** @inheritdoc */\n  public on(hook: 'startTransaction' | 'finishTransaction', callback: (transaction: Transaction) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeEnvelope', callback: (envelope: Envelope) => void): void;\n\n  /** @inheritdoc */\n  public on(\n    hook: 'afterSendEvent',\n    callback: (event: Event, sendResponse: TransportMakeRequestResponse | void) => void,\n  ): void;\n\n  /** @inheritdoc */\n  public on(hook: 'beforeAddBreadcrumb', callback: (breadcrumb: Breadcrumb, hint?: BreadcrumbHint) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: 'createDsc', callback: (dsc: DynamicSamplingContext) => void): void;\n\n  /** @inheritdoc */\n  public on(hook: string, callback: unknown): void {\n    if (!this._hooks[hook]) {\n      this._hooks[hook] = [];\n    }\n\n    // @ts-ignore We assue the types are correct\n    this._hooks[hook].push(callback);\n  }\n\n  /** @inheritdoc */\n  public emit(hook: 'startTransaction' | 'finishTransaction', transaction: Transaction): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeEnvelope', envelope: Envelope): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'afterSendEvent', event: Event, sendResponse: TransportMakeRequestResponse | void): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'beforeAddBreadcrumb', breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void;\n\n  /** @inheritdoc */\n  public emit(hook: 'createDsc', dsc: DynamicSamplingContext): void;\n\n  /** @inheritdoc */\n  public emit(hook: string, ...rest: unknown[]): void {\n    if (this._hooks[hook]) {\n      // @ts-ignore we cannot enforce the callback to match the hook\n      this._hooks[hook].forEach(callback => callback(...rest));\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n  protected _isClientDoneProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n    return prepareEvent(options, event, hint, scope);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint: EventHint = {}, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (__DEBUG_BUILD__) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          const sentryError = reason as SentryError;\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event> {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    if (!this._isEnabled()) {\n      return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.', 'log'));\n    }\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (isError && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n          'log',\n        ),\n      );\n    }\n\n    const dataCategory: DataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n\n    return this._prepareEvent(event, hint, scope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n\n        const isInternalException = hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory, event);\n          throw new SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n        }\n\n        const session = scope && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * @inheritdoc\n   */\n  protected _sendEnvelope(envelope: Envelope): PromiseLike<void | TransportMakeRequestResponse> | void {\n    if (this._transport && this._dsn) {\n      this.emit('beforeEnvelope', envelope);\n\n      return this._transport.send(envelope).then(null, reason => {\n        __DEBUG_BUILD__ && logger.error('Error while sending event:', reason);\n      });\n    } else {\n      __DEBUG_BUILD__ && logger.error('Transport disabled');\n    }\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n  protected _clearOutcomes(): Outcome[] {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.keys(outcomes).map(key => {\n      const [reason, category] = key.split(':') as [EventDropReason, DataCategory];\n      return {\n        reason,\n        category,\n        quantity: outcomes[key],\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public abstract eventFromException(_exception: any, _hint?: EventHint): PromiseLike<Event>;\n\n  /**\n   * @inheritDoc\n   */\n  public abstract eventFromMessage(\n    _message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    _level?: Severity | SeverityLevel,\n    _hint?: EventHint,\n  ): PromiseLike<Event>;\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult: PromiseLike<Event | null> | Event | null,\n  beforeSendLabel: string,\n): PromiseLike<Event | null> | Event | null {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw new SentryError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n): PromiseLike<Event | null> | Event | null {\n  const { beforeSend, beforeSendTransaction } = options;\n\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n\n  if (isTransactionEvent(event) && beforeSendTransaction) {\n    return beforeSendTransaction(event, hint);\n  }\n\n  return event;\n}\n\nfunction isErrorEvent(event: Event): event is ErrorEvent {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event: Event): event is TransactionEvent {\n  return event.type === 'transaction';\n}\n"]},"metadata":{},"sourceType":"module"}