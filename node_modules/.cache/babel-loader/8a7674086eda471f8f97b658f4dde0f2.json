{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { isAddress } from '@ethersproject/address';\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql';\nimport gql from 'graphql-tag';\nimport { blocklistedCollections } from 'nft/utils';\nimport { useMemo } from 'react';\nimport { useCollectionSearchQuery } from '../__generated__/types-and-hooks';\nimport { formatCollectionQueryData, useCollection } from './Collection';\nconst MAX_SEARCH_RESULTS = 6;\ngql`\n  query CollectionSearch($query: String!) {\n    nftCollections(filter: { nameQuery: $query }) {\n      edges {\n        cursor\n        node {\n          image {\n            url\n          }\n          isVerified\n          name\n          numAssets\n          nftContracts {\n            address\n            chain\n            name\n            symbol\n            totalSupply\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`;\nfunction useCollectionQuerySearch(query, skip) {\n  _s();\n  const {\n    data: queryData,\n    loading\n  } = useCollectionSearchQuery({\n    variables: {\n      query\n    },\n    skip: skip || !query\n  });\n  return useMemo(() => {\n    var _queryData$nftCollect, _queryData$nftCollect2, _queryData$nftCollect3;\n    return {\n      data: (_queryData$nftCollect = queryData === null || queryData === void 0 ? void 0 : (_queryData$nftCollect2 = queryData.nftCollections) === null || _queryData$nftCollect2 === void 0 ? void 0 : (_queryData$nftCollect3 = _queryData$nftCollect2.edges) === null || _queryData$nftCollect3 === void 0 ? void 0 : _queryData$nftCollect3.filter(collectionEdge => {\n        var _collectionEdge$node$, _collectionEdge$node$2, _collectionEdge$node$3, _collectionEdge$node$4;\n        return ((_collectionEdge$node$ = collectionEdge.node.nftContracts) === null || _collectionEdge$node$ === void 0 ? void 0 : (_collectionEdge$node$2 = _collectionEdge$node$[0]) === null || _collectionEdge$node$2 === void 0 ? void 0 : _collectionEdge$node$2.address) && !blocklistedCollections.includes((_collectionEdge$node$3 = collectionEdge.node.nftContracts) === null || _collectionEdge$node$3 === void 0 ? void 0 : (_collectionEdge$node$4 = _collectionEdge$node$3[0]) === null || _collectionEdge$node$4 === void 0 ? void 0 : _collectionEdge$node$4.address);\n      }).slice(0, MAX_SEARCH_RESULTS).map(collectionEdge => {\n        const queryCollection = collectionEdge.node;\n        return formatCollectionQueryData(queryCollection);\n      })) !== null && _queryData$nftCollect !== void 0 ? _queryData$nftCollect : [],\n      loading\n    };\n  }, [loading, queryData]);\n}\n_s(useCollectionQuerySearch, \"pACWEvEJw5QK/OlE6fTV4KxZ5y4=\", false, function () {\n  return [useCollectionSearchQuery];\n});\nexport function useCollectionSearch(queryOrAddress) {\n  _s2();\n  const isNftGraphqlEnabled = useNftGraphqlEnabled();\n  const isName = !isAddress(queryOrAddress.toLowerCase());\n  const queryResult = useCollectionQuerySearch(queryOrAddress, isNftGraphqlEnabled ? !isName : true);\n  const addressResult = useCollection(queryOrAddress, isNftGraphqlEnabled ? isName : true);\n  return isName ? queryResult : {\n    data: [addressResult.data],\n    loading: addressResult.loading\n  };\n}\n_s2(useCollectionSearch, \"qlAe12VtG1l0SpDRLHtVgBh/2wg=\", false, function () {\n  return [useNftGraphqlEnabled, useCollectionQuerySearch, useCollection];\n});","map":{"version":3,"names":["isAddress","useNftGraphqlEnabled","gql","blocklistedCollections","useMemo","useCollectionSearchQuery","formatCollectionQueryData","useCollection","MAX_SEARCH_RESULTS","useCollectionQuerySearch","query","skip","data","queryData","loading","variables","nftCollections","edges","filter","collectionEdge","node","nftContracts","address","includes","slice","map","queryCollection","useCollectionSearch","queryOrAddress","isNftGraphqlEnabled","isName","toLowerCase","queryResult","addressResult"],"sources":["/home/diep/freelance/interface/src/graphql/data/nft/CollectionSearch.ts"],"sourcesContent":["import { isAddress } from '@ethersproject/address'\nimport { useNftGraphqlEnabled } from 'featureFlags/flags/nftlGraphql'\nimport gql from 'graphql-tag'\nimport { GenieCollection } from 'nft/types'\nimport { blocklistedCollections } from 'nft/utils'\nimport { useMemo } from 'react'\n\nimport { NftCollection, useCollectionSearchQuery } from '../__generated__/types-and-hooks'\nimport { formatCollectionQueryData, useCollection } from './Collection'\n\nconst MAX_SEARCH_RESULTS = 6\n\ngql`\n  query CollectionSearch($query: String!) {\n    nftCollections(filter: { nameQuery: $query }) {\n      edges {\n        cursor\n        node {\n          image {\n            url\n          }\n          isVerified\n          name\n          numAssets\n          nftContracts {\n            address\n            chain\n            name\n            symbol\n            totalSupply\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\ninterface useCollectionSearchReturnProps {\n  data: GenieCollection[]\n  loading: boolean\n}\n\nfunction useCollectionQuerySearch(query: string, skip?: boolean): useCollectionSearchReturnProps {\n  const { data: queryData, loading } = useCollectionSearchQuery({\n    variables: {\n      query,\n    },\n    skip: skip || !query,\n  })\n\n  return useMemo(() => {\n    return {\n      data:\n        queryData?.nftCollections?.edges\n          ?.filter(\n            (collectionEdge) =>\n              collectionEdge.node.nftContracts?.[0]?.address &&\n              !blocklistedCollections.includes(collectionEdge.node.nftContracts?.[0]?.address)\n          )\n          .slice(0, MAX_SEARCH_RESULTS)\n          .map((collectionEdge) => {\n            const queryCollection = collectionEdge.node as NonNullable<NftCollection>\n            return formatCollectionQueryData(queryCollection)\n          }) ?? [],\n      loading,\n    }\n  }, [loading, queryData])\n}\n\nexport function useCollectionSearch(queryOrAddress: string): useCollectionSearchReturnProps {\n  const isNftGraphqlEnabled = useNftGraphqlEnabled()\n  const isName = !isAddress(queryOrAddress.toLowerCase())\n  const queryResult = useCollectionQuerySearch(queryOrAddress, isNftGraphqlEnabled ? !isName : true)\n  const addressResult = useCollection(queryOrAddress, isNftGraphqlEnabled ? isName : true)\n  return isName ? queryResult : { data: [addressResult.data], loading: addressResult.loading }\n}\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,wBAAwB;AAClD,SAASC,oBAAoB,QAAQ,gCAAgC;AACrE,OAAOC,GAAG,MAAM,aAAa;AAE7B,SAASC,sBAAsB,QAAQ,WAAW;AAClD,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAAwBC,wBAAwB,QAAQ,kCAAkC;AAC1F,SAASC,yBAAyB,EAAEC,aAAa,QAAQ,cAAc;AAEvE,MAAMC,kBAAkB,GAAG,CAAC;AAE5BN,GAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAOD,SAASO,wBAAwB,CAACC,KAAa,EAAEC,IAAc,EAAkC;EAAA;EAC/F,MAAM;IAAEC,IAAI,EAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGT,wBAAwB,CAAC;IAC5DU,SAAS,EAAE;MACTL;IACF,CAAC;IACDC,IAAI,EAAEA,IAAI,IAAI,CAACD;EACjB,CAAC,CAAC;EAEF,OAAON,OAAO,CAAC,MAAM;IAAA;IACnB,OAAO;MACLQ,IAAI,2BACFC,SAAS,aAATA,SAAS,iDAATA,SAAS,CAAEG,cAAc,qFAAzB,uBAA2BC,KAAK,2DAAhC,uBACIC,MAAM,CACLC,cAAc;QAAA;QAAA,OACb,0BAAAA,cAAc,CAACC,IAAI,CAACC,YAAY,oFAAhC,sBAAmC,CAAC,CAAC,2DAArC,uBAAuCC,OAAO,KAC9C,CAACnB,sBAAsB,CAACoB,QAAQ,2BAACJ,cAAc,CAACC,IAAI,CAACC,YAAY,qFAAhC,uBAAmC,CAAC,CAAC,2DAArC,uBAAuCC,OAAO,CAAC;MAAA,EACnF,CACAE,KAAK,CAAC,CAAC,EAAEhB,kBAAkB,CAAC,CAC5BiB,GAAG,CAAEN,cAAc,IAAK;QACvB,MAAMO,eAAe,GAAGP,cAAc,CAACC,IAAkC;QACzE,OAAOd,yBAAyB,CAACoB,eAAe,CAAC;MACnD,CAAC,CAAC,yEAAI,EAAE;MACZZ;IACF,CAAC;EACH,CAAC,EAAE,CAACA,OAAO,EAAED,SAAS,CAAC,CAAC;AAC1B;AAAC,GAzBQJ,wBAAwB;EAAA,QACMJ,wBAAwB;AAAA;AA0B/D,OAAO,SAASsB,mBAAmB,CAACC,cAAsB,EAAkC;EAAA;EAC1F,MAAMC,mBAAmB,GAAG5B,oBAAoB,EAAE;EAClD,MAAM6B,MAAM,GAAG,CAAC9B,SAAS,CAAC4B,cAAc,CAACG,WAAW,EAAE,CAAC;EACvD,MAAMC,WAAW,GAAGvB,wBAAwB,CAACmB,cAAc,EAAEC,mBAAmB,GAAG,CAACC,MAAM,GAAG,IAAI,CAAC;EAClG,MAAMG,aAAa,GAAG1B,aAAa,CAACqB,cAAc,EAAEC,mBAAmB,GAAGC,MAAM,GAAG,IAAI,CAAC;EACxF,OAAOA,MAAM,GAAGE,WAAW,GAAG;IAAEpB,IAAI,EAAE,CAACqB,aAAa,CAACrB,IAAI,CAAC;IAAEE,OAAO,EAAEmB,aAAa,CAACnB;EAAQ,CAAC;AAC9F;AAAC,IANea,mBAAmB;EAAA,QACL1B,oBAAoB,EAE5BQ,wBAAwB,EACtBF,aAAa;AAAA"},"metadata":{},"sourceType":"module"}