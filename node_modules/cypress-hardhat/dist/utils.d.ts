import { ExternallyOwnedAccount } from '@ethersproject/abstract-signer';
import { JsonRpcProvider } from '@ethersproject/providers';
import { Currency, CurrencyAmount } from '@uniswap/sdk-core';
type AddressLike = string | {
    address: string;
};
type OneOrMany<T> = T | T[];
export declare class HardhatUtils {
    /** The JSON-RPC url to connect to the hardhat network. */
    readonly url: string;
    /** The accounts configured via hardhat's {@link https://hardhat.org/hardhat-network/reference/#accounts}. */
    readonly accounts: ExternallyOwnedAccount[];
    /** The signing providers configured via hardhat's {@link https://hardhat.org/hardhat-network/reference/#accounts}. */
    readonly providers: JsonRpcProvider[];
    constructor({ url, accounts }: {
        url: string;
        accounts: ExternallyOwnedAccount[];
    });
    /** The first account configured via hardhat - @see {@link accounts}. */
    get account(): ExternallyOwnedAccount;
    /** The first signing provider configured via hardhat - @see {@link providers}. */
    get provider(): JsonRpcProvider;
    /** Gets the balance of ETH ERC-20's held by the address. */
    getBalance(address: AddressLike, currencies: Currency): Promise<CurrencyAmount<Currency>>;
    getBalance(address: AddressLike, currencies: Currency[]): Promise<CurrencyAmount<Currency>>[];
    /** Attempts to fund an account with ETH or ERC-20's. @see {@link fund}. */
    setBalance(address: AddressLike, amounts: OneOrMany<CurrencyAmount<Currency>>, whales?: string[]): Promise<void>;
    /**
     * Attempts to fund an account with ETH / ERC-20's.
     * If amount is in ETH, funds the account directly. (NB: Hardhat initially funds test accounts with 1000 ETH.)
     * If amount is an ERC-20, attempts to transfer the amount from a list of known whales.
     * @param address The address of the account to fund.
     * @param amount If in ETH, the amount to set the balance to. If an ERC-20, the amount to transfer.
     * @param whales If set, overrides the list of known whale addresses from which to transfer ERC-20's.
     */
    fund(address: AddressLike, amounts: OneOrMany<CurrencyAmount<Currency>>, whales?: string[]): Promise<void>;
    private send;
}
export {};
