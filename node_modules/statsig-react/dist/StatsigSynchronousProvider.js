"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var StatsigContext_1 = __importDefault(require("./StatsigContext"));
var Statsig_1 = __importDefault(require("./Statsig"));
/**
 * The StatsigSynchronousProvider is the top level component from which all React SDK components derive
 * It initializes the SDK synchronously so child components can use FeatureGate and DynamicConfig values
 * immediately and you can take advantage of server side rendering of react components.
 *
 * The provider accepts the same SDK initialization parameters as the statsig-js SDK.
 *
 * We recommend you place this at the entry point of your app and pass waitForInitialization = true
 * to ensure the SDK is initialized and all values are up to date prior to rendering anything.
 * @param props
 * @returns
 */
function StatsigSynchronousProvider(_a) {
    var children = _a.children, sdkKey = _a.sdkKey, user = _a.user, options = _a.options, initializeValues = _a.initializeValues, setUser = _a.setUser, shutdownOnUnmount = _a.shutdownOnUnmount;
    var _b = (0, react_1.useState)(0), userVersion = _b[0], setUserVersion = _b[1];
    var _c = (0, react_1.useState)(true), initialized = _c[0], setInitialized = _c[1];
    var firstUpdate = (0, react_1.useRef)(true);
    var userMemo = (0, react_1.useMemo)(function () {
        return user;
    }, [JSON.stringify(user)]);
    Statsig_1.default.bootstrap(sdkKey, initializeValues, userMemo, options);
    (0, react_1.useEffect)(function () {
        if (firstUpdate.current) {
            // this is the first time the effect ran
            // we dont want to modify state and trigger a rerender
            // and the SDK is already initialized/usable
            firstUpdate.current = false;
            if (typeof window !== 'undefined') {
                window.__STATSIG_SDK__ = Statsig_1.default;
                window.__STATSIG_RERENDER_OVERRIDE__ = function () {
                    setUserVersion(userVersion + 1);
                };
            }
            return;
        }
        // subsequent runs should update the user
        setInitialized(false);
        Statsig_1.default.updateUser(user).then(function () {
            setUserVersion(userVersion + 1);
            setInitialized(true);
        });
    }, [userMemo]);
    (0, react_1.useEffect)(function () {
        Statsig_1.default.setReactContextUpdater(function () { return setUserVersion(function (version) { return version + 1; }); });
        return function () {
            if (shutdownOnUnmount) {
                Statsig_1.default.shutdown();
            }
            Statsig_1.default.setReactContextUpdater(null);
        };
    }, []);
    var contextValue = (0, react_1.useMemo)(function () {
        return {
            initialized: initialized,
            statsigPromise: null,
            userVersion: userVersion,
            initStarted: Statsig_1.default.initializeCalled(),
            updateUser: setUser !== null && setUser !== void 0 ? setUser : (function () { }),
        };
    }, [initialized, userVersion, Statsig_1.default.initializeCalled(), setUser]);
    return (react_1.default.createElement(StatsigContext_1.default.Provider, { value: contextValue }, children));
}
exports.default = StatsigSynchronousProvider;
