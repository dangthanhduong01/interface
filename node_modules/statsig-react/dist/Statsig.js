"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var statsig_js_1 = require("statsig-js");
var StatsigStatic_1 = require("./StatsigStatic");
var Statsig = /** @class */ (function () {
    // Exposed for RN sdks to override this class - an instance of this class
    // is undefined
    function Statsig(sdkKey, user, options) {
        if (Statsig_1.instance != null && Statsig_1.canThrow()) {
            throw new Error('Cannot create another instance of the static Statsig class');
        }
        Statsig_1.instance = new statsig_js_1.StatsigClient(sdkKey, user, options);
    }
    Statsig_1 = Statsig;
    Statsig.initialize = function (sdkKey, user, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                try {
                    if (!Statsig_1.instance) {
                        Statsig_1.instance = new statsig_js_1.StatsigClient(sdkKey, user, options);
                        Statsig_1.instance.setSDKPackageInfo(this.sdkPackageInfo);
                        Statsig_1.instance.setAppState(this.appState);
                        Statsig_1.instance.setNativeModules(this.nativeModules);
                        Statsig_1.instance.setPlatform(this.platform);
                        Statsig_1.instance.setRNDeviceInfo(this.deviceInfo);
                        Statsig_1.instance.setExpoConstants(this.expoConstants);
                        Statsig_1.instance.setExpoDevice(this.expoDevice);
                    }
                    return [2 /*return*/, Statsig_1.instance.initializeAsync()];
                }
                catch (e) {
                    if (Statsig_1.canThrow()) {
                        throw e;
                    }
                }
                return [2 /*return*/, Promise.resolve()];
            });
        });
    };
    Statsig.bootstrap = function (sdkKey, initializeValues, user, options) {
        if (Statsig_1.instance != null) {
            Statsig_1.instance.setInitializeValues(initializeValues);
            return;
        }
        Statsig_1.instance = new statsig_js_1.StatsigClient(sdkKey, user, options);
        Statsig_1.instance.setInitializeValues(initializeValues);
    };
    Statsig.prefetchUsers = function (users) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.isInitialized()) {
                    return [2 /*return*/];
                }
                return [2 /*return*/, Statsig_1.instance.prefetchUsers(users)];
            });
        });
    };
    Statsig.setInitializeValues = function (initializeValues) {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.setInitializeValues(initializeValues);
    };
    Statsig.checkGate = function (gateName, ignoreOverrides) {
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        if (!this.isInitialized()) {
            return false;
        }
        return Statsig_1.instance.checkGate(gateName, ignoreOverrides);
    };
    Statsig.checkGateWithExposureLoggingDisabled = function (gateName, options) {
        if (!this.isInitialized()) {
            return false;
        }
        return Statsig_1.instance.checkGateWithExposureLoggingDisabled(gateName, options === null || options === void 0 ? void 0 : options.ignoreOverrides);
    };
    Statsig.manuallyLogGateExposure = function (gateName) {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.logGateExposure(gateName);
    };
    Statsig.getConfig = function (configName, ignoreOverrides) {
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        if (!this.isInitialized()) {
            return new statsig_js_1.DynamicConfig(configName, {}, '', {
                time: Date.now(),
                reason: statsig_js_1.EvaluationReason.Uninitialized,
            });
        }
        return Statsig_1.instance.getConfig(configName, ignoreOverrides);
    };
    Statsig.getConfigWithExposureLoggingDisabled = function (configName, options) {
        if (!this.isInitialized()) {
            return new statsig_js_1.DynamicConfig(configName, {}, '', {
                time: Date.now(),
                reason: statsig_js_1.EvaluationReason.Uninitialized,
            });
        }
        return Statsig_1.instance.getConfigWithExposureLoggingDisabled(configName, options === null || options === void 0 ? void 0 : options.ignoreOverrides);
    };
    Statsig.manuallyLogConfigExposure = function (configName) {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.logConfigExposure(configName);
    };
    Statsig.getExperiment = function (experimentName, keepDeviceValue, ignoreOverrides) {
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        if (!this.isInitialized()) {
            return new statsig_js_1.DynamicConfig(experimentName, {}, '', {
                time: Date.now(),
                reason: statsig_js_1.EvaluationReason.Uninitialized,
            });
        }
        return Statsig_1.instance.getExperiment(experimentName, keepDeviceValue, ignoreOverrides);
    };
    Statsig.getExperimentWithExposureLoggingDisabled = function (experimentName, options) {
        if (!this.isInitialized()) {
            return new statsig_js_1.DynamicConfig(experimentName, {}, '', {
                time: Date.now(),
                reason: statsig_js_1.EvaluationReason.Uninitialized,
            });
        }
        return Statsig_1.instance.getExperimentWithExposureLoggingDisabled(experimentName, options === null || options === void 0 ? void 0 : options.keepDeviceValue, options === null || options === void 0 ? void 0 : options.ignoreOverrides);
    };
    Statsig.manuallyLogExperimentExposure = function (experimentName, keepDeviceValue) {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.logExperimentExposure(experimentName, keepDeviceValue);
    };
    Statsig.getLayer = function (layerName, keepDeviceValue) {
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        if (!this.isInitialized()) {
            return statsig_js_1.Layer._create(layerName, {}, '', {
                time: Date.now(),
                reason: statsig_js_1.EvaluationReason.Uninitialized,
            });
        }
        return Statsig_1.instance.getLayer(layerName, keepDeviceValue);
    };
    Statsig.getLayerWithExposureLoggingDisabled = function (layerName, options) {
        if (!this.isInitialized()) {
            return statsig_js_1.Layer._create(layerName, {}, '', {
                time: Date.now(),
                reason: statsig_js_1.EvaluationReason.Uninitialized,
            });
        }
        return Statsig_1.instance.getLayerWithExposureLoggingDisabled(layerName, options === null || options === void 0 ? void 0 : options.keepDeviceValue);
    };
    Statsig.manuallyLogLayerParameterExposure = function (layerName, parameterName, keepDeviceValue) {
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.logLayerParameterExposure(layerName, parameterName, keepDeviceValue);
    };
    Statsig.logEvent = function (eventName, value, metadata) {
        if (value === void 0) { value = null; }
        if (metadata === void 0) { metadata = null; }
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.logEvent(eventName, value, metadata);
    };
    Statsig.updateUser = function (user) {
        if (!this.isInitialized()) {
            return Promise.resolve(false);
        }
        return Statsig_1.instance.updateUser(user);
    };
    Statsig.shutdown = function () {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.shutdown();
    };
    /**
     * Overrides the given gate locally with the given value
     * @param gateName - name of the gate to override
     * @param value - value to assign to the gate
     */
    Statsig.overrideGate = function (gateName, value) {
        var _a;
        if (!this.isInitialized()) {
            return;
        }
        if (((_a = Statsig_1.getAllOverrides()["gates"]) === null || _a === void 0 ? void 0 : _a[gateName]) === value) {
            return;
        }
        Statsig_1.instance.overrideGate(gateName, value);
        Statsig_1.updateContext();
    };
    /**
     * Overrides the given config locally with the given value
     * @param configName - name of the config to override
     * @param value - value to assign to the config
     */
    Statsig.overrideConfig = function (configName, value) {
        var _a;
        if (!this.isInitialized()) {
            return;
        }
        if (((_a = Statsig_1.getAllOverrides()["configs"]) === null || _a === void 0 ? void 0 : _a[configName]) === value) {
            return;
        }
        Statsig_1.instance.overrideConfig(configName, value);
        Statsig_1.updateContext();
    };
    /**
     * Overrides the given layer locally with the given value
     * @param layerName - name of the layer to override
     * @param value - value to assign to the layer
     */
    Statsig.overrideLayer = function (layerName, value) {
        var _a;
        if (!this.isInitialized()) {
            return;
        }
        if (((_a = Statsig_1.getAllOverrides()["layers"]) === null || _a === void 0 ? void 0 : _a[layerName]) === value) {
            return;
        }
        Statsig_1.instance.overrideLayer(layerName, value);
        Statsig_1.updateContext();
    };
    /**
     * @param name the gate override to remove
     */
    Statsig.removeGateOverride = function (name) {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.removeGateOverride(name);
        Statsig_1.updateContext();
    };
    /**
     * @param name the config override to remove
     */
    Statsig.removeConfigOverride = function (name) {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.removeConfigOverride(name);
        Statsig_1.updateContext();
    };
    /**
     * @param name the config override to remove
     */
    Statsig.removeLayerOverride = function (name) {
        if (!this.isInitialized()) {
            return;
        }
        Statsig_1.instance.removeLayerOverride(name);
        Statsig_1.updateContext();
    };
    /**
     * @returns The local gate and config overrides
     */
    Statsig.getAllOverrides = function () {
        if (!this.isInitialized()) {
            return {
                gates: {},
                configs: {},
                layers: {},
            };
        }
        return Statsig_1.instance.getAllOverrides();
    };
    Statsig.getEvaluationDetails = function () {
        var _a, _b;
        return ((_b = (_a = Statsig_1.instance) === null || _a === void 0 ? void 0 : _a.getEvaluationDetails()) !== null && _b !== void 0 ? _b : {
            reason: statsig_js_1.EvaluationReason.Uninitialized,
            time: 0,
        });
    };
    /**
     * @returns The Statsig stable ID used for device level experiments
     */
    Statsig.getStableID = function () {
        if (!this.isInitialized()) {
            return '';
        }
        return Statsig_1.instance.getStableID();
    };
    Statsig.initializeCalled = function () {
        return Statsig_1.instance != null && Statsig_1.instance.initializeCalled();
    };
    // All methods below are for the statsig react native SDK internal usage only!
    Statsig.setSDKPackageInfo = function (sdkPackageInfo) {
        Statsig_1.sdkPackageInfo = sdkPackageInfo;
    };
    Statsig.setReactNativeUUID = function (uuid) {
        if (uuid != null) {
            statsig_js_1.StatsigClient.setReactNativeUUID(uuid);
        }
    };
    Statsig.setAsyncStorage = function (asyncStorage) {
        if (asyncStorage != null) {
            statsig_js_1.StatsigAsyncStorage.asyncStorage = asyncStorage;
        }
    };
    Statsig.setAppState = function (appState) {
        if (appState != null) {
            Statsig_1.appState = appState;
        }
    };
    Statsig.setNativeModules = function (nativeModules) {
        if (nativeModules != null) {
            Statsig_1.nativeModules = nativeModules;
        }
    };
    Statsig.setPlatform = function (platform) {
        if (platform != null) {
            Statsig_1.platform = platform;
        }
    };
    Statsig.setRNDeviceInfo = function (deviceInfo) {
        if (deviceInfo != null) {
            Statsig_1.deviceInfo = deviceInfo;
        }
    };
    Statsig.setExpoConstants = function (expoConstants) {
        if (expoConstants != null) {
            Statsig_1.expoConstants = expoConstants;
        }
    };
    Statsig.setExpoDevice = function (expoDevice) {
        if (expoDevice != null) {
            Statsig_1.expoDevice = expoDevice;
        }
    };
    Statsig.setReactContextUpdater = function (fn) {
        Statsig_1.reactContextUpdater = fn;
    };
    Statsig.isInitialized = function () {
        if (Statsig_1.instance) {
            return true;
        }
        if (Statsig_1.canThrow()) {
            throw new Error('Call and wait for initialize() to finish first.');
        }
        return false;
    };
    Statsig.updateContext = function () {
        if (Statsig_1.reactContextUpdater != null) {
            Statsig_1.reactContextUpdater();
        }
    };
    Statsig.canThrow = function () {
        var _a;
        return (typeof process === 'undefined' ||
            typeof process.env === 'undefined' ||
            ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.REACT_APP_STATSIG_SDK_MODE) !== 'silent');
    };
    var Statsig_1;
    Statsig.reactContextUpdater = null;
    Statsig = Statsig_1 = __decorate([
        (0, StatsigStatic_1.staticImplements)()
    ], Statsig);
    return Statsig;
}());
exports.default = Statsig;
