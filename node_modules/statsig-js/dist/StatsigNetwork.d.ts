import { IHasStatsigInternal } from './StatsigClient';
import { StatsigUser } from './StatsigUser';
import Diagnostics from './utils/Diagnostics';
export declare enum StatsigEndpoint {
    Initialize = "initialize",
    Rgstr = "rgstr",
    LogEventBeacon = "log_event_beacon"
}
declare type NetworkResponse = Response & {
    data?: Record<string, unknown>;
};
export default class StatsigNetwork {
    private sdkInternal;
    private readonly retryCodes;
    private leakyBucket;
    private canUseKeepalive;
    constructor(sdkInternal: IHasStatsigInternal);
    private init;
    fetchValues(user: StatsigUser | null, sinceTime: number | null, timeout: number, resolveCallback: (json: Record<string, any>) => Promise<void>, rejectCallback: (e: Error) => void, diagnostics?: Diagnostics, prefetchUsers?: Record<string, StatsigUser>): Promise<void>;
    private postWithTimeout;
    sendLogBeacon(payload: Record<string, any>): boolean;
    postToEndpoint(endpointName: StatsigEndpoint, body: object, retries?: number, backoff?: number, useKeepalive?: boolean): Promise<NetworkResponse>;
    supportsKeepalive(): boolean;
    private getErrorData;
}
export {};
