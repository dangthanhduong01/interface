"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var DynamicConfig_1 = __importDefault(require("./DynamicConfig"));
var ErrorBoundary_1 = __importDefault(require("./ErrorBoundary"));
var Errors_1 = require("./Errors");
var Layer_1 = __importDefault(require("./Layer"));
var LogEvent_1 = __importDefault(require("./LogEvent"));
var StatsigIdentity_1 = __importDefault(require("./StatsigIdentity"));
var StatsigLogger_1 = __importDefault(require("./StatsigLogger"));
var StatsigNetwork_1 = __importDefault(require("./StatsigNetwork"));
var StatsigSDKOptions_1 = __importDefault(require("./StatsigSDKOptions"));
var StatsigStore_1 = __importStar(require("./StatsigStore"));
var Hashing_1 = require("./utils/Hashing");
var StatsigAsyncStorage_1 = __importDefault(require("./utils/StatsigAsyncStorage"));
var StatsigLocalStorage_1 = __importDefault(require("./utils/StatsigLocalStorage"));
var Diagnostics_1 = __importStar(require("./utils/Diagnostics"));
var MAX_VALUE_SIZE = 64;
var MAX_OBJ_SIZE = 2048;
var StatsigClient = /** @class */ (function () {
    function StatsigClient(sdkKey, user, options) {
        var _this = this;
        this.appState = null;
        this.currentAppState = null;
        this.initCalled = false;
        this.pendingInitPromise = null;
        this.optionalLoggingSetup = false;
        this.prefetchedUsersByCacheKey = {};
        this.logLayerParameterExposureForLayer = function (layer, parameterName, isManualExposure) {
            if (isManualExposure === void 0) { isManualExposure = false; }
            var allocatedExperiment = '';
            var exposures = layer._getUndelegatedSecondaryExposures();
            var isExplicit = layer._getExplicitParameters().includes(parameterName);
            if (isExplicit) {
                allocatedExperiment = layer._getAllocatedExperimentName();
                exposures = layer._getSecondaryExposures();
            }
            _this.logger.logLayerExposure(_this.getCurrentUser(), layer.getName(), layer.getRuleID(), exposures, allocatedExperiment, parameterName, isExplicit, layer._getEvaluationDetails(), isManualExposure);
        };
        if (typeof sdkKey !== 'string' || !sdkKey.startsWith('client-')) {
            throw new Errors_1.StatsigInvalidArgumentError('Invalid key provided.  You must use a Client SDK Key from the Statsig console to initialize the sdk');
        }
        this.errorBoundary = new ErrorBoundary_1.default(sdkKey);
        this.ready = false;
        this.sdkKey = sdkKey;
        this.options = new StatsigSDKOptions_1.default(options);
        StatsigLocalStorage_1.default.disabled = this.options.getDisableLocalStorage();
        this.initializeDiagnostics = new Diagnostics_1.default('initialize');
        this.identity = new StatsigIdentity_1.default(this.normalizeUser(user !== null && user !== void 0 ? user : null), this.options.getOverrideStableID(), StatsigClient.reactNativeUUID);
        this.network = new StatsigNetwork_1.default(this);
        this.store = new StatsigStore_1.default(this);
        this.logger = new StatsigLogger_1.default(this);
        if ((options === null || options === void 0 ? void 0 : options.initializeValues) != null) {
            this.setInitializeValues(options === null || options === void 0 ? void 0 : options.initializeValues);
        }
        this.errorBoundary.setStatsigMetadata(this.getStatsigMetadata());
    }
    StatsigClient.prototype.getErrorBoundary = function () {
        return this.errorBoundary;
    };
    StatsigClient.prototype.getNetwork = function () {
        return this.network;
    };
    StatsigClient.prototype.getStore = function () {
        return this.store;
    };
    StatsigClient.prototype.getLogger = function () {
        return this.logger;
    };
    StatsigClient.prototype.getOptions = function () {
        return this.options;
    };
    StatsigClient.prototype.getSDKKey = function () {
        if (this.sdkKey == null) {
            return '';
        }
        return this.sdkKey;
    };
    StatsigClient.prototype.getCurrentUser = function () {
        return this.identity.getUser();
    };
    StatsigClient.prototype.getCurrentUserCacheKey = function () {
        return (0, Hashing_1.getUserCacheKey)(this.getStableID(), this.getCurrentUser());
    };
    StatsigClient.prototype.getStatsigMetadata = function () {
        return this.identity.getStatsigMetadata();
    };
    StatsigClient.prototype.getSDKType = function () {
        return this.identity.getSDKType();
    };
    StatsigClient.prototype.getSDKVersion = function () {
        return this.identity.getSDKVersion();
    };
    StatsigClient.prototype.setInitializeValues = function (initializeValues) {
        var _this = this;
        this.errorBoundary.capture('setInitializeValues', function () {
            _this.store.bootstrap(_this.getStableID(), initializeValues);
            if (!_this.ready) {
                // the sdk is usable and considered initialized when configured
                // with initializeValues
                _this.ready = true;
                _this.initCalled = true;
            }
            // we wont have access to window/document/localStorage if these run on the server
            // so try to run whenever this is called
            _this.handleOptionalLogging();
            _this.logger.sendSavedRequests();
        }, function () {
            _this.ready = true;
            _this.initCalled = true;
        });
    };
    StatsigClient.prototype.initializeAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.errorBoundary.capture('initializeAsync', function () { return __awaiter(_this, void 0, void 0, function () {
                        var startTime, completionCallback, user;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    startTime = Date.now();
                                    if (this.pendingInitPromise != null) {
                                        return [2 /*return*/, this.pendingInitPromise];
                                    }
                                    if (this.ready) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    this.initializeDiagnostics.mark(Diagnostics_1.DiagnosticsKey.OVERALL, Diagnostics_1.DiagnosticsEvent.START);
                                    this.initCalled = true;
                                    if (!StatsigAsyncStorage_1.default.asyncStorage) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.identity.initAsync()];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, this.store.loadFromAsyncStorage()];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3:
                                    if (this.appState &&
                                        this.appState.addEventListener &&
                                        typeof this.appState.addEventListener === 'function') {
                                        this.currentAppState = this.appState.currentState;
                                        this.appState.addEventListener('change', this.handleAppStateChange.bind(this));
                                    }
                                    if (this.options.getLocalModeEnabled()) {
                                        return [2 /*return*/, Promise.resolve()];
                                    }
                                    completionCallback = function (success, message) {
                                        var cb = _this.options.getInitCompletionCallback();
                                        if (cb) {
                                            cb(Date.now() - startTime, success, message);
                                        }
                                    };
                                    user = this.identity.getUser();
                                    this.pendingInitPromise = this.fetchAndSaveValues(user, this.options.getPrefetchUsers(), completionCallback, this.initializeDiagnostics).finally(function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            this.pendingInitPromise = null;
                                            this.ready = true;
                                            this.logger.sendSavedRequests();
                                            this.initializeDiagnostics.mark(Diagnostics_1.DiagnosticsKey.OVERALL, Diagnostics_1.DiagnosticsEvent.END);
                                            if (!this.options.getDisableDiagnosticsLogging()) {
                                                this.logger.logDiagnostics(user, this.initializeDiagnostics);
                                            }
                                            return [2 /*return*/];
                                        });
                                    }); });
                                    this.handleOptionalLogging();
                                    return [2 /*return*/, this.pendingInitPromise];
                            }
                        });
                    }); }, function () {
                        _this.ready = true;
                        _this.initCalled = true;
                        return Promise.resolve();
                    })];
            });
        });
    };
    StatsigClient.prototype.prefetchUsers = function (users) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!users || users.length == 0) {
                    return [2 /*return*/];
                }
                return [2 /*return*/, this.fetchAndSaveValues(null, users)];
            });
        });
    };
    StatsigClient.prototype.getEvaluationDetails = function () {
        return this.store.getGlobalEvaluationDetails();
    };
    /**
     * Checks the value of a gate for the current user
     * @param {string} gateName - the name of the gate to check
     * @param {boolean} ignoreOverrides = false if this check should ignore local overrides
     * @returns {boolean} - value of a gate for the user. Gates are "off" (return false) by default
     * @throws Error if initialize() is not called first, or gateName is not a string
     */
    StatsigClient.prototype.checkGate = function (gateName, ignoreOverrides) {
        var _this = this;
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        return this.errorBoundary.capture('checkGate', function () {
            var result = _this.checkGateImpl(gateName, ignoreOverrides);
            _this.logGateExposureImpl(gateName, result);
            return result.gate.value === true;
        }, function () { return false; });
    };
    StatsigClient.prototype.checkGateWithExposureLoggingDisabled = function (gateName, ignoreOverrides) {
        var _this = this;
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        return this.errorBoundary.capture('checkGateWithExposureLoggingDisabled', function () {
            var result = _this.checkGateImpl(gateName, ignoreOverrides);
            return result.gate.value === true;
        }, function () { return false; });
    };
    StatsigClient.prototype.logGateExposure = function (gateName) {
        this.logGateExposureImpl(gateName);
    };
    /**
     * Checks the value of a config for the current user
     * @param {string} configName - the name of the config to get
     * @param {boolean} ignoreOverrides = false if this check should ignore local overrides
     * @returns {DynamicConfig} - value of a config for the user
     * @throws Error if initialize() is not called first, or configName is not a string
     */
    StatsigClient.prototype.getConfig = function (configName, ignoreOverrides) {
        var _this = this;
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        return this.errorBoundary.capture('getConfig', function () {
            var result = _this.getConfigImpl(configName, ignoreOverrides);
            _this.logConfigExposureImpl(configName, result);
            return result;
        }, function () { return _this.getEmptyConfig(configName); });
    };
    StatsigClient.prototype.getConfigWithExposureLoggingDisabled = function (configName, ignoreOverrides) {
        var _this = this;
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        return this.errorBoundary.capture('getConfig', function () {
            return _this.getConfigImpl(configName, ignoreOverrides);
        }, function () { return _this.getEmptyConfig(configName); });
    };
    StatsigClient.prototype.logConfigExposure = function (configName) {
        this.logConfigExposureImpl(configName);
    };
    /**
     * Gets the experiment for a given user
     * @param {string} experimentName - the name of the experiment to get
     * @param {boolean} keepDeviceValue = false if this should use "sticky" values persisted in local storage
     * @param {boolean} ignoreOverrides = false if this check should ignore local overrides
     * @returns {DynamicConfig} - value of the experiment for the user, represented by a Dynamic Config object
     * @throws Error if initialize() is not called first, or experimentName is not a string
     */
    StatsigClient.prototype.getExperiment = function (experimentName, keepDeviceValue, ignoreOverrides) {
        var _this = this;
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        return this.errorBoundary.capture('getExperiment', function () {
            var result = _this.getExperimentImpl(experimentName, keepDeviceValue, ignoreOverrides);
            _this.logExperimentExposureImpl(experimentName, keepDeviceValue, result);
            return result;
        }, function () { return _this.getEmptyConfig(experimentName); });
    };
    StatsigClient.prototype.getExperimentWithExposureLoggingDisabled = function (experimentName, keepDeviceValue, ignoreOverrides) {
        var _this = this;
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        if (ignoreOverrides === void 0) { ignoreOverrides = false; }
        return this.errorBoundary.capture('getExperimentWithExposureLoggingDisabled', function () {
            return _this.getExperimentImpl(experimentName, keepDeviceValue, ignoreOverrides);
        }, function () { return _this.getEmptyConfig(experimentName); });
    };
    StatsigClient.prototype.logExperimentExposure = function (experimentName, keepDeviceValue) {
        this.logExperimentExposureImpl(experimentName, keepDeviceValue);
    };
    StatsigClient.prototype.getLayer = function (layerName, keepDeviceValue) {
        var _this = this;
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        return this.errorBoundary.capture('getLayer', function () {
            return _this.getLayerImpl(_this.logLayerParameterExposureForLayer, layerName, keepDeviceValue);
        }, function () {
            return Layer_1.default._create(layerName, {}, '', _this.getEvalutionDetailsForError());
        });
    };
    StatsigClient.prototype.getLayerWithExposureLoggingDisabled = function (layerName, keepDeviceValue) {
        var _this = this;
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        return this.errorBoundary.capture('getLayerWithExposureLoggingDisabled', function () {
            return _this.getLayerImpl(null, layerName, keepDeviceValue);
        }, function () {
            return Layer_1.default._create(layerName, {}, '', _this.getEvalutionDetailsForError());
        });
    };
    StatsigClient.prototype.logLayerParameterExposure = function (layerName, parameterName, keepDeviceValue) {
        if (keepDeviceValue === void 0) { keepDeviceValue = false; }
        var layer = this.getLayerImpl(null, layerName, keepDeviceValue);
        this.logLayerParameterExposureForLayer(layer, parameterName, true);
    };
    StatsigClient.prototype.logEvent = function (eventName, value, metadata) {
        var _this = this;
        if (value === void 0) { value = null; }
        if (metadata === void 0) { metadata = null; }
        this.errorBoundary.swallow('logEvent', function () {
            if (!_this.logger || !_this.sdkKey) {
                throw new Errors_1.StatsigUninitializedError('Must initialize() before logging events.');
            }
            if (typeof eventName !== 'string' || eventName.length === 0) {
                console.error('Event not logged. No valid eventName passed.');
                return;
            }
            if (_this.shouldTrimParam(eventName, MAX_VALUE_SIZE)) {
                console.warn('eventName is too long, trimming to ' +
                    MAX_VALUE_SIZE +
                    ' characters.');
                eventName = eventName.substring(0, MAX_VALUE_SIZE);
            }
            if (typeof value === 'string' &&
                _this.shouldTrimParam(value, MAX_VALUE_SIZE)) {
                console.warn('value is too long, trimming to ' + MAX_VALUE_SIZE + '.');
                value = value.substring(0, MAX_VALUE_SIZE);
            }
            if (_this.shouldTrimParam(metadata, MAX_OBJ_SIZE)) {
                console.warn('metadata is too big. Dropping the metadata.');
                metadata = { error: 'not logged due to size too large' };
            }
            var event = new LogEvent_1.default(eventName);
            event.setValue(value);
            event.setMetadata(metadata);
            event.setUser(_this.getCurrentUser());
            _this.logger.log(event);
        });
    };
    StatsigClient.prototype.updateUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.errorBoundary.capture('updateUser', function () { return __awaiter(_this, void 0, void 0, function () {
                        var isUserPrefetched, foundCacheValue, currentUser;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!this.initializeCalled()) {
                                        throw new Errors_1.StatsigUninitializedError('Call initialize() first.');
                                    }
                                    this.identity.updateUser(this.normalizeUser(user));
                                    isUserPrefetched = Boolean(this.prefetchedUsersByCacheKey[this.getCurrentUserCacheKey()]);
                                    foundCacheValue = this.store.updateUser(isUserPrefetched);
                                    this.logger.resetDedupeKeys();
                                    if (foundCacheValue && isUserPrefetched) {
                                        return [2 /*return*/, Promise.resolve(true)];
                                    }
                                    if (!(this.pendingInitPromise != null)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.pendingInitPromise];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2:
                                    if (this.options.getLocalModeEnabled()) {
                                        return [2 /*return*/, Promise.resolve(true)];
                                    }
                                    currentUser = this.identity.getUser();
                                    this.pendingInitPromise = this.fetchAndSaveValues(currentUser).finally(function () {
                                        _this.pendingInitPromise = null;
                                    });
                                    return [2 /*return*/, this.pendingInitPromise
                                            .then(function () {
                                            return Promise.resolve(true);
                                        })
                                            .catch(function () {
                                            return Promise.resolve(false);
                                        })];
                            }
                        });
                    }); }, function () { return Promise.resolve(false); })];
            });
        });
    };
    /**
     * Informs the statsig SDK that the client is closing or shutting down
     * so the SDK can clean up internal state
     */
    StatsigClient.prototype.shutdown = function () {
        var _this = this;
        this.errorBoundary.swallow('shutdown', function () {
            _this.logger.shutdown();
            if (_this.appState &&
                _this.appState.removeEventListener &&
                typeof _this.appState.removeEventListener === 'function') {
                _this.appState.removeEventListener('change', _this.handleAppStateChange.bind(_this));
            }
            StatsigLocalStorage_1.default.cleanup();
        });
    };
    /**
     * Stores a local gate override
     * @param gateName the gate to override
     * @param value the value to override the gate to
     */
    StatsigClient.prototype.overrideGate = function (gateName, value) {
        var _this = this;
        this.errorBoundary.swallow('overrideGate', function () {
            _this.ensureStoreLoaded();
            _this.store.overrideGate(gateName, value);
        });
    };
    /**
     * Stores a local config override
     * @param configName the config to override
     * @param value the json value to override the config to
     */
    StatsigClient.prototype.overrideConfig = function (configName, value) {
        var _this = this;
        this.errorBoundary.swallow('overrideConfig', function () {
            _this.ensureStoreLoaded();
            _this.store.overrideConfig(configName, value);
        });
    };
    /**
     * Stores a local layer override
     * @param layerName the layer to override
     * @param value the json value to override the config to
     */
    StatsigClient.prototype.overrideLayer = function (layerName, value) {
        var _this = this;
        this.errorBoundary.swallow('overrideLayer', function () {
            _this.ensureStoreLoaded();
            _this.store.overrideLayer(layerName, value);
        });
    };
    /**
     * Removes the given gate override
     * @param gateName
     */
    StatsigClient.prototype.removeGateOverride = function (gateName) {
        var _this = this;
        this.errorBoundary.swallow('removeGateOverride', function () {
            _this.ensureStoreLoaded();
            _this.store.removeGateOverride(gateName);
        });
    };
    /**
     * Removes the given config override
     * @param configName
     */
    StatsigClient.prototype.removeConfigOverride = function (configName) {
        var _this = this;
        this.errorBoundary.swallow('removeConfigOverride', function () {
            _this.ensureStoreLoaded();
            _this.store.removeConfigOverride(configName);
        });
    };
    /**
     * Removes the given layer override
     * @param layerName
     */
    StatsigClient.prototype.removeLayerOverride = function (layerName) {
        var _this = this;
        this.errorBoundary.swallow('removeLayerOverride', function () {
            _this.ensureStoreLoaded();
            _this.store.removeLayerOverride(layerName);
        });
    };
    /**
     * @deprecated - use removeGateOverride or removeConfig override
     * Removes the given gate override
     * @param gateName
     */
    StatsigClient.prototype.removeOverride = function (gateName) {
        var _this = this;
        this.errorBoundary.swallow('removeOverride', function () {
            _this.ensureStoreLoaded();
            _this.store.removeGateOverride(gateName);
        });
    };
    /**
     * @deprecated - use getAllOverrides to get gate and config overrides
     * @returns Gate overrides
     */
    StatsigClient.prototype.getOverrides = function () {
        var _this = this;
        return this.errorBoundary.capture('getOverrides', function () {
            _this.ensureStoreLoaded();
            return _this.store.getAllOverrides().gates;
        }, function () { return ({}); });
    };
    /**
     * @returns The local gate and config overrides
     */
    StatsigClient.prototype.getAllOverrides = function () {
        var _this = this;
        return this.errorBoundary.capture('getAllOverrides', function () {
            _this.ensureStoreLoaded();
            return _this.store.getAllOverrides();
        }, function () { return ({ gates: {}, configs: {}, layers: {} }); });
    };
    /**
     * @returns The Statsig stable ID used for device level experiments
     */
    StatsigClient.prototype.getStableID = function () {
        var _this = this;
        return this.errorBoundary.capture('getStableID', function () { return _this.identity.getStatsigMetadata().stableID; }, function () { return ''; });
    };
    StatsigClient.prototype.initializeCalled = function () {
        return this.initCalled;
    };
    // All methods below are for the statsig react native SDK internal usage only!
    StatsigClient.prototype.setSDKPackageInfo = function (sdkPackageInfo) {
        if (sdkPackageInfo != null) {
            this.identity.setSDKPackageInfo(sdkPackageInfo);
            this.errorBoundary.setStatsigMetadata(this.getStatsigMetadata());
        }
    };
    StatsigClient.setAsyncStorage = function (asyncStorage) {
        if (asyncStorage != null) {
            StatsigAsyncStorage_1.default.asyncStorage = asyncStorage;
        }
    };
    StatsigClient.setReactNativeUUID = function (uuid) {
        if (uuid != null) {
            StatsigClient.reactNativeUUID = uuid;
        }
    };
    StatsigClient.prototype.setAppState = function (appState) {
        if (appState != null) {
            this.appState = appState;
        }
    };
    StatsigClient.prototype.setNativeModules = function (nativeModules) {
        if (nativeModules != null) {
            this.identity.setNativeModules(nativeModules);
        }
    };
    StatsigClient.prototype.setPlatform = function (platform) {
        if (platform != null) {
            this.identity.setPlatform(platform);
        }
    };
    StatsigClient.prototype.setRNDeviceInfo = function (deviceInfo) {
        if (deviceInfo != null) {
            this.identity.setRNDeviceInfo(deviceInfo);
        }
    };
    StatsigClient.prototype.setExpoConstants = function (expoConstants) {
        if (expoConstants != null) {
            this.identity.setExpoConstants(expoConstants);
        }
    };
    StatsigClient.prototype.setExpoDevice = function (expoDevice) {
        if (expoDevice != null) {
            this.identity.setExpoDevice(expoDevice);
        }
    };
    StatsigClient.prototype.handleOptionalLogging = function () {
        var _this = this;
        if (typeof window === 'undefined' || !window) {
            return;
        }
        if (this.optionalLoggingSetup) {
            return;
        }
        if (!window.addEventListener) {
            return;
        }
        var user = this.identity.getUser();
        if (!this.options.getDisableErrorLogging()) {
            window.addEventListener('error', function (e) {
                var _a;
                var errorObj = e.error;
                if (errorObj != null && typeof errorObj === 'object') {
                    try {
                        errorObj = JSON.stringify(errorObj);
                    }
                    catch (e) { }
                }
                _this.logger.logAppError(user, (_a = e.message) !== null && _a !== void 0 ? _a : '', {
                    filename: e.filename,
                    lineno: e.lineno,
                    colno: e.colno,
                    error_obj: errorObj,
                });
            });
        }
        if (!this.options.getDisableAutoMetricsLogging()) {
            if (typeof document === 'undefined' ||
                !document ||
                typeof setTimeout === 'undefined' ||
                !setTimeout) {
                return;
            }
            var work_1 = function () {
                setTimeout(function () {
                    _this.logger.logAppMetrics(user);
                }, 1000);
            };
            if (document.readyState === 'complete') {
                work_1();
            }
            else {
                window.addEventListener('load', function () { return work_1(); });
            }
        }
        this.optionalLoggingSetup = true;
    };
    StatsigClient.prototype.handleAppStateChange = function (nextAppState) {
        var _a;
        if (this.currentAppState === 'active' &&
            nextAppState.match(/inactive|background/)) {
            this.logger.flush(true);
        }
        else if (((_a = this.currentAppState) === null || _a === void 0 ? void 0 : _a.match(/inactive|background/)) &&
            nextAppState === 'active') {
            this.logger.sendSavedRequests();
        }
        this.currentAppState = nextAppState;
    };
    StatsigClient.prototype.shouldTrimParam = function (entity, size) {
        if (entity == null)
            return false;
        if (typeof entity === 'string')
            return entity.length > size;
        if (typeof entity === 'object') {
            return JSON.stringify(entity).length > size;
        }
        if (typeof entity === 'number')
            return entity.toString().length > size;
        return false;
    };
    StatsigClient.prototype.normalizeUser = function (user) {
        var userCopy = {};
        try {
            userCopy = JSON.parse(JSON.stringify(user));
        }
        catch (error) {
            throw new Errors_1.StatsigInvalidArgumentError('User object must be convertable to JSON string.');
        }
        userCopy = this.trimUserObjIfNeeded(userCopy);
        if (this.options.getEnvironment() != null) {
            // @ts-ignore
            userCopy.statsigEnvironment = this.options.getEnvironment();
        }
        return userCopy;
    };
    StatsigClient.prototype.trimUserObjIfNeeded = function (user) {
        var _a, _b;
        if (user == null) {
            return {};
        }
        if (this.shouldTrimParam((_a = user.userID) !== null && _a !== void 0 ? _a : null, MAX_VALUE_SIZE)) {
            console.warn('User ID is too large, trimming to ' + MAX_VALUE_SIZE + 'characters');
            user.userID = (_b = user.userID) === null || _b === void 0 ? void 0 : _b.toString().substring(0, MAX_VALUE_SIZE);
        }
        if (this.shouldTrimParam(user, MAX_OBJ_SIZE)) {
            user.custom = {};
            if (this.shouldTrimParam(user, MAX_OBJ_SIZE)) {
                console.warn('User object is too large, only keeping the user ID.');
                user = { userID: user.userID };
            }
            else {
                console.warn('User object is too large, dropping the custom property.');
            }
        }
        return user;
    };
    StatsigClient.prototype.ensureStoreLoaded = function () {
        if (!this.store.isLoaded()) {
            throw new Errors_1.StatsigUninitializedError('Call and wait for initialize() to finish first.');
        }
    };
    StatsigClient.prototype.getEvalutionDetailsForError = function () {
        return {
            time: Date.now(),
            reason: StatsigStore_1.EvaluationReason.Error,
        };
    };
    StatsigClient.prototype.fetchAndSaveValues = function (user, prefetchUsers, completionCallback, diagnostics) {
        if (prefetchUsers === void 0) { prefetchUsers = []; }
        if (completionCallback === void 0) { completionCallback = null; }
        return __awaiter(this, void 0, void 0, function () {
            var keyedPrefetchUsers, sinceTime;
            var _this = this;
            return __generator(this, function (_a) {
                if (prefetchUsers.length > 5) {
                    console.warn('Cannot prefetch more than 5 users.');
                }
                keyedPrefetchUsers = prefetchUsers.slice(0, 5).reduce(function (acc, curr) {
                    acc[(0, Hashing_1.getUserCacheKey)(_this.getStableID(), curr)] = curr;
                    return acc;
                }, {});
                sinceTime = null;
                if (prefetchUsers.length === 0) {
                    sinceTime = this.store.getLastUpdateTime(user);
                }
                return [2 /*return*/, this.network
                        .fetchValues(user, sinceTime, this.options.getInitTimeoutMs(), function (json) { return __awaiter(_this, void 0, void 0, function () {
                        var _this = this;
                        return __generator(this, function (_a) {
                            return [2 /*return*/, this.errorBoundary.swallow('fetchAndSaveValues', function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                diagnostics === null || diagnostics === void 0 ? void 0 : diagnostics.mark(Diagnostics_1.DiagnosticsKey.INITIALIZE, Diagnostics_1.DiagnosticsEvent.START, 'process');
                                                if (!(json === null || json === void 0 ? void 0 : json.has_updates)) return [3 /*break*/, 2];
                                                return [4 /*yield*/, this.store.save(user, json)];
                                            case 1:
                                                _a.sent();
                                                _a.label = 2;
                                            case 2:
                                                this.prefetchedUsersByCacheKey = __assign(__assign({}, this.prefetchedUsersByCacheKey), keyedPrefetchUsers);
                                                diagnostics === null || diagnostics === void 0 ? void 0 : diagnostics.mark(Diagnostics_1.DiagnosticsKey.INITIALIZE, Diagnostics_1.DiagnosticsEvent.END, 'process');
                                                return [2 /*return*/];
                                        }
                                    });
                                }); })];
                        });
                    }); }, function (e) { }, prefetchUsers.length === 0 ? diagnostics : undefined, prefetchUsers.length > 0 ? keyedPrefetchUsers : undefined)
                        .then(function () {
                        completionCallback === null || completionCallback === void 0 ? void 0 : completionCallback(true, null);
                    })
                        .catch(function (e) {
                        completionCallback === null || completionCallback === void 0 ? void 0 : completionCallback(false, e.message);
                    })];
            });
        });
    };
    StatsigClient.prototype.checkGateImpl = function (gateName, ignoreOverrides) {
        this.ensureStoreLoaded();
        if (typeof gateName !== 'string' || gateName.length === 0) {
            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the gateName.');
        }
        return this.store.checkGate(gateName, ignoreOverrides);
    };
    StatsigClient.prototype.logGateExposureImpl = function (gateName, fetchResult) {
        var isManualExposure = !fetchResult;
        var result = fetchResult !== null && fetchResult !== void 0 ? fetchResult : this.checkGateImpl(gateName, false);
        var gate = result.gate;
        this.logger.logGateExposure(this.getCurrentUser(), gateName, gate.value, gate.rule_id, gate.secondary_exposures, result.evaluationDetails, isManualExposure);
    };
    StatsigClient.prototype.getConfigImpl = function (configName, ignoreOverrides) {
        this.ensureStoreLoaded();
        if (typeof configName !== 'string' || configName.length === 0) {
            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the configName.');
        }
        return this.store.getConfig(configName, ignoreOverrides);
    };
    StatsigClient.prototype.logConfigExposureImpl = function (configName, config) {
        var isManualExposure = !config;
        var localConfig = config !== null && config !== void 0 ? config : this.getConfigImpl(configName, false);
        this.logger.logConfigExposure(this.getCurrentUser(), configName, localConfig.getRuleID(), localConfig._getSecondaryExposures(), localConfig.getEvaluationDetails(), isManualExposure);
    };
    StatsigClient.prototype.getExperimentImpl = function (experimentName, keepDeviceValue, ignoreOverrides) {
        this.ensureStoreLoaded();
        if (typeof experimentName !== 'string' || experimentName.length === 0) {
            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the experimentName.');
        }
        return this.store.getExperiment(experimentName, keepDeviceValue, ignoreOverrides);
    };
    StatsigClient.prototype.logExperimentExposureImpl = function (experimentName, keepDeviceValue, config) {
        var isManualExposure = !config;
        var localConfig = config !== null && config !== void 0 ? config : this.getExperimentImpl(experimentName, keepDeviceValue, false);
        this.logger.logConfigExposure(this.getCurrentUser(), experimentName, localConfig.getRuleID(), localConfig._getSecondaryExposures(), localConfig.getEvaluationDetails(), isManualExposure);
    };
    StatsigClient.prototype.getLayerImpl = function (logParameterFunction, layerName, keepDeviceValue) {
        this.ensureStoreLoaded();
        if (typeof layerName !== 'string' || layerName.length === 0) {
            throw new Errors_1.StatsigInvalidArgumentError('Must pass a valid string as the layerName.');
        }
        return this.store.getLayer(logParameterFunction, layerName, keepDeviceValue);
    };
    StatsigClient.prototype.getEmptyConfig = function (configName) {
        return new DynamicConfig_1.default(configName, {}, '', this.getEvalutionDetailsForError());
    };
    return StatsigClient;
}());
exports.default = StatsigClient;
