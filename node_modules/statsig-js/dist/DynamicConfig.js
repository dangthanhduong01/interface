"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var DynamicConfig = /** @class */ (function () {
    function DynamicConfig(configName, configValue, ruleID, evaluationDetails, secondaryExposures, allocatedExperimentName) {
        if (secondaryExposures === void 0) { secondaryExposures = []; }
        if (allocatedExperimentName === void 0) { allocatedExperimentName = ''; }
        this.name = configName;
        this.value = JSON.parse(JSON.stringify(configValue !== null && configValue !== void 0 ? configValue : {}));
        this.ruleID = ruleID !== null && ruleID !== void 0 ? ruleID : '';
        this.secondaryExposures = secondaryExposures;
        this.allocatedExperimentName = allocatedExperimentName;
        this.evaluationDetails = evaluationDetails;
    }
    DynamicConfig.prototype.get = function (key, defaultValue, typeGuard) {
        var val = this.getValue(key, defaultValue);
        if (val == null) {
            return defaultValue;
        }
        if (typeGuard) {
            return typeGuard(val) ? val : defaultValue;
        }
        if (defaultValue == null) {
            return val;
        }
        if (typeof val === typeof defaultValue &&
            Array.isArray(defaultValue) === Array.isArray(val)) {
            return val;
        }
        return defaultValue;
    };
    DynamicConfig.prototype.getValue = function (key, defaultValue) {
        if (key == null) {
            return this.value;
        }
        if (defaultValue == null) {
            defaultValue = null;
        }
        if (this.value[key] == null) {
            return defaultValue;
        }
        return this.value[key];
    };
    DynamicConfig.prototype.getRuleID = function () {
        return this.ruleID;
    };
    DynamicConfig.prototype.getName = function () {
        return this.name;
    };
    DynamicConfig.prototype.getEvaluationDetails = function () {
        return this.evaluationDetails;
    };
    DynamicConfig.prototype._getSecondaryExposures = function () {
        return this.secondaryExposures;
    };
    DynamicConfig.prototype._getAllocatedExperimentName = function () {
        return this.allocatedExperimentName;
    };
    return DynamicConfig;
}());
exports.default = DynamicConfig;
