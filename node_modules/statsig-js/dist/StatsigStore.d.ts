import DynamicConfig from './DynamicConfig';
import Layer, { LogParameterFunction } from './Layer';
import { IHasStatsigInternal, StatsigOverrides } from './StatsigClient';
import { StatsigUser } from './StatsigUser';
export declare enum EvaluationReason {
    Network = "Network",
    Bootstrap = "Bootstrap",
    InvalidBootstrap = "InvalidBootstrap",
    Cache = "Cache",
    Prefetch = "Prefetch",
    Sticky = "Sticky",
    LocalOverride = "LocalOverride",
    Unrecognized = "Unrecognized",
    Uninitialized = "Uninitialized",
    Error = "Error"
}
export declare type EvaluationDetails = {
    time: number;
    reason: EvaluationReason;
};
declare type APIFeatureGate = {
    name: string;
    value: boolean;
    rule_id: string;
    secondary_exposures: [];
};
export declare type StoreGateFetchResult = {
    gate: APIFeatureGate;
    evaluationDetails: EvaluationDetails;
};
export default class StatsigStore {
    private sdkInternal;
    private overrides;
    private loaded;
    private values;
    private userValues;
    private stickyDeviceExperiments;
    private userCacheKey;
    private reason;
    constructor(sdkInternal: IHasStatsigInternal);
    updateUser(isUserPrefetched: boolean): boolean;
    loadFromAsyncStorage(): Promise<void>;
    bootstrap(stableID: string, initializeValues: Record<string, any>): void;
    private loadFromLocalStorage;
    isLoaded(): boolean;
    getLastUpdateTime(user: StatsigUser | null): number | null;
    private parseCachedValues;
    private setUserValueFromCache;
    private removeFromStorage;
    private loadOverrides;
    save(user: StatsigUser | null, jsonConfigs: Record<string, any>): Promise<void>;
    checkGate(gateName: string, ignoreOverrides?: boolean): StoreGateFetchResult;
    getConfig(configName: string, ignoreOverrides?: boolean): DynamicConfig;
    getExperiment(expName: string, keepDeviceValue?: boolean, ignoreOverrides?: boolean): DynamicConfig;
    getLayer(logParameterFunction: LogParameterFunction | null, layerName: string, keepDeviceValue: boolean): Layer;
    overrideConfig(configName: string, value: Record<string, any>): void;
    overrideLayer(layerName: string, value: Record<string, any>): void;
    overrideGate(gateName: string, value: boolean): void;
    removeGateOverride(gateName?: string): void;
    removeConfigOverride(configName?: string): void;
    removeLayerOverride(layerName?: string): void;
    getAllOverrides(): StatsigOverrides;
    private saveOverrides;
    private getLatestValue;
    private getPossiblyStickyValue;
    private createDynamicConfig;
    private getStickyValue;
    private attemptToSaveStickyValue;
    private removeStickyValue;
    private saveStickyValuesToStorage;
    getGlobalEvaluationDetails(): EvaluationDetails;
    private getEvaluationDetails;
    private resetUserValues;
    private convertAPIDataToCacheValues;
    private setItemToStorage;
}
export {};
