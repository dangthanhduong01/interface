import LogEvent from './LogEvent';
import { IHasStatsigInternal } from './StatsigClient';
import { EvaluationDetails } from './StatsigStore';
import { StatsigUser } from './StatsigUser';
import Diagnostics from './utils/Diagnostics';
export default class StatsigLogger {
    private sdkInternal;
    private queue;
    private flushInterval;
    private loggedErrors;
    private failedLogEvents;
    private exposureDedupeKeys;
    private failedLogEventCount;
    constructor(sdkInternal: IHasStatsigInternal);
    private init;
    log(event: LogEvent): void;
    resetDedupeKeys(): void;
    private shouldLogExposure;
    logGateExposure(user: StatsigUser | null, gateName: string, gateValue: boolean, ruleID: string, secondaryExposures: Record<string, string>[], details: EvaluationDetails, isManualExposure: boolean): void;
    logConfigExposure(user: StatsigUser | null, configName: string, ruleID: string, secondaryExposures: Record<string, string>[], details: EvaluationDetails, isManualExposure: boolean): void;
    logLayerExposure(user: StatsigUser | null, configName: string, ruleID: string, secondaryExposures: Record<string, string>[], allocatedExperiment: string, parameterName: string, isExplicitParameter: boolean, details: EvaluationDetails, isManualExposure: boolean): void;
    logAppError(user: StatsigUser | null, message: string, metadata: object): void;
    logDiagnostics(user: StatsigUser | null, diagnostics: Diagnostics): void;
    logAppMetrics(user: StatsigUser | null): void;
    shutdown(): void;
    flush(isClosing?: boolean): void;
    private saveFailedRequests;
    sendSavedRequests(): Promise<void>;
    private addFailedRequest;
    private clearLocalStorageRequests;
    private appendFailureLog;
}
