"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var BootstrapValidator = /** @class */ (function () {
    function BootstrapValidator() {
    }
    BootstrapValidator.isValid = function (user, values) {
        try {
            var evaluatedKeys = values['evaluated_keys'];
            if (!evaluatedKeys || typeof evaluatedKeys !== 'object') {
                return true;
            }
            var keys = this.copyObject(evaluatedKeys !== null && evaluatedKeys !== void 0 ? evaluatedKeys : {});
            var customIDs = this.copyObject(__assign({}, user === null || user === void 0 ? void 0 : user.customIDs));
            for (var _i = 0, _a = Object.entries(keys); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                switch (key) {
                    case 'userID':
                        if (value !== (user === null || user === void 0 ? void 0 : user.userID)) {
                            return false;
                        }
                        break;
                    case 'customIDs':
                        if (typeof value !== 'object' || typeof customIDs !== 'object') {
                            return false;
                        }
                        if ((value === null || value === void 0 ? void 0 : value['stableID']) || (customIDs === null || customIDs === void 0 ? void 0 : customIDs['stableID'])) {
                            var a = 1;
                        }
                        // StableID may be present, but should not be compared
                        value === null || value === void 0 ? true : delete value['stableID'];
                        customIDs === null || customIDs === void 0 ? true : delete customIDs['stableID'];
                        var actualKeys = Object.keys(value);
                        var expectedKeys = Object.keys(customIDs);
                        if (actualKeys.length !== expectedKeys.length) {
                            return false;
                        }
                        for (var _c = 0, _d = Object.entries(value); _c < _d.length; _c++) {
                            var _e = _d[_c], customID = _e[0], customIDValue = _e[1];
                            if (customIDs[customID] !== customIDValue) {
                                return false;
                            }
                        }
                        break;
                }
            }
        }
        catch (error) {
            // This is best-effort. If we fail, return true.
        }
        return true;
    };
    BootstrapValidator.copyObject = function (obj) {
        return JSON.parse(JSON.stringify(obj));
    };
    return BootstrapValidator;
}());
exports.default = BootstrapValidator;
